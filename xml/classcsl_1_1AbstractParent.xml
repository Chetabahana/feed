<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1AbstractParent" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>csl::AbstractParent</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; AbstractParent &gt;</basecompoundref>
    <derivedcompoundref refid="classcsl_1_1LiteralParent" prot="public" virt="non-virtual">csl::LiteralParent</derivedcompoundref>
    <derivedcompoundref refid="classcsl_1_1TensorParent" prot="public" virt="non-virtual">csl::TensorParent</derivedcompoundref>
    <includes refid="parent_8h" local="no">parent.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classcsl_1_1AbstractParent_1a2ad6b4cd58d9b051a4d62f343bf48c2e" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string csl::AbstractParent::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <qualifiedname>csl::AbstractParent::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Name of the parent (will be given to the elements when created). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="84" column="17" bodyfile="src/csl/parent.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1AbstractParent_1a98c857ebf734c15e7afd0d8a13988ac9" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string csl::AbstractParent::latexName</definition>
        <argsstring></argsstring>
        <name>latexName</name>
        <qualifiedname>csl::AbstractParent::latexName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Latex name of the parent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="88" column="17" bodyfile="src/csl/parent.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1AbstractParent_1a177e5244cc4d4b6c1e0600a4f77b523f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool csl::AbstractParent::commutable</definition>
        <argsstring></argsstring>
        <name>commutable</name>
        <qualifiedname>csl::AbstractParent::commutable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Commutability property of the parent (will be given to the elements when created). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="93" column="10" bodyfile="src/csl/parent.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1AbstractParent_1ab058ceee466fd0997c060e83fc0a4e96" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacecsl_1ac54d9e79dc6697a8eacc07c754b11c0e" kindref="member">csl::ComplexProperty</ref></type>
        <definition>csl::ComplexProperty csl::AbstractParent::complexProp</definition>
        <argsstring></argsstring>
        <name>complexProp</name>
        <qualifiedname>csl::AbstractParent::complexProp</qualifiedname>
        <initializer>= <ref refid="namespacecsl_1ac54d9e79dc6697a8eacc07c754b11c0ea7f80fcc452c2f1ed2bb51b39d0864df1" kindref="member">csl::ComplexProperty::Real</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="95" column="26" bodyfile="src/csl/parent.h" bodystart="95" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a3a8495f4cc8281410f8aa512c64116cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::AbstractParent::AbstractParent</definition>
        <argsstring>()</argsstring>
        <name>AbstractParent</name>
        <qualifiedname>csl::AbstractParent::AbstractParent</qualifiedname>
        <briefdescription>
<para>Default constructor, parent with no name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="100" column="5" bodyfile="src/csl/parent.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a961d277c9a277163931cb5b45906c83f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::AbstractParent::AbstractParent</definition>
        <argsstring>(const std::string &amp;t_name)</argsstring>
        <name>AbstractParent</name>
        <qualifiedname>csl::AbstractParent::AbstractParent</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Intializes the name of the parent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="105" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ad88d1dd79f22b67744640124252dc093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::AbstractParent::AbstractParent</definition>
        <argsstring>(const AbstractParent &amp;abstract)=default</argsstring>
        <name>AbstractParent</name>
        <qualifiedname>csl::AbstractParent::AbstractParent</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1AbstractParent" kindref="compound">AbstractParent</ref> &amp;</type>
          <declname>abstract</declname>
        </param>
        <briefdescription>
<para>Copy constructor, c++ default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="109" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a6d13d559a8d68562b5827073b31b3c1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual csl::AbstractParent::~AbstractParent</definition>
        <argsstring>()</argsstring>
        <name>~AbstractParent</name>
        <qualifiedname>csl::AbstractParent::~AbstractParent</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="113" column="13" bodyfile="src/csl/parent.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a831ac782bdbba8d40838c6aeffaa53f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref></type>
        <definition>Parent csl::AbstractParent::self</definition>
        <argsstring>()</argsstring>
        <name>self</name>
        <qualifiedname>csl::AbstractParent::self</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="115" column="12" bodyfile="src/csl/parent.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a4e78f62f3624e0e6070f1da4ddd32943" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool csl::AbstractParent::isAnAbbreviation</definition>
        <argsstring>() const</argsstring>
        <name>isAnAbbreviation</name>
        <qualifiedname>csl::AbstractParent::isAnAbbreviation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="117" column="18" bodyfile="src/csl/parent.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ab22f321502a8aa481865be3e58bb241d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string const &amp;</type>
        <definition>std::string const  &amp; csl::AbstractParent::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <qualifiedname>csl::AbstractParent::getName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="124" column="23" bodyfile="src/csl/parent.cpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1acacd759bca7fa6e750080a68ea970caa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string const &amp;</type>
        <definition>std::string const  &amp; csl::AbstractParent::getLatexName</definition>
        <argsstring>() const</argsstring>
        <name>getLatexName</name>
        <qualifiedname>csl::AbstractParent::getLatexName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="126" column="23" bodyfile="src/csl/parent.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a9d9f642ad348b33efb70b9f4cf839c1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string const &amp;</type>
        <definition>std::string const  &amp; csl::AbstractParent::getBaseName</definition>
        <argsstring>() const</argsstring>
        <name>getBaseName</name>
        <qualifiedname>csl::AbstractParent::getBaseName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="128" column="31" bodyfile="src/csl/parent.cpp" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1af8ae5696856c551204addb95271333bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::getCommutable</definition>
        <argsstring>() const</argsstring>
        <name>getCommutable</name>
        <qualifiedname>csl::AbstractParent::getCommutable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>commutable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="132" column="10" bodyfile="src/csl/parent.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ad0029cab35d92a9542c5fb21b6672212" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecsl_1ac54d9e79dc6697a8eacc07c754b11c0e" kindref="member">csl::ComplexProperty</ref></type>
        <definition>csl::ComplexProperty csl::AbstractParent::getComplexProp</definition>
        <argsstring>() const</argsstring>
        <name>getComplexProp</name>
        <qualifiedname>csl::AbstractParent::getComplexProp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="134" column="26" bodyfile="src/csl/parent.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a13e6f74e590cbf05dcafb4d9c3df8b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setName</definition>
        <argsstring>(std::string t_name)</argsstring>
        <name>setName</name>
        <qualifiedname>csl::AbstractParent::setName</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1a464a1eee0b4c31938112fa12e1d99fc7">setName</reimplementedby>
        <param>
          <type>std::string</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name of the parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="138" column="18" bodyfile="src/csl/parent.cpp" bodystart="95" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1af9a8cfc57a0bdf8178489c198755565b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setLatexName</definition>
        <argsstring>(const std::string &amp;t_name)</argsstring>
        <name>setLatexName</name>
        <qualifiedname>csl::AbstractParent::setLatexName</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="140" column="18" bodyfile="src/csl/parent.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1aae1bc83d1df8237e6bf50b6b8f732716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setCommutable</definition>
        <argsstring>(bool t_commutable)</argsstring>
        <name>setCommutable</name>
        <qualifiedname>csl::AbstractParent::setCommutable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_commutable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_commutable</parametername>
</parameternamelist>
<parameterdescription>
<para>New commutability property of the parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="144" column="10" bodyfile="src/csl/parent.cpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1affd5de9db43c39e3ec0f1b9e391bcf4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setComplexProperty</definition>
        <argsstring>(csl::ComplexProperty t_prop)</argsstring>
        <name>setComplexProperty</name>
        <qualifiedname>csl::AbstractParent::setComplexProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1ae441946c9f40502d9330aab7be1c9790">setComplexProperty</reimplementedby>
        <param>
          <type><ref refid="namespacecsl_1ac54d9e79dc6697a8eacc07c754b11c0e" kindref="member">csl::ComplexProperty</ref></type>
          <declname>t_prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="146" column="18" bodyfile="src/csl/parent.cpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a02948077d67665cbe33ba0f8febda859" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacecslParent_1a83f078a60370b86ccd6b113eedff51c2" kindref="member">cslParent::PrimaryType</ref></type>
        <definition>virtual cslParent::PrimaryType csl::AbstractParent::getPrimaryType</definition>
        <argsstring>() const =0</argsstring>
        <name>getPrimaryType</name>
        <qualifiedname>csl::AbstractParent::getPrimaryType</qualifiedname>
        <reimplementedby refid="classcsl_1_1LiteralParent_1aa4f13d4a38f4e1eb268b4a391d5e0d73">getPrimaryType</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1adf100615e12fa1f81d826f0f810e776b">getPrimaryType</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorParent_1a9526dde46fc8cbe38a6cc9910441986f">getPrimaryType</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The primary type of the parent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="150" column="36"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a6a9115038be74e35dbcd8ecdbba7e5a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacecslParent_1a880f05263e57bd6cac32e48fd45b7339" kindref="member">cslParent::Type</ref></type>
        <definition>virtual cslParent::Type csl::AbstractParent::getType</definition>
        <argsstring>() const =0</argsstring>
        <name>getType</name>
        <qualifiedname>csl::AbstractParent::getType</qualifiedname>
        <reimplementedby refid="classcsl_1_1ConstantParent_1a763c63b7aba66dc122600c0649a75c9a">getType</reimplementedby>
        <reimplementedby refid="classcsl_1_1DeltaParent_1a5f0c9c1d6c0fd4a25cc2e21a0681efa7">getType</reimplementedby>
        <reimplementedby refid="classcsl_1_1EpsilonParent_1a24dcb0f019f939c6e7a04c7dd1285b06">getType</reimplementedby>
        <reimplementedby refid="classcsl_1_1MetricParent_1a2194d37ed574daf54deba112e482637d">getType</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1aa21a699e14c7790719ad4ef846f3f584">getType</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorParent_1aa5d0d77665f81cd08e1a053f434daef1">getType</reimplementedby>
        <reimplementedby refid="classcsl_1_1VariableParent_1aba33fb8ddc1cc378ac6178c6aaee6e7a">getType</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The type of the parent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="154" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ac45297ef35dab1807a158056ec8dfac3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int csl::AbstractParent::getDim</definition>
        <argsstring>() const</argsstring>
        <name>getDim</name>
        <qualifiedname>csl::AbstractParent::getDim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The dimension of a parent, i.e. the number of indices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="158" column="17" bodyfile="src/csl/parent.cpp" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a6c633dfff2c6a58ffbf2dae9ca9e07ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void csl::AbstractParent::printDefinition</definition>
        <argsstring>(std::ostream &amp;out=std::cout, int indentSize=4, bool header=false) const =0</argsstring>
        <name>printDefinition</name>
        <qualifiedname>csl::AbstractParent::printDefinition</qualifiedname>
        <reimplementedby refid="classcsl_1_1ConstantParent_1a17b9eea88a0ab21f4a0d701b8012c362">printDefinition</reimplementedby>
        <reimplementedby refid="classcsl_1_1DeltaParent_1a01a46b3110f8121b7d33946f343748ca">printDefinition</reimplementedby>
        <reimplementedby refid="classcsl_1_1EpsilonParent_1a31b902f64ce66af0493d2208de371a16">printDefinition</reimplementedby>
        <reimplementedby refid="classcsl_1_1MetricParent_1aac09675c61194c6002ae7b5c2cdd582e">printDefinition</reimplementedby>
        <reimplementedby refid="classcsl_1_1TDerivativeParent_1afad8829f6f1aa4cc7ea3914ed2872107">printDefinition</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1af368356fb019b19fc2fb318f421a3f49">printDefinition</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorParent_1ac5d2812d6de63bcad34360314576a9b9">printDefinition</reimplementedby>
        <reimplementedby refid="classcsl_1_1VariableParent_1a294d94e9f12b9469b089c27034162407">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1DiracFermion_1a67bbdb31f69409147b276ef4acf769fb">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1FieldStrength_1a3d2a5f93db9e92269138acbaa473b54a">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1GaugeBoson_1a6920995114561fcd3020980b0845f3b1">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1GeneratorParent_1a3055296800c088a6caaed6560d47ae0e">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1GhostBoson_1a6f5fc87b2faa28396cc8aee64db5ba99">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1GoldstoneBoson_1aa209b5f2b8b89554eb35f6edba5b2eca">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1ScalarBoson_1a5f80497a66680633260ddf24472a1d10">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1af229a782c5dc2085c0eaf3ad784757ad">printDefinition</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1a5459f2fd69252b1e40dd76e783cc8071">printDefinition</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>header</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="160" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a789915324d1e21a6be70bbd495ada1cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::printPropDefinition</definition>
        <argsstring>(std::ostream &amp;out, int indentSize, bool header) const</argsstring>
        <name>printPropDefinition</name>
        <qualifiedname>csl::AbstractParent::printPropDefinition</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="165" column="5" bodyfile="src/csl/parent.cpp" bodystart="131" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a0cbecc9ebf1ba07087c4e275cf81a767" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::enableEvaluation</definition>
        <argsstring>()</argsstring>
        <name>enableEvaluation</name>
        <qualifiedname>csl::AbstractParent::enableEvaluation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="167" column="18" bodyfile="src/csl/parent.cpp" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ad34cb190892a7b0d29cecf844d836e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::disableEvaluation</definition>
        <argsstring>()</argsstring>
        <name>disableEvaluation</name>
        <qualifiedname>csl::AbstractParent::disableEvaluation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="169" column="18" bodyfile="src/csl/parent.cpp" bodystart="175" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a74bbbbc2b43939c166feb7d8e7cc8537" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::toggleEvaluation</definition>
        <argsstring>()</argsstring>
        <name>toggleEvaluation</name>
        <qualifiedname>csl::AbstractParent::toggleEvaluation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="171" column="18" bodyfile="src/csl/parent.cpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a33ad22590439c20af630fd8046ea5dc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::AbstractParent::evaluate</definition>
        <argsstring>(Expr_info self, csl::eval::mode user_mode=csl::eval::base) const</argsstring>
        <name>evaluate</name>
        <qualifiedname>csl::AbstractParent::evaluate</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1adddc8255d23e5816e9cda53f5e8a034e">evaluate</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>self</declname>
        </param>
        <param>
          <type>csl::eval::mode</type>
          <declname>user_mode</declname>
          <defval>csl::eval::base</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="173" column="27" bodyfile="src/csl/parent.cpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1af7cf14c2576a5b337f2e75059a5e002c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> const &amp;</type>
        <definition>Expr const  &amp; csl::AbstractParent::getEncapsulated</definition>
        <argsstring>() const</argsstring>
        <name>getEncapsulated</name>
        <qualifiedname>csl::AbstractParent::getEncapsulated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="177" column="24" bodyfile="src/csl/parent.cpp" bodystart="192" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a38fb1b0329110a3caed8e68397c08c51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::getExactEncapsulated</definition>
        <argsstring>(Expr_info self) const</argsstring>
        <name>getExactEncapsulated</name>
        <qualifiedname>csl::AbstractParent::getExactEncapsulated</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="179" column="18" bodyfile="src/csl/parent.cpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a3085594e68b3845f352898e79237ba24" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setEncapsulated</definition>
        <argsstring>(Expr const &amp;)</argsstring>
        <name>setEncapsulated</name>
        <qualifiedname>csl::AbstractParent::setEncapsulated</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="181" column="18" bodyfile="src/csl/parent.cpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a6c81260a7b64e93b88dea1935b524505" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int csl::AbstractParent::getDim</definition>
        <argsstring>(const Space *t_space) const</argsstring>
        <name>getDim</name>
        <qualifiedname>csl::AbstractParent::getDim</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a5bff2bf79a3985d9020bee392f440990">getDim</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>t_space</declname>
        </param>
        <briefdescription>
<para>Returns the dimension of the parent relatively to a certain vector space, i.e. the number of indices in this vector space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_space</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Vector" kindref="compound">Vector</ref> space to investigate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dimansion in <bold>t_space</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="188" column="17" bodyfile="src/csl/parent.cpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a236d774b05f017f117174469ba848142" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> * &gt;</type>
        <definition>vector&lt; const Space * &gt; csl::AbstractParent::getSpace</definition>
        <argsstring>() const</argsstring>
        <name>getSpace</name>
        <qualifiedname>csl::AbstractParent::getSpace</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1ae501e7e880e885ddcd65d946d69ef53c">getSpace</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="190" column="25" bodyfile="src/csl/parent.cpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a77bb772ebe5adafe83a9f504a56e05d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
        <definition>const Space * csl::AbstractParent::getFieldSpace</definition>
        <argsstring>() const</argsstring>
        <name>getFieldSpace</name>
        <qualifiedname>csl::AbstractParent::getFieldSpace</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1a3d8ff09def749260d82187ce11f675b0">getFieldSpace</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="192" column="25" bodyfile="src/csl/parent.cpp" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a11b28bb5fd2bd261e76a3980341ead1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setFieldSpace</definition>
        <argsstring>(const Space *t_space)</argsstring>
        <name>setFieldSpace</name>
        <qualifiedname>csl::AbstractParent::setFieldSpace</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1a447d1ca599ae604ef52dc4ae61988e34">setFieldSpace</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>t_space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="194" column="18" bodyfile="src/csl/parent.cpp" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1af56df7eb3d90348eda50e3d6cc5cd8b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::getFullySymmetric</definition>
        <argsstring>() const</argsstring>
        <name>getFullySymmetric</name>
        <qualifiedname>csl::AbstractParent::getFullySymmetric</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1aa4af33bfd789ef86dd5775b7a4558a01">getFullySymmetric</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the parent is indicial and fully symmetric in its indices. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="200" column="18" bodyfile="src/csl/parent.cpp" bodystart="229" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ab04c96ff80ee2f0786e59a7eafd71175" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::getFullyAntiSymmetric</definition>
        <argsstring>() const</argsstring>
        <name>getFullyAntiSymmetric</name>
        <qualifiedname>csl::AbstractParent::getFullyAntiSymmetric</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a4b974963fac5f42fe6f3ea5ca7ed93b6">getFullyAntiSymmetric</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the parent is indicial and fully antisymmetric in its indices. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="205" column="18" bodyfile="src/csl/parent.cpp" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ad42c4b140d48c9319e0ae47436d040e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> &gt;</type>
        <definition>vector&lt; Permutation &gt; csl::AbstractParent::getPermutation</definition>
        <argsstring>() const</argsstring>
        <name>getPermutation</name>
        <qualifiedname>csl::AbstractParent::getPermutation</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a57d5160b0d1a94e376bbbec3d5ab5735">getPermutation</reimplementedby>
        <briefdescription>
<para>For an <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> returns all the possible permutations of the tensor with respect to the symmetries or antisymmetries in a vector of <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::vector&lt;Permutation&gt; with all possible permutations of the tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="213" column="25" bodyfile="src/csl/parent.cpp" bodystart="243" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1aa8028cba1cf0ca3e754111e52d629d24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::isValued</definition>
        <argsstring>() const</argsstring>
        <name>isValued</name>
        <qualifiedname>csl::AbstractParent::isValued</qualifiedname>
        <reimplementedby refid="classcsl_1_1LiteralParent_1a3761424d118cb70904b9bcc23616d287">isValued</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorParent_1a892cd4e2f9ca94f6e9aee17f779b6090">isValued</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="215" column="18" bodyfile="src/csl/parent.cpp" bodystart="250" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1adcc94486a83de9c73de39f78b1eafea4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::getTensor</definition>
        <argsstring>() const</argsstring>
        <name>getTensor</name>
        <qualifiedname>csl::AbstractParent::getTensor</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a889012a413646fa644b39c24366673f1">getTensor</reimplementedby>
        <briefdescription>
<para>For a valued <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> returns the corresponding tensor. Valued means that the tensor has been defined by the user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="221" column="18" bodyfile="src/csl/parent.cpp" bodystart="257" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1affa574a83a5f60cc6fc9bd00f5dca747" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::getTensor</definition>
        <argsstring>(Expr_info expr) const</argsstring>
        <name>getTensor</name>
        <qualifiedname>csl::AbstractParent::getTensor</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1aef2a4af73762e024d8bd5f0fa0e6d359">getTensor</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="223" column="18" bodyfile="src/csl/parent.cpp" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a4f86be4ff457fb18becedcca645b33f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::getTrace</definition>
        <argsstring>() const</argsstring>
        <name>getTrace</name>
        <qualifiedname>csl::AbstractParent::getTrace</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a13f343f42228eecf7986e8a361091627">getTrace</reimplementedby>
        <briefdescription>
<para>For an <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> of dimension 2 (in a given unique space) returns the trace of it, i.e. the sum of its diagonal elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="228" column="18" bodyfile="src/csl/parent.cpp" bodystart="271" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1adf55413672b9d58875485edd1db4e563" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::dependsOn</definition>
        <argsstring>(Expr_info expr) const</argsstring>
        <name>dependsOn</name>
        <qualifiedname>csl::AbstractParent::dependsOn</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a7a0dbe923e3491cc35fa48c175baee43">dependsOn</reimplementedby>
        <reimplementedby refid="classcsl_1_1VariableParent_1aa752d83ccf00b8277329367836af6488">dependsOn</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Tells if the parent depends on another expression or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>from which we test the dependency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the parent depends on<bold>expr</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="235" column="18" bodyfile="src/csl/parent.cpp" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a74258391e7eae5a8cd0d629eabfe9ca9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::dependsExplicitlyOn</definition>
        <argsstring>(Expr_info expr) const</argsstring>
        <name>dependsExplicitlyOn</name>
        <qualifiedname>csl::AbstractParent::dependsExplicitlyOn</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a14f4bcb3c19fb4e8cb8ccf3a61719f27">dependsExplicitlyOn</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Tells if the parent depends explicitely on another expression or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>from which we test the dependency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the parent depends on<bold>expr</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="243" column="18" bodyfile="src/csl/parent.cpp" bodystart="285" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ac691c3943a7bd3eb9c671927e2f91dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addSpace</definition>
        <argsstring>(const Space *t_space)</argsstring>
        <name>addSpace</name>
        <qualifiedname>csl::AbstractParent::addSpace</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a17fb05141415ac442cb8f5b6e88bc329">addSpace</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>t_space</declname>
        </param>
        <briefdescription>
<para>Adds a dimension to an <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> in a specific vector space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_space</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Space" kindref="compound">Space</ref> in which we add an index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="248" column="18" bodyfile="src/csl/parent.cpp" bodystart="292" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a3e866d96e2600f1f6f723bf62dee42b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setFullySymmetric</definition>
        <argsstring>()</argsstring>
        <name>setFullySymmetric</name>
        <qualifiedname>csl::AbstractParent::setFullySymmetric</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1ac99c17db4d68be67761930e0289ee5e0">setFullySymmetric</reimplementedby>
        <briefdescription>
<para>Set the <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> fully symmetric. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="252" column="18" bodyfile="src/csl/parent.cpp" bodystart="298" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a8ecc485d2526a3975b79b0c4a3da21d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setFullyAntiSymmetric</definition>
        <argsstring>()</argsstring>
        <name>setFullyAntiSymmetric</name>
        <qualifiedname>csl::AbstractParent::setFullyAntiSymmetric</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1ae0d6d12f0cd4efe83154cbf79978d088">setFullyAntiSymmetric</reimplementedby>
        <briefdescription>
<para>Set the <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> fully antisymmetric. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="256" column="18" bodyfile="src/csl/parent.cpp" bodystart="304" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ad22286f40e94e30a5adffa36314961c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::isTraceLessIn</definition>
        <argsstring>(csl::Space const *space) const</argsstring>
        <name>isTraceLessIn</name>
        <qualifiedname>csl::AbstractParent::isTraceLessIn</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a592a243554b0bdeb58c34efe4eedaeee">isTraceLessIn</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="258" column="18" bodyfile="src/csl/parent.cpp" bodystart="310" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ab6f3ca1657d6b2d3809adf39981e6204" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addTraceLessNess</definition>
        <argsstring>(csl::Space const *space)</argsstring>
        <name>addTraceLessNess</name>
        <qualifiedname>csl::AbstractParent::addTraceLessNess</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a47f7c70202336b11674b15a6895b16ed">addTraceLessNess</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="259" column="18" bodyfile="src/csl/parent.cpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a0b06d1389b3f3ea597e91548810a3c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::removeTraceLessNess</definition>
        <argsstring>(csl::Space const *space)</argsstring>
        <name>removeTraceLessNess</name>
        <qualifiedname>csl::AbstractParent::removeTraceLessNess</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a05b90066cf74b7fc304a474df4e64a05">removeTraceLessNess</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="260" column="18" bodyfile="src/csl/parent.cpp" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a0a4a585286e48ff062c33e96ec09531b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addSymmetry</definition>
        <argsstring>(int i1, int i2)</argsstring>
        <name>addSymmetry</name>
        <qualifiedname>csl::AbstractParent::addSymmetry</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1ac9a495db8af3074a6c329d84a1b7cb91">addSymmetry</reimplementedby>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>Adds a symmetry between indices in position <bold>i1</bold> and <bold>i2</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> of the first index in the symmetry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> of the second index in the symmetry. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="266" column="18" bodyfile="src/csl/parent.cpp" bodystart="324" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a5548d7f976f21a25d657fc723f7f7132" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addAntiSymmetry</definition>
        <argsstring>(int i1, int i2)</argsstring>
        <name>addAntiSymmetry</name>
        <qualifiedname>csl::AbstractParent::addAntiSymmetry</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1abdfaf46f9699cea8ac9cea9b7dcec388">addAntiSymmetry</reimplementedby>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>Adds an antisymmetry between indices in position <bold>i1</bold> and <bold>i2</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> of the first index in the symmetry.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> of the second index in the symmetry. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="272" column="18" bodyfile="src/csl/parent.cpp" bodystart="330" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a79ad3927cad378f4e83055533ea20d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setSymmetry</definition>
        <argsstring>(const Symmetry &amp;t_symmetry)</argsstring>
        <name>setSymmetry</name>
        <qualifiedname>csl::AbstractParent::setSymmetry</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1aa61f52e3ea9ae4beb190442ac0e7aacc">setSymmetry</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> &amp;</type>
          <declname>t_symmetry</declname>
        </param>
        <briefdescription>
<para>Sets all the symmetry properties of an <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> from an object of type <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref>. This erase all possible properties of (anti)symmetry the parent had before that. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_symmetry</parametername>
</parameternamelist>
<parameterdescription>
<para>New symmetry of the parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="279" column="18" bodyfile="src/csl/parent.cpp" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a5dd9dd3730422db222a395139786ea4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setTensor</definition>
        <argsstring>(const Expr &amp;t_tensor)</argsstring>
        <name>setTensor</name>
        <qualifiedname>csl::AbstractParent::setTensor</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a4eacd947decb14e003f81a8053d94e11">setTensor</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>New</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor corresponding to the <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref>. Must match the index structure of course. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="284" column="18" bodyfile="src/csl/parent.cpp" bodystart="342" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a3ec47d729864161605c7cbcc6f726f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::setTrace</definition>
        <argsstring>(const Expr &amp;t_trace)</argsstring>
        <name>setTrace</name>
        <qualifiedname>csl::AbstractParent::setTrace</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1aa5bd4990cfc0d955edf1614a42d0d011">setTrace</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_trace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="286" column="18" bodyfile="src/csl/parent.cpp" bodystart="348" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a7f680e00248dd59a1545488ec4b43c07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::hasContractionProperty</definition>
        <argsstring>(const Abstract *self, Expr_info B) const</argsstring>
        <name>hasContractionProperty</name>
        <qualifiedname>csl::AbstractParent::hasContractionProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1DeltaParent_1a8e820c17bda11df8e98eed50e013401a">hasContractionProperty</reimplementedby>
        <reimplementedby refid="classcsl_1_1EpsilonParent_1a6137c073fe9806ab8d0dc8606aec98ad">hasContractionProperty</reimplementedby>
        <reimplementedby refid="classcsl_1_1MetricParent_1af91920eba4f5346a39a13e393f806526">hasContractionProperty</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorParent_1aee4452e0bd10be255d394ed3463780a3">hasContractionProperty</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Tells if an <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> has contraction properties with another expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the element corresponding to the parent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The other expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if there is one particular contraction property. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="295" column="18" bodyfile="src/csl/parent.cpp" bodystart="354" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a4df179280a63c410c84f7ea4edbcbee2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::contraction</definition>
        <argsstring>(const Abstract *self, Expr_info B) const</argsstring>
        <name>contraction</name>
        <qualifiedname>csl::AbstractParent::contraction</qualifiedname>
        <reimplementedby refid="classcsl_1_1DeltaParent_1a4736cb2c3631a1a43bd3229fc246d79d">contraction</reimplementedby>
        <reimplementedby refid="classcsl_1_1EpsilonParent_1af19206790efe47aa7529fef3e8b34a7f">contraction</reimplementedby>
        <reimplementedby refid="classcsl_1_1MetricParent_1a42674b8cb437b52c60adb3338718661d">contraction</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorParent_1afdb6b8332cd4a18e3835099e0fab9f32">contraction</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Applies a contractoin property if there is one between <bold>self</bold> and <bold>B</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the element corresponding to the parent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The other expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The contracted object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="304" column="18" bodyfile="src/csl/parent.cpp" bodystart="361" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a29f41ce934d0e7260c1f8e8fddf70e14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::AbstractParent::hasChainContractionProperty</definition>
        <argsstring>() const</argsstring>
        <name>hasChainContractionProperty</name>
        <qualifiedname>csl::AbstractParent::hasChainContractionProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a29c887ab51d1dfa876f869fbba3c8479">hasChainContractionProperty</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="306" column="18" bodyfile="src/csl/parent.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1aa4491a6a8adcf9042aa26a8498a9478b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1ContractionChain" kindref="compound">ContractionChain</ref> &gt;</type>
        <definition>vector&lt; ContractionChain &gt; csl::AbstractParent::getContractionProperties</definition>
        <argsstring>() const</argsstring>
        <name>getContractionProperties</name>
        <qualifiedname>csl::AbstractParent::getContractionProperties</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a84c9f98e1531b573a63e67c667f7cba6">getContractionProperties</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="308" column="25" bodyfile="src/csl/parent.cpp" bodystart="389" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1acce8745989273246a318d207e4c24ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addContractionProperty</definition>
        <argsstring>(csl::vector_expr const &amp;leftHandSide, const Expr &amp;rightHandSide)</argsstring>
        <name>addContractionProperty</name>
        <qualifiedname>csl::AbstractParent::addContractionProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1aae4c207cf3365ebf833975cb4b4e92f8">addContractionProperty</reimplementedby>
        <param>
          <type>csl::vector_expr const &amp;</type>
          <declname>leftHandSide</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>rightHandSide</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="310" column="18" bodyfile="src/csl/parent.cpp" bodystart="396" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1af03f15bcc4f9dd93cf09739c9ecf4d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::removeContractionProperty</definition>
        <argsstring>(csl::vector_expr const &amp;leftHandSide, const Expr &amp;rightHandSide)</argsstring>
        <name>removeContractionProperty</name>
        <qualifiedname>csl::AbstractParent::removeContractionProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a44c54413e4600c7d5589879671f8d474">removeContractionProperty</reimplementedby>
        <param>
          <type>csl::vector_expr const &amp;</type>
          <declname>leftHandSide</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>rightHandSide</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="314" column="5" bodyfile="src/csl/parent.cpp" bodystart="403" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a00090975a2f3144fd860ad0c41ec6764" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addSelfContraction</definition>
        <argsstring>(const Expr &amp;A, const Expr &amp;B, const Expr &amp;res, std::optional&lt; std::function&lt; bool(Expr_info, Expr_info)&gt; &gt; condition=std::nullopt)</argsstring>
        <name>addSelfContraction</name>
        <qualifiedname>csl::AbstractParent::addSelfContraction</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a81eabaf09cb9fe1855a35a91faf3b132">addSelfContraction</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>std::optional&lt; std::function&lt; bool(<ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref>, <ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref>)&gt; &gt;</type>
          <declname>condition</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>Adds a contraction property between an Element and another that share the parent (*this). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First Element in the contraction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second Element in the contraction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>res The result of the contraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="323" column="18" bodyfile="src/csl/parent.cpp" bodystart="368" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a0889b22a387aa58334e6c84aa9e7faf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::removeSelfContraction</definition>
        <argsstring>(const Expr &amp;A, const Expr &amp;B)</argsstring>
        <name>removeSelfContraction</name>
        <qualifiedname>csl::AbstractParent::removeSelfContraction</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a8753c5b10ccca6f049cbd5e852fbb21b">removeSelfContraction</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="330" column="18" bodyfile="src/csl/parent.cpp" bodystart="378" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ab893f8cc881da62b696c9a66abb1bbde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::AbstractParent::getComplexProperty</definition>
        <argsstring>(Expr_info self) const</argsstring>
        <name>getComplexProperty</name>
        <qualifiedname>csl::AbstractParent::getComplexProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a67f7479000987afe784cf41d139a97a6">getComplexProperty</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="332" column="27" bodyfile="src/csl/parent.cpp" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1afd68c39bc8ac85924ba25e4a7cac7ff0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::AbstractParent::getHermitianProperty</definition>
        <argsstring>(Expr_info self, const Space *space) const</argsstring>
        <name>getHermitianProperty</name>
        <qualifiedname>csl::AbstractParent::getHermitianProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a36af50ffc43694e38539c9a0f282653b">getHermitianProperty</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>self</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="334" column="27" bodyfile="src/csl/parent.cpp" bodystart="415" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a4077314469ddf178e3ec02e524b940c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::AbstractParent::getTransposedProperty</definition>
        <argsstring>(Expr_info self, const Space *space) const</argsstring>
        <name>getTransposedProperty</name>
        <qualifiedname>csl::AbstractParent::getTransposedProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1aad0b86fccab27dcef313d5be70edc806">getTransposedProperty</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>self</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="338" column="5" bodyfile="src/csl/parent.cpp" bodystart="421" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a3b4d924a14d8427a9618cec74f118a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addComplexProperty</definition>
        <argsstring>(const Expr &amp;init, const Expr &amp;res)</argsstring>
        <name>addComplexProperty</name>
        <qualifiedname>csl::AbstractParent::addComplexProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a4e64e8c6d44452b8457401570e8fdee1">addComplexProperty</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="340" column="18" bodyfile="src/csl/parent.cpp" bodystart="427" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a0660c6be6cd4215181fd1c423ee1219b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addHermitianProperty</definition>
        <argsstring>(const Space *space, const Expr &amp;init, const Expr &amp;res)</argsstring>
        <name>addHermitianProperty</name>
        <qualifiedname>csl::AbstractParent::addHermitianProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a464d54dcfae18bb913b4bf6a6629adab">addHermitianProperty</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>space</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="342" column="18" bodyfile="src/csl/parent.cpp" bodystart="433" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ad6ce2c185af4de67ea998efcb48754d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::AbstractParent::addTransposedProperty</definition>
        <argsstring>(const Space *space, const Expr &amp;init, const Expr &amp;res)</argsstring>
        <name>addTransposedProperty</name>
        <qualifiedname>csl::AbstractParent::addTransposedProperty</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1af3fc929cce72fcf95aad56ebe51c8881">addTransposedProperty</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>space</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="346" column="18" bodyfile="src/csl/parent.cpp" bodystart="441" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a4aba499d752eefc81a70cf75938782ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref> &gt;</type>
        <definition>vector&lt; Parent &gt; csl::AbstractParent::getBrokenParts</definition>
        <argsstring>(const Space *broken) const</argsstring>
        <name>getBrokenParts</name>
        <qualifiedname>csl::AbstractParent::getBrokenParts</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1acdb63d093ac13e3ec7f4bde54ca86738">getBrokenParts</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>broken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="350" column="25" bodyfile="src/csl/parent.cpp" bodystart="449" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a8369702a8c0a3e9838cc90aefcbb2d6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref> &gt;</type>
        <definition>vector&lt; Parent &gt; csl::AbstractParent::breakSpace</definition>
        <argsstring>(const Space *broken, const std::vector&lt; const Space * &gt; &amp;newSpace, const std::vector&lt; size_t &gt; &amp;pieces) const</argsstring>
        <name>breakSpace</name>
        <qualifiedname>csl::AbstractParent::breakSpace</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1ad8c380b5386939a06d3d6531215370cd">breakSpace</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorParent_1ab1a4d5405370ca6a59c35f87f8b2e5b7">breakSpace</reimplementedby>
        <reimplementedby refid="classmty_1_1QuantumFieldParent_1aec07ce340587116774df43d16418327f">breakSpace</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>broken</declname>
        </param>
        <param>
          <type>const std::vector&lt; const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> * &gt; &amp;</type>
          <declname>newSpace</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>pieces</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="353" column="5" bodyfile="src/csl/parent.cpp" bodystart="456" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a8a7f7e45ca51c0720c2234d22191d196" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::operator()</definition>
        <argsstring>(Index index)</argsstring>
        <name>operator()</name>
        <qualifiedname>csl::AbstractParent::operator()</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a335867b85b438d48eaf0457cb5c83469">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1GeneratorParent_1a0992e4009b8f7eae2a93b407a59c8d60">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1QuantumFieldParent_1a64f7543217b809e39a686180b2e67754">operator()</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Generate the Element for an <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> of dimension 1 (a single index). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> of the Element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding <ref refid="classcsl_1_1TensorElement" kindref="compound">TensorElement</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="362" column="18" bodyfile="src/csl/parent.cpp" bodystart="463" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a67817d2d364178d734343aa2aaa8c621" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::operator()</definition>
        <argsstring>(const Tensor &amp;point)</argsstring>
        <name>operator()</name>
        <qualifiedname>csl::AbstractParent::operator()</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1a1e471f48ef91ab66399e88e9cbd4ef0b">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1QuantumFieldParent_1a19555df10c3d557726778389d62ae69f">operator()</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="364" column="18" bodyfile="src/csl/parent.cpp" bodystart="470" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1aa9298445ca3a71e7af13ff61382c8c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::operator()</definition>
        <argsstring>(std::vector&lt; Index &gt; indices)</argsstring>
        <name>operator()</name>
        <qualifiedname>csl::AbstractParent::operator()</qualifiedname>
        <reimplementedby refid="classcsl_1_1DeltaParent_1aa0b6e8538707f3621caaadc29d2145c7">operator()</reimplementedby>
        <reimplementedby refid="classcsl_1_1EpsilonParent_1a69dcb179ab67784a6520b95d196747b8">operator()</reimplementedby>
        <reimplementedby refid="classcsl_1_1MetricParent_1a1c137eb96960fbff8eb9aa9792149bd2">operator()</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorParent_1a4d65c157315e20d9c6855d0a14b7ba63">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1GeneratorParent_1a1a8ee61b9646e0b4a397de8f9118fa92">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1QuantumFieldParent_1a6d5cf783b576fc3bac49987c41fa6590">operator()</reimplementedby>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Generate the Element for an <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> of arbitrary dimension</para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>List of indices to generate the <ref refid="classcsl_1_1TensorElement" kindref="compound">TensorElement</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding <ref refid="classcsl_1_1TensorElement" kindref="compound">TensorElement</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="371" column="18" bodyfile="src/csl/parent.cpp" bodystart="484" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a2ef89e977355f65dd919fcb78647df89" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::operator()</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;indices)</argsstring>
        <name>operator()</name>
        <qualifiedname>csl::AbstractParent::operator()</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorParent_1a76840bf24d5392c521467ecb662cc15e">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1GeneratorParent_1a7ec6a28ac9e77e9852e5228f7f54038a">operator()</reimplementedby>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="373" column="18" bodyfile="src/csl/parent.cpp" bodystart="491" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1ad64079f8317747669f1c8b4c1498d8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::operator()</definition>
        <argsstring>(Index index, const Tensor &amp;point)</argsstring>
        <name>operator()</name>
        <qualifiedname>csl::AbstractParent::operator()</qualifiedname>
        <reimplementedby refid="classcsl_1_1TDerivativeParent_1af9c641d2f1bc04519ec2043d414b2473">operator()</reimplementedby>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1a175a7bd5388112e7603d8e08c65f6b46">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1QuantumFieldParent_1a8c43948220614b832ce07bd2d65df7f2">operator()</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="375" column="18" bodyfile="src/csl/parent.cpp" bodystart="477" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1a4281c853db4878e925bc81440213dae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::operator()</definition>
        <argsstring>(std::vector&lt; Index &gt; indices, const Tensor &amp;point)</argsstring>
        <name>operator()</name>
        <qualifiedname>csl::AbstractParent::operator()</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1af4bf45384924967903815e625a3342a8">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1QuantumFieldParent_1aa36e3e3d247a9948d4de692a00d38403">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1a2ca80b0c77738a71b62a741473fe6332">operator()</reimplementedby>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="377" column="18" bodyfile="src/csl/parent.cpp" bodystart="505" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1AbstractParent_1aba91946c679a4e6e116f0fc75fc52e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::AbstractParent::operator()</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;indices, const Tensor &amp;point)</argsstring>
        <name>operator()</name>
        <qualifiedname>csl::AbstractParent::operator()</qualifiedname>
        <reimplementedby refid="classcsl_1_1TensorFieldParent_1ae91a0f9bd37f779aca2138607bb61406">operator()</reimplementedby>
        <reimplementedby refid="classmty_1_1QuantumFieldParent_1a70d76ae9e1f6583ecc1f1102d68aa585">operator()</reimplementedby>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="379" column="18" bodyfile="src/csl/parent.cpp" bodystart="498" bodyend="503"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcsl_1_1AbstractParent_1a949af9bf2c249f6a5e7c27414c467acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const AbstractParent &amp;parent)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>csl::AbstractParent::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1AbstractParent" kindref="compound">AbstractParent</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Display name and commutability of the parent in standard output. </para>
        </briefdescription>
        <detaileddescription>
<para>\function std::ostream&amp; <ref refid="classcsl_1_1AbstractParent_1a949af9bf2c249f6a5e7c27414c467acd" kindref="member">operator&lt;&lt;(std::ostream&amp; fout ,
                                  const AbstractParent&amp; p)</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/parent.h" line="386" column="12" bodyfile="src/csl/parent.cpp" bodystart="512" bodyend="519"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base class for all parents (indicial, fields etc). All parents derive from this class. </para>
    </briefdescription>
    <detaileddescription>
<para>The principle of a parent is to contain properties of a variety of objects that share the same abstract concept, like indicial objects. Every specialization (Element) of a tensor for example, is an object with indices like <formula id="35">$ g_{\mu\nu} $</formula>. But the Element can appear many times in different forms in an expression, we want its properties to appear only at one place in the program, and we want an object that can generate the Element. This is the <ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref>. The parent then has three important features: <linebreak/>
 1. It is the only one to contain the properties of the object, if an element wants to access its own properties it has to ask its parent. <linebreak/>
 2. It is the only object able to generate properly an Element of its type. <linebreak/>
 2. It cannot appear in an expression (since it is not derived from <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>). And it is normal because in a expression we want a <formula id="35">$ g_{\mu\nu} $</formula> with given  <formula id="36">$
\mu $</formula> and <formula id="37">$ \nu $</formula>, not a simple <formula id="38">$ g $</formula>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>csl::AbstractParent</label>
        <link refid="classcsl_1_1AbstractParent"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>csl::ConstantParent</label>
        <link refid="classcsl_1_1ConstantParent"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>csl::DeltaParent</label>
        <link refid="classcsl_1_1DeltaParent"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>csl::EpsilonParent</label>
        <link refid="classcsl_1_1EpsilonParent"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>csl::LiteralParent</label>
        <link refid="classcsl_1_1LiteralParent"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>csl::MetricParent</label>
        <link refid="classcsl_1_1MetricParent"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>csl::TDerivativeParent</label>
        <link refid="classcsl_1_1TDerivativeParent"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>csl::TensorFieldParent</label>
        <link refid="classcsl_1_1TensorFieldParent"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>csl::TensorParent</label>
        <link refid="classcsl_1_1TensorParent"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>csl::VariableParent</label>
        <link refid="classcsl_1_1VariableParent"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>mty::BaseVectorBoson</label>
        <link refid="classmty_1_1BaseVectorBoson"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>mty::DiracFermion</label>
        <link refid="classmty_1_1DiracFermion"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>mty::FieldStrength</label>
        <link refid="classmty_1_1FieldStrength"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>mty::GaugeBoson</label>
        <link refid="classmty_1_1GaugeBoson"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>mty::GeneratorParent</label>
        <link refid="classmty_1_1GeneratorParent"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>mty::GhostBoson</label>
        <link refid="classmty_1_1GhostBoson"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>mty::GoldstoneBoson</label>
        <link refid="classmty_1_1GoldstoneBoson"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>mty::QuantumFieldParent</label>
        <link refid="classmty_1_1QuantumFieldParent"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>mty::ScalarBoson</label>
        <link refid="classmty_1_1ScalarBoson"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>mty::VectorBoson</label>
        <link refid="classmty_1_1VectorBoson"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>mty::WeylFermion</label>
        <link refid="classmty_1_1WeylFermion"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; AbstractParent &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>csl::AbstractParent</label>
        <link refid="classcsl_1_1AbstractParent"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; AbstractParent &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/csl/parent.h" line="79" column="1" bodyfile="src/csl/parent.h" bodystart="79" bodyend="388"/>
    <listofallmembers>
      <member refid="classcsl_1_1AbstractParent_1a3a8495f4cc8281410f8aa512c64116cb" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>AbstractParent</name></member>
      <member refid="classcsl_1_1AbstractParent_1a961d277c9a277163931cb5b45906c83f" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>AbstractParent</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad88d1dd79f22b67744640124252dc093" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>AbstractParent</name></member>
      <member refid="classcsl_1_1AbstractParent_1a5548d7f976f21a25d657fc723f7f7132" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addAntiSymmetry</name></member>
      <member refid="classcsl_1_1AbstractParent_1a3b4d924a14d8427a9618cec74f118a3c" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addComplexProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1acce8745989273246a318d207e4c24ee9" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addContractionProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1a0660c6be6cd4215181fd1c423ee1219b" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addHermitianProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1a00090975a2f3144fd860ad0c41ec6764" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addSelfContraction</name></member>
      <member refid="classcsl_1_1AbstractParent_1ac691c3943a7bd3eb9c671927e2f91dc7" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addSpace</name></member>
      <member refid="classcsl_1_1AbstractParent_1a0a4a585286e48ff062c33e96ec09531b" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1AbstractParent_1ab6f3ca1657d6b2d3809adf39981e6204" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addTraceLessNess</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad6ce2c185af4de67ea998efcb48754d5" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>addTransposedProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1a8369702a8c0a3e9838cc90aefcbb2d6f" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1AbstractParent_1a177e5244cc4d4b6c1e0600a4f77b523f" prot="protected" virt="non-virtual"><scope>csl::AbstractParent</scope><name>commutable</name></member>
      <member refid="classcsl_1_1AbstractParent_1ab058ceee466fd0997c060e83fc0a4e96" prot="protected" virt="non-virtual"><scope>csl::AbstractParent</scope><name>complexProp</name></member>
      <member refid="classcsl_1_1AbstractParent_1a4df179280a63c410c84f7ea4edbcbee2" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>contraction</name></member>
      <member refid="classcsl_1_1AbstractParent_1a74258391e7eae5a8cd0d629eabfe9ca9" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1AbstractParent_1adf55413672b9d58875485edd1db4e563" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad34cb190892a7b0d29cecf844d836e10" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>disableEvaluation</name></member>
      <member refid="classcsl_1_1AbstractParent_1a0cbecc9ebf1ba07087c4e275cf81a767" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>enableEvaluation</name></member>
      <member refid="classcsl_1_1AbstractParent_1a33ad22590439c20af630fd8046ea5dc8" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>evaluate</name></member>
      <member refid="classcsl_1_1AbstractParent_1a9d9f642ad348b33efb70b9f4cf839c1b" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getBaseName</name></member>
      <member refid="classcsl_1_1AbstractParent_1a4aba499d752eefc81a70cf75938782ca" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getBrokenParts</name></member>
      <member refid="classcsl_1_1AbstractParent_1af8ae5696856c551204addb95271333bf" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>getCommutable</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad0029cab35d92a9542c5fb21b6672212" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>getComplexProp</name></member>
      <member refid="classcsl_1_1AbstractParent_1ab893f8cc881da62b696c9a66abb1bbde" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getComplexProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1aa4491a6a8adcf9042aa26a8498a9478b" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getContractionProperties</name></member>
      <member refid="classcsl_1_1AbstractParent_1ac45297ef35dab1807a158056ec8dfac3" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getDim</name></member>
      <member refid="classcsl_1_1AbstractParent_1a6c81260a7b64e93b88dea1935b524505" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getDim</name></member>
      <member refid="classcsl_1_1AbstractParent_1af7cf14c2576a5b337f2e75059a5e002c" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getEncapsulated</name></member>
      <member refid="classcsl_1_1AbstractParent_1a38fb1b0329110a3caed8e68397c08c51" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getExactEncapsulated</name></member>
      <member refid="classcsl_1_1AbstractParent_1a77bb772ebe5adafe83a9f504a56e05d0" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getFieldSpace</name></member>
      <member refid="classcsl_1_1AbstractParent_1ab04c96ff80ee2f0786e59a7eafd71175" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getFullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1AbstractParent_1af56df7eb3d90348eda50e3d6cc5cd8b0" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getFullySymmetric</name></member>
      <member refid="classcsl_1_1AbstractParent_1afd68c39bc8ac85924ba25e4a7cac7ff0" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getHermitianProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1acacd759bca7fa6e750080a68ea970caa" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>getLatexName</name></member>
      <member refid="classcsl_1_1AbstractParent_1ab22f321502a8aa481865be3e58bb241d" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>getName</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad42c4b140d48c9319e0ae47436d040e1" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getPermutation</name></member>
      <member refid="classcsl_1_1AbstractParent_1a02948077d67665cbe33ba0f8febda859" prot="public" virt="pure-virtual"><scope>csl::AbstractParent</scope><name>getPrimaryType</name></member>
      <member refid="classcsl_1_1AbstractParent_1a236d774b05f017f117174469ba848142" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getSpace</name></member>
      <member refid="classcsl_1_1AbstractParent_1adcc94486a83de9c73de39f78b1eafea4" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getTensor</name></member>
      <member refid="classcsl_1_1AbstractParent_1affa574a83a5f60cc6fc9bd00f5dca747" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getTensor</name></member>
      <member refid="classcsl_1_1AbstractParent_1a4f86be4ff457fb18becedcca645b33f4" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getTrace</name></member>
      <member refid="classcsl_1_1AbstractParent_1a4077314469ddf178e3ec02e524b940c3" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>getTransposedProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1a6a9115038be74e35dbcd8ecdbba7e5a1" prot="public" virt="pure-virtual"><scope>csl::AbstractParent</scope><name>getType</name></member>
      <member refid="classcsl_1_1AbstractParent_1a29f41ce934d0e7260c1f8e8fddf70e14" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>hasChainContractionProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1a7f680e00248dd59a1545488ec4b43c07" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>hasContractionProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1a4e78f62f3624e0e6070f1da4ddd32943" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>isAnAbbreviation</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad22286f40e94e30a5adffa36314961c3" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>isTraceLessIn</name></member>
      <member refid="classcsl_1_1AbstractParent_1aa8028cba1cf0ca3e754111e52d629d24" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>isValued</name></member>
      <member refid="classcsl_1_1AbstractParent_1a98c857ebf734c15e7afd0d8a13988ac9" prot="protected" virt="non-virtual"><scope>csl::AbstractParent</scope><name>latexName</name></member>
      <member refid="classcsl_1_1AbstractParent_1a2ad6b4cd58d9b051a4d62f343bf48c2e" prot="protected" virt="non-virtual"><scope>csl::AbstractParent</scope><name>name</name></member>
      <member refid="classcsl_1_1AbstractParent_1a8a7f7e45ca51c0720c2234d22191d196" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>operator()</name></member>
      <member refid="classcsl_1_1AbstractParent_1a67817d2d364178d734343aa2aaa8c621" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>operator()</name></member>
      <member refid="classcsl_1_1AbstractParent_1aa9298445ca3a71e7af13ff61382c8c0f" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>operator()</name></member>
      <member refid="classcsl_1_1AbstractParent_1a2ef89e977355f65dd919fcb78647df89" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>operator()</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad64079f8317747669f1c8b4c1498d8dc" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>operator()</name></member>
      <member refid="classcsl_1_1AbstractParent_1a4281c853db4878e925bc81440213dae0" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>operator()</name></member>
      <member refid="classcsl_1_1AbstractParent_1aba91946c679a4e6e116f0fc75fc52e1e" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>operator()</name></member>
      <member refid="classcsl_1_1AbstractParent_1a949af9bf2c249f6a5e7c27414c467acd" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>operator&lt;&lt;</name></member>
      <member refid="classcsl_1_1AbstractParent_1a6c633dfff2c6a58ffbf2dae9ca9e07ae" prot="public" virt="pure-virtual"><scope>csl::AbstractParent</scope><name>printDefinition</name></member>
      <member refid="classcsl_1_1AbstractParent_1a789915324d1e21a6be70bbd495ada1cc" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>printPropDefinition</name></member>
      <member refid="classcsl_1_1AbstractParent_1af03f15bcc4f9dd93cf09739c9ecf4d03" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>removeContractionProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1a0889b22a387aa58334e6c84aa9e7faf0" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>removeSelfContraction</name></member>
      <member refid="classcsl_1_1AbstractParent_1a0b06d1389b3f3ea597e91548810a3c70" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>removeTraceLessNess</name></member>
      <member refid="classcsl_1_1AbstractParent_1a831ac782bdbba8d40838c6aeffaa53f6" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>self</name></member>
      <member refid="classcsl_1_1AbstractParent_1aae1bc83d1df8237e6bf50b6b8f732716" prot="public" virt="non-virtual"><scope>csl::AbstractParent</scope><name>setCommutable</name></member>
      <member refid="classcsl_1_1AbstractParent_1affd5de9db43c39e3ec0f1b9e391bcf4a" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setComplexProperty</name></member>
      <member refid="classcsl_1_1AbstractParent_1a3085594e68b3845f352898e79237ba24" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setEncapsulated</name></member>
      <member refid="classcsl_1_1AbstractParent_1a11b28bb5fd2bd261e76a3980341ead1d" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setFieldSpace</name></member>
      <member refid="classcsl_1_1AbstractParent_1a8ecc485d2526a3975b79b0c4a3da21d9" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setFullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1AbstractParent_1a3e866d96e2600f1f6f723bf62dee42b0" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setFullySymmetric</name></member>
      <member refid="classcsl_1_1AbstractParent_1af9a8cfc57a0bdf8178489c198755565b" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setLatexName</name></member>
      <member refid="classcsl_1_1AbstractParent_1a13e6f74e590cbf05dcafb4d9c3df8b9c" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setName</name></member>
      <member refid="classcsl_1_1AbstractParent_1a79ad3927cad378f4e83055533ea20d46" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setSymmetry</name></member>
      <member refid="classcsl_1_1AbstractParent_1a5dd9dd3730422db222a395139786ea4b" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setTensor</name></member>
      <member refid="classcsl_1_1AbstractParent_1a3ec47d729864161605c7cbcc6f726f59" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>setTrace</name></member>
      <member refid="classcsl_1_1AbstractParent_1a74bbbbc2b43939c166feb7d8e7cc8537" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>toggleEvaluation</name></member>
      <member refid="classcsl_1_1AbstractParent_1a6d13d559a8d68562b5827073b31b3c1a" prot="public" virt="virtual"><scope>csl::AbstractParent</scope><name>~AbstractParent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
