<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="simplifiedvertex_8h" kind="file" language="C++">
    <compoundname>simplifiedvertex.h</compoundname>
    <includes refid="ufosmdata_8h" local="yes">ufosmdata.h</includes>
    <includes refid="vertexinfo_8h" local="yes">vertexinfo.h</includes>
    <includes local="no">marty.h</includes>
    <includedby refid="marty-ufo_8h" local="yes">src/marty/ufo/marty-ufo.h</includedby>
    <includedby refid="simplifiedvertex_8cpp" local="yes">src/marty/ufo/simplifiedvertex.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>charge.h</label>
        <link refid="charge_8h"/>
      </node>
      <node id="6">
        <label>colorcoupling.h</label>
        <link refid="colorcoupling_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>diracmatrix.h</label>
        <link refid="diracmatrix_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>field.h</label>
        <link refid="field_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lorentzcoupling.h</label>
        <link refid="lorentzcoupling_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/marty/ufo/simplifiedvertex.h</label>
        <link refid="simplifiedvertex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ufosmdata.h</label>
        <link refid="ufosmdata_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>vertexinfo.h</label>
        <link refid="vertexinfo_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>marty.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/marty/ufo/marty-ufo.h</label>
        <link refid="marty-ufo_8h"/>
      </node>
      <node id="1">
        <label>src/marty/ufo/simplifiedvertex.h</label>
        <link refid="simplifiedvertex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmty_1_1experimental_1_1ufo_1_1VertexMessenger" prot="public">mty::experimental::ufo::VertexMessenger</innerclass>
    <innernamespace refid="namespacemty">mty</innernamespace>
    <innernamespace refid="namespacemty_1_1experimental">mty::experimental</innernamespace>
    <innernamespace refid="namespacemty_1_1experimental_1_1ufo">mty::experimental::ufo</innernamespace>
    <briefdescription>
<para>Contains the main interface to obtain simplified vertices, in <ref refid="structmty_1_1experimental_1_1ufo_1_1Vertex" kindref="compound">mty::experimental::ufo::Vertex</ref> objects, from a MARTY model. </para>
    </briefdescription>
    <detaileddescription>
<para>Simplified vertices can be obtained in a very simple way using this package. From a MARTY model <computeroutput>model</computeroutput>, it is possible to derive the simple vertices simply typing: <programlisting><codeline><highlight class="normal">std::vector&lt;mty::experimental::ufo::Vertex&gt;<sp/>vertices</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacemty_1_1experimental_1_1ufo_1a33c9fb37d659970060f4bad95bdb487d" kindref="member">mty::experimental::ufo::obtainSimplifiedVertices</ref>(model);</highlight></codeline>
</programlisting> Once the vertices are obtained, it is possible to loop over them using the <computeroutput>std::vector</computeroutput> features.</para>
<para>In case the SM conventions of the model, required to generate a UFO output, are not recognized by the <ref refid="namespacemty_1_1experimental_1_1ufo_1a33c9fb37d659970060f4bad95bdb487d" kindref="member">mty::experimental::ufo::obtainSimplifiedVertices()</ref> method, it is possible to specify custom conventions using the <ref refid="structmty_1_1experimental_1_1ufo_1_1SMData" kindref="compound">mty::experimental::ufo::SMData</ref> class. By defining an object of type SMData, filling the conventions for SM objects and giving it to the main method, the SM-like features of the model will be recognized and the UFO formatting successful. For example, if the model in use defines an electromagnetic constant <computeroutput>cc_em</computeroutput> that is not standard, one can define it with: <programlisting><codeline><highlight class="normal">SMData<sp/>smData;</highlight></codeline>
<codeline><highlight class="normal">smData.emCouplingName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cc_em&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> Then, the main method can be called giving the <computeroutput>smData</computeroutput> object as a parameter: <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertices<sp/>=<sp/><ref refid="namespacemty_1_1experimental_1_1ufo_1a33c9fb37d659970060f4bad95bdb487d" kindref="member">mty::experimental::ufo::obtainSimplifiedVertices</ref>(model,<sp/>smData);</highlight></codeline>
</programlisting> We used above the <computeroutput>auto</computeroutput> type deduction.</para>
<para><simplesect kind="see"><para><ref refid="structmty_1_1experimental_1_1ufo_1_1Vertex" kindref="compound">mty::experimental::ufo::Vertex</ref>, <ref refid="structmty_1_1experimental_1_1ufo_1_1SMData" kindref="compound">mty::experimental::ufo::SMData</ref>, <ref refid="namespacemty_1_1experimental_1_1ufo_1a33c9fb37d659970060f4bad95bdb487d" kindref="member">mty::experimental::ufo::obtainSimplifiedVertices()</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ufosmdata_8h" kindref="compound">ufosmdata.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vertexinfo_8h" kindref="compound">vertexinfo.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;marty.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemty_1_1experimental_1_1ufo" kindref="compound">mty::experimental::ufo</ref></highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>struct<sp/>used<sp/>as<sp/>parameter<sp/>in<sp/>heper<sp/>functions</highlight></codeline>
<codeline lineno="50"></codeline>
<codeline lineno="57" refid="structmty_1_1experimental_1_1ufo_1_1VertexMessenger" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmty_1_1experimental_1_1ufo_1_1VertexMessenger" kindref="compound">VertexMessenger</ref></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmty_1_1experimental_1_1ufo_1_1Vertex" kindref="compound">Vertex</ref><sp/>vertex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vertex<sp/>modified<sp/>during<sp/>the<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmty_1_1FeynmanRule" kindref="compound">mty::FeynmanRule</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rule;<sp/></highlight><highlight class="comment">//<sp/>Feynman<sp/>rule<sp/>that<sp/>is<sp/>translated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref><sp/>&amp;model;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parent<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmty_1_1experimental_1_1ufo_1_1SMData" kindref="compound">SMData</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;smData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SM<sp/>data<sp/>for<sp/>conventions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;csl::Space<sp/>const<sp/>*&gt;<sp/>colorSpaces<sp/>=<sp/>{};<sp/></highlight><highlight class="comment">//<sp/>list<sp/>of<sp/>color<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Main<sp/>functions</highlight></codeline>
<codeline lineno="70"></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Vertex&gt;<sp/><ref refid="namespacemty_1_1experimental_1_1ufo_1a33c9fb37d659970060f4bad95bdb487d" kindref="member">obtainSimplifiedVertices</ref>(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref><sp/>&amp;model,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmty_1_1experimental_1_1ufo_1_1SMData" kindref="compound">SMData</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;smData<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Vertex&gt;<sp/>convertFeynmanRule(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmty_1_1FeynmanRule" kindref="compound">mty::FeynmanRule</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rule,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref><sp/>&amp;model,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SMData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;smData);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Vertex&gt;<sp/><ref refid="namespacemty_1_1experimental_1_1ufo_1a19b56a5c5904bef0d3bdf32f49696588" kindref="member">convertFeynmanRules</ref>(</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;mty::FeynmanRule&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rules,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref><sp/>&amp;model,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SMData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;smData);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mty::experimental::ufo</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/marty/ufo/simplifiedvertex.h"/>
  </compounddef>
</doxygen>
