<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1Comparator" kind="class" language="C++" prot="public">
    <compoundname>csl::Comparator</compoundname>
    <includes refid="comparison_8h" local="no">comparison.h</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcsl_1_1Comparator_1acaeff917466cc0072f0ea23431b4c3ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Arbitrary</definition>
        <argsstring></argsstring>
        <name>Arbitrary</name>
        <qualifiedname>csl::Comparator::Arbitrary</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="111" column="18" bodyfile="src/csl/comparison.h" bodystart="111" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classcsl_1_1Comparator_1a5ddaac1ebf244586939fbe6a767b7ada" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool csl::Comparator::freeIndexComparisonActive</definition>
        <argsstring></argsstring>
        <name>freeIndexComparisonActive</name>
        <qualifiedname>csl::Comparator::freeIndexComparisonActive</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Tells if the index comparison is active or not. \detail If true, two different indices (even free indices) can be equal. This is useful for comparing structures, independently of the names of the indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="206" column="17" bodyfile="src/csl/comparison.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Comparator_1a90e1a76a1117bdd19d16e536a952656b" prot="public" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>, <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>std::map&lt; Index, Index &gt; csl::Comparator::indexCorrespondance</definition>
        <argsstring></argsstring>
        <name>indexCorrespondance</name>
        <qualifiedname>csl::Comparator::indexCorrespondance</qualifiedname>
        <initializer>= std::map&lt;<ref refid="classcsl_1_1Index" kindref="compound">Index</ref>, <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>&gt;()</initializer>
        <briefdescription>
<para>Correspondance between indices during the comparison. Allows to keep track of all index comparisons we have done when the indices were not equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="212" column="21" bodyfile="src/csl/comparison.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Comparator_1aaf045b8b220a053f885b6d7576566074" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool csl::Comparator::dummyVecIntComparisonActive</definition>
        <argsstring></argsstring>
        <name>dummyVecIntComparisonActive</name>
        <qualifiedname>csl::Comparator::dummyVecIntComparisonActive</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="214" column="17" bodyfile="src/csl/comparison.h" bodystart="214" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcsl_1_1Comparator_1acee3a8bf8769d6b78f74378663bf7b4e" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool csl::Comparator::dummyComparisonActive</definition>
        <argsstring></argsstring>
        <name>dummyComparisonActive</name>
        <qualifiedname>csl::Comparator::dummyComparisonActive</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Tells if the comparison with arbitries is active or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="219" column="17" bodyfile="src/csl/comparison.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Comparator_1abe6b7bf83507d4ef9b41a9c7a80508c0" prot="private" static="yes" mutable="no">
        <type>std::map&lt; int, <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>std::map&lt; int, Expr &gt; csl::Comparator::arbitrary</definition>
        <argsstring></argsstring>
        <name>arbitrary</name>
        <qualifiedname>csl::Comparator::arbitrary</qualifiedname>
        <initializer>= std::map&lt;int, <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref>&gt;()</initializer>
        <briefdescription>
<para>Maps an integer to the corresponding <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref>. Allows to get quickly the <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> object that has a certain integer as number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="224" column="21" bodyfile="src/csl/comparison.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Comparator_1ad4b531e339cc3fd2d18421eb5fda8f32" prot="private" static="yes" mutable="no">
        <type>std::map&lt; int, <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>std::map&lt; int, Expr &gt; csl::Comparator::correspondance</definition>
        <argsstring></argsstring>
        <name>correspondance</name>
        <qualifiedname>csl::Comparator::correspondance</qualifiedname>
        <initializer>= std::map&lt;int, <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref>&gt;()</initializer>
        <briefdescription>
<para>Map from integers (number attribute of arbitraries) to expressions. </para>
        </briefdescription>
        <detaileddescription>
<para>When an <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> is successfully compared to an expression, an element is added to this map and it will then only answer true when compared to this expression. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="232" column="21" bodyfile="src/csl/comparison.h" bodystart="232" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcsl_1_1Comparator_1a1767b748a3402f58de49260d129ca3fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::Comparator::dummy</definition>
        <argsstring>(int n, csl::Type type=csl::Type::NoType)</argsstring>
        <name>dummy</name>
        <qualifiedname>csl::Comparator::dummy</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312" kindref="member">csl::Type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312a9080fd7a5f0af44b585bb21b62d8b283" kindref="member">csl::Type::NoType</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate and returns an <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the generated <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the generated <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The generated <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="120" column="17" bodyfile="src/csl/comparison.cpp" bodystart="98" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a01941d1944ba76ba9e64a96790691a95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Comparator::dummyComparison</definition>
        <argsstring>(Expr_info expr, Expr_info dummyExpr)</argsstring>
        <name>dummyComparison</name>
        <qualifiedname>csl::Comparator::dummyComparison</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>dummyExpr</declname>
        </param>
        <briefdescription>
<para>Compares a regular expression to an expression containing <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Regular expression, in the form of a **const Abstract*** so that it can be called by an object with itself in parameter in a const method. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dummyExpr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression containing <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> objects. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the comparison. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="130" column="17" bodyfile="src/csl/comparison.cpp" bodystart="188" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a7ee1b30db063749ad8594878c95c4a5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Comparator::dummyComparison</definition>
        <argsstring>(Expr const &amp;expr, Expr const &amp;dummyExpr)</argsstring>
        <name>dummyComparison</name>
        <qualifiedname>csl::Comparator::dummyComparison</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> const &amp;</type>
          <declname>dummyExpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="132" column="17" bodyfile="src/csl/comparison.cpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1aedfb3783a33c7d40d97041dbf1767984" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Comparator::dummyVecIntComparison</definition>
        <argsstring>(Expr_info A, Expr_info B)</argsstring>
        <name>dummyVecIntComparison</name>
        <qualifiedname>csl::Comparator::dummyVecIntComparison</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="134" column="17" bodyfile="src/csl/comparison.cpp" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a8463dcff2b3947a8bef04b967559de10" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool csl::Comparator::getFreeIndexComparisonActive</definition>
        <argsstring>()</argsstring>
        <name>getFreeIndexComparisonActive</name>
        <qualifiedname>csl::Comparator::getFreeIndexComparisonActive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>freeIndexComparisonActive. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="138" column="17" bodyfile="src/csl/comparison.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a392c2cce2c3b03ecc841acc74a6659c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Comparator::setFreeIndexComparisonActive</definition>
        <argsstring>(bool t_activ)</argsstring>
        <name>setFreeIndexComparisonActive</name>
        <qualifiedname>csl::Comparator::setFreeIndexComparisonActive</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_activ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="143" column="17" bodyfile="src/csl/comparison.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a8151fd299b266af1ff1024509bfca08d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string csl::Comparator::dummyName</definition>
        <argsstring>()</argsstring>
        <name>dummyName</name>
        <qualifiedname>csl::Comparator::dummyName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The string that is given as a name to all <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> objects in the program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="148" column="24" bodyfile="src/csl/comparison.cpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1ab82c75000df87b5832f77e034d064656" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Comparator::freeIndexComparison</definition>
        <argsstring>(const Abstract *A, Expr_info B)</argsstring>
        <name>freeIndexComparison</name>
        <qualifiedname>csl::Comparator::freeIndexComparison</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Compares two expressions considering that the index structures must match no matter the names of free indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First expression in the form of a **const Abstract*** so that it can be called by an object with itself in parameter in a const method. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="157" column="17" bodyfile="src/csl/comparison.cpp" bodystart="212" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a8f2adfad8d2b38800921bacf46f149a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Comparator::compare</definition>
        <argsstring>(const Index &amp;A, const Index &amp;B)</argsstring>
        <name>compare</name>
        <qualifiedname>csl::Comparator::compare</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Compares two indices. Depends on the bare comparison and the possible maps existing for the two indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the comparison. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="165" column="17" bodyfile="src/csl/comparison.cpp" bodystart="141" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a1a0c1e04a6e774f555bb0477f94378c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Comparator::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>csl::Comparator::clear</qualifiedname>
        <briefdescription>
<para>Clears all maps and correspondances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="169" column="17" bodyfile="src/csl/comparison.cpp" bodystart="222" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a735dcce08cfddb3c3a165457febd5b2f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool csl::Comparator::getDummyComparisonActive</definition>
        <argsstring>()</argsstring>
        <name>getDummyComparisonActive</name>
        <qualifiedname>csl::Comparator::getDummyComparisonActive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>dummyComparisonActive. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="173" column="17" bodyfile="src/csl/comparison.h" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1a2cc7a2e667aaba8e97f830a9014e9fc2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool csl::Comparator::getDummyVecIntComparisonActive</definition>
        <argsstring>()</argsstring>
        <name>getDummyVecIntComparisonActive</name>
        <qualifiedname>csl::Comparator::getDummyVecIntComparisonActive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="178" column="17" bodyfile="src/csl/comparison.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1acf17ebe8d6f379905a0fe7b6374da7c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Comparator::setDummyComparisonActive</definition>
        <argsstring>(bool state)</argsstring>
        <name>setDummyComparisonActive</name>
        <qualifiedname>csl::Comparator::setDummyComparisonActive</qualifiedname>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean that will replace dummyComparisonActive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="185" column="17" bodyfile="src/csl/comparison.cpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Comparator_1ad1e7c30d40a4271f5f9b1c3022d3cfb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Comparator::setDummyVecIntComparisonActive</definition>
        <argsstring>(bool state)</argsstring>
        <name>setDummyVecIntComparisonActive</name>
        <qualifiedname>csl::Comparator::setDummyVecIntComparisonActive</qualifiedname>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="187" column="17" bodyfile="src/csl/comparison.cpp" bodystart="237" bodyend="240"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classcsl_1_1Comparator_1a9011ba044a40844069899da99020dd19" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Comparator::compare</definition>
        <argsstring>(Expr_info expr, Expr_info dummy)</argsstring>
        <name>compare</name>
        <qualifiedname>csl::Comparator::compare</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>dummy</declname>
        </param>
        <briefdescription>
<para>Comapres <bold>expr</bold> and <bold>dummy</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Regular expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dummy</parametername>
</parameternamelist>
<parameterdescription>
<para>constExpr because this function is called by <bold>itself</bold> that send a shared_from_this() to the function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the comparison. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="196" column="17" bodyfile="src/csl/comparison.cpp" bodystart="112" bodyend="139"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Bunch of functions that allow to do comparisons with <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> expressions or expressions with dummy objects (summed indices or variables). \detail This is a static class, in the sense that all methods and attributes are static i.e. independant of any isntance of the class. There is then no <ref refid="classcsl_1_1Comparator" kindref="compound">Comparator</ref> object constructed, the class just allows to centralize all variables and functions useful for those comparisons. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/csl/comparison.h" line="109" column="1" bodyfile="src/csl/comparison.h" bodystart="109" bodyend="233"/>
    <listofallmembers>
      <member refid="classcsl_1_1Comparator_1acaeff917466cc0072f0ea23431b4c3ee" prot="private" virt="non-virtual"><scope>csl::Comparator</scope><name>Arbitrary</name></member>
      <member refid="classcsl_1_1Comparator_1abe6b7bf83507d4ef9b41a9c7a80508c0" prot="private" virt="non-virtual"><scope>csl::Comparator</scope><name>arbitrary</name></member>
      <member refid="classcsl_1_1Comparator_1a1a0c1e04a6e774f555bb0477f94378c4" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>clear</name></member>
      <member refid="classcsl_1_1Comparator_1a8f2adfad8d2b38800921bacf46f149a2" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>compare</name></member>
      <member refid="classcsl_1_1Comparator_1a9011ba044a40844069899da99020dd19" prot="private" virt="non-virtual"><scope>csl::Comparator</scope><name>compare</name></member>
      <member refid="classcsl_1_1Comparator_1ad4b531e339cc3fd2d18421eb5fda8f32" prot="private" virt="non-virtual"><scope>csl::Comparator</scope><name>correspondance</name></member>
      <member refid="classcsl_1_1Comparator_1a1767b748a3402f58de49260d129ca3fb" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>dummy</name></member>
      <member refid="classcsl_1_1Comparator_1a01941d1944ba76ba9e64a96790691a95" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>dummyComparison</name></member>
      <member refid="classcsl_1_1Comparator_1a7ee1b30db063749ad8594878c95c4a5d" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>dummyComparison</name></member>
      <member refid="classcsl_1_1Comparator_1acee3a8bf8769d6b78f74378663bf7b4e" prot="private" virt="non-virtual"><scope>csl::Comparator</scope><name>dummyComparisonActive</name></member>
      <member refid="classcsl_1_1Comparator_1a8151fd299b266af1ff1024509bfca08d" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>dummyName</name></member>
      <member refid="classcsl_1_1Comparator_1aedfb3783a33c7d40d97041dbf1767984" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>dummyVecIntComparison</name></member>
      <member refid="classcsl_1_1Comparator_1aaf045b8b220a053f885b6d7576566074" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>dummyVecIntComparisonActive</name></member>
      <member refid="classcsl_1_1Comparator_1ab82c75000df87b5832f77e034d064656" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>freeIndexComparison</name></member>
      <member refid="classcsl_1_1Comparator_1a5ddaac1ebf244586939fbe6a767b7ada" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>freeIndexComparisonActive</name></member>
      <member refid="classcsl_1_1Comparator_1a735dcce08cfddb3c3a165457febd5b2f" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>getDummyComparisonActive</name></member>
      <member refid="classcsl_1_1Comparator_1a2cc7a2e667aaba8e97f830a9014e9fc2" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>getDummyVecIntComparisonActive</name></member>
      <member refid="classcsl_1_1Comparator_1a8463dcff2b3947a8bef04b967559de10" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>getFreeIndexComparisonActive</name></member>
      <member refid="classcsl_1_1Comparator_1a90e1a76a1117bdd19d16e536a952656b" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>indexCorrespondance</name></member>
      <member refid="classcsl_1_1Comparator_1acf17ebe8d6f379905a0fe7b6374da7c7" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>setDummyComparisonActive</name></member>
      <member refid="classcsl_1_1Comparator_1ad1e7c30d40a4271f5f9b1c3022d3cfb0" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>setDummyVecIntComparisonActive</name></member>
      <member refid="classcsl_1_1Comparator_1a392c2cce2c3b03ecc841acc74a6659c5" prot="public" virt="non-virtual"><scope>csl::Comparator</scope><name>setFreeIndexComparisonActive</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
