<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcounter" kind="class" language="C++" prot="public">
    <compoundname>counter</compoundname>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classcounter_1ac238d81994ff8a9888964ca82e7322c0" prot="public" static="no">
        <type><ref refid="classcounter__iterator" kindref="compound">counter_iterator</ref>&lt; T &gt;</type>
        <definition>using counter&lt; T &gt;::iterator =  counter_iterator&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>counter::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="96" column="5" bodyfile="src/csl/counter.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classcounter_1ae6361bdbbafb9334a7cc51d4faea10ae" prot="public" static="no">
        <type><ref refid="classcounter__iterator" kindref="compound">counter_iterator</ref>&lt; const T &gt;</type>
        <definition>using counter&lt; T &gt;::const_iterator =  counter_iterator&lt;const T&gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>counter::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="97" column="5" bodyfile="src/csl/counter.h" bodystart="97" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcounter_1a0167de86d48f5f8d5fe7072e9837688a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class counter_iterator&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>counter_iterator&lt; T &gt;</name>
        <qualifiedname>counter::counter_iterator&lt; T &gt;</qualifiedname>
        <param>
          <type><ref refid="classcounter__iterator" kindref="compound">counter_iterator</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="84" column="10" bodyfile="src/csl/counter.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classcounter_1a02ef2b3c387b81e953d747663f8bc832" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, counter const &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>counter::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classcounter" kindref="compound">counter</ref> const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="249" column="12" bodyfile="src/csl/counter.h" bodystart="249" bodyend="255"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcounter_1ad82d6e1a34cbbd23ca10d5a7b38aa571" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>char</type>
        <definition>char counter&lt; T &gt;::separator</definition>
        <argsstring></argsstring>
        <name>separator</name>
        <qualifiedname>counter::separator</qualifiedname>
        <initializer>= &apos;\&apos;&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="100" column="31" bodyfile="src/csl/counter.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcounter_1ae5ecd16be95fa18c8b626464e8e60ff7" prot="private" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="classcounter" kindref="compound">counter</ref> *</type>
        <definition>counter* counter&lt; T &gt;::end_value</definition>
        <argsstring></argsstring>
        <name>end_value</name>
        <qualifiedname>counter::end_value</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="101" column="30" bodyfile="src/csl/counter.h" bodystart="101" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcounter_1a3012d4b385ab9dc209ff780bc59cdf92" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t counter&lt; T &gt;::max</definition>
        <argsstring></argsstring>
        <name>max</name>
        <qualifiedname>counter::max</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="103" column="14" bodyfile="src/csl/counter.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcounter_1aa45d12cca251b4f76f9c8225e9deb6e1" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T counter&lt; T &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <qualifiedname>counter::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="104" column="14" bodyfile="src/csl/counter.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcounter_1aa3fd8f34ae5e3d8d41c5715db4675c9b" prot="private" static="no" mutable="no">
        <type><ref refid="classcounter" kindref="compound">counter</ref> *</type>
        <definition>counter* counter&lt; T &gt;::next</definition>
        <argsstring></argsstring>
        <name>next</name>
        <qualifiedname>counter::next</qualifiedname>
        <initializer>= end_value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="105" column="13" bodyfile="src/csl/counter.h" bodystart="105" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcounter_1af5263bd92c0db1232e0f648cda63e3a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>counter&lt; T &gt;::counter</definition>
        <argsstring>()</argsstring>
        <name>counter</name>
        <qualifiedname>counter::counter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="108" column="5" bodyfile="src/csl/counter.h" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a7ec2141c4b7d9a5a430a02447e092748" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>counter&lt; T &gt;::counter</definition>
        <argsstring>(size_t t_max)</argsstring>
        <name>counter</name>
        <qualifiedname>counter::counter</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>t_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="112" column="5" bodyfile="src/csl/counter.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a419003a6d5e30775d473cfb10e63e20c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>counter&lt; T &gt;::counter</definition>
        <argsstring>(Iterator iter, Iterator end)</argsstring>
        <name>counter</name>
        <qualifiedname>counter::counter</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="117" column="5" bodyfile="src/csl/counter.h" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1ac224ad5e95808d7d5a26b951fdba4aaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterable</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>counter&lt; T &gt;::counter</definition>
        <argsstring>(Iterable const &amp;containor)</argsstring>
        <name>counter</name>
        <qualifiedname>counter::counter</qualifiedname>
        <param>
          <type>Iterable const &amp;</type>
          <declname>containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="125" column="5" bodyfile="src/csl/counter.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a7a2b79970a2c124727286fcf658248d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>counter&lt; T &gt;::counter</definition>
        <argsstring>(const counter &amp;other)</argsstring>
        <name>counter</name>
        <qualifiedname>counter::counter</qualifiedname>
        <param>
          <type>const <ref refid="classcounter" kindref="compound">counter</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="130" column="5" bodyfile="src/csl/counter.h" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a0be9493d69733df6a57fbcfcae8a83cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcounter" kindref="compound">counter</ref> &amp;</type>
        <definition>counter &amp; counter&lt; T &gt;::operator=</definition>
        <argsstring>(counter const &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>counter::operator=</qualifiedname>
        <param>
          <type><ref refid="classcounter" kindref="compound">counter</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="136" column="13" bodyfile="src/csl/counter.h" bodystart="136" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1ab5e5a05e558b2dc2617c95c2115c166a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>counter&lt; T &gt;::counter</definition>
        <argsstring>(counter &amp;&amp;other)=default</argsstring>
        <name>counter</name>
        <qualifiedname>counter::counter</qualifiedname>
        <param>
          <type><ref refid="classcounter" kindref="compound">counter</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="148" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1aba17944b237ef3ba2f26b0ee77658233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcounter" kindref="compound">counter</ref> &amp;</type>
        <definition>counter &amp; counter&lt; T &gt;::operator=</definition>
        <argsstring>(counter &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>counter::operator=</qualifiedname>
        <param>
          <type><ref refid="classcounter" kindref="compound">counter</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="149" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a028574bfc788534ae988169c8965a776" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>counter&lt; T &gt;::~counter</definition>
        <argsstring>()</argsstring>
        <name>~counter</name>
        <qualifiedname>counter::~counter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="151" column="5" bodyfile="src/csl/counter.h" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a8df668bfaa189b7928e71e71a32224dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t counter&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>counter::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="157" column="12" bodyfile="src/csl/counter.h" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a93f151ae2b45e68add4ffbf5aa640f14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcounter__iterator" kindref="compound">iterator</ref></type>
        <definition>iterator counter&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>counter::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="162" column="14" bodyfile="src/csl/counter.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a0549aeffd8374fc0cdf6354bcf884b8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcounter__iterator" kindref="compound">iterator</ref></type>
        <definition>iterator counter&lt; T &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>counter::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="167" column="14" bodyfile="src/csl/counter.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a55ef86eef30ffd7705bd66080664915c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcounter__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator counter&lt; T &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>counter::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="172" column="20" bodyfile="src/csl/counter.h" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1adb173fad3c7802a5c7b6e82ec5b0f8af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcounter__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator counter&lt; T &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>counter::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="177" column="20" bodyfile="src/csl/counter.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a3d12a54fb7f3c73c2ca21a841f92472b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void counter&lt; T &gt;::restart</definition>
        <argsstring>()</argsstring>
        <name>restart</name>
        <qualifiedname>counter::restart</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="182" column="10" bodyfile="src/csl/counter.h" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a85b9d590676aea48afffde99ed0ba560" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void counter&lt; T &gt;::getCount</definition>
        <argsstring>(Iterator iter) const</argsstring>
        <name>getCount</name>
        <qualifiedname>counter::getCount</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="189" column="10" bodyfile="src/csl/counter.h" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a5296828c97d139f55661068698bf616b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void counter&lt; T &gt;::setCount</definition>
        <argsstring>(Iterator iter)</argsstring>
        <name>setCount</name>
        <qualifiedname>counter::setCount</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="197" column="10" bodyfile="src/csl/counter.h" bodystart="197" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a7b86ae9db626f1abb202dcfb48503b22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void counter&lt; T &gt;::push_back</definition>
        <argsstring>(T max, T value)</argsstring>
        <name>push_back</name>
        <qualifiedname>counter::push_back</qualifiedname>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="204" column="10" bodyfile="src/csl/counter.h" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1ac085b31b4cb616e24a04406038ea8306" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcounter" kindref="compound">counter</ref> &amp;</type>
        <definition>counter &amp; counter&lt; T &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>counter::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="212" column="13" bodyfile="src/csl/counter.h" bodystart="212" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1af1f79270468476833ae1b6d69f31ddd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcounter" kindref="compound">counter</ref></type>
        <definition>counter counter&lt; T &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>counter::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="223" column="13" bodyfile="src/csl/counter.h" bodystart="223" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1aa8491ef224fa5dc4af66ee2ccdc090d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; counter&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>operator[]</name>
        <qualifiedname>counter::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="230" column="7" bodyfile="src/csl/counter.h" bodystart="230" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a400fccf3e13d632de46c2cdc10d9e2d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T counter&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t pos) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>counter::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="237" column="7" bodyfile="src/csl/counter.h" bodystart="237" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classcounter_1a48fadfa71c7146fe688c0e0a91d4b594" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>counter&lt; T &gt;::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <qualifiedname>counter::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/counter.h" line="244" column="5" bodyfile="src/csl/counter.h" bodystart="244" bodyend="247"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/csl/counter.h" line="91" column="1" bodyfile="src/csl/counter.h" bodystart="91" bodyend="256"/>
    <listofallmembers>
      <member refid="classcounter_1a93f151ae2b45e68add4ffbf5aa640f14" prot="public" virt="non-virtual"><scope>counter</scope><name>begin</name></member>
      <member refid="classcounter_1a55ef86eef30ffd7705bd66080664915c" prot="public" virt="non-virtual"><scope>counter</scope><name>begin</name></member>
      <member refid="classcounter_1ae6361bdbbafb9334a7cc51d4faea10ae" prot="public" virt="non-virtual"><scope>counter</scope><name>const_iterator</name></member>
      <member refid="classcounter_1af5263bd92c0db1232e0f648cda63e3a5" prot="public" virt="non-virtual"><scope>counter</scope><name>counter</name></member>
      <member refid="classcounter_1a7ec2141c4b7d9a5a430a02447e092748" prot="public" virt="non-virtual"><scope>counter</scope><name>counter</name></member>
      <member refid="classcounter_1a419003a6d5e30775d473cfb10e63e20c" prot="public" virt="non-virtual"><scope>counter</scope><name>counter</name></member>
      <member refid="classcounter_1ac224ad5e95808d7d5a26b951fdba4aaa" prot="public" virt="non-virtual"><scope>counter</scope><name>counter</name></member>
      <member refid="classcounter_1a7a2b79970a2c124727286fcf658248d5" prot="public" virt="non-virtual"><scope>counter</scope><name>counter</name></member>
      <member refid="classcounter_1ab5e5a05e558b2dc2617c95c2115c166a" prot="public" virt="non-virtual"><scope>counter</scope><name>counter</name></member>
      <member refid="classcounter_1a0167de86d48f5f8d5fe7072e9837688a" prot="private" virt="non-virtual"><scope>counter</scope><name>counter_iterator&lt; T &gt;</name></member>
      <member refid="classcounter_1a0549aeffd8374fc0cdf6354bcf884b8a" prot="public" virt="non-virtual"><scope>counter</scope><name>end</name></member>
      <member refid="classcounter_1adb173fad3c7802a5c7b6e82ec5b0f8af" prot="public" virt="non-virtual"><scope>counter</scope><name>end</name></member>
      <member refid="classcounter_1ae5ecd16be95fa18c8b626464e8e60ff7" prot="private" virt="non-virtual"><scope>counter</scope><name>end_value</name></member>
      <member refid="classcounter_1a85b9d590676aea48afffde99ed0ba560" prot="public" virt="non-virtual"><scope>counter</scope><name>getCount</name></member>
      <member refid="classcounter_1ac238d81994ff8a9888964ca82e7322c0" prot="public" virt="non-virtual"><scope>counter</scope><name>iterator</name></member>
      <member refid="classcounter_1a3012d4b385ab9dc209ff780bc59cdf92" prot="private" virt="non-virtual"><scope>counter</scope><name>max</name></member>
      <member refid="classcounter_1aa3fd8f34ae5e3d8d41c5715db4675c9b" prot="private" virt="non-virtual"><scope>counter</scope><name>next</name></member>
      <member refid="classcounter_1a48fadfa71c7146fe688c0e0a91d4b594" prot="public" virt="non-virtual"><scope>counter</scope><name>operator bool</name></member>
      <member refid="classcounter_1ac085b31b4cb616e24a04406038ea8306" prot="public" virt="non-virtual"><scope>counter</scope><name>operator++</name></member>
      <member refid="classcounter_1af1f79270468476833ae1b6d69f31ddd8" prot="public" virt="non-virtual"><scope>counter</scope><name>operator++</name></member>
      <member refid="classcounter_1a02ef2b3c387b81e953d747663f8bc832" prot="public" virt="non-virtual"><scope>counter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classcounter_1a0be9493d69733df6a57fbcfcae8a83cd" prot="public" virt="non-virtual"><scope>counter</scope><name>operator=</name></member>
      <member refid="classcounter_1aba17944b237ef3ba2f26b0ee77658233" prot="public" virt="non-virtual"><scope>counter</scope><name>operator=</name></member>
      <member refid="classcounter_1aa8491ef224fa5dc4af66ee2ccdc090d7" prot="public" virt="non-virtual"><scope>counter</scope><name>operator[]</name></member>
      <member refid="classcounter_1a400fccf3e13d632de46c2cdc10d9e2d0" prot="public" virt="non-virtual"><scope>counter</scope><name>operator[]</name></member>
      <member refid="classcounter_1a7b86ae9db626f1abb202dcfb48503b22" prot="public" virt="non-virtual"><scope>counter</scope><name>push_back</name></member>
      <member refid="classcounter_1a3d12a54fb7f3c73c2ca21a841f92472b" prot="public" virt="non-virtual"><scope>counter</scope><name>restart</name></member>
      <member refid="classcounter_1ad82d6e1a34cbbd23ca10d5a7b38aa571" prot="private" virt="non-virtual"><scope>counter</scope><name>separator</name></member>
      <member refid="classcounter_1a5296828c97d139f55661068698bf616b" prot="public" virt="non-virtual"><scope>counter</scope><name>setCount</name></member>
      <member refid="classcounter_1a8df668bfaa189b7928e71e71a32224dd" prot="public" virt="non-virtual"><scope>counter</scope><name>size</name></member>
      <member refid="classcounter_1aa45d12cca251b4f76f9c8225e9deb6e1" prot="private" virt="non-virtual"><scope>counter</scope><name>value</name></member>
      <member refid="classcounter_1a028574bfc788534ae988169c8965a776" prot="public" virt="non-virtual"><scope>counter</scope><name>~counter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
