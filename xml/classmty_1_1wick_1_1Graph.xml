<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classmty_1_1wick_1_1Graph" kind="class" language="C++" prot="public">
    <compoundname>mty::wick::Graph</compoundname>
    <includes refid="graph_8h" local="no">graph.h</includes>
    <innerclass refid="structmty_1_1wick_1_1Graph_1_1LoopInformation" prot="public">mty::wick::Graph::LoopInformation</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmty_1_1wick_1_1Graph_1a273a3a5c2289e9ec6f78258fec1c628a" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, <ref refid="classmty_1_1ConjugationList" kindref="compound">ConjugationList</ref> &gt;</type>
        <definition>using mty::wick::Graph::Expr_type =  std::pair&lt;csl::Expr, ConjugationList&gt;</definition>
        <argsstring></argsstring>
        <name>Expr_type</name>
        <qualifiedname>mty::wick::Graph::Expr_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="401" column="5" bodyfile="src/marty/core/graph.h" bodystart="401" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1abe72cc05aad051d34f55f3b16d29127b" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Node&gt; &gt; mty::wick::Graph::sortedNodes</definition>
        <argsstring></argsstring>
        <name>sortedNodes</name>
        <qualifiedname>mty::wick::Graph::sortedNodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="711" column="25" bodyfile="src/marty/core/graph.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a3ddb9eec4c4f3ba0d08dfc691136e18c" prot="private" static="no" mutable="no">
        <type>long long int</type>
        <definition>long long int mty::wick::Graph::factor</definition>
        <argsstring></argsstring>
        <name>factor</name>
        <qualifiedname>mty::wick::Graph::factor</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Combinatorial factor of the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> in its current state of contraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="716" column="19" bodyfile="src/marty/core/graph.h" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a1b34fa70d1d4f574bfd5138547ccdf1b" prot="private" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::wick::Graph::exprFactor</definition>
        <argsstring></argsstring>
        <name>exprFactor</name>
        <qualifiedname>mty::wick::Graph::exprFactor</qualifiedname>
        <initializer>= CSL_1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="718" column="15" bodyfile="src/marty/core/graph.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1adb602ddc7bab403206ad4b59ead15880" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::wick::Graph::symmetrizeExternalLegs</definition>
        <argsstring></argsstring>
        <name>symmetrizeExternalLegs</name>
        <qualifiedname>mty::wick::Graph::symmetrizeExternalLegs</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="720" column="10" bodyfile="src/marty/core/graph.h" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a3362cd054c31497a4c6a9942e43f8092" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool mty::wick::Graph::fullyConnected</definition>
        <argsstring></argsstring>
        <name>fullyConnected</name>
        <qualifiedname>mty::wick::Graph::fullyConnected</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="722" column="18" bodyfile="src/marty/core/graph.h" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a3301da322da6a1920e610f8ede744ae3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::wick::Graph::ruleMode</definition>
        <argsstring></argsstring>
        <name>ruleMode</name>
        <qualifiedname>mty::wick::Graph::ruleMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="724" column="10" bodyfile="src/marty/core/graph.h" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a4efc72783ec84adb07488d6ff84312a1" prot="private" static="no" mutable="no">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; std::vector&lt; <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;Vertex&gt; &gt; mty::wick::Graph::init</definition>
        <argsstring></argsstring>
        <name>init</name>
        <qualifiedname>mty::wick::Graph::init</qualifiedname>
        <briefdescription>
<para>Initial order of vertices, in order to keep track of a possible sign of commutation between fields. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="730" column="21" bodyfile="src/marty/core/graph.h" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a0a237c292dde5590629385bf2a87694a" prot="private" static="no" mutable="no">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;mty::QuantumField&gt; &gt; mty::wick::Graph::initialOrder</definition>
        <argsstring></argsstring>
        <name>initialOrder</name>
        <qualifiedname>mty::wick::Graph::initialOrder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="732" column="21" bodyfile="src/marty/core/graph.h" bodystart="732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1aa67156a2301581bf6619f8f601dd31da" prot="private" static="no" mutable="no">
        <type><ref refid="classmty_1_1wick_1_1ConnectedComponent" kindref="compound">ConnectedComponent</ref></type>
        <definition>ConnectedComponent mty::wick::Graph::connectedCompo</definition>
        <argsstring></argsstring>
        <name>connectedCompo</name>
        <qualifiedname>mty::wick::Graph::connectedCompo</qualifiedname>
        <briefdescription>
<para>Connected component of the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> (contains all its vertices). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="737" column="24" bodyfile="src/marty/core/graph.h" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1ab87a1294c2806b16001b07e5f67a15b6" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &gt;</type>
        <definition>std::vector&lt;Vertex&gt; mty::wick::Graph::extVertex</definition>
        <argsstring></argsstring>
        <name>extVertex</name>
        <qualifiedname>mty::wick::Graph::extVertex</qualifiedname>
        <briefdescription>
<para>List of external vertices not already contracted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="742" column="17" bodyfile="src/marty/core/graph.h" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a22c56d6f421771a158eac0a6848025a0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &gt;</type>
        <definition>std::vector&lt;Vertex&gt; mty::wick::Graph::intVertex</definition>
        <argsstring></argsstring>
        <name>intVertex</name>
        <qualifiedname>mty::wick::Graph::intVertex</qualifiedname>
        <briefdescription>
<para>List of internal vertices not already contracted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="747" column="17" bodyfile="src/marty/core/graph.h" bodystart="747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a3ed42f7b7e6409ef3ea6810cc54f4582" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; mty::wick::Graph::independentVertices</definition>
        <argsstring></argsstring>
        <name>independentVertices</name>
        <qualifiedname>mty::wick::Graph::independentVertices</qualifiedname>
        <briefdescription>
<para>Sets of integers spotting the independant internal vertices in <bold>intVertex</bold>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="753" column="17" bodyfile="src/marty/core/graph.h" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a4a8fb3851220298556e7b93a4e2bcc5d" prot="private" static="no" mutable="no">
        <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">csl::ObjectSymmetry</ref>&lt; const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> * &gt;</type>
        <definition>csl::ObjectSymmetry&lt;const mty::QuantumField *&gt; mty::wick::Graph::symmetry</definition>
        <argsstring></argsstring>
        <name>symmetry</name>
        <qualifiedname>mty::wick::Graph::symmetry</qualifiedname>
        <initializer>= Id_Sym(const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="755" column="25" bodyfile="src/marty/core/graph.h" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1a6ca9c57bea150ede3c2338d592213108" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool mty::wick::Graph::fixedExpression</definition>
        <argsstring></argsstring>
        <name>fixedExpression</name>
        <qualifiedname>mty::wick::Graph::fixedExpression</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="758" column="18" bodyfile="src/marty/core/graph.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1Graph_1aef28e3eb370872dd40a5a6d9ac338290" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; Expr_type &gt;</type>
        <definition>std::vector&lt;Expr_type&gt; mty::wick::Graph::expression</definition>
        <argsstring></argsstring>
        <name>expression</name>
        <qualifiedname>mty::wick::Graph::expression</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="760" column="25" bodyfile="src/marty/core/graph.h" bodystart="760" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a4c7ce76cc066149d10e466f306c8c63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::wick::Graph::Graph</definition>
        <argsstring>()</argsstring>
        <name>Graph</name>
        <qualifiedname>mty::wick::Graph::Graph</qualifiedname>
        <briefdescription>
<para>Default constructor. Empty <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="406" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="478" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ae90eaed7c6ecfa7111cef2c45bebaf58" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::wick::Graph::Graph</definition>
        <argsstring>(const std::vector&lt; mty::QuantumField &gt; &amp;field, std::map&lt; csl::Tensor, size_t &gt; &amp;vertexIds, bool ruleMode)</argsstring>
        <name>Graph</name>
        <qualifiedname>mty::wick::Graph::Graph</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, size_t &gt; &amp;</type>
          <declname>vertexIds</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
        </param>
        <briefdescription>
<para>Constructor with one parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>std::vector of <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> on which apply contractions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="413" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ae743379c5e695b3035ae62e26192f4b9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::wick::Graph::Graph</definition>
        <argsstring>(const csl::Expr &amp;expr, std::map&lt; csl::Tensor, size_t &gt; &amp;vertexIds, bool ruleMode)</argsstring>
        <name>Graph</name>
        <qualifiedname>mty::wick::Graph::Graph</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, size_t &gt; &amp;</type>
          <declname>vertexIds</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
        </param>
        <briefdescription>
<para>Constructor with one parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>csl <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> converted into fields (convertExprToFields()). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="421" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a251d57ff2b76edde168b3037cc239284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::wick::Graph::Graph</definition>
        <argsstring>(Graph const &amp;other, std::vector&lt; std::shared_ptr&lt; Node &gt; &gt; const &amp;init)</argsstring>
        <name>Graph</name>
        <qualifiedname>mty::wick::Graph::Graph</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="425" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="539" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a8dda85a5d26e3b283e9452827a159019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mty::wick::Graph::~Graph</definition>
        <argsstring>()</argsstring>
        <name>~Graph</name>
        <qualifiedname>mty::wick::Graph::~Graph</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="430" column="5" bodyfile="src/marty/core/graph.h" bodystart="430" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ac15107b04c65154ebf8af20cc4e1e6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::wick::Graph::Graph</definition>
        <argsstring>(const Graph &amp;other)=default</argsstring>
        <name>Graph</name>
        <qualifiedname>mty::wick::Graph::Graph</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor = C++ default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="435" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a150f03d66a11d44f1640f443730128b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
        <definition>Graph &amp; mty::wick::Graph::operator=</definition>
        <argsstring>(const Graph &amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>mty::wick::Graph::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Overload of operator= : C++ default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="440" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ab141d1b9059e347a88b43df000de20e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref></type>
        <definition>Graph mty::wick::Graph::copy</definition>
        <argsstring>() const</argsstring>
        <name>copy</name>
        <qualifiedname>mty::wick::Graph::copy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="476" column="11" bodyfile="src/marty/core/graph.cpp" bodystart="554" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1abd2225cf8de7356993b5e1c739c173ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::wick::Graph::getFactor</definition>
        <argsstring>() const</argsstring>
        <name>getFactor</name>
        <qualifiedname>mty::wick::Graph::getFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>factor</bold>, the combiinatorial factor of the graph. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="481" column="9" bodyfile="src/marty/core/graph.cpp" bodystart="559" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a4fed503fbead4d1c835dfa02377a8bbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::wick::Graph::getTotalDegeneracyFactor</definition>
        <argsstring>() const</argsstring>
        <name>getTotalDegeneracyFactor</name>
        <qualifiedname>mty::wick::Graph::getTotalDegeneracyFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="483" column="9" bodyfile="src/marty/core/graph.cpp" bodystart="564" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ad9628c9318123b7d3fdbcc12cbcf5b5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &gt; const &amp;</type>
        <definition>vector&lt; Vertex &gt; const  &amp; mty::wick::Graph::getVertices</definition>
        <argsstring>() const</argsstring>
        <name>getVertices</name>
        <qualifiedname>mty::wick::Graph::getVertices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="485" column="23" bodyfile="src/marty/core/graph.cpp" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a58629a88bc207ced9a8a18dcee7a216a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::addFactor</definition>
        <argsstring>(int t_factor)</argsstring>
        <name>addFactor</name>
        <qualifiedname>mty::wick::Graph::addFactor</qualifiedname>
        <param>
          <type>int</type>
          <declname>t_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="487" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="577" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a13d549df02eb58c88ec5d4b9ad8a90fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::setFactor</definition>
        <argsstring>(int t_factor)</argsstring>
        <name>setFactor</name>
        <qualifiedname>mty::wick::Graph::setFactor</qualifiedname>
        <param>
          <type>int</type>
          <declname>t_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="489" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="582" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a010456166f7da6c1c3b481dfb077f4ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::setSymmetrizeExternalLegs</definition>
        <argsstring>(bool t_symmetrize)</argsstring>
        <name>setSymmetrizeExternalLegs</name>
        <qualifiedname>mty::wick::Graph::setSymmetrizeExternalLegs</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_symmetrize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="491" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a450c9f6839992a66dc08a6fcd33bb540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::multiply</definition>
        <argsstring>(int t_factor)</argsstring>
        <name>multiply</name>
        <qualifiedname>mty::wick::Graph::multiply</qualifiedname>
        <param>
          <type>int</type>
          <declname>t_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="493" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a296981278315813f73cd051ee3d516dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::multiply</definition>
        <argsstring>(csl::Expr const &amp;t_factor)</argsstring>
        <name>multiply</name>
        <qualifiedname>mty::wick::Graph::multiply</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>t_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="495" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="592" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a8f412e1b34c172520eed3c801034a106" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::isFullyConnected</definition>
        <argsstring>() const</argsstring>
        <name>isFullyConnected</name>
        <qualifiedname>mty::wick::Graph::isFullyConnected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> is fully connected (no free <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> left). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="501" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="665" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a9528f33f437578aa1f4fcef6836a1be8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::isPhysical</definition>
        <argsstring>() const</argsstring>
        <name>isPhysical</name>
        <qualifiedname>mty::wick::Graph::isPhysical</qualifiedname>
        <briefdescription>
<para>A <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> is considered physical if it is not (yet) fully connected or if it is composed of one unique connected component. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> is physical. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="509" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="677" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a328df9116ca4c10d547af8410de566cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>mty::wick::Graph::isValid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="511" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="774" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a7e5f20895c8f2e2ecba37ba1ba5d7b79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::wick::Graph::getNLoops</definition>
        <argsstring>() const</argsstring>
        <name>getNLoops</name>
        <qualifiedname>mty::wick::Graph::getNLoops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="513" column="9" bodyfile="src/marty/core/graph.cpp" bodystart="800" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a4f76681baaa6df89347109351f636126" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::wick::Graph::getFieldDimension</definition>
        <argsstring>() const</argsstring>
        <name>getFieldDimension</name>
        <qualifiedname>mty::wick::Graph::getFieldDimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The total number of fields in the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> (counting powers of fields). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="519" column="9" bodyfile="src/marty/core/graph.cpp" bodystart="807" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ab522495ccbe8e800402c53ca6d250756" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Expr_type &gt;</type>
        <definition>std::vector&lt; Graph::Expr_type &gt; mty::wick::Graph::getExpression</definition>
        <argsstring>() const</argsstring>
        <name>getExpression</name>
        <qualifiedname>mty::wick::Graph::getExpression</qualifiedname>
        <briefdescription>
<para>For a fully connected <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref>, return the associated csl <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, applying combinatorial factors and propagators of the contracted pairs of fields (see <ref refid="classmty_1_1QuantumField_1aa99e18f5bb2373f598632bf4437525b7" kindref="member">mty::QuantumField::getPropagator()</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The symbolic expression where contractions are replaced by propagators. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="528" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="889" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a18d2d4ab90cfec5c6b3f723611896a2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Expr_type &gt;</type>
        <definition>std::vector&lt; Graph::Expr_type &gt; mty::wick::Graph::getExpression</definition>
        <argsstring>(mty::FeynruleMomentum &amp;witness) const</argsstring>
        <name>getExpression</name>
        <qualifiedname>mty::wick::Graph::getExpression</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynruleMomentum" kindref="compound">mty::FeynruleMomentum</ref> &amp;</type>
          <declname>witness</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="530" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="896" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ae06c9060c99eadb61639ada447d16926" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> * &gt;</type>
        <definition>vector&lt; const QuantumField * &gt; mty::wick::Graph::getFields</definition>
        <argsstring>() const</argsstring>
        <name>getFields</name>
        <qualifiedname>mty::wick::Graph::getFields</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="532" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="922" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a37f404aed6daeeb3c7a220e8a2e470df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> * &gt;</type>
        <definition>std::vector&lt; const mty::QuantumField * &gt; mty::wick::Graph::getConnectedFieldsInVertex</definition>
        <argsstring>(const mty::QuantumField *init) const</argsstring>
        <name>getConnectedFieldsInVertex</name>
        <qualifiedname>mty::wick::Graph::getConnectedFieldsInVertex</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="535" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="934" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a5001ee559eac43fb3a05e3b42a233df4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
        <definition>const mty::QuantumField * mty::wick::Graph::getConnectedField</definition>
        <argsstring>(const mty::QuantumField *init) const</argsstring>
        <name>getConnectedField</name>
        <qualifiedname>mty::wick::Graph::getConnectedField</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="538" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="952" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a04523617770b08176eba5fcd786a03e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt; &amp;</type>
        <definition>vector&lt; std::shared_ptr&lt; Node &gt; &gt; &amp; mty::wick::Graph::getNodes</definition>
        <argsstring>()</argsstring>
        <name>getNodes</name>
        <qualifiedname>mty::wick::Graph::getNodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="540" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="976" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a06449d31a17f40a6fc3db5508465a01e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt; const &amp;</type>
        <definition>vector&lt; std::shared_ptr&lt; Node &gt; &gt; const  &amp; mty::wick::Graph::getNodes</definition>
        <argsstring>() const</argsstring>
        <name>getNodes</name>
        <qualifiedname>mty::wick::Graph::getNodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="542" column="23" bodyfile="src/marty/core/graph.cpp" bodystart="965" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a5c45b7034ee2ae0a272521df3cd4ae31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>mty::wick::Graph::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> is empty. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="548" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="602" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1aeb1d7f18e204409752a0a2d728fa09ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; Graph &gt; &gt; mty::wick::Graph::contractionStep</definition>
        <argsstring>() const</argsstring>
        <name>contractionStep</name>
        <qualifiedname>mty::wick::Graph::contractionStep</qualifiedname>
        <briefdescription>
<para>Performs one contraction step (the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> must not be fully connected) and returns all possible new Graphs. </para>
        </briefdescription>
        <detaileddescription>
<para>A contraction step consists in contracting the first contractible <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> of the <ref refid="classmty_1_1wick_1_1ConnectedComponent" kindref="compound">ConnectedComponent</ref> with every possible partner. Each partner gives a new <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref>, and all these possible graphs are returned in a std::vector. <simplesect kind="return"><para>All possible graphs after one contraction step in a std::vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="559" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="1121" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a393d07c551103f97b68a7acbfdf68db2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::compare</definition>
        <argsstring>(const Graph &amp;other, std::map&lt; csl::Tensor, csl::Tensor &gt; &amp;mapping, bool fieldBlind=false) const</argsstring>
        <name>compare</name>
        <qualifiedname>mty::wick::Graph::compare</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; &amp;</type>
          <declname>mapping</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fieldBlind</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="561" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ab974c1e58c7ccadbdc89f425588e0005" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::compare</definition>
        <argsstring>(const Graph &amp;other, bool fieldBlind=false) const</argsstring>
        <name>compare</name>
        <qualifiedname>mty::wick::Graph::compare</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fieldBlind</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="565" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1383" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a4a26940d88e6329a94761f0412002733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::contractHighMass</definition>
        <argsstring>(mty::QuantumFieldParent const *field)</argsstring>
        <name>contractHighMass</name>
        <qualifiedname>mty::wick::Graph::contractHighMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> const *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="567" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1389" bodyend="1415"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a9e04bb108d1f79d084c4c9116057729d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::operator==</definition>
        <argsstring>(const Graph &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>mty::wick::Graph::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="569" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1417" bodyend="1420"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classmty_1_1wick_1_1Graph_1a1197023c4b71a2a6253d9ddaec32e3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const Graph &amp;g)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::wick::Graph::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Overload of operator&lt;&lt; for <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> to display. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output flux. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="577" column="12"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a4ba6ee84b099ff797bc72cf328aea7fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> const *</type>
        <definition>Vertex const  * mty::wick::Graph::getVertexOf</definition>
        <argsstring>(std::shared_ptr&lt; Node &gt; const &amp;node, std::vector&lt; Vertex &gt; const &amp;vertices)</argsstring>
        <name>getVertexOf</name>
        <qualifiedname>mty::wick::Graph::getVertexOf</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; const &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &gt; const &amp;</type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="579" column="25" bodyfile="src/marty/core/graph.cpp" bodystart="687" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a6794f13f10debab65db7b56583f79d06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; Node &gt; &gt; mty::wick::Graph::nextNodes</definition>
        <argsstring>(std::shared_ptr&lt; Node &gt; const &amp;node, std::vector&lt; Vertex &gt; const &amp;vertices)</argsstring>
        <name>nextNodes</name>
        <qualifiedname>mty::wick::Graph::nextNodes</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; const &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &gt; const &amp;</type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="583" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="701" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ab80dc248387949396286d1a747e4f8f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; int, bool &gt;</type>
        <definition>std::pair&lt; int, bool &gt; mty::wick::Graph::countExternalLegs</definition>
        <argsstring>(std::vector&lt; csl::Tensor &gt;::iterator first, std::vector&lt; csl::Tensor &gt;::iterator last, std::vector&lt; Vertex &gt; const &amp;vertices)</argsstring>
        <name>countExternalLegs</name>
        <qualifiedname>mty::wick::Graph::countExternalLegs</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt;::iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt;::iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &gt; const &amp;</type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="587" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="717" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a9d61f9af5e27a8d0a189e1462d897898" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1wick_1_1Graph_1_1LoopInformation" kindref="compound">LoopInformation</ref></type>
        <definition>Graph::LoopInformation mty::wick::Graph::walk</definition>
        <argsstring>(std::vector&lt; csl::Tensor &gt;::iterator first, std::vector&lt; csl::Tensor &gt;::iterator last, std::shared_ptr&lt; Node &gt; const &amp;node, std::vector&lt; Vertex &gt; const &amp;vertices, LoopInformation previous={})</argsstring>
        <name>walk</name>
        <qualifiedname>mty::wick::Graph::walk</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt;::iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt;::iterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; const &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &gt; const &amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1wick_1_1Graph_1_1LoopInformation" kindref="compound">LoopInformation</ref></type>
          <declname>previous</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="591" column="28" bodyfile="src/marty/core/graph.cpp" bodystart="742" bodyend="772"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a7700dde609dfc5d09ed70deae6d16670" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::isolateIndependantVertices</definition>
        <argsstring>()</argsstring>
        <name>isolateIndependantVertices</name>
        <qualifiedname>mty::wick::Graph::isolateIndependantVertices</qualifiedname>
        <briefdescription>
<para>Isolates at the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref>&apos;s creation independant Internal vertices. </para>
        </briefdescription>
        <detaileddescription>
<para>It is important to avoid unnecessary calculations and keep the good combinatorial factors to recognize identical internal vertices. For example two vertices <formula id="100">$ \phi(X)^3\quad \phi(Y)^3 $</formula> are degenerate (see <ref refid="classmty_1_1wick_1_1Vertex_1a3e12e853087cab2d3401949381b1d192" kindref="member">Vertex::isDegenerateWith()</ref>). Contractions will be performed considering the two vertices discernable (eg treating X before Y) and a factor 2 will be added in front the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref>&apos;s expression. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="607" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="607" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1aee4b7bf7010bb4079eaf578d39037866" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::removeIntVertex</definition>
        <argsstring>(int indexVertex)</argsstring>
        <name>removeIntVertex</name>
        <qualifiedname>mty::wick::Graph::removeIntVertex</qualifiedname>
        <param>
          <type>int</type>
          <declname>indexVertex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="609" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="631" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a044635983c6bf343ec1bd07eb5e23a97" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::initConnectedComponent</definition>
        <argsstring>()</argsstring>
        <name>initConnectedComponent</name>
        <qualifiedname>mty::wick::Graph::initConnectedComponent</qualifiedname>
        <briefdescription>
<para>Puts the first external vertex in the connected component and removes it from the set of external vertices for further contractions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="615" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="654" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a075a2eafb4e8aff28dcf7d328dfb4c08" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Expr_type</type>
        <definition>Graph::Expr_type mty::wick::Graph::getPartialExpression</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; Node &gt; &gt; &amp;nodes, const std::vector&lt; mty::QuantumField &gt; &amp;initialOrder, mty::FeynruleMomentum &amp;witnessMapping, csl::Expr const &amp;globalFactor) const</argsstring>
        <name>getPartialExpression</name>
        <qualifiedname>mty::wick::Graph::getPartialExpression</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; &amp;</type>
          <declname>initialOrder</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynruleMomentum" kindref="compound">mty::FeynruleMomentum</ref> &amp;</type>
          <declname>witnessMapping</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>globalFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="618" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="816" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a63682ff88242769d5c1e20beaf12b9ff" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">csl::ObjectSymmetry</ref>&lt; const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> * &gt;</type>
        <definition>ObjectSymmetry&lt; const QuantumField * &gt; mty::wick::Graph::getSymmetry</definition>
        <argsstring>(const Vertex &amp;vertex, const mty::QuantumField *field) const</argsstring>
        <name>getSymmetry</name>
        <qualifiedname>mty::wick::Graph::getSymmetry</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="624" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="988" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a2321b3cbe346ad91c1d5ca707853f5e8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt; &gt;</type>
        <definition>vector&lt; vector&lt; shared_ptr&lt; Node &gt; &gt; &gt; mty::wick::Graph::symmetrize</definition>
        <argsstring>() const</argsstring>
        <name>symmetrize</name>
        <qualifiedname>mty::wick::Graph::symmetrize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="626" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="1003" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a32bf36f1d7e6aabf8a12a0f212c9be55" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>vector&lt; int &gt; mty::wick::Graph::getContractibleExtVertices</definition>
        <argsstring>(const mty::QuantumField *field) const</argsstring>
        <name>getContractibleExtVertices</name>
        <qualifiedname>mty::wick::Graph::getContractibleExtVertices</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> to contract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::vector of integers corresponding to the positions of external vertices contractible with <bold>field</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="641" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1047" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a514ce69e47ef556fb60f7f6af82ad087" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>vector&lt; int &gt; mty::wick::Graph::getContractibleIntVertices</definition>
        <argsstring>(const mty::QuantumField *field) const</argsstring>
        <name>getContractibleIntVertices</name>
        <qualifiedname>mty::wick::Graph::getContractibleIntVertices</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> to contract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::vector of integers corresponding to the positions of internal vertices contractible with <bold>field</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="649" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1059" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a6192e16ad4fe02c63a0b3289fbb5f1c3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>vector&lt; int &gt; mty::wick::Graph::getContractibleConnectedVertices</definition>
        <argsstring>(const mty::QuantumField *field) const</argsstring>
        <name>getContractibleConnectedVertices</name>
        <qualifiedname>mty::wick::Graph::getContractibleConnectedVertices</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> to contract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::vector of integers corresponding to the positions of vertices contractible with <bold>field</bold> in <bold>connectedCompo</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="657" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1079" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a0426770e23216929605f6120c0b6b3e1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::contractExternal</definition>
        <argsstring>(const mty::QuantumField *field, int indexVertex)</argsstring>
        <name>contractExternal</name>
        <qualifiedname>mty::wick::Graph::contractExternal</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indexVertex</declname>
        </param>
        <briefdescription>
<para>Tries to contract the <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> <bold>field</bold> between the <ref refid="classmty_1_1wick_1_1ConnectedComponent" kindref="compound">ConnectedComponent</ref> and the external vertex at position <bold>indexVertex</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> being contracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the external <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> to contract with <bold>connectedCompo</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the contraction is done. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> if it was not possible. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="668" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1084" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a729216c11bd7e4e534e1092a68150696" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::contractInternal</definition>
        <argsstring>(const mty::QuantumField *field, int indexVertex)</argsstring>
        <name>contractInternal</name>
        <qualifiedname>mty::wick::Graph::contractInternal</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indexVertex</declname>
        </param>
        <briefdescription>
<para>Tries to contract the <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> <bold>field</bold> between the <ref refid="classmty_1_1wick_1_1ConnectedComponent" kindref="compound">ConnectedComponent</ref> and the internal vertex at position <bold>indexVertex</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> being contracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the internal <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> to contract with <bold>connectedCompo</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the contraction is done. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> if it was not possible. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="679" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1094" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a1c461222c2d842ec11c964133d571a3f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::contractConnected</definition>
        <argsstring>(const mty::QuantumField *field, int indexVertex)</argsstring>
        <name>contractConnected</name>
        <qualifiedname>mty::wick::Graph::contractConnected</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indexVertex</declname>
        </param>
        <briefdescription>
<para>Tries to contract the <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> <bold>field</bold> between the <ref refid="classmty_1_1wick_1_1ConnectedComponent" kindref="compound">ConnectedComponent</ref> and the vertex at position <bold>indexVertex</bold> in <bold>connectedCompo</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> being contracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the second <ref refid="classmty_1_1wick_1_1Vertex" kindref="compound">Vertex</ref> being contracted in <bold>connectedCompo</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the contraction is done. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> if it was not possible. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="691" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1113" bodyend="1119"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a2c14d988c13aa6752b219b35cd59f18f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt;</type>
        <definition>vector&lt; shared_ptr&lt; Node &gt; &gt; mty::wick::Graph::copyNodes</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Node &gt; &gt; &amp;toCopy)</argsstring>
        <name>copyNodes</name>
        <qualifiedname>mty::wick::Graph::copyNodes</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt; &amp;</type>
          <declname>toCopy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="629" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1016" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a072ab9042aeaa593385ed12b032447b4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::applySymmetry</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; Node &gt; &gt; &amp;nodes, const csl::ObjectPermutation&lt; const mty::QuantumField * &gt; &amp;permutation)</argsstring>
        <name>applySymmetry</name>
        <qualifiedname>mty::wick::Graph::applySymmetry</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectPermutation" kindref="compound">csl::ObjectPermutation</ref>&lt; const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> * &gt; &amp;</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="631" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="1039" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1abcbf56e03d7e05699b381193f8c51530" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::addFoundNode</definition>
        <argsstring>(const std::shared_ptr&lt; Node &gt; &amp;newNode, std::vector&lt; csl::Tensor &gt; &amp;foundNodes)</argsstring>
        <name>addFoundNode</name>
        <qualifiedname>mty::wick::Graph::addFoundNode</qualifiedname>
        <param>
          <type>const <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>newNode</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; &amp;</type>
          <declname>foundNodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="693" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="1307" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ac0b267961d0241f7c8d8613ec8f5c975" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::Graph::sortNodes</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; Node &gt; &gt; &amp;nodes)</argsstring>
        <name>sortNodes</name>
        <qualifiedname>mty::wick::Graph::sortNodes</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> &gt; &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="696" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="1325" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1a48f7a442b0187a7588c1b01579d9480b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::compareFieldsDummyPoint</definition>
        <argsstring>(const mty::QuantumField *fieldA, const mty::QuantumField *fieldB, std::map&lt; csl::Tensor, csl::Tensor &gt; &amp;constraints, bool fieldBlind=false)</argsstring>
        <name>compareFieldsDummyPoint</name>
        <qualifiedname>mty::wick::Graph::compareFieldsDummyPoint</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>fieldA</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
          <declname>fieldB</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fieldBlind</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="699" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1194" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1Graph_1ac908237ce7178ded1717da21a638b6b8" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::Graph::compareNodesWithConstraints</definition>
        <argsstring>(const Node *nodeA, const Node *nodeB, std::map&lt; csl::Tensor, csl::Tensor &gt; &amp;constraints, bool fieldBlind=false)</argsstring>
        <name>compareNodesWithConstraints</name>
        <qualifiedname>mty::wick::Graph::compareNodesWithConstraints</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>nodeA</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>nodeB</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fieldBlind</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="704" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="1235" bodyend="1305"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Handles wick contractions. A graph contains Vertices, and is able to connect them in all possible ways returning the set of all possible <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/marty/core/graph.h" line="381" column="1" bodyfile="src/marty/core/graph.h" bodystart="381" bodyend="761"/>
    <listofallmembers>
      <member refid="classmty_1_1wick_1_1Graph_1a58629a88bc207ced9a8a18dcee7a216a" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>addFactor</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1abcbf56e03d7e05699b381193f8c51530" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>addFoundNode</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a072ab9042aeaa593385ed12b032447b4" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>applySymmetry</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a393d07c551103f97b68a7acbfdf68db2" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>compare</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ab974c1e58c7ccadbdc89f425588e0005" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>compare</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a48f7a442b0187a7588c1b01579d9480b" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>compareFieldsDummyPoint</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ac908237ce7178ded1717da21a638b6b8" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>compareNodesWithConstraints</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1aa67156a2301581bf6619f8f601dd31da" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>connectedCompo</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a1c461222c2d842ec11c964133d571a3f" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>contractConnected</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a0426770e23216929605f6120c0b6b3e1" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>contractExternal</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a4a26940d88e6329a94761f0412002733" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>contractHighMass</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a729216c11bd7e4e534e1092a68150696" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>contractInternal</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1aeb1d7f18e204409752a0a2d728fa09ee" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>contractionStep</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ab141d1b9059e347a88b43df000de20e4" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>copy</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a2c14d988c13aa6752b219b35cd59f18f" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>copyNodes</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ab80dc248387949396286d1a747e4f8f8" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>countExternalLegs</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a5c45b7034ee2ae0a272521df3cd4ae31" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>empty</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a273a3a5c2289e9ec6f78258fec1c628a" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>Expr_type</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1aef28e3eb370872dd40a5a6d9ac338290" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>expression</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a1b34fa70d1d4f574bfd5138547ccdf1b" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>exprFactor</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ab87a1294c2806b16001b07e5f67a15b6" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>extVertex</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a3ddb9eec4c4f3ba0d08dfc691136e18c" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>factor</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a6ca9c57bea150ede3c2338d592213108" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>fixedExpression</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a3362cd054c31497a4c6a9942e43f8092" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>fullyConnected</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a5001ee559eac43fb3a05e3b42a233df4" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getConnectedField</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a37f404aed6daeeb3c7a220e8a2e470df" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getConnectedFieldsInVertex</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a6192e16ad4fe02c63a0b3289fbb5f1c3" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getContractibleConnectedVertices</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a32bf36f1d7e6aabf8a12a0f212c9be55" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getContractibleExtVertices</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a514ce69e47ef556fb60f7f6af82ad087" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getContractibleIntVertices</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ab522495ccbe8e800402c53ca6d250756" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getExpression</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a18d2d4ab90cfec5c6b3f723611896a2c" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getExpression</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1abd2225cf8de7356993b5e1c739c173ce" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getFactor</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a4f76681baaa6df89347109351f636126" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getFieldDimension</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ae06c9060c99eadb61639ada447d16926" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getFields</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a7e5f20895c8f2e2ecba37ba1ba5d7b79" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getNLoops</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a04523617770b08176eba5fcd786a03e5" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getNodes</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a06449d31a17f40a6fc3db5508465a01e" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getNodes</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a075a2eafb4e8aff28dcf7d328dfb4c08" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getPartialExpression</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a63682ff88242769d5c1e20beaf12b9ff" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getSymmetry</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a4fed503fbead4d1c835dfa02377a8bbb" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getTotalDegeneracyFactor</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a4ba6ee84b099ff797bc72cf328aea7fe" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getVertexOf</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ad9628c9318123b7d3fdbcc12cbcf5b5b" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>getVertices</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a4c7ce76cc066149d10e466f306c8c63b" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>Graph</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ae90eaed7c6ecfa7111cef2c45bebaf58" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>Graph</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ae743379c5e695b3035ae62e26192f4b9" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>Graph</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a251d57ff2b76edde168b3037cc239284" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>Graph</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ac15107b04c65154ebf8af20cc4e1e6a2" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>Graph</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a3ed42f7b7e6409ef3ea6810cc54f4582" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>independentVertices</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a4efc72783ec84adb07488d6ff84312a1" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>init</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a044635983c6bf343ec1bd07eb5e23a97" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>initConnectedComponent</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a0a237c292dde5590629385bf2a87694a" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>initialOrder</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a22c56d6f421771a158eac0a6848025a0" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>intVertex</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a8f412e1b34c172520eed3c801034a106" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>isFullyConnected</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a7700dde609dfc5d09ed70deae6d16670" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>isolateIndependantVertices</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a9528f33f437578aa1f4fcef6836a1be8" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>isPhysical</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a328df9116ca4c10d547af8410de566cb" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>isValid</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a450c9f6839992a66dc08a6fcd33bb540" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>multiply</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a296981278315813f73cd051ee3d516dd" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>multiply</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a6794f13f10debab65db7b56583f79d06" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>nextNodes</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a1197023c4b71a2a6253d9ddaec32e3fa" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a150f03d66a11d44f1640f443730128b2" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>operator=</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a9e04bb108d1f79d084c4c9116057729d" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>operator==</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1aee4b7bf7010bb4079eaf578d39037866" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>removeIntVertex</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a3301da322da6a1920e610f8ede744ae3" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>ruleMode</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a13d549df02eb58c88ec5d4b9ad8a90fa" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>setFactor</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a010456166f7da6c1c3b481dfb077f4ce" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>setSymmetrizeExternalLegs</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1abe72cc05aad051d34f55f3b16d29127b" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>sortedNodes</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1ac0b267961d0241f7c8d8613ec8f5c975" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>sortNodes</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a2321b3cbe346ad91c1d5ca707853f5e8" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>symmetrize</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1adb602ddc7bab403206ad4b59ead15880" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>symmetrizeExternalLegs</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a4a8fb3851220298556e7b93a4e2bcc5d" prot="private" virt="non-virtual"><scope>mty::wick::Graph</scope><name>symmetry</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a9d61f9af5e27a8d0a189e1462d897898" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>walk</name></member>
      <member refid="classmty_1_1wick_1_1Graph_1a8dda85a5d26e3b283e9452827a159019" prot="public" virt="non-virtual"><scope>mty::wick::Graph</scope><name>~Graph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
