<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1IndexStructure" kind="class" language="C++" prot="public">
    <compoundname>csl::IndexStructure</compoundname>
    <includes refid="index_8h" local="no">index.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcsl_1_1IndexStructure_1aca795a9ef8be5f638e52e14c3c8667bc" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>std::vector&lt;Index&gt; csl::IndexStructure::index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <qualifiedname>csl::IndexStructure::index</qualifiedname>
        <briefdescription>
<para>std::vector of <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> objects. Represents the indicial structure of an <ref refid="classcsl_1_1TensorElement" kindref="compound">TensorElement</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="475" column="17" bodyfile="src/csl/index.h" bodystart="475" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a1817657d1092dfa1e0aa527c14d0bfd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::IndexStructure::IndexStructure</definition>
        <argsstring>()</argsstring>
        <name>IndexStructure</name>
        <qualifiedname>csl::IndexStructure::IndexStructure</qualifiedname>
        <briefdescription>
<para>Default constructor, empty structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="481" column="5" bodyfile="src/csl/index.h" bodystart="783" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1af95d656eb01c36b15dc88ce58c061299" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::IndexStructure::IndexStructure</definition>
        <argsstring>(int t_nIndices)</argsstring>
        <name>IndexStructure</name>
        <qualifiedname>csl::IndexStructure::IndexStructure</qualifiedname>
        <param>
          <type>int</type>
          <declname>t_nIndices</declname>
        </param>
        <briefdescription>
<para>Constructor that initializes only the size of <bold>index</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_nIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indices in the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="488" column="14" bodyfile="src/csl/index.h" bodystart="786" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a669e82c845119d8641782809041abe0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::IndexStructure::IndexStructure</definition>
        <argsstring>(const IndexStructure &amp;structure)</argsstring>
        <name>IndexStructure</name>
        <qualifiedname>csl::IndexStructure::IndexStructure</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to copy in initialization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="495" column="5" bodyfile="src/csl/index.h" bodystart="790" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1ac7fd00d44647905fce035c9b63acff93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::IndexStructure::IndexStructure</definition>
        <argsstring>(IndexStructure &amp;&amp;)=default</argsstring>
        <name>IndexStructure</name>
        <qualifiedname>csl::IndexStructure::IndexStructure</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="497" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a10a517da5647957ef3d0eb90fb3490b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
        <definition>IndexStructure &amp; csl::IndexStructure::operator=</definition>
        <argsstring>(IndexStructure &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>csl::IndexStructure::operator=</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="499" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a80568cc0626c67cbd0ed965a7d0285a2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::IndexStructure::IndexStructure</definition>
        <argsstring>(const std::initializer_list&lt; Index &gt; &amp;structure)</argsstring>
        <name>IndexStructure</name>
        <qualifiedname>csl::IndexStructure::IndexStructure</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Constructor with one parameter: the list of indices in the structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of indices initializating the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="507" column="14" bodyfile="src/csl/index.h" bodystart="794" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a9aaf2bcd47023aa86ec98fd6ba2c7abe" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::IndexStructure::IndexStructure</definition>
        <argsstring>(const std::vector&lt; Index &gt; &amp;structure)</argsstring>
        <name>IndexStructure</name>
        <qualifiedname>csl::IndexStructure::IndexStructure</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Constructor with one parameter: the list of indices in the structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A std::vector of <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> initializating the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="516" column="14" bodyfile="src/csl/index.cpp" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1adeac74906af00b0c30cb2ceaf5b9c919" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::IndexStructure::~IndexStructure</definition>
        <argsstring>()</argsstring>
        <name>~IndexStructure</name>
        <qualifiedname>csl::IndexStructure::~IndexStructure</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="521" column="5" bodyfile="src/csl/index.h" bodystart="521" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a7a43b20b344b5a73fd77410c7e53f303" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; const &amp;</type>
        <definition>std::vector&lt; Index &gt; const  &amp; csl::IndexStructure::getIndex</definition>
        <argsstring>() const</argsstring>
        <name>getIndex</name>
        <qualifiedname>csl::IndexStructure::getIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The entire <bold>index</bold> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="528" column="23" bodyfile="src/csl/index.cpp" bodystart="476" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1ad6c55cc8e342bccac25883c7e99b302b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Index &gt; &amp; csl::IndexStructure::getIndexView</definition>
        <argsstring>() const</argsstring>
        <name>getIndexView</name>
        <qualifiedname>csl::IndexStructure::getIndexView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="530" column="23" bodyfile="src/csl/index.cpp" bodystart="486" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a2aeb033ba5546cb3c4e7037724582f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; &amp;</type>
        <definition>std::vector&lt; Index &gt; &amp; csl::IndexStructure::getIndex</definition>
        <argsstring>()</argsstring>
        <name>getIndex</name>
        <qualifiedname>csl::IndexStructure::getIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The entire <bold>index</bold> vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="535" column="17" bodyfile="src/csl/index.cpp" bodystart="481" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a39bcded59b10e37cb5eea86593c12dfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt;::const_iterator</type>
        <definition>vector&lt; Index &gt;::const_iterator csl::IndexStructure::find</definition>
        <argsstring>(const Index &amp;t_index) const</argsstring>
        <name>find</name>
        <qualifiedname>csl::IndexStructure::find</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
<para>Search for a particular <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> in the structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const_iterator corresponding to the position of <bold>t_index</bold> in the structure if it is found. </para>
</simplesect>
<simplesect kind="return"><para>The const_iterator IndexStructure::end() if <bold>t_index</bold> is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="545" column="34" bodyfile="src/csl/index.cpp" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1aab8a8300e2e2f5d9330516f902e13c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt;::iterator</type>
        <definition>vector&lt; Index &gt;::iterator csl::IndexStructure::find</definition>
        <argsstring>(const Index &amp;t_index)</argsstring>
        <name>find</name>
        <qualifiedname>csl::IndexStructure::find</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="547" column="28" bodyfile="src/csl/index.cpp" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1afc69b0341180adbe495dbfc263d4f1f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref></type>
        <definition>IndexStructure csl::IndexStructure::getFreeStructure</definition>
        <argsstring>() const</argsstring>
        <name>getFreeStructure</name>
        <qualifiedname>csl::IndexStructure::getFreeStructure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The part of the vector <bold>index</bold> that contains free indices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="552" column="20" bodyfile="src/csl/index.cpp" bodystart="424" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a7f5591d96374516da7a45cc39588f4e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref></type>
        <definition>IndexStructure csl::IndexStructure::getSinglePermutation</definition>
        <argsstring>(int i1, int i2) const</argsstring>
        <name>getSinglePermutation</name>
        <qualifiedname>csl::IndexStructure::getSinglePermutation</qualifiedname>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> where indices in places <bold>i1</bold> and <bold>i2</bold> have been swapped. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="558" column="20" bodyfile="src/csl/index.cpp" bodystart="435" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a9fa67e502d066fd48fd0ad24e51d2c3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref></type>
        <definition>IndexStructure csl::IndexStructure::getPermutation</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;permutation) const</argsstring>
        <name>getPermutation</name>
        <qualifiedname>csl::IndexStructure::getPermutation</qualifiedname>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>std::vector of integers of the size of the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> that permutes indices.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> where the permutation <bold>permutation</bold> has been applied. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="567" column="20" bodyfile="src/csl/index.cpp" bodystart="453" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a807c597f51589279e55adfb5d0ca911c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::IndexStructure::setIndex</definition>
        <argsstring>(const Index &amp;newIndex, int iIndex=0)</argsstring>
        <name>setIndex</name>
        <qualifiedname>csl::IndexStructure::setIndex</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>newIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> in position <bold>iIndex</bold> to <bold>newIndex</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>New <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to place in the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Position where to place <bold>newIndex</bold>, default 0 if not given by the user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="576" column="10" bodyfile="src/csl/index.cpp" bodystart="491" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a688f1488670d13382f76fdd118a0b3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::IndexStructure::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>csl::IndexStructure::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="578" column="10" bodyfile="src/csl/index.cpp" bodystart="500" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1af1762fc4bb6972b16d3a2ae118d27ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
        <definition>IndexStructure &amp; csl::IndexStructure::operator=</definition>
        <argsstring>(const IndexStructure &amp;structure)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>csl::IndexStructure::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator=, Copies the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> <bold>structure</bold>. C++ default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the modified <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="587" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a1cba6b632b5c34f8a5c49f46f9502c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
        <definition>IndexStructure &amp; csl::IndexStructure::operator+=</definition>
        <argsstring>(const Index &amp;newIndex)</argsstring>
        <name>operator+=</name>
        <qualifiedname>csl::IndexStructure::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>newIndex</declname>
        </param>
        <briefdescription>
<para>operator+=, adds an index to the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newIndex</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to append at the end of the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the modified <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="596" column="20" bodyfile="src/csl/index.cpp" bodystart="468" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1af01e15e1cc969900350097c974fc385d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
        <definition>IndexStructure &amp; csl::IndexStructure::operator+=</definition>
        <argsstring>(const IndexStructure &amp;structure)</argsstring>
        <name>operator+=</name>
        <qualifiedname>csl::IndexStructure::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator+=, adds another <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> at the end of the current. This function concatenates the two structures. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to concatenate to *this.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the modified <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="606" column="20" bodyfile="src/csl/index.cpp" bodystart="508" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a5bbe59ba2418e9480f34a504a7e840d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref></type>
        <definition>IndexStructure csl::IndexStructure::operator+</definition>
        <argsstring>(const csl::Index &amp;index) const</argsstring>
        <name>operator+</name>
        <qualifiedname>csl::IndexStructure::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="608" column="20" bodyfile="src/csl/index.cpp" bodystart="517" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a87778aebc1b4900359b3da6ddbaa3afa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref></type>
        <definition>IndexStructure csl::IndexStructure::operator+</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator+</name>
        <qualifiedname>csl::IndexStructure::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator+, concatenates the current <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> with <bold>structure</bold> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> with which *this is concatenated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The concatenation of *this and <bold>structure</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="618" column="20" bodyfile="src/csl/index.cpp" bodystart="525" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a8074f0ee16a98eb2926257feb1cadbd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::hasCommonIndex</definition>
        <argsstring>(csl::IndexStructure const &amp;other) const</argsstring>
        <name>hasCommonIndex</name>
        <qualifiedname>csl::IndexStructure::hasCommonIndex</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="620" column="10" bodyfile="src/csl/index.cpp" bodystart="535" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a0909806149cbf6b1144ec90d881a37e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::exactMatch</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>exactMatch</name>
        <qualifiedname>csl::IndexStructure::exactMatch</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compares the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> with <bold>structure</bold>. Each index must match exactly (see <ref refid="classcsl_1_1Index_1af60770e33d69e0e10f2a20de65ca27ae" kindref="member">Index::exactMatch()</ref>) with the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> at the same place in the second structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two structures match exactly. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="632" column="10" bodyfile="src/csl/index.cpp" bodystart="544" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a0594b0c94c9433ba005d00fc182969ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::compareWithDummy</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>compareWithDummy</name>
        <qualifiedname>csl::IndexStructure::compareWithDummy</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compares *this with <bold>structure</bold> index by index (in order) using the function <ref refid="classcsl_1_1Index_1a3423a6f82a350eab6a7e2f3a039cb337" kindref="member">Index::compareWithDummy()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two structures are equal wrt <ref refid="classcsl_1_1Index_1a3423a6f82a350eab6a7e2f3a039cb337" kindref="member">Index::compareWithDummy()</ref>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="644" column="10" bodyfile="src/csl/index.cpp" bodystart="557" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a7352596f7fdaa1a7381025ed0285aa39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::compareWithDummy</definition>
        <argsstring>(const IndexStructure &amp;structure, std::map&lt; Index, Index &gt; &amp;constraints, bool keepAllCosntraints=false) const</argsstring>
        <name>compareWithDummy</name>
        <qualifiedname>csl::IndexStructure::compareWithDummy</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>, <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepAllCosntraints</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compares *this with <bold>structure</bold> index by index (in order) using the function <ref refid="classcsl_1_1Index_1a3423a6f82a350eab6a7e2f3a039cb337" kindref="member">Index::compareWithDummy()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The map between indices contains matches between dummy indices. Dummy indices can a priori match between each other independently of their names, but one an <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> has been matched with another, the pair is put into <bold>constraints</bold>. This <bold>constraints</bold> map allows then to compare properly complex expressions containing dummy indices. The map <bold>constraints</bold> is modified in the function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> storing constraints of correpondance between dummy indices.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two structures are equal wrt <ref refid="classcsl_1_1Index_1a3423a6f82a350eab6a7e2f3a039cb337" kindref="member">Index::compareWithDummy()</ref>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="664" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a6f6915d5ac3b48e9420614ae4c01a4e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::operator==</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::IndexStructure::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator==, compares the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to <bold>structure</bold> in terms of free structure, independently of the dummy indices or the order of free indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare with *this.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two structures are equivalent, i.e. are compatible as two terms of a sum wrt Einstein&apos;s convention. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="679" column="10" bodyfile="src/csl/index.cpp" bodystart="613" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1aab0263a3fafae7d082908712c826ac22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::operator!=</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>csl::IndexStructure::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator!=, returns the opposite of <ref refid="classcsl_1_1IndexStructure_1a6f6915d5ac3b48e9420614ae4c01a4e2" kindref="member">IndexStructure::operator==()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compares</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>not IndexStructure::operator==(structure). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="688" column="10" bodyfile="src/csl/index.cpp" bodystart="647" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a173edcc647a335f0dd682e4bde87763e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::operator|=</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator|=</name>
        <qualifiedname>csl::IndexStructure::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator|=, simplicity comparator using comparators between indices, starting by comparing the first ones. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices have the same simplicity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="698" column="10" bodyfile="src/csl/index.cpp" bodystart="652" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1adbfd5008fbfa7d39a2e9d53de817b7f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::operator&amp;=</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>csl::IndexStructure::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator&amp;=, simplicity comparator using comparators between indices, starting by comparing the first ones. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices have different simplicities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="708" column="10" bodyfile="src/csl/index.cpp" bodystart="657" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a9f837c7c76a35af97dc5d89f9334b868" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::operator&lt;</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>csl::IndexStructure::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator&lt;, simplicity comparator using comparators between indices, starting by comparing the first ones. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if *this is simpler than <bold>structure</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="718" column="5" bodyfile="src/csl/index.cpp" bodystart="662" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a74ecd80db2c44ae29e401f53d9a4d241" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::operator&gt;</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>csl::IndexStructure::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator&gt;, simplicity comparator using comparators between indices, starting by comparing the first ones. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if <bold>structure</bold> is simpler than *this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="728" column="10" bodyfile="src/csl/index.cpp" bodystart="684" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1aed9be5905542246b88f1ee46a189b480" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::operator&lt;=</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>csl::IndexStructure::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator&lt;=, simplicity comparator using comparators between indices, starting by comparing the first ones. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if &lt; or |=. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="738" column="5" bodyfile="src/csl/index.cpp" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a72bdcf7919340249e47613ba60d2a5be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::IndexStructure::operator&gt;=</definition>
        <argsstring>(const IndexStructure &amp;structure) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>csl::IndexStructure::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>operator&gt;=, simplicity comparator using comparators between indices, starting by comparing the first ones. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if &gt; or |=. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="748" column="10" bodyfile="src/csl/index.cpp" bodystart="694" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1a2dec5d53133432e738eca61a952f509c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref></type>
        <definition>Index csl::IndexStructure::operator[]</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>csl::IndexStructure::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>operator[], accessor to the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> at position <bold>i</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> at position <bold>i</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="757" column="11" bodyfile="src/csl/index.cpp" bodystart="699" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1IndexStructure_1ab5863a1c20705db40b424752b6f44dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
        <definition>Index &amp; csl::IndexStructure::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <qualifiedname>csl::IndexStructure::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>operator[], accessor to the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> at position <bold>i</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> at position <bold>i</bold> (then modifiable). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="766" column="11" bodyfile="src/csl/index.cpp" bodystart="706" bodyend="711"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcsl_1_1IndexStructure_1af40be6611fe3520969f5763280cf05c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const IndexStructure &amp;structure)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>csl::IndexStructure::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Displays the <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> in output /b fout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> to display.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the modifed flux <bold>fout</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="776" column="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Manages a std::vector of <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>, to be used by an <ref refid="classcsl_1_1TensorElement" kindref="compound">TensorElement</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/csl/index.h" line="466" column="1" bodyfile="src/csl/index.h" bodystart="466" bodyend="778"/>
    <listofallmembers>
      <member refid="classcsl_1_1IndexStructure_1a0594b0c94c9433ba005d00fc182969ab" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1IndexStructure_1a7352596f7fdaa1a7381025ed0285aa39" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1IndexStructure_1a0909806149cbf6b1144ec90d881a37e6" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>exactMatch</name></member>
      <member refid="classcsl_1_1IndexStructure_1a39bcded59b10e37cb5eea86593c12dfb" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>find</name></member>
      <member refid="classcsl_1_1IndexStructure_1aab8a8300e2e2f5d9330516f902e13c44" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>find</name></member>
      <member refid="classcsl_1_1IndexStructure_1afc69b0341180adbe495dbfc263d4f1f4" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>getFreeStructure</name></member>
      <member refid="classcsl_1_1IndexStructure_1a7a43b20b344b5a73fd77410c7e53f303" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>getIndex</name></member>
      <member refid="classcsl_1_1IndexStructure_1a2aeb033ba5546cb3c4e7037724582f06" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>getIndex</name></member>
      <member refid="classcsl_1_1IndexStructure_1ad6c55cc8e342bccac25883c7e99b302b" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>getIndexView</name></member>
      <member refid="classcsl_1_1IndexStructure_1a9fa67e502d066fd48fd0ad24e51d2c3d" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>getPermutation</name></member>
      <member refid="classcsl_1_1IndexStructure_1a7f5591d96374516da7a45cc39588f4e7" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>getSinglePermutation</name></member>
      <member refid="classcsl_1_1IndexStructure_1a8074f0ee16a98eb2926257feb1cadbd0" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>hasCommonIndex</name></member>
      <member refid="classcsl_1_1IndexStructure_1aca795a9ef8be5f638e52e14c3c8667bc" prot="private" virt="non-virtual"><scope>csl::IndexStructure</scope><name>index</name></member>
      <member refid="classcsl_1_1IndexStructure_1a1817657d1092dfa1e0aa527c14d0bfd9" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>IndexStructure</name></member>
      <member refid="classcsl_1_1IndexStructure_1af95d656eb01c36b15dc88ce58c061299" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>IndexStructure</name></member>
      <member refid="classcsl_1_1IndexStructure_1a669e82c845119d8641782809041abe0d" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>IndexStructure</name></member>
      <member refid="classcsl_1_1IndexStructure_1ac7fd00d44647905fce035c9b63acff93" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>IndexStructure</name></member>
      <member refid="classcsl_1_1IndexStructure_1a80568cc0626c67cbd0ed965a7d0285a2" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>IndexStructure</name></member>
      <member refid="classcsl_1_1IndexStructure_1a9aaf2bcd47023aa86ec98fd6ba2c7abe" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>IndexStructure</name></member>
      <member refid="classcsl_1_1IndexStructure_1aab0263a3fafae7d082908712c826ac22" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1IndexStructure_1adbfd5008fbfa7d39a2e9d53de817b7f0" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator&amp;=</name></member>
      <member refid="classcsl_1_1IndexStructure_1a5bbe59ba2418e9480f34a504a7e840d4" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator+</name></member>
      <member refid="classcsl_1_1IndexStructure_1a87778aebc1b4900359b3da6ddbaa3afa" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator+</name></member>
      <member refid="classcsl_1_1IndexStructure_1a1cba6b632b5c34f8a5c49f46f9502c34" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator+=</name></member>
      <member refid="classcsl_1_1IndexStructure_1af01e15e1cc969900350097c974fc385d" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator+=</name></member>
      <member refid="classcsl_1_1IndexStructure_1a9f837c7c76a35af97dc5d89f9334b868" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1IndexStructure_1af40be6611fe3520969f5763280cf05c2" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator&lt;&lt;</name></member>
      <member refid="classcsl_1_1IndexStructure_1aed9be5905542246b88f1ee46a189b480" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1IndexStructure_1a10a517da5647957ef3d0eb90fb3490b0" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator=</name></member>
      <member refid="classcsl_1_1IndexStructure_1af1762fc4bb6972b16d3a2ae118d27ab0" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator=</name></member>
      <member refid="classcsl_1_1IndexStructure_1a6f6915d5ac3b48e9420614ae4c01a4e2" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator==</name></member>
      <member refid="classcsl_1_1IndexStructure_1a74ecd80db2c44ae29e401f53d9a4d241" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1IndexStructure_1a72bdcf7919340249e47613ba60d2a5be" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1IndexStructure_1a2dec5d53133432e738eca61a952f509c" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1IndexStructure_1ab5863a1c20705db40b424752b6f44dbd" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1IndexStructure_1a173edcc647a335f0dd682e4bde87763e" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>operator|=</name></member>
      <member refid="classcsl_1_1IndexStructure_1a688f1488670d13382f76fdd118a0b3c4" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>reset</name></member>
      <member refid="classcsl_1_1IndexStructure_1a807c597f51589279e55adfb5d0ca911c" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>setIndex</name></member>
      <member refid="classcsl_1_1IndexStructure_1adeac74906af00b0c30cb2ceaf5b9c919" prot="public" virt="non-virtual"><scope>csl::IndexStructure</scope><name>~IndexStructure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
