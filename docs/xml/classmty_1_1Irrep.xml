<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classmty_1_1Irrep" kind="class" language="C++" prot="public">
    <compoundname>mty::Irrep</compoundname>
    <includes refid="representation_8h" local="no">representation.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmty_1_1Irrep_1a65c981a311c7c6a6c9b9f11c388198e5" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int mty::Irrep::dim</definition>
        <argsstring></argsstring>
        <name>dim</name>
        <qualifiedname>mty::Irrep::dim</qualifiedname>
        <briefdescription>
<para>Dimension of the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>, i.e. the sum of all <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref>&apos;s mutiplicities. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="317" column="9" bodyfile="src/marty/core/representation.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1Irrep_1a3efd36a5effd893b80466f39b5727ef3" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> *</type>
        <definition>const SemiSimpleAlgebra* mty::Irrep::algebra</definition>
        <argsstring></argsstring>
        <name>algebra</name>
        <qualifiedname>mty::Irrep::algebra</qualifiedname>
        <briefdescription>
<para>Pointer to the <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> from which the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> is a representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="323" column="29" bodyfile="src/marty/core/representation.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1Irrep_1abf397fb63c82a8209dfc21e593fb84a2" prot="protected" static="no" mutable="no">
        <type><ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref></type>
        <definition>AlgebraState mty::Irrep::highestWeight</definition>
        <argsstring></argsstring>
        <name>highestWeight</name>
        <qualifiedname>mty::Irrep::highestWeight</qualifiedname>
        <briefdescription>
<para>Highest weight state of the representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="328" column="18" bodyfile="src/marty/core/representation.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1Irrep_1a32d72d2b94e4b0f330828ed2713fa713" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &gt;</type>
        <definition>std::vector&lt;AlgebraState&gt; mty::Irrep::rep</definition>
        <argsstring></argsstring>
        <name>rep</name>
        <qualifiedname>mty::Irrep::rep</qualifiedname>
        <briefdescription>
<para>Set of <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> in the representation, in a std::vector. The highest weight state is in position 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="334" column="17" bodyfile="src/marty/core/representation.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1Irrep_1aac6adad7a7c315eb95d4ddd7e169e579" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; mty::Irrep::mult</definition>
        <argsstring></argsstring>
        <name>mult</name>
        <qualifiedname>mty::Irrep::mult</qualifiedname>
        <briefdescription>
<para>Set of multiplicities in the the representation, to each state is associated a multiplicity. The highest weight&apos;s multiplicity is one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="340" column="17" bodyfile="src/marty/core/representation.h" bodystart="340" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmty_1_1Irrep_1af02304bb098b5816d4a2a800dd4e0d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::Irrep::Irrep</definition>
        <argsstring>()</argsstring>
        <name>Irrep</name>
        <qualifiedname>mty::Irrep::Irrep</qualifiedname>
        <briefdescription>
<para>Default constructor. Initializes an empty irrep. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="49" column="5" bodyfile="src/marty/core/representation.cpp" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a22a2faee4d7f13a2032562cd202258d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::Irrep::Irrep</definition>
        <argsstring>(const SemiSimpleAlgebra *t_algebra, const std::vector&lt; AlgebraState &gt; &amp;t_rep, const std::vector&lt; int &gt; &amp;multiplicities)</argsstring>
        <name>Irrep</name>
        <qualifiedname>mty::Irrep::Irrep</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> *</type>
          <declname>t_algebra</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &gt; &amp;</type>
          <declname>t_rep</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>multiplicities</declname>
        </param>
        <briefdescription>
<para>Constructor with 3 parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_algebra</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> of the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_rep</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> in the representation in a std::vector. The highest weight state should be in the first position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplicities</parametername>
</parameternamelist>
<parameterdescription>
<para>The multiplicities of each state in <bold>rep</bold>. The multiplicity of the highest weight state (position 0) should be 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="59" column="5" bodyfile="src/marty/core/representation.cpp" bodystart="36" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a01071cf054d1d91e6e7b82d114266ded" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mty::Irrep::~Irrep</definition>
        <argsstring>()</argsstring>
        <name>~Irrep</name>
        <qualifiedname>mty::Irrep::~Irrep</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="66" column="5" bodyfile="src/marty/core/representation.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a7ad63f1d678f54c51cae46f8788463c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::Irrep::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>mty::Irrep::size</qualifiedname>
        <briefdescription>
<para>Returns the size of the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>, i.e. the number of different states. </para>
        </briefdescription>
        <detaileddescription>
<para>The size returned here does not count multiplicities. For example, the size of the gluon representation if 7 and not 8. For the total dimension of the representation see <ref refid="classmty_1_1Irrep_1a6ba42d50f912eb0f2068aa586c6b37f5" kindref="member">Irrep::getDim()</ref>; <simplesect kind="return"><para>A size_t (long unsigned int), number of states in the irrep. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="78" column="12" bodyfile="src/marty/core/representation.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a98917cf22e1407f41f3ef691dab3868b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::Irrep::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>mty::Irrep::empty</qualifiedname>
        <briefdescription>
<para>Tells if the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> is empty, i.e. contains no state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> is empty. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="85" column="10" bodyfile="src/marty/core/representation.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a603cd4638563192bcb4cb15c8fc85ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &gt;::iterator</type>
        <definition>vector&lt; AlgebraState &gt;::iterator mty::Irrep::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>mty::Irrep::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An iterator to the beginning of <bold>rep</bold>, the std::vector of <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="91" column="28" bodyfile="src/marty/core/representation.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a572d9061e8b46c18f78822a2962077cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &gt;::const_iterator</type>
        <definition>vector&lt; AlgebraState &gt;::const_iterator mty::Irrep::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>mty::Irrep::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const_iterator to the beginning of <bold>rep</bold>, the std::vector of <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="97" column="34" bodyfile="src/marty/core/representation.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a4629f9623eb2730c05c668c7b55abca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &gt;::iterator</type>
        <definition>vector&lt; AlgebraState &gt;::iterator mty::Irrep::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>mty::Irrep::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An iterator to the end of <bold>rep</bold>, the std::vector of <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="103" column="28" bodyfile="src/marty/core/representation.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a92891f62790771ac6ef36c90b2786500" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &gt;::const_iterator</type>
        <definition>vector&lt; AlgebraState &gt;::const_iterator mty::Irrep::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>mty::Irrep::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const_iterator to the end of <bold>rep</bold>, the std::vector of <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="109" column="34" bodyfile="src/marty/core/representation.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1aec275f24fa6f3afdb3c22d38e0c5d67a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> *</type>
        <definition>const SemiSimpleAlgebra * mty::Irrep::getAlgebra</definition>
        <argsstring>() const</argsstring>
        <name>getAlgebra</name>
        <qualifiedname>mty::Irrep::getAlgebra</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pointer to the (const) <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> of the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="114" column="29" bodyfile="src/marty/core/representation.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a6ba42d50f912eb0f2068aa586c6b37f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::Irrep::getDim</definition>
        <argsstring>() const</argsstring>
        <name>getDim</name>
        <qualifiedname>mty::Irrep::getDim</qualifiedname>
        <briefdescription>
<para>The dimension of the representation is the sum of multiplicities of all states in it. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions returns the total dimension of the representation , counting multiplicities. This is the physically relevant number we use to define representations (triplet, octet, doublet, ...). <simplesect kind="return"><para>The dimension of the representation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="124" column="9" bodyfile="src/marty/core/representation.cpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a517e0648051a8874b5348b8706292fe1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::Irrep::getCharge</definition>
        <argsstring>() const</argsstring>
        <name>getCharge</name>
        <qualifiedname>mty::Irrep::getCharge</qualifiedname>
        <briefdescription>
<para>Returns the charge (<ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, can be a fraction) of a  <formula id="260">$ U(1)
$</formula> representation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called only for an <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> of the <bold>R</bold> algebra, i.e. a <formula id="103">$ U(1) $</formula> representation. The function returns then a <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> pointing to a <ref refid="classcsl_1_1Integer" kindref="compound">csl::Integer</ref> (or a <ref refid="classcsl_1_1IntFraction" kindref="compound">csl::IntFraction</ref> if the denominator is not one). The numerator is stored in highestWeight[0] and the denominator is stored in highestWeight[1]. <simplesect kind="return"><para>The expression of the charge of the <formula id="103">$ U(1) $</formula> representation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="135" column="15" bodyfile="src/marty/core/representation.cpp" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a6f74c9436450fe9881190af95637cdf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref></type>
        <definition>AlgebraState mty::Irrep::getHighestWeight</definition>
        <argsstring>() const</argsstring>
        <name>getHighestWeight</name>
        <qualifiedname>mty::Irrep::getHighestWeight</qualifiedname>
        <briefdescription>
<para>Returns the highest weight state of the representation. </para>
        </briefdescription>
        <detaileddescription>
<para>The highest weight is the starting point to find all states in the representation applying annihilation operators. Its multiplicity is always 1. It is placed in the first position of the set of states in the representation. In particular, if irrep is an <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>, irrep[0] and irrep.getHighestWeight() return the same state. <simplesect kind="return"><para>The highest weight state (an <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref>) of the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="146" column="18" bodyfile="src/marty/core/representation.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a59f5ccfdbe310fc97dc840006f6f4c8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &gt;</type>
        <definition>vector&lt; AlgebraState &gt; mty::Irrep::getRep</definition>
        <argsstring>() const</argsstring>
        <name>getRep</name>
        <qualifiedname>mty::Irrep::getRep</qualifiedname>
        <briefdescription>
<para>Returns all the states in the representation. </para>
        </briefdescription>
        <detaileddescription>
<para>The highest weight state is always in first position, then come all states found in the chain rules. See <ref refid="classmty_1_1SemiSimpleAlgebra_1a88a9a01df2e34c751d96a8d7ed448606" kindref="member">SemiSimpleAlgebra::highestWeightRep()</ref> to have more informations about the process. Note that taking the number of states in the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> does not yield its dimension as some states may have a multiplicity different than <formula id="15">$ 1 $</formula>. To have the dimension of the representation see <ref refid="classmty_1_1Irrep_1a6ba42d50f912eb0f2068aa586c6b37f5" kindref="member">Irrep::getDim()</ref>. <simplesect kind="return"><para>The set of states in the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>, <bold>rep</bold>, in a std::vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="159" column="17" bodyfile="src/marty/core/representation.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a96ce919b9b317d4a7a5df2ceb90894a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>vector&lt; int &gt; mty::Irrep::getMult</definition>
        <argsstring>() const</argsstring>
        <name>getMult</name>
        <qualifiedname>mty::Irrep::getMult</qualifiedname>
        <briefdescription>
<para>Returns the multiplicities in a std::vector of integers. </para>
        </briefdescription>
        <detaileddescription>
<para>Each multiplicity may be equal to 1 or greater. The multiplicity of the highesst weight state (in first position) is always 1. There is a 1 to 1 correspondance between the multiplicities returned by this function and the AlgebraStates returned by <ref refid="classmty_1_1Irrep_1a59f5ccfdbe310fc97dc840006f6f4c8c" kindref="member">Irrep::getRep()</ref>. Taking the sum of the multiplicities, one gets the total dimension of the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> ( also given by <ref refid="classmty_1_1Irrep_1a6ba42d50f912eb0f2068aa586c6b37f5" kindref="member">Irrep::getDim()</ref>):  <formula id="261">\[d =
\sum _{s}m_s,\]</formula> <formula id="262">$ m_s $</formula> the multiplicity of the state <formula id="263">$ s $</formula> summed over all states in the representation. <simplesect kind="return"><para>The set of multiplicities of all the states in the rep, <bold>mult</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="173" column="17" bodyfile="src/marty/core/representation.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a148c4f3acbb79fe959ee544a181ad9a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref></type>
        <definition>Irrep mty::Irrep::getConjugatedRep</definition>
        <argsstring>() const</argsstring>
        <name>getConjugatedRep</name>
        <qualifiedname>mty::Irrep::getConjugatedRep</qualifiedname>
        <briefdescription>
<para>Creates and returns the conjugated rep, i.e. the rep with inverted dinkin labels. </para>
        </briefdescription>
        <detaileddescription>
<para>For a reprentation of labels  <formula id="264">$ a_i
$</formula>, <formula id="265">$i$</formula> from 0 to <formula id="266">$l-1$</formula>, the conjugated representation has labels <formula id="267">$ c_i = a_{l-i-1} $</formula>. <simplesect kind="return"><para>The conjugated representation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="181" column="11" bodyfile="src/marty/core/representation.cpp" bodystart="119" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a568e2b202134670805e223f59ced102d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &amp;</type>
        <definition>AlgebraState &amp; mty::Irrep::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <qualifiedname>mty::Irrep::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the state in position i. Bound checks are done. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> in position <bold>i</bold> of the rep. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="188" column="18" bodyfile="src/marty/core/representation.cpp" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1aaa4527437e56423ea7b5ae623596f02e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref></type>
        <definition>AlgebraState mty::Irrep::operator[]</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>mty::Irrep::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the state in position i. Bound checks are done. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A the <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> in position <bold>i</bold> of the rep. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="195" column="18" bodyfile="src/marty/core/representation.cpp" bodystart="141" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a587c45ccb58555d54db1188678f4caf9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::Irrep::operator&lt;</definition>
        <argsstring>(const Irrep &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>mty::Irrep::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator, compares the dimension of the two <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> in order to sort <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> objects by their dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if <bold>*this</bold> has a dimension less than <bold>other</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="204" column="5" bodyfile="src/marty/core/representation.cpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a8c68f1226e802a8d2dfb2d468175e13d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::Irrep::operator&gt;</definition>
        <argsstring>(const Irrep &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>mty::Irrep::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator, compares the dimension of the two <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> in order to sort <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> objects by their dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if <bold>other</bold> has a dimension less than <bold>*this</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="213" column="10" bodyfile="src/marty/core/representation.cpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a5b3bdefce65717dc8621100bb6da44c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::Irrep::operator&gt;=</definition>
        <argsstring>(const Irrep &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>mty::Irrep::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator, compares the dimension of the two <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> in order to sort <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> objects by their dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>False</bold> if <bold>*this</bold> has a dimension less than <bold>other</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>True</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="222" column="10" bodyfile="src/marty/core/representation.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a03d70e0d91ab4162c7a3cf0b3a600c55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::Irrep::operator&lt;=</definition>
        <argsstring>(const Irrep &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>mty::Irrep::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator, compares the dimension of the two <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> in order to sort <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> objects by their dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>False</bold> if <bold>other</bold> has a dimension less than <bold>*this</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>True</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="231" column="5" bodyfile="src/marty/core/representation.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a53ef2914018d792c05c9c3507e7366c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::Irrep::operator==</definition>
        <argsstring>(const Irrep &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>mty::Irrep::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares two Irreps. </para>
        </briefdescription>
        <detaileddescription>
<para>If the algebras of the two <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> are identical but different objects in memory, this function return <bold>false</bold>. For example <formula id="268">$ SU(2)_{s} $</formula> and <formula id="269">$ SU(2)_L $</formula> for spin and weak isospin have the same algebra but are different objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> have the same highest weight, in the same algebra. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="244" column="10" bodyfile="src/marty/core/representation.cpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a6a15bd8777835201e229dcf5604cdaba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::Irrep::operator!=</definition>
        <argsstring>(const Irrep &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>mty::Irrep::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Inverse of <ref refid="classmty_1_1Irrep_1a53ef2914018d792c05c9c3507e7366c1" kindref="member">Irrep::operator==()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two irreps are different. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="252" column="10" bodyfile="src/marty/core/representation.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a987c1664e8b56bd4a616de8981fbaf95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref></type>
        <definition>SumIrrep mty::Irrep::operator+</definition>
        <argsstring>(const Irrep &amp;other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>mty::Irrep::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implements the sum of the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> with another (<bold>other</bold>), stores it in a <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>For two representations  <formula id="270">$
\mathcal{R}_1 $</formula> and <formula id="271">$ \mathcal{R}_2 $</formula>, the sum is simply  <formula id="272">$
\mathcal{R}_1\oplus \mathcal{R}_2$</formula>, stored (and sorted by increasing dimension) in a <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref>. <simplesect kind="return"><para><bold>True</bold> if <bold>other</bold> has a dimension less than <bold>*this</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Second operand in the sum. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> of ***this** and <bold>other</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="263" column="14" bodyfile="src/marty/core/representation.cpp" bodystart="188" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a9b6e35cc7928b8a5cb75ceb68180a1e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref></type>
        <definition>SumIrrep mty::Irrep::operator+</definition>
        <argsstring>(const SumIrrep &amp;other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>mty::Irrep::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implements the sum of the <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> with a <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> (<bold>other</bold>), stores it in a <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> similar to <bold>other</bold> and append to it the current <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> *this. The new <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> is then automatically inserted and sorted regarding its dimension. For example <formula id="273">$(1\oplus 8\oplus 10)+8 = 1\oplus 8\oplus 8\oplus 10$</formula>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Second operand in the sum. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> of ***this** and <bold>other</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="274" column="14" bodyfile="src/marty/core/representation.cpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a91aec65a6a6e340e34d7b561f15ac596" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref></type>
        <definition>SumIrrep mty::Irrep::operator*</definition>
        <argsstring>(const Irrep &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>mty::Irrep::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculates and returns the product of ***this** and <bold>other</bold> in the form of a sum of irreducible representations. </para>
        </briefdescription>
        <detaileddescription>
<para>For more details on how the decomposition is determined from the two initial <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> objects, see <ref refid="classmty_1_1SemiSimpleAlgebra_1a6b115c5f8711fd19ec740f3b72cc2535" kindref="member">SemiSimpleAlgebra::tensorProduct()</ref>. For example in <formula id="238">$ SU(3) $</formula> we have  <formula id="274">\[ 8\times 8=1\oplus 8\oplus
8\oplus 10 \oplus 10\oplus 27.\]</formula> The two initial <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> of dimension 8 give a total dimension of 64, decomposing into 5 irreducible representations of total dimension <formula id="275">$1+8+8+10+10+27=64$</formula>.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand in the product of representation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The product decomposed in <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="288" column="14" bodyfile="src/marty/core/representation.cpp" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1Irrep_1a1a1789f8fe86c4e739b6410b1d3aa06b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref></type>
        <definition>SumIrrep mty::Irrep::operator*</definition>
        <argsstring>(const SumIrrep &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>mty::Irrep::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculates and returns the product of ***this** and <bold>other</bold> in the form of a sum of irreducible representations. <bold>other</bold> being already a sum, the product is developped before being calculated. </para>
        </briefdescription>
        <detaileddescription>
<para>See Irrep::operator*(Irrep const&amp; other) for more details. Here the product is simply developped to get a sum of products of two <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>. For example in <formula id="239">$ SU(2) $</formula>  <formula id="276">\[ (1\oplus 3)\times 2 = (1\times 2)\oplus
(3\times 2) = 2\oplus 2\oplus 4.\]</formula> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand in the product of representation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The product decomposed in sum of <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="301" column="14" bodyfile="src/marty/core/representation.cpp" bodystart="212" bodyend="215"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classmty_1_1Irrep_1aa1e901779fc6412e8498235d65a4352b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const Irrep &amp;irrep)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::Irrep::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
<para>Overload of the operator&lt;&lt; for <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref>. Displays the highest weight and the dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irrep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> to display. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The modified flux. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.h" line="310" column="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Handles the irreducible representation of a given semi-simple algebra. </para>
    </briefdescription>
    <detaileddescription>
<para>The irrep is defined by a highest weight state, and all derived states (related by annihilation operators) with their multiplicities. This class is mostly a containor for the set of states (and their multiplicities) in the representation. Computations are done by <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>csl::Expr</label>
        <link refid="classcsl_1_1Expr"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>mty::AlgebraState</label>
        <link refid="classmty_1_1AlgebraState"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>mty::Irrep</label>
        <link refid="classmty_1_1Irrep"/>
        <childnode refid="2" relation="usage">
          <edgelabel>algebra</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>highestWeight</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>mty::SemiSimpleAlgebra</label>
        <link refid="classmty_1_1SemiSimpleAlgebra"/>
        <childnode refid="3" relation="usage">
          <edgelabel>inverseCartan</edgelabel>
          <edgelabel>symbolicCartan</edgelabel>
          <edgelabel>symbolicMetric</edgelabel>
          <edgelabel>symbolicRho</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::shared_ptr&lt; csl::Abstract &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
      <node id="6">
        <label>std::vector&lt; int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/marty/core/representation.h" line="43" column="1" bodyfile="src/marty/core/representation.h" bodystart="43" bodyend="341"/>
    <listofallmembers>
      <member refid="classmty_1_1Irrep_1a3efd36a5effd893b80466f39b5727ef3" prot="protected" virt="non-virtual"><scope>mty::Irrep</scope><name>algebra</name></member>
      <member refid="classmty_1_1Irrep_1a603cd4638563192bcb4cb15c8fc85ce8" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>begin</name></member>
      <member refid="classmty_1_1Irrep_1a572d9061e8b46c18f78822a2962077cd" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>begin</name></member>
      <member refid="classmty_1_1Irrep_1a65c981a311c7c6a6c9b9f11c388198e5" prot="protected" virt="non-virtual"><scope>mty::Irrep</scope><name>dim</name></member>
      <member refid="classmty_1_1Irrep_1a98917cf22e1407f41f3ef691dab3868b" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>empty</name></member>
      <member refid="classmty_1_1Irrep_1a4629f9623eb2730c05c668c7b55abca1" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>end</name></member>
      <member refid="classmty_1_1Irrep_1a92891f62790771ac6ef36c90b2786500" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>end</name></member>
      <member refid="classmty_1_1Irrep_1aec275f24fa6f3afdb3c22d38e0c5d67a" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>getAlgebra</name></member>
      <member refid="classmty_1_1Irrep_1a517e0648051a8874b5348b8706292fe1" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>getCharge</name></member>
      <member refid="classmty_1_1Irrep_1a148c4f3acbb79fe959ee544a181ad9a4" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>getConjugatedRep</name></member>
      <member refid="classmty_1_1Irrep_1a6ba42d50f912eb0f2068aa586c6b37f5" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>getDim</name></member>
      <member refid="classmty_1_1Irrep_1a6f74c9436450fe9881190af95637cdf7" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>getHighestWeight</name></member>
      <member refid="classmty_1_1Irrep_1a96ce919b9b317d4a7a5df2ceb90894a3" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>getMult</name></member>
      <member refid="classmty_1_1Irrep_1a59f5ccfdbe310fc97dc840006f6f4c8c" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>getRep</name></member>
      <member refid="classmty_1_1Irrep_1abf397fb63c82a8209dfc21e593fb84a2" prot="protected" virt="non-virtual"><scope>mty::Irrep</scope><name>highestWeight</name></member>
      <member refid="classmty_1_1Irrep_1af02304bb098b5816d4a2a800dd4e0d9d" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>Irrep</name></member>
      <member refid="classmty_1_1Irrep_1a22a2faee4d7f13a2032562cd202258d0" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>Irrep</name></member>
      <member refid="classmty_1_1Irrep_1aac6adad7a7c315eb95d4ddd7e169e579" prot="protected" virt="non-virtual"><scope>mty::Irrep</scope><name>mult</name></member>
      <member refid="classmty_1_1Irrep_1a6a15bd8777835201e229dcf5604cdaba" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator!=</name></member>
      <member refid="classmty_1_1Irrep_1a91aec65a6a6e340e34d7b561f15ac596" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator*</name></member>
      <member refid="classmty_1_1Irrep_1a1a1789f8fe86c4e739b6410b1d3aa06b" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator*</name></member>
      <member refid="classmty_1_1Irrep_1a987c1664e8b56bd4a616de8981fbaf95" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator+</name></member>
      <member refid="classmty_1_1Irrep_1a9b6e35cc7928b8a5cb75ceb68180a1e6" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator+</name></member>
      <member refid="classmty_1_1Irrep_1a587c45ccb58555d54db1188678f4caf9" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator&lt;</name></member>
      <member refid="classmty_1_1Irrep_1aa1e901779fc6412e8498235d65a4352b" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmty_1_1Irrep_1a03d70e0d91ab4162c7a3cf0b3a600c55" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator&lt;=</name></member>
      <member refid="classmty_1_1Irrep_1a53ef2914018d792c05c9c3507e7366c1" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator==</name></member>
      <member refid="classmty_1_1Irrep_1a8c68f1226e802a8d2dfb2d468175e13d" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator&gt;</name></member>
      <member refid="classmty_1_1Irrep_1a5b3bdefce65717dc8621100bb6da44c9" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator&gt;=</name></member>
      <member refid="classmty_1_1Irrep_1a568e2b202134670805e223f59ced102d" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator[]</name></member>
      <member refid="classmty_1_1Irrep_1aaa4527437e56423ea7b5ae623596f02e" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>operator[]</name></member>
      <member refid="classmty_1_1Irrep_1a32d72d2b94e4b0f330828ed2713fa713" prot="protected" virt="non-virtual"><scope>mty::Irrep</scope><name>rep</name></member>
      <member refid="classmty_1_1Irrep_1a7ad63f1d678f54c51cae46f8788463c3" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>size</name></member>
      <member refid="classmty_1_1Irrep_1a01071cf054d1d91e6e7b82d114266ded" prot="public" virt="non-virtual"><scope>mty::Irrep</scope><name>~Irrep</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
