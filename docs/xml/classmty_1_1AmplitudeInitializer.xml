<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classmty_1_1AmplitudeInitializer" kind="class" language="C++" prot="public">
    <compoundname>mty::AmplitudeInitializer</compoundname>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1a14863d5af6c49cc6652204705cc35714" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">mty::Lagrangian::TermType</ref> &gt;</type>
        <definition>std::vector&lt;mty::Lagrangian::TermType&gt; mty::AmplitudeInitializer::defaultL</definition>
        <argsstring></argsstring>
        <name>defaultL</name>
        <qualifiedname>mty::AmplitudeInitializer::defaultL</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="126" column="31" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1acce3118c26f825bc7479a922aba1a46e" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">mty::FeynmanRule</ref> const * &gt;</type>
        <definition>std::vector&lt;mty::FeynmanRule const *&gt; mty::AmplitudeInitializer::defaultFR</definition>
        <argsstring></argsstring>
        <name>defaultFR</name>
        <qualifiedname>mty::AmplitudeInitializer::defaultFR</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="127" column="32" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="127" bodyend="127"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1a236a0d19b8eb803b821c50acdf800a6b" prot="private" static="no" mutable="no">
        <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const  *</type>
        <definition>mty::Model const* mty::AmplitudeInitializer::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <qualifiedname>mty::AmplitudeInitializer::model</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="129" column="35" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1a90939b96f77b0c7bdf9fd76762f319b8" prot="private" static="no" mutable="no">
        <type><ref refid="classmty_1_1FeynOptions" kindref="compound">mty::FeynOptions</ref></type>
        <definition>mty::FeynOptions mty::AmplitudeInitializer::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <qualifiedname>mty::AmplitudeInitializer::options</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="130" column="36" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1a80132f7408ed8b64a9da33ccab1563f8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt;</type>
        <definition>std::vector&lt;mty::QuantumField&gt; mty::AmplitudeInitializer::insertions</definition>
        <argsstring></argsstring>
        <name>insertions</name>
        <qualifiedname>mty::AmplitudeInitializer::insertions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="131" column="17" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1a7960e6d7ee27edc02001976f1a3474f2" prot="private" static="no" mutable="no">
        <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref></type>
        <definition>Kinematics mty::AmplitudeInitializer::kinematics</definition>
        <argsstring></argsstring>
        <name>kinematics</name>
        <qualifiedname>mty::AmplitudeInitializer::kinematics</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="132" column="36" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1ac8666a728b1e222738e9e2711675ee15" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::AmplitudeInitializer::feynRuleMode</definition>
        <argsstring></argsstring>
        <name>feynRuleMode</name>
        <qualifiedname>mty::AmplitudeInitializer::feynRuleMode</qualifiedname>
        <briefdescription>
<para>True if the calculation a calculation of Feynman rules (using the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>), false if the calculation uses Feynman rules. </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on the value of this boolean, one of the two references (<bold>lagrangian</bold> or <bold>feynmanRules</bold>) is a reference to an empty container while only the other is used in the calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="142" column="10" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1aff4c843ce222ccd55cb2f8a2807a7905" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">mty::Lagrangian::TermType</ref> &gt; &amp;</type>
        <definition>std::vector&lt;mty::Lagrangian::TermType&gt;&amp; mty::AmplitudeInitializer::lagrangian</definition>
        <argsstring></argsstring>
        <name>lagrangian</name>
        <qualifiedname>mty::AmplitudeInitializer::lagrangian</qualifiedname>
        <briefdescription>
<para>Reference to the lagrangian term when the calculation does not use Feynman rules, reference to an empty vector otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="148" column="17" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1AmplitudeInitializer_1aff3a03b2612eab7c6872163a53afa53f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">mty::FeynmanRule</ref> const * &gt; &amp;</type>
        <definition>std::vector&lt;mty::FeynmanRule const *&gt;&amp; mty::AmplitudeInitializer::feynmanRules</definition>
        <argsstring></argsstring>
        <name>feynmanRules</name>
        <qualifiedname>mty::AmplitudeInitializer::feynmanRules</qualifiedname>
        <briefdescription>
<para>Reference to the Feynman rules when the calculation does use Feynman rules, reference to an empty vector otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="154" column="17" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="154" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1afa4d7112eda5fc79914e3c2b6a729408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::AmplitudeInitializer::AmplitudeInitializer</definition>
        <argsstring>(mty::Model const *t_model, mty::FeynOptions const &amp;t_options, Kinematics const &amp;t_kinematics, std::vector&lt; mty::QuantumField &gt; const &amp;t_insertions, std::vector&lt; mty::Lagrangian::TermType &gt; &amp;t_lagrangian)</argsstring>
        <name>AmplitudeInitializer</name>
        <qualifiedname>mty::AmplitudeInitializer::AmplitudeInitializer</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const *</type>
          <declname>t_model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynOptions" kindref="compound">mty::FeynOptions</ref> const &amp;</type>
          <declname>t_options</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> const &amp;</type>
          <declname>t_kinematics</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; const &amp;</type>
          <declname>t_insertions</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">mty::Lagrangian::TermType</ref> &gt; &amp;</type>
          <declname>t_lagrangian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="39" column="5" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="26" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1a09e808f06a29ed834bfbfd2a9f2d341b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::AmplitudeInitializer::AmplitudeInitializer</definition>
        <argsstring>(mty::Model const *t_model, mty::FeynOptions const &amp;t_options, Kinematics const &amp;t_kinematics, std::vector&lt; mty::QuantumField &gt; const &amp;t_insertions, std::vector&lt; mty::FeynmanRule const * &gt; &amp;t_lagrangian)</argsstring>
        <name>AmplitudeInitializer</name>
        <qualifiedname>mty::AmplitudeInitializer::AmplitudeInitializer</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const *</type>
          <declname>t_model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynOptions" kindref="compound">mty::FeynOptions</ref> const &amp;</type>
          <declname>t_options</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> const &amp;</type>
          <declname>t_kinematics</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; const &amp;</type>
          <declname>t_insertions</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">mty::FeynmanRule</ref> const * &gt; &amp;</type>
          <declname>t_lagrangian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="45" column="5" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="42" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1ac637031dd43cf6e42ab80801a3237bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref></type>
        <definition>Amplitude mty::AmplitudeInitializer::getAmplitude</definition>
        <argsstring>(std::vector&lt; std::vector&lt; size_t &gt; &gt; const &amp;terms)</argsstring>
        <name>getAmplitude</name>
        <qualifiedname>mty::AmplitudeInitializer::getAmplitude</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt; &gt; const &amp;</type>
          <declname>terms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="60" column="15" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="58" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1aadc6f2a3760d930f829e5654df69734e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AmplitudeInitializer::initMomentumVertices</definition>
        <argsstring>(std::vector&lt; FeynmanRule &gt; &amp;localRules, std::map&lt; csl::Tensor, size_t &gt; &amp;vertexIds, std::vector&lt; csl::Tensor &gt; const &amp;vertices, std::vector&lt; csl::Tensor &gt; &amp;witnessVertices, csl::PseudoIntegral &amp;integral, std::vector&lt; csl::Expr &gt; &amp;fieldVertices)</argsstring>
        <name>initMomentumVertices</name>
        <qualifiedname>mty::AmplitudeInitializer::initMomentumVertices</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt; &amp;</type>
          <declname>localRules</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, size_t &gt; &amp;</type>
          <declname>vertexIds</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; const &amp;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; &amp;</type>
          <declname>witnessVertices</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1PseudoIntegral" kindref="compound">csl::PseudoIntegral</ref> &amp;</type>
          <declname>integral</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>fieldVertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="62" column="10" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="432" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1af3d1a644a4493e47b8d88a881a83dba6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; size_t &gt; &gt; mty::AmplitudeInitializer::getExternalSymmetries</definition>
        <argsstring>(csl::Expr &amp;fieldProd) const</argsstring>
        <name>getExternalSymmetries</name>
        <qualifiedname>mty::AmplitudeInitializer::getExternalSymmetries</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>fieldProd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="70" column="5" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="458" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1ae2ba852157d9a11eb09a1a9efdae4752" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::AmplitudeInitializer::applyExternalSymmetries</definition>
        <argsstring>(csl::Expr const &amp;res, std::vector&lt; size_t &gt; perm) const</argsstring>
        <name>applyExternalSymmetries</name>
        <qualifiedname>mty::AmplitudeInitializer::applyExternalSymmetries</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt;</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="73" column="5" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="503" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1a78b65478e30390fb5ea86d70e8e4f93f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::AmplitudeInitializer::applyAllExternalSymmetries</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;init, std::vector&lt; std::vector&lt; size_t &gt; &gt;::iterator first, std::vector&lt; std::vector&lt; size_t &gt; &gt;::iterator last) const</argsstring>
        <name>applyAllExternalSymmetries</name>
        <qualifiedname>mty::AmplitudeInitializer::applyAllExternalSymmetries</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;::iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;::iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="76" column="17" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="607" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1a71ec883f6b0098a2f6545902a06194aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AmplitudeInitializer::simplifyFullQuantumCalculation</definition>
        <argsstring>(mty::FeynmanDiagram &amp;diagram, csl::PseudoIntegral const &amp;integral, std::vector&lt; size_t &gt; const &amp;posTerms, std::vector&lt; std::vector&lt; size_t &gt; &gt; &amp;externalSym)</argsstring>
        <name>simplifyFullQuantumCalculation</name>
        <qualifiedname>mty::AmplitudeInitializer::simplifyFullQuantumCalculation</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanDiagram" kindref="compound">mty::FeynmanDiagram</ref> &amp;</type>
          <declname>diagram</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1PseudoIntegral" kindref="compound">csl::PseudoIntegral</ref> const &amp;</type>
          <declname>integral</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>posTerms</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt; &gt; &amp;</type>
          <declname>externalSym</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="81" column="10" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="233" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1a2d399f021b22a915bc43751d8f2ac913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AmplitudeInitializer::simplifyRuledCalculation</definition>
        <argsstring>(mty::FeynmanDiagram &amp;diagram, csl::PseudoIntegral const &amp;integral, std::vector&lt; csl::Tensor &gt; const &amp;witnessVericesx, FeynruleMomentum &amp;momentumMapping)</argsstring>
        <name>simplifyRuledCalculation</name>
        <qualifiedname>mty::AmplitudeInitializer::simplifyRuledCalculation</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanDiagram" kindref="compound">mty::FeynmanDiagram</ref> &amp;</type>
          <declname>diagram</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1PseudoIntegral" kindref="compound">csl::PseudoIntegral</ref> const &amp;</type>
          <declname>integral</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; const &amp;</type>
          <declname>witnessVericesx</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynruleMomentum" kindref="compound">FeynruleMomentum</ref> &amp;</type>
          <declname>momentumMapping</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="88" column="5" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="276" bodyend="323"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1aa536097cb5af2814c5824095f68910f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref></type>
        <definition>static Amplitude mty::AmplitudeInitializer::getAmplitude</definition>
        <argsstring>(std::vector&lt; std::vector&lt; size_t &gt; &gt; const &amp;terms, Args &amp;&amp;... args)</argsstring>
        <name>getAmplitude</name>
        <qualifiedname>mty::AmplitudeInitializer::getAmplitude</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt; &gt; const &amp;</type>
          <declname>terms</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="53" column="5" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1a9c3e72e7047d4d81848b393d30d3f03d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AmplitudeInitializer::removeZeroDiagrams</definition>
        <argsstring>(std::vector&lt; FeynmanDiagram &gt; &amp;diagrams)</argsstring>
        <name>removeZeroDiagrams</name>
        <qualifiedname>mty::AmplitudeInitializer::removeZeroDiagrams</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanDiagram" kindref="compound">FeynmanDiagram</ref> &gt; &amp;</type>
          <declname>diagrams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="93" column="17" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="325" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1a287930853bc3a52e92237faab2dff783" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::AmplitudeInitializer::getLSZInsertions</definition>
        <argsstring>(std::vector&lt; mty::QuantumField &gt; const &amp;fields, Kinematics &amp;kinematics, bool feynRuleCalculation)</argsstring>
        <name>getLSZInsertions</name>
        <qualifiedname>mty::AmplitudeInitializer::getLSZInsertions</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> &amp;</type>
          <declname>kinematics</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>feynRuleCalculation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="96" column="5" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="335" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1ad1d5ebb3c1e1f081b0b6752882b92aae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt;</type>
        <definition>std::vector&lt; csl::Tensor &gt; mty::AmplitudeInitializer::getVertices</definition>
        <argsstring>(size_t N)</argsstring>
        <name>getVertices</name>
        <qualifiedname>mty::AmplitudeInitializer::getVertices</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="100" column="24" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="369" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1a4794e7e53ef22e85c702733102e6618b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AmplitudeInitializer::orderInsertions</definition>
        <argsstring>(std::vector&lt; mty::QuantumField &gt; &amp;insertions, Kinematics &amp;kinematics, FeynOptions &amp;options)</argsstring>
        <name>orderInsertions</name>
        <qualifiedname>mty::AmplitudeInitializer::orderInsertions</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> &amp;</type>
          <declname>kinematics</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynOptions" kindref="compound">FeynOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Order the field insertions (important for fermion ordering), applying the permutation to the associated kinematics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insertions</parametername>
</parameternamelist>
<parameterdescription>
<para>Insertions to order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinematics</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> that will follow the same order as the insertions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="110" column="17" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="391" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1a93faee99544b9c8604f4346f30392376" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AmplitudeInitializer::applyMomentumVertices</definition>
        <argsstring>(std::vector&lt; csl::Tensor &gt; const &amp;witnessVertices, FeynruleMomentum &amp;momentumMapping, csl::Expr &amp;amplitude)</argsstring>
        <name>applyMomentumVertices</name>
        <qualifiedname>mty::AmplitudeInitializer::applyMomentumVertices</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; const &amp;</type>
          <declname>witnessVertices</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynruleMomentum" kindref="compound">FeynruleMomentum</ref> &amp;</type>
          <declname>momentumMapping</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>amplitude</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="115" column="5" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="625" bodyend="651"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1af263c9786ae7f061570565528063224d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref></type>
        <definition>Amplitude mty::AmplitudeInitializer::fullQuantumCalculation</definition>
        <argsstring>(std::vector&lt; std::vector&lt; size_t &gt; &gt; const &amp;terms)</argsstring>
        <name>fullQuantumCalculation</name>
        <qualifiedname>mty::AmplitudeInitializer::fullQuantumCalculation</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt; &gt; const &amp;</type>
          <declname>terms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="121" column="5" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="86" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1AmplitudeInitializer_1ab519098cd5d61df2de0ee3479c644083" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref></type>
        <definition>Amplitude mty::AmplitudeInitializer::ruledCalculation</definition>
        <argsstring>(std::vector&lt; std::vector&lt; size_t &gt; &gt; const &amp;terms)</argsstring>
        <name>ruledCalculation</name>
        <qualifiedname>mty::AmplitudeInitializer::ruledCalculation</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt; &gt; const &amp;</type>
          <declname>terms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.h" line="123" column="15" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="139" bodyend="231"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/marty/core/amplitudeInitializer.h" line="36" column="1" bodyfile="src/marty/core/amplitudeInitializer.h" bodystart="36" bodyend="155"/>
    <listofallmembers>
      <member refid="classmty_1_1AmplitudeInitializer_1afa4d7112eda5fc79914e3c2b6a729408" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>AmplitudeInitializer</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a09e808f06a29ed834bfbfd2a9f2d341b" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>AmplitudeInitializer</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a78b65478e30390fb5ea86d70e8e4f93f" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>applyAllExternalSymmetries</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1ae2ba852157d9a11eb09a1a9efdae4752" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>applyExternalSymmetries</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a93faee99544b9c8604f4346f30392376" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>applyMomentumVertices</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1acce3118c26f825bc7479a922aba1a46e" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>defaultFR</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a14863d5af6c49cc6652204705cc35714" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>defaultL</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1aff3a03b2612eab7c6872163a53afa53f" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>feynmanRules</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1ac8666a728b1e222738e9e2711675ee15" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>feynRuleMode</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1af263c9786ae7f061570565528063224d" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>fullQuantumCalculation</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1aa536097cb5af2814c5824095f68910f3" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>getAmplitude</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1ac637031dd43cf6e42ab80801a3237bd2" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>getAmplitude</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1af3d1a644a4493e47b8d88a881a83dba6" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>getExternalSymmetries</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a287930853bc3a52e92237faab2dff783" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>getLSZInsertions</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1ad1d5ebb3c1e1f081b0b6752882b92aae" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>getVertices</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1aadc6f2a3760d930f829e5654df69734e" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>initMomentumVertices</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a80132f7408ed8b64a9da33ccab1563f8" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>insertions</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a7960e6d7ee27edc02001976f1a3474f2" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>kinematics</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1aff4c843ce222ccd55cb2f8a2807a7905" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>lagrangian</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a236a0d19b8eb803b821c50acdf800a6b" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>model</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a90939b96f77b0c7bdf9fd76762f319b8" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>options</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a4794e7e53ef22e85c702733102e6618b" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>orderInsertions</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a9c3e72e7047d4d81848b393d30d3f03d" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>removeZeroDiagrams</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1ab519098cd5d61df2de0ee3479c644083" prot="private" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>ruledCalculation</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a71ec883f6b0098a2f6545902a06194aa" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>simplifyFullQuantumCalculation</name></member>
      <member refid="classmty_1_1AmplitudeInitializer_1a2d399f021b22a915bc43751d8f2ac913" prot="public" virt="non-virtual"><scope>mty::AmplitudeInitializer</scope><name>simplifyRuledCalculation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
