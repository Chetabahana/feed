<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1TensorFieldElement" kind="class" language="C++" prot="public">
    <compoundname>csl::TensorFieldElement</compoundname>
    <basecompoundref refid="classcsl_1_1TensorElement" prot="public" virt="non-virtual">csl::TensorElement</basecompoundref>
    <derivedcompoundref refid="classcsl_1_1Operator" prot="public" virt="non-virtual">csl::Operator&lt; TensorFieldElement &gt;</derivedcompoundref>
    <derivedcompoundref refid="classmty_1_1QuantumField" prot="public" virt="non-virtual">mty::QuantumField</derivedcompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classcsl_1_1TensorFieldElement_1afac4c3b974119ba3ecc7e093abcd28c2" prot="protected" static="no" mutable="yes">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor csl::TensorFieldElement::point</definition>
        <argsstring></argsstring>
        <name>point</name>
        <qualifiedname>csl::TensorFieldElement::point</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="184" column="20" bodyfile="src/csl/tensorField.h" bodystart="184" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a36078184224c07158d5eb1268128d670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::TensorFieldElement::TensorFieldElement</definition>
        <argsstring>(const Tensor &amp;t_vector, const Parent &amp;t_parent)</argsstring>
        <name>TensorFieldElement</name>
        <qualifiedname>csl::TensorFieldElement::TensorFieldElement</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_vector</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref> &amp;</type>
          <declname>t_parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="188" column="5" bodyfile="src/csl/tensorField.cpp" bodystart="602" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a9c35e9c1bae8f34130311b027fab9867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::TensorFieldElement::TensorFieldElement</definition>
        <argsstring>(const Tensor &amp;t_vector, const Parent &amp;t_parent, const std::vector&lt; Index &gt; &amp;indices)</argsstring>
        <name>TensorFieldElement</name>
        <qualifiedname>csl::TensorFieldElement::TensorFieldElement</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_vector</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref> &amp;</type>
          <declname>t_parent</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="191" column="5" bodyfile="src/csl/tensorField.cpp" bodystart="608" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a16cf2e827a2ee85322fea69b4e779827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::TensorFieldElement::TensorFieldElement</definition>
        <argsstring>(const Tensor &amp;t_vector, const Parent &amp;t_parent, const IndexStructure &amp;indices)</argsstring>
        <name>TensorFieldElement</name>
        <qualifiedname>csl::TensorFieldElement::TensorFieldElement</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_vector</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref> &amp;</type>
          <declname>t_parent</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="195" column="5" bodyfile="src/csl/tensorField.cpp" bodystart="615" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1ab09e4e36b98ea53f96c817d7af2c9368" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::TensorFieldElement::~TensorFieldElement</definition>
        <argsstring>()</argsstring>
        <name>~TensorFieldElement</name>
        <qualifiedname>csl::TensorFieldElement::~TensorFieldElement</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="203" column="5" bodyfile="src/csl/tensorField.h" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1aab050fd18460d4842d8972a990363b0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacecsl_1a70046459ec0082db8cb97005c13c9a54" kindref="member">csl::PrimaryType</ref></type>
        <definition>csl::PrimaryType csl::TensorFieldElement::getPrimaryType</definition>
        <argsstring>() const override</argsstring>
        <name>getPrimaryType</name>
        <qualifiedname>csl::TensorFieldElement::getPrimaryType</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a1c246057031fbc18868bac66d13be37c">getPrimaryType</reimplements>
        <briefdescription>
<para>Gives the <bold>primary</bold> <bold>type</bold> of <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In the program this function is very often called. It allows different functions to know what type of expr they are manipulating (single number, scalar function with one argument, with multiple argumments, a <ref refid="classcsl_1_1Vector" kindref="compound">Vector</ref>, etc) in order to do special treatments or simplifications. <simplesect kind="return"><para>type (a non memorized integer corresponding to the type of abstract) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="205" column="22" bodyfile="src/csl/tensorField.cpp" bodystart="622" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1ab78b88ff1b49707ee98aee3211214044" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312" kindref="member">csl::Type</ref></type>
        <definition>csl::Type csl::TensorFieldElement::getType</definition>
        <argsstring>() const override</argsstring>
        <name>getType</name>
        <qualifiedname>csl::TensorFieldElement::getType</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a7b99f83fdff13fb508ea8e671d4dc834">getType</reimplements>
        <briefdescription>
<para>Gives the <bold>type</bold> of <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In the program this function is very often called. It allows different functions to know what type of expr they are manipulating (cos, product, number, etc) in order to do special treatments or simplifications. <simplesect kind="return"><para>type (a non memorized integer corresponding to the type of abstract) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="207" column="15" bodyfile="src/csl/tensorField.cpp" bodystart="627" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a9bc54de57d7301838f673c014ed9d79f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool csl::TensorFieldElement::isIndexed</definition>
        <argsstring>() const override</argsstring>
        <name>isIndexed</name>
        <qualifiedname>csl::TensorFieldElement::isIndexed</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1acc36470e69d6edf43f6dd7b6db0365d2">isIndexed</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the expression is indexed. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="209" column="10" bodyfile="src/csl/tensorField.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1ac80748b3601cff1ed0df3b721316b950" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>Tensor csl::TensorFieldElement::getPoint</definition>
        <argsstring>() const override</argsstring>
        <name>getPoint</name>
        <qualifiedname>csl::TensorFieldElement::getPoint</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a06b32036fea6a2583f506a6ef9508d74">getPoint</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="213" column="17" bodyfile="src/csl/tensorField.cpp" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a7e1e7f28a0fcc04320d737dad3f59c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::TensorFieldElement::setPoint</definition>
        <argsstring>(csl::Tensor const &amp;t_point) override</argsstring>
        <name>setPoint</name>
        <qualifiedname>csl::TensorFieldElement::setPoint</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a3c175411df619e7504feb6d888fc82f1">setPoint</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="215" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="637" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a2fd246ff5dd8ac7e1d1e474ac03b6a57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unique_Expr</type>
        <definition>unique_Expr csl::TensorFieldElement::copy_unique</definition>
        <argsstring>() const override</argsstring>
        <name>copy_unique</name>
        <qualifiedname>csl::TensorFieldElement::copy_unique</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a089c8106691497aa93d1c1f684752110">copy_unique</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="217" column="17" bodyfile="src/csl/tensorField.cpp" bodystart="645" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a61c01a40bd7efdaa5d20e70a74efa215" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::TensorFieldElement::refresh</definition>
        <argsstring>() const override</argsstring>
        <name>refresh</name>
        <qualifiedname>csl::TensorFieldElement::refresh</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1aaddb4d5269b0b77fa8a9361ec0ecd281">refresh</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="219" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="653" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1afac7a7dd245d9d1bc5f52700e2a6acb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::TensorFieldElement::print</definition>
        <argsstring>(int mode=0, std::ostream &amp;out=std::cout, LibraryMode libMode=LibraryMode::NoLib) const override</argsstring>
        <name>print</name>
        <qualifiedname>csl::TensorFieldElement::print</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a0b5baffa4b563fd8e2e8ec4ee00446b1">print</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>LibraryMode</type>
          <declname>libMode</declname>
          <defval>LibraryMode::NoLib</defval>
        </param>
        <briefdescription>
<para>Displays the abstract in standard output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Tells if the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> is printed alone (default) or in another expr. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="221" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="658" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a6d2cb1f66c717a35f4c447952720817c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::TensorFieldElement::printCode</definition>
        <argsstring>(int mode=0, std::ostream &amp;out=std::cout) const override</argsstring>
        <name>printCode</name>
        <qualifiedname>csl::TensorFieldElement::printCode</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a8c28c7b5335fef612bce15a2a3e64a0c">printCode</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="225" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="673" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1ac36fad3d18e46c353b4d961867d257cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>string csl::TensorFieldElement::printLaTeX</definition>
        <argsstring>(int mode=0) const override</argsstring>
        <name>printLaTeX</name>
        <qualifiedname>csl::TensorFieldElement::printLaTeX</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a5e4794abc02ba5d8f80f76f64e9cab9c">printLaTeX</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a LaTeX output for the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Tells if the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> is printed alone (default) or in another expr. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the LaTeX output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="230" column="17" bodyfile="src/csl/tensorField.cpp" bodystart="701" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1aa9049a79ee6b2dfd50dbfae7d48560c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> &gt;</type>
        <definition>std::vector&lt; csl::Parent &gt; csl::TensorFieldElement::getSubSymbols</definition>
        <argsstring>() const override</argsstring>
        <name>getSubSymbols</name>
        <qualifiedname>csl::TensorFieldElement::getSubSymbols</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1af028569513793f435ffbf644c0cd363f">getSubSymbols</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="232" column="17" bodyfile="src/csl/tensorField.cpp" bodystart="717" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a55ad56ca57e69bdcb5b77e6d0bf254c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::TensorFieldElement::evaluate</definition>
        <argsstring>(csl::eval::mode user_mode=csl::eval::base) const override</argsstring>
        <name>evaluate</name>
        <qualifiedname>csl::TensorFieldElement::evaluate</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1aaaa0e8d228945bad2ef6a8474a6df0c0">evaluate</reimplements>
        <param>
          <type>csl::eval::mode</type>
          <declname>user_mode</declname>
          <defval>csl::eval::base</defval>
        </param>
        <briefdescription>
<para><bold>Evaluates</bold> the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Replaces all variables by their value and evaluating. This function must be used instead of <ref refid="classcsl_1_1Abstract_1a543d5a4f0432e166b492ad28a860a65f" kindref="member">evaluateScalar()</ref> when treating not only real scalars.* In particular (x=2, y=3) x+iy evaluates to 3+ 3i whereas <ref refid="classcsl_1_1Abstract_1a543d5a4f0432e166b492ad28a860a65f" kindref="member">evaluateScalar()</ref> would return 3. <simplesect kind="return"><para>The abstract result of the evaluation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="234" column="19" bodyfile="src/csl/tensorField.cpp" bodystart="722" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1aa9de316c2975e097ea77162d7d1040c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::TensorFieldElement::commutesWith</definition>
        <argsstring>(Expr_info expr, int sign=-1) const override</argsstring>
        <name>commutesWith</name>
        <qualifiedname>csl::TensorFieldElement::commutesWith</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractBuildingBlock_1add4dd8d4ed4ea0d8817fdd79abd744cc">commutesWith</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sign</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Tells if the object commutes with expr. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if <bold>*this</bold> commutes with <bold>expr</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="238" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="729" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1ab452e8d298be5e58e28e92aa6eca1c25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::TensorFieldElement::dependsOn</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>dependsOn</name>
        <qualifiedname>csl::TensorFieldElement::dependsOn</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a14ad4f8a47af9ea009bcea3385e45bc3">dependsOn</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Check recursively if the expression depends on <bold>expr</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression to search. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if a dependency in <bold>expr</bold> is found. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="240" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="735" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1aeb70122164b2685fc291090258f59b9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::TensorFieldElement::dependsOn</definition>
        <argsstring>(Parent_info t_parent) const override</argsstring>
        <name>dependsOn</name>
        <qualifiedname>csl::TensorFieldElement::dependsOn</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a016485a4c1fe60991263a4dea94eed6e">dependsOn</reimplements>
        <param>
          <type><ref refid="classcsl_1_1AbstractParent" kindref="compound">Parent_info</ref></type>
          <declname>t_parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="242" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="740" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a43644a7030777b98a28cbaa15f229bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::TensorFieldElement::dependsExplicitlyOn</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>dependsExplicitlyOn</name>
        <qualifiedname>csl::TensorFieldElement::dependsExplicitlyOn</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a22a5c9686859930af78f51a85b31160d">dependsExplicitlyOn</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Check recursively if <bold>expr</bold> is present in the expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression to search. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if <bold>expr</bold> is found. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="244" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="746" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a7568ac709f768fc70a4797731b7d9e7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::TensorFieldElement::compareWithDummy</definition>
        <argsstring>(Expr_info other, std::map&lt; Index, Index &gt; &amp;constraints, bool keepAllCosntraints=false) const override</argsstring>
        <name>compareWithDummy</name>
        <qualifiedname>csl::TensorFieldElement::compareWithDummy</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1acd1ac409b891dd033c1792f5473d8d10">compareWithDummy</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>, <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepAllCosntraints</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Comparison disregarding name of dummy indices, i.e. the two expressions * are equals even if dummy indices have not the same names in *this and * expr. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression to compare.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>List of existing constraints between indices (it is modified in the function).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if expr == *this taking constraints into account. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="246" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="752" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1af7cde5cfd23cb3b4ca4ddbdbcf717db9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::TensorFieldElement::operator==</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::TensorFieldElement::operator==</qualifiedname>
        <reimplements refid="classcsl_1_1TensorElement_1a6ada509cc19d2040553f8f40621914db">operator==</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para><bold>Compares</bold> the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> with another. </para>
        </briefdescription>
        <detaileddescription>
<para>Here if two Abstracts have the same name, the function will return <bold>true</bold> even if they are <bold>not</bold> <bold>mathematically</bold> <bold>equal</bold>. So beware not to name different things the same way. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two Abstracts are the same (or have the same name). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="250" column="10" bodyfile="src/csl/tensorField.cpp" bodystart="766" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1TensorFieldElement_1a24e7fa91efa725e7f64891cb9ce3507a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::TensorFieldElement::operator&lt;</definition>
        <argsstring>(const Abstract *expr) const override</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>csl::TensorFieldElement::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="252" column="5" bodyfile="src/csl/simplification.cpp" bodystart="1089" bodyend="1117"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcsl_1_1TensorFieldElement_1ab9236c12275b7fb4d0d46343dcbf8f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr tensorfieldelement_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>tensorfieldelement_s</name>
        <qualifiedname>csl::TensorFieldElement::tensorfieldelement_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/tensorField.h" line="201" column="17" bodyfile="src/csl/tensorField.h" bodystart="256" bodyend="260"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>csl::Abstract</label>
        <link refid="classcsl_1_1Abstract"/>
      </node>
      <node id="5">
        <label>csl::AbstractBuildingBlock</label>
        <link refid="classcsl_1_1AbstractBuildingBlock"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>csl::AbstractElement</label>
        <link refid="classcsl_1_1AbstractElement"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>csl::Complexified</label>
        <link refid="classcsl_1_1Complexified"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>csl::Operator&lt; TensorFieldElement &gt;</label>
        <link refid="classcsl_1_1Operator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>csl::TDerivativeElement</label>
        <link refid="classcsl_1_1TDerivativeElement"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::TensorElement</label>
        <link refid="classcsl_1_1TensorElement"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>csl::TensorFieldElement</label>
        <link refid="classcsl_1_1TensorFieldElement"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>mty::PolarizationField</label>
        <link refid="classmty_1_1PolarizationField"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>mty::QuantumField</label>
        <link refid="classmty_1_1QuantumField"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>csl::Abstract</label>
        <link refid="classcsl_1_1Abstract"/>
      </node>
      <node id="5">
        <label>csl::AbstractBuildingBlock</label>
        <link refid="classcsl_1_1AbstractBuildingBlock"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>csl::AbstractElement</label>
        <link refid="classcsl_1_1AbstractElement"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>csl::Complexified</label>
        <link refid="classcsl_1_1Complexified"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>csl::IndexStructure</label>
        <link refid="classcsl_1_1IndexStructure"/>
      </node>
      <node id="9">
        <label>csl::Tensor</label>
        <link refid="classcsl_1_1Tensor"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::TensorElement</label>
        <link refid="classcsl_1_1TensorElement"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>index</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>csl::TensorFieldElement</label>
        <link refid="classcsl_1_1TensorFieldElement"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>point</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::shared_ptr&lt; TensorParent &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
      <node id="7">
        <label>std::shared_ptr&lt; csl::AbstractParent &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
    </collaborationgraph>
    <location file="src/csl/tensorField.h" line="180" column="1" bodyfile="src/csl/tensorField.h" bodystart="180" bodyend="253"/>
    <listofallmembers>
      <member refid="classcsl_1_1Abstract_1ad5fee68c1f3dcbda0e936926fed17616" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>Abstract</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a64aaa989689a7e8c262e6d9fceaff10f" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>AbstractBuildingBlock</name></member>
      <member refid="classcsl_1_1AbstractElement_1a12ebb2cd662c44ca2e60106d630dbc48" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>AbstractElement</name></member>
      <member refid="classcsl_1_1AbstractElement_1a90b37b4752b24ab6cb0a29dc3329eea4" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>AbstractElement</name></member>
      <member refid="classcsl_1_1Abstract_1a5549ac0c186b3c6febf332245a25a82c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>addAntiSymmetry</name></member>
      <member refid="classcsl_1_1Abstract_1abbab11282e5c6ac46b018642ff129f47" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>addDependency</name></member>
      <member refid="classcsl_1_1Abstract_1a101219973341a39cf15f07e5e1aa388f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>addition_own</name></member>
      <member refid="classcsl_1_1Abstract_1ad431770faa4291116a50175193a11a88" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1TensorElement_1aa2605b68051617e35fc2a443c2b38a2c" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>adjustMetricDeltaParent</name></member>
      <member refid="classcsl_1_1Abstract_1acd972aed8326d4c13534594e061ee6da" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>antisymmetrise</name></member>
      <member refid="classcsl_1_1TensorElement_1a02db643378663eb5f17011937c5c9557" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>applyBrokenIndices</name></member>
      <member refid="classcsl_1_1Complexified_1ac8174f246df45364467fffd925027808" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>applyComplexPropertiesOn</name></member>
      <member refid="classcsl_1_1Complexified_1a7b2b037721656af10cb29a077a567b30" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>applyComplexPropertiesOn</name></member>
      <member refid="classcsl_1_1Abstract_1a61d3ab932182226f4670a62bbb22af4e" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>applyDiracDelta</name></member>
      <member refid="classcsl_1_1Abstract_1a316956fea77627a716500a2bbfc1f3b7" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>applyOperator</name></member>
      <member refid="classcsl_1_1TensorElement_1ad6f100f8c15bee5c29d97d40549a6e18" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>applyPermutation</name></member>
      <member refid="classcsl_1_1TensorElement_1afbfaf24db5ee68ab64a2378248fdf7e4" prot="protected" virt="virtual"><scope>csl::TensorFieldElement</scope><name>applySelfStructureOn</name></member>
      <member refid="classcsl_1_1TensorElement_1a6ec375934423dbb60f6d00ea13ec7f80" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>askTerm</name></member>
      <member refid="classcsl_1_1Abstract_1aad54ed41b2ce9bad3364fe30ad1a0d71" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>begin</name></member>
      <member refid="classcsl_1_1Abstract_1adff373df9477d4e38581d09cc6d2fee4" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>begin</name></member>
      <member refid="classcsl_1_1TensorElement_1aafc27871bb78f0a07df8aa097d3d8a0e" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1Abstract_1aa4cba37520821432f37e212fefbc2534" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractElement::"><scope>csl::TensorFieldElement</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1TensorElement_1ad9d1474eb8d1c53835ffb3891e01b020" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>checkIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a1ebd84082bb93418408cc0babe2dffe2" prot="public" virt="virtual" ambiguityscope="csl::AbstractElement::"><scope>csl::TensorFieldElement</scope><name>checkIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1ab3746f1d3667846824ea51b8a2e00d31" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>collect</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1aa9de316c2975e097ea77162d7d1040c8" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>commutesWith</name></member>
      <member refid="classcsl_1_1TensorElement_1ad78eb0b8122b22db79ea59b4af50f7c7" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>comparePermutations</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a7568ac709f768fc70a4797731b7d9e7a" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Abstract_1a0f16fda9fe72a89c61ece36101a11d95" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractElement::"><scope>csl::TensorFieldElement</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Complexified_1a6333b0f548411b1712301806c21c2261" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>Complexified</name></member>
      <member refid="classcsl_1_1Complexified_1a785754f2eac5813fcf8aa87cc0b456bf" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>conjugated</name></member>
      <member refid="classcsl_1_1Abstract_1aed79d20a0821205e6430c80a474117d3" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>contractIndex</name></member>
      <member refid="classcsl_1_1TensorElement_1a2a301cd1beb0eecde2b83c1ca6167c59" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>contraction</name></member>
      <member refid="classcsl_1_1Abstract_1abd35096982e92b669ea55d960c5f44be" prot="public" virt="virtual" ambiguityscope="csl::AbstractElement::"><scope>csl::TensorFieldElement</scope><name>contraction</name></member>
      <member refid="classcsl_1_1Abstract_1af29c2898c5d3ba96de8018a0838c402c" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>copy</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a2fd246ff5dd8ac7e1d1e474ac03b6a57" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>copy_unique</name></member>
      <member refid="classcsl_1_1Abstract_1a09648782dcf2e81abb5b864f476cc410" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>deepCopy</name></member>
      <member refid="classcsl_1_1TensorElement_1ad0dbe5ebe94a2c21e0a8a195730820c4" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>deepRefresh</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a43644a7030777b98a28cbaa15f229bfa" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1Abstract_1a0b26ad7a44e497af296318287bac539a" prot="public" virt="virtual" ambiguityscope="csl::AbstractElement::"><scope>csl::TensorFieldElement</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1ab452e8d298be5e58e28e92aa6eca1c25" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1aeb70122164b2685fc291090258f59b9b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1TensorElement_1a7a1fc7737cce9da527d3796d2fd711d8" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>derive</name></member>
      <member refid="classcsl_1_1Abstract_1aeb08811cf370616477a92075e4a218ee" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>determinant</name></member>
      <member refid="classcsl_1_1Abstract_1a1578c74aee1050b806a67e7a81a67f5c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>division_own</name></member>
      <member refid="classcsl_1_1Abstract_1a4cc7a46deaa3eaa7593909d74e76d4af" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>dot</name></member>
      <member refid="classcsl_1_1Abstract_1a0c3c3fe5010f24e8a8765ea06415c003" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>empty</name></member>
      <member refid="classcsl_1_1Abstract_1a61e4e80d998a888a1a74d9ea3e10c0f1" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>end</name></member>
      <member refid="classcsl_1_1Abstract_1ae2761d54f13310e13f5076d565edd7ef" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>end</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a55ad56ca57e69bdcb5b77e6d0bf254c7" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>evaluate</name></member>
      <member refid="classcsl_1_1Abstract_1a543d5a4f0432e166b492ad28a860a65f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>evaluateScalar</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a7cbbd2edd75a84057f1622826c1efd3a" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>expand</name></member>
      <member refid="classcsl_1_1Abstract_1aeb48aaaa856582b6359037fe94d2419b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>expand_if</name></member>
      <member refid="classcsl_1_1Abstract_1aa2696a0feb43766ef54e1e3dd3d6d134" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>exponentiation_own</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a2f12cede626ece5382c9869d32c32146" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>factor</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a447f940bf0a08d13297fde0b50b4cb84" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>factor</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a4000d3f204c1957f5cffc0677dd754c0" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>findSubExpression</name></member>
      <member refid="classcsl_1_1Abstract_1a021946e84d8c1a019908cac578b16fe8" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getAllDependencies</name></member>
      <member refid="classcsl_1_1Abstract_1ac33a42309d629d47bfdbede4e152414e" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a06f542034e95744148f4fce5a4893e63" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a898d6cf2a7f348feacab189447bee1eb" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1aa689fb64eecb86edbde6c745d1ce756b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1TensorElement_1ad6f8f7e5b89936e1fa39661b1975c3ce" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getCanonicalPermutation</name></member>
      <member refid="classcsl_1_1AbstractElement_1ab3418bd6d3548316885c8bda0a7464b8" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getCommutable</name></member>
      <member refid="classcsl_1_1Complexified_1ab70d880a6d5eaf52b7d365c9d0c29f86" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getComplexArgument</name></member>
      <member refid="classcsl_1_1TensorElement_1a684ed9584f9bbe4ffc1e842b84a05ed0" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getComplexConjugate</name></member>
      <member refid="classcsl_1_1Complexified_1a05b65b2f6cdbc13a1d757a3f90ae7c0c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getComplexModulus</name></member>
      <member refid="classcsl_1_1AbstractElement_1a0b2c014c2c35cad27d9df5240bfb8548" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getComplexProperty</name></member>
      <member refid="classcsl_1_1Abstract_1af04c0e4426f0bf9df365afe0148d59df" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getContractedPair</name></member>
      <member refid="classcsl_1_1TensorElement_1a5f1b1ae7f3655cccd70bf09a60075b7b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getContractionProperties</name></member>
      <member refid="classcsl_1_1Abstract_1aa22f0e4c9c91f43b5cd61cbb873869eb" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getDeltaMinus</name></member>
      <member refid="classcsl_1_1Abstract_1a69a657baf1c35ed581e9db2c47a71c99" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getDeltaPlus</name></member>
      <member refid="classcsl_1_1Abstract_1a9531d78d67c82e288c0130da5b1ba80b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getDenom</name></member>
      <member refid="classcsl_1_1Abstract_1a5856c3d55a6d1406970f3656e61efe8e" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getDim</name></member>
      <member refid="classcsl_1_1Abstract_1a77e067fc57c0c2e70d141079455fdbd7" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getElementary</name></member>
      <member refid="classcsl_1_1Abstract_1ac513c930caa9939c2b9557f36a34ee69" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getExponents</name></member>
      <member refid="classcsl_1_1Abstract_1ac34c9c6f05e692faeed2f030514787ad" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getFactors</name></member>
      <member refid="classcsl_1_1Abstract_1aa4136dc23f1fba4bf897b54c8592ccfc" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getFreeIndexStructure</name></member>
      <member refid="classcsl_1_1TensorElement_1ab38b54f3efd6b9950b6d3334a224caa1" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getHermitianConjugate</name></member>
      <member refid="classcsl_1_1TensorElement_1ac1596174400a2ccd49d56b736fa8114a" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getHermitianConjugate</name></member>
      <member refid="classcsl_1_1Complexified_1a11702661de0ea3b9c59b1f23af0ca0c0" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getImaginaryPart</name></member>
      <member refid="classcsl_1_1TensorElement_1a029c4358822daed54f4f775032896790" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getIndex</name></member>
      <member refid="classcsl_1_1TensorElement_1a3dc05ca45a03e8a7f8459812e07b85f6" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1ae6a9a9ef3efd6bb83b62c0a353742d25" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractElement::"><scope>csl::TensorFieldElement</scope><name>getIndexStructure</name></member>
      <member refid="classcsl_1_1TensorElement_1abe312de6a76204dfcdc98cf4711bf353" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getIndexStructureView</name></member>
      <member refid="classcsl_1_1TensorElement_1a15b5b8ef2a249fda36f7491b634270fb" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getIndexStructureView</name></member>
      <member refid="classcsl_1_1Abstract_1a3d6b1e294cf24dea17c3c4361226138b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getInfBoundary</name></member>
      <member refid="classcsl_1_1AbstractElement_1ad8d4ceaa06fb30861b1ce4336a465f54" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getLatexName</name></member>
      <member refid="classcsl_1_1Abstract_1a652101e34b2efa43114150e9af3c79d5" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getLibDependency</name></member>
      <member refid="classcsl_1_1AbstractElement_1ae80699e259632a43c4f69a125b64ae30" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getName</name></member>
      <member refid="classcsl_1_1Abstract_1aa034448201c9e7998bbbb5e409636b30" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getNArgs</name></member>
      <member refid="classcsl_1_1Abstract_1a42125e9765a771c47819548d342b0b28" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getNContractedPairs</name></member>
      <member refid="classcsl_1_1Abstract_1a204dbd37b63432cb08932b995f49d3f4" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getNFactor</name></member>
      <member refid="classcsl_1_1TensorElement_1a5ddd03efb94ea0017def76cd6777f745" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getNIndices</name></member>
      <member refid="classcsl_1_1Abstract_1a6aa6bcc7cb8ee1574f29dc6ab6c6f0ed" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getNum</name></member>
      <member refid="classcsl_1_1Abstract_1aad25c117c8dfc4d9718ba41e8d3f33a6" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getNumericalFactor</name></member>
      <member refid="classcsl_1_1Abstract_1a9c3ec3dfe1fbd8ead5c8d9aca421a863" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getOperand</name></member>
      <member refid="classcsl_1_1Abstract_1a9500a21d75d03c695ec0c76493600b38" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getOrder</name></member>
      <member refid="classcsl_1_1Abstract_1ae89eb7b1a9e0259a60154563f3315907" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getOrderOf</name></member>
      <member refid="classcsl_1_1AbstractElement_1a9e50d48ea0ee472c5c07f3985cc6c641" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getParent</name></member>
      <member refid="classcsl_1_1AbstractElement_1acde43ab4cab544c3c0aa0d695e67b4ad" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getParent_info</name></member>
      <member refid="classcsl_1_1Abstract_1aea8459b3206eb3a2297eeea7688e9520" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getParity</name></member>
      <member refid="classcsl_1_1TensorElement_1aa0f1ab4f63aa28f3c759a666fb15636a" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getPermutations</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1ac80748b3601cff1ed0df3b721316b950" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getPoint</name></member>
      <member refid="classcsl_1_1AbstractElement_1a028ecff66278c1e385280b761388b929" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getPolynomialTerm</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1aab050fd18460d4842d8972a990363b0c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getPrimaryType</name></member>
      <member refid="classcsl_1_1Abstract_1a07489d0569bc983718796d21c73f34b3" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getProduct</name></member>
      <member refid="classcsl_1_1Complexified_1a5de9b50162c5af5177a928e855e6b71b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getRealPart</name></member>
      <member refid="classcsl_1_1Abstract_1a5b77f008f4b95030641224877004f06c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getRegularExpression</name></member>
      <member refid="classcsl_1_1Abstract_1a625efe55a17b97a1c0f085bdbf3a962a" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getShape</name></member>
      <member refid="classcsl_1_1Abstract_1aa83df1d9dc202457113e5b38bd694fae" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSign</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1aa9049a79ee6b2dfd50dbfae7d48560c9" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSubSymbols</name></member>
      <member refid="classcsl_1_1Abstract_1a7dcdc11b64c8c515933882168d0792ef" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a413c50b2663f57d38c1d3ec3cfeaa3ce" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a26a0854bca4c47e84a1da36a3de8c49f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a29261a946b3398b6129237620754a8b9" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a8a067b70756c4eef758aa88076a95162" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1aeaf8154e39ff211b12e6382e675ccaad" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSum</name></member>
      <member refid="classcsl_1_1Abstract_1a2fcc223dbf5d880e923c07df142df5c8" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getSupBoundary</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a58c627e31c2a42adec4caf39030123aa" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getTerm</name></member>
      <member refid="classcsl_1_1TensorElement_1ae47bc7e79e284964b2a8447bf917f48f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getTransposed</name></member>
      <member refid="classcsl_1_1TensorElement_1a7cc7fb9e1f39bcebc90170e8dd526d43" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getTransposed</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1ab78b88ff1b49707ee98aee3211214044" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getType</name></member>
      <member refid="classcsl_1_1Abstract_1a78f98ba06476e464e3fd2fce0d1f8243" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getValue</name></member>
      <member refid="classcsl_1_1Abstract_1a628563238145f3a9acc331f1a89ce32f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getValued</name></member>
      <member refid="classcsl_1_1Abstract_1ae85f810bbadbc792210c958e8f1b2ffb" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getVariable</name></member>
      <member refid="classcsl_1_1Abstract_1ac83c44ae1e5315a38083bdb7acd8f3fa" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getVectorArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a0188b049736016c970a2513ed9f6931f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>getVectorialModulus</name></member>
      <member refid="classcsl_1_1TensorElement_1acb6f22178e26a8cc694ae2ffc01c2075" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>hasChainContractionProperty</name></member>
      <member refid="classcsl_1_1TensorElement_1a511992d33dc54c1fb8d0c4c17afa5f8c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>hasContractionProperty</name></member>
      <member refid="classcsl_1_1Abstract_1a8c42723e8bc6334c99f00898cc1d59d7" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>hermitian</name></member>
      <member refid="classcsl_1_1TensorElement_1a7f7b50e1bbd4157e8b2797740aa31b89" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>index</name></member>
      <member refid="classcsl_1_1Abstract_1a5437e7f685edf8549e6d3b34572343f8" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>insert</name></member>
      <member refid="classcsl_1_1Abstract_1a1b68943aa7ecf60a63af0f2f368eef8f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>inverseMatrix</name></member>
      <member refid="classcsl_1_1Abstract_1a9347e75b0cd0b75e0f0a38db93b29d83" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isAnOperator</name></member>
      <member refid="classcsl_1_1Abstract_1ac09992d147b39388c8936b3bff648930" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isArbitrary</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1aee083330a4490359012cf0e656758a44" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isBuildingBlock</name></member>
      <member refid="classcsl_1_1Complexified_1a3f583f018b34b63b321976a8bcedf430" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isComplexConjugate</name></member>
      <member refid="classcsl_1_1Abstract_1a464f4f0613db9b4b0a4efe26a3a03d60" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isEmpty</name></member>
      <member refid="classcsl_1_1Abstract_1af2ce38838e35c5785f92373a1d830668" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isHermitianConjugate</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a9bc54de57d7301838f673c014ed9d79f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isIndexed</name></member>
      <member refid="classcsl_1_1Abstract_1a9a014bfd266b5f8471f23580e271979b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isInteger</name></member>
      <member refid="classcsl_1_1AbstractElement_1a9f3e30eeaace6c5c21cda6895daa2de9" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isPolynomial</name></member>
      <member refid="classcsl_1_1Complexified_1aa3de4cb73eb624830da28f07ef0fa4d4" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isPurelyImaginary</name></member>
      <member refid="classcsl_1_1Complexified_1a4c69b308c3d305cfa532eb5c653072a0" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>isReal</name></member>
      <member refid="classcsl_1_1Abstract_1ab79c1d8df9e6b1a3eca66958f7dc489d" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>matchShape</name></member>
      <member refid="classcsl_1_1TensorElement_1ae7a6d8fc44218dcade0332e215f4b653" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>memoryOverhead</name></member>
      <member refid="classcsl_1_1Abstract_1a4f5ed458ba62f5b4cf61a9e1f8568af1" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>multiplication_own</name></member>
      <member refid="classcsl_1_1Abstract_1af5b62a6308638064c42da80e9cc2cb7e" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1af4fd1b57df371dac7ccfd5a909620e49" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a96de5935a58a96d4c5b1e47966488923" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1ac99a619abde7e4c58f39e14d4d20fcf5" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a45206de7c7773b3cb150451ee3eb379e" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a0d3495220202bd417c1b58249c923f39" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a24e7fa91efa725e7f64891cb9ce3507a" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a5c1ba8dce7fbc19eb98807bd15a279c9" prot="public" virt="pure-virtual" ambiguityscope="csl::AbstractElement::"><scope>csl::TensorFieldElement</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a6e19587260a07dba65cf2a985e05516b" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractElement::"><scope>csl::TensorFieldElement</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a2a1660498f2638f5e490d6e512eb32f4" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Abstract_1afbcac6df2fd7ac11f336189cf215124b" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Abstract_1a59ff2950fc8ca319f87a730450f14545" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>operator=</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1af7cde5cfd23cb3b4ca4ddbdbcf717db9" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a8334e14cd5789168b037d3888ed60edd" prot="public" virt="virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::TensorFieldElement</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a12d929e34039e817e464abc560bd4a9d" prot="public" virt="virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::TensorFieldElement</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a1f78f0cce24c93def3050743bc5f2845" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::TensorFieldElement</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1aed43debcac4a19e0da44986774c522bc" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::TensorFieldElement</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a2376f08c0aa5ffe783090381d102d3ae" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::TensorFieldElement</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a485c6f3e10db539a70416cd0766b117d" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Abstract_1ab305bdf49212f03781e7f98024faeb66" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Abstract_1a4c8883df19d7538b68fa96aadac9dfa9" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1Abstract_1a6b931f7b159d57bad26ca9c9ea729aa1" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1Abstract_1aa8331053065d1be2da89e70c45d24863" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1Abstract_1a560aa9993d506551c54a8c02d1445814" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1Abstract_1a75d9abfa88d9d09a89d3a4becd9e6429" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>operatorAppliesOn</name></member>
      <member refid="classcsl_1_1AbstractElement_1a5ad0a45c8a069be5e3e0ce21b784bb0b" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>parent</name></member>
      <member refid="classcsl_1_1Abstract_1abe9aceabbc0a99642e84c9025dbdc767" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>permut</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1afac4c3b974119ba3ecc7e093abcd28c2" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>point</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1afac7a7dd245d9d1bc5f52700e2a6acb8" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>print</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a6d2cb1f66c717a35f4c447952720817c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>printCode</name></member>
      <member refid="classcsl_1_1Abstract_1a89e45ffc7b65f92e77e592f76f70934c" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>printExplicit</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1ac36fad3d18e46c353b4d961867d257cf" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>printLaTeX</name></member>
      <member refid="classcsl_1_1Complexified_1a42c425b2145c916331f881f217e14e4b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>printProp</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a61c01a40bd7efdaa5d20e70a74efa215" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>refresh</name></member>
      <member refid="classcsl_1_1Abstract_1a8aab87c41acafaf1b1837b922495560d" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>regularLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1a2fe749450d2e610199801b189dc3d0f8" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>regularLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1aba5ef083016b2f3d9e6271f864b9b063" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>regularName</name></member>
      <member refid="classcsl_1_1Abstract_1a1a8421d402d5ba82257188b545e8d668" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>regularName</name></member>
      <member refid="classcsl_1_1Abstract_1a0e778c682b6cb02642b90e8ec8765441" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>removeDependency</name></member>
      <member refid="classcsl_1_1TensorElement_1a02fe69a766b8eade9d5de6cbea8054a6" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>replaceIndex</name></member>
      <member refid="classcsl_1_1TensorElement_1a16558db6dbbfcf52c37b52f8a883b5a6" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>replaceIndexInPlace</name></member>
      <member refid="classcsl_1_1TensorElement_1a9ad3c1eabb60fb445f9054699f9d949d" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>replaceIndices</name></member>
      <member refid="classcsl_1_1TensorElement_1a1ca07618e533c2ca4b4cc3646195a64d" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>resetIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a5c796713828ebfb74a7d8787d7802a76" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>self</name></member>
      <member refid="classcsl_1_1TensorElement_1a44cf39f1c6deadcb0191a78d32c3b441" prot="protected" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>selfCheckAutoIndices</name></member>
      <member refid="classcsl_1_1TensorElement_1ab0c7c1c3fb0105a70a1c73db895e0317" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>selfCheckIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1aa6a40ceb6eb1aa79711ca126d5bdda02" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setAllDependencies</name></member>
      <member refid="classcsl_1_1Abstract_1aab2d2ac186b56d17d2cc0a105e145b11" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a45c3adb7ba4e2b8442247246a3792b44" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setArgument</name></member>
      <member refid="classcsl_1_1AbstractElement_1ab8f5f04326a3320b48a315ec5cee60d9" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setCommutable</name></member>
      <member refid="classcsl_1_1AbstractElement_1a7d9bb4605dbd97ea98f721611adadd72" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setComplexProperty</name></member>
      <member refid="classcsl_1_1Complexified_1a22b60556c965e51ab733e6eb5441783c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setConjugated</name></member>
      <member refid="classcsl_1_1Abstract_1aa6a04bb56578e7da143b3cd8d8fb7b26" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setElementary</name></member>
      <member refid="classcsl_1_1Abstract_1afa50c743b8e7e76e637e98f165ad4e5d" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setEmpty</name></member>
      <member refid="classcsl_1_1Abstract_1ac318016372d14b795893fe7e59199084" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setFullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1Abstract_1a4f90ebb7cf7c26782bd36bc2a67fc5d4" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setFullySymmetric</name></member>
      <member refid="classcsl_1_1TensorElement_1a387f69126ae40d711755945ef023de92" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a5ecdb6ce7a2d9643da2f6161a06dfbbf" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setInfBoundary</name></member>
      <member refid="classcsl_1_1AbstractElement_1aed5a0c9faec5b41fb1feb52764c4237f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setName</name></member>
      <member refid="classcsl_1_1Abstract_1a70df7be4486affa8dc891e3f25bf499f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setOperand</name></member>
      <member refid="classcsl_1_1Abstract_1ae7b8a14fc746ed72e4d5abd63373c5ba" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setOperandPrivate</name></member>
      <member refid="classcsl_1_1AbstractElement_1af55db25120693bf64ed360105cb4357c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setParent</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a7e1e7f28a0fcc04320d737dad3f59c21" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setPoint</name></member>
      <member refid="classcsl_1_1Abstract_1aad7104a5b8855272a92a47c58f29e958" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setSupBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1aaf7f0692cb84ca861a5b3b641bea518b" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Abstract_1aa49c51bd285830e724f103e9fb61c464" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Abstract_1aa47ddab3aa047e86be34c70358d53548" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setVariable</name></member>
      <member refid="classcsl_1_1Abstract_1a83fee8ed28079bcac107455d58be9d5d" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>setVectorArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a3794843945b8a39e2c1be073c9bacdf5" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>size</name></member>
      <member refid="classcsl_1_1Abstract_1a4eeedaeaa39e75facf1060dce7c57a8f" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>suppressExponent</name></member>
      <member refid="classcsl_1_1Abstract_1a43520e1d6d5fdad9b50f77c6e027f928" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>suppressTerm</name></member>
      <member refid="classcsl_1_1Abstract_1a4faf1ffd8cb3b6c721e128980c0303d8" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>symmetrise</name></member>
      <member refid="classcsl_1_1Abstract_1a7b83c6a13716688f45b02e6291d39aba" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>tensordot</name></member>
      <member refid="classcsl_1_1TensorElement_1ae0b7c09c0acd3173ba66669d797192c0" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorElement</name></member>
      <member refid="classcsl_1_1TensorElement_1a1b29839ab99dd106e336ce900023d18a" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorElement</name></member>
      <member refid="classcsl_1_1TensorElement_1ac2169c4eabe165be2f0c455f658a0036" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorElement</name></member>
      <member refid="classcsl_1_1TensorElement_1a3bba3e8ce7e864a2921ad91e4019454c" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorElement</name></member>
      <member refid="classcsl_1_1TensorElement_1a4d45c8d308213ea65d46f9aeab883d9f" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorElement</name></member>
      <member refid="classcsl_1_1TensorElement_1a4f78788e311f00a646e933b102fe365c" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorElement</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a36078184224c07158d5eb1268128d670" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorFieldElement</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a9c35e9c1bae8f34130311b027fab9867" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorFieldElement</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1a16cf2e827a2ee85322fea69b4e779827" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>TensorFieldElement</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1ab9236c12275b7fb4d0d46343dcbf8f63" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>tensorfieldelement_s</name></member>
      <member refid="classcsl_1_1Abstract_1aee4fa41a5e014f067395467542ee8831" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>testDummy</name></member>
      <member refid="classcsl_1_1Abstract_1a9a86d21f5c5f65eb7e524a8f8002c0e7" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>trace</name></member>
      <member refid="classcsl_1_1Abstract_1aacab43e551e9259a39a79378373ce49c" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>trace</name></member>
      <member refid="classcsl_1_1Abstract_1a1e97712696e5c40b28bc1e35987fea94" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>transpose</name></member>
      <member refid="classcsl_1_1Abstract_1a40bdc4c76fdbbf3cbac3af4dce8286ed" prot="public" virt="virtual"><scope>csl::TensorFieldElement</scope><name>~Abstract</name></member>
      <member refid="classcsl_1_1AbstractElement_1a96ee7c198c82450d17ce0f08df2bef00" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>~AbstractElement</name></member>
      <member refid="classcsl_1_1TensorFieldElement_1ab09e4e36b98ea53f96c817d7af2c9368" prot="public" virt="non-virtual"><scope>csl::TensorFieldElement</scope><name>~TensorFieldElement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
