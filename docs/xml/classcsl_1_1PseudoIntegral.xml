<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1PseudoIntegral" kind="class" language="C++" prot="public">
    <compoundname>csl::PseudoIntegral</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcsl_1_1PseudoIntegral_1a89c271b4cf14c91dd2159b6b6c6198c6" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool csl::PseudoIntegral::argumentUpdated</definition>
        <argsstring></argsstring>
        <name>argumentUpdated</name>
        <qualifiedname>csl::PseudoIntegral::argumentUpdated</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="88" column="10" bodyfile="src/csl/pseudoIntegral.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1PseudoIntegral_1a599e3faf2b8ff69fd8619d28d7cc142b" prot="private" static="no" mutable="no">
        <type>csl::vector_expr</type>
        <definition>csl::vector_expr csl::PseudoIntegral::vectorIntegrals</definition>
        <argsstring></argsstring>
        <name>vectorIntegrals</name>
        <qualifiedname>csl::PseudoIntegral::vectorIntegrals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="90" column="22" bodyfile="src/csl/pseudoIntegral.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1PseudoIntegral_1a5053ec8d73047061ea9d6524841ee037" prot="private" static="no" mutable="no">
        <type>csl::vector_expr</type>
        <definition>csl::vector_expr csl::PseudoIntegral::argumentVector</definition>
        <argsstring></argsstring>
        <name>argumentVector</name>
        <qualifiedname>csl::PseudoIntegral::argumentVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="92" column="22" bodyfile="src/csl/pseudoIntegral.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1PseudoIntegral_1afc3d8b3fc9ced4b454c0e139f3a284cd" prot="private" static="no" mutable="yes">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::PseudoIntegral::argument</definition>
        <argsstring></argsstring>
        <name>argument</name>
        <qualifiedname>csl::PseudoIntegral::argument</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="95" column="10" bodyfile="src/csl/pseudoIntegral.h" bodystart="95" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a8520ddd24c1dd76a1bdd7cedae1e3621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::PseudoIntegral::PseudoIntegral</definition>
        <argsstring>()</argsstring>
        <name>PseudoIntegral</name>
        <qualifiedname>csl::PseudoIntegral::PseudoIntegral</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="36" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1af408c2c83f1e753420422458362aad29" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::PseudoIntegral::PseudoIntegral</definition>
        <argsstring>(const csl::vector_expr &amp;terms)</argsstring>
        <name>PseudoIntegral</name>
        <qualifiedname>csl::PseudoIntegral::PseudoIntegral</qualifiedname>
        <param>
          <type>const csl::vector_expr &amp;</type>
          <declname>terms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="39" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1af45368165ebc9d4a0b364f92734a68cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::PseudoIntegral::PseudoIntegral</definition>
        <argsstring>(const csl::vector_expr &amp;t_integrals, const Expr &amp;t_argument)</argsstring>
        <name>PseudoIntegral</name>
        <qualifiedname>csl::PseudoIntegral::PseudoIntegral</qualifiedname>
        <param>
          <type>const csl::vector_expr &amp;</type>
          <declname>t_integrals</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="41" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1ae974a01abb6f2fb8b1e041512a436f76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::PseudoIntegral::~PseudoIntegral</definition>
        <argsstring>()</argsstring>
        <name>~PseudoIntegral</name>
        <qualifiedname>csl::PseudoIntegral::~PseudoIntegral</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="44" column="5" bodyfile="src/csl/pseudoIntegral.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a643ca7a918114e021d6219887fad3299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::PseudoIntegral::addTerm</definition>
        <argsstring>(const Expr &amp;term)</argsstring>
        <name>addTerm</name>
        <qualifiedname>csl::PseudoIntegral::addTerm</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="46" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="95" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1ac102242375f6ad43b71a1b6a14c98505" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::PseudoIntegral::getExpression</definition>
        <argsstring>() const</argsstring>
        <name>getExpression</name>
        <qualifiedname>csl::PseudoIntegral::getExpression</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="48" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="268" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1aef63dbda62e0e643dd5eca89be719d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::PseudoIntegral::evaluate</definition>
        <argsstring>()</argsstring>
        <name>evaluate</name>
        <qualifiedname>csl::PseudoIntegral::evaluate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="50" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="310" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a58488e62e0deee09186dd25d40b4cba3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::PseudoIntegral::applyOn</definition>
        <argsstring>(const Expr &amp;expr) const</argsstring>
        <name>applyOn</name>
        <qualifiedname>csl::PseudoIntegral::applyOn</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="52" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="348" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1afdb5008d324d46a45b9e4cd20ce15460" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> const &amp;</type>
        <definition>Expr const  &amp; csl::PseudoIntegral::getArgument</definition>
        <argsstring>() const</argsstring>
        <name>getArgument</name>
        <qualifiedname>csl::PseudoIntegral::getArgument</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="54" column="16" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="74" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1ac908e33f7b658e7bbf6a2a095811ec5e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::PseudoIntegral::testBoundsInfinity</definition>
        <argsstring>(const Expr &amp;inf, const Expr &amp;sup) const</argsstring>
        <name>testBoundsInfinity</name>
        <qualifiedname>csl::PseudoIntegral::testBoundsInfinity</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>inf</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>sup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="58" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="118" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1ac4db74291ecd13937554962d0fa3de87" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::PseudoIntegral::testIntegralDep</definition>
        <argsstring>(const Expr &amp;term) const</argsstring>
        <name>testIntegralDep</name>
        <qualifiedname>csl::PseudoIntegral::testIntegralDep</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="61" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="55" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a5108b4787444a884942d961b1bd3ddfb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::PseudoIntegral::addSingleTerm</definition>
        <argsstring>(const Expr &amp;term)</argsstring>
        <name>addSingleTerm</name>
        <qualifiedname>csl::PseudoIntegral::addSingleTerm</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="63" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a3862c7c468fbc05be84a8d59ec15d095" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::PseudoIntegral::addSingleIntegral</definition>
        <argsstring>(const Expr &amp;integral)</argsstring>
        <name>addSingleIntegral</name>
        <qualifiedname>csl::PseudoIntegral::addSingleIntegral</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>integral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="65" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="83" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a3eaee2f40f339149bbb72a54b0024a1b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::PseudoIntegral::getRecursiveIntegralDependency</definition>
        <argsstring>(Expr &amp;operand, const Expr &amp;variable, std::vector&lt; Expr * &gt; &amp;dependencies)</argsstring>
        <name>getRecursiveIntegralDependency</name>
        <qualifiedname>csl::PseudoIntegral::getRecursiveIntegralDependency</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> * &gt; &amp;</type>
          <declname>dependencies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="67" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="250" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a591f7ef51e400df077406a41325e8ef0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::PseudoIntegral::getExponentialDependency</definition>
        <argsstring>(std::vector&lt; Expr * &gt; const &amp;dep) const</argsstring>
        <name>getExponentialDependency</name>
        <qualifiedname>csl::PseudoIntegral::getExponentialDependency</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> * &gt; const &amp;</type>
          <declname>dep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="72" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="277" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a8c5ff7904365a32b09d391ee51dc60ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::PseudoIntegral::expandExponentials</definition>
        <argsstring>()</argsstring>
        <name>expandExponentials</name>
        <qualifiedname>csl::PseudoIntegral::expandExponentials</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="75" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="293" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1acfa52e98e9e72f33da18c3edfbabfb5f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::PseudoIntegral::evaluateExpProduct</definition>
        <argsstring>(int index, Expr &amp;res, std::vector&lt; Expr * &gt; &amp;dependencies) const</argsstring>
        <name>evaluateExpProduct</name>
        <qualifiedname>csl::PseudoIntegral::evaluateExpProduct</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> * &gt; &amp;</type>
          <declname>dependencies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="77" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="200" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1PseudoIntegral_1a6d65739979aee177cd79475920fc0aae" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::PseudoIntegral::evaluateDelta</definition>
        <argsstring>(int index, Expr &amp;res, std::vector&lt; Expr * &gt; &amp;dependencies) const</argsstring>
        <name>evaluateDelta</name>
        <qualifiedname>csl::PseudoIntegral::evaluateDelta</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> * &gt; &amp;</type>
          <declname>dependencies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="81" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="150" bodyend="198"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/csl/pseudoIntegral.h" line="32" column="1" bodyfile="src/csl/pseudoIntegral.h" bodystart="33" bodyend="96"/>
    <listofallmembers>
      <member refid="classcsl_1_1PseudoIntegral_1a3862c7c468fbc05be84a8d59ec15d095" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>addSingleIntegral</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a5108b4787444a884942d961b1bd3ddfb" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>addSingleTerm</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a643ca7a918114e021d6219887fad3299" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>addTerm</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a58488e62e0deee09186dd25d40b4cba3" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>applyOn</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1afc3d8b3fc9ced4b454c0e139f3a284cd" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>argument</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a89c271b4cf14c91dd2159b6b6c6198c6" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>argumentUpdated</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a5053ec8d73047061ea9d6524841ee037" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>argumentVector</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1aef63dbda62e0e643dd5eca89be719d5a" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>evaluate</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a6d65739979aee177cd79475920fc0aae" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>evaluateDelta</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1acfa52e98e9e72f33da18c3edfbabfb5f" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>evaluateExpProduct</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a8c5ff7904365a32b09d391ee51dc60ab" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>expandExponentials</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1afdb5008d324d46a45b9e4cd20ce15460" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a591f7ef51e400df077406a41325e8ef0" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>getExponentialDependency</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1ac102242375f6ad43b71a1b6a14c98505" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>getExpression</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a3eaee2f40f339149bbb72a54b0024a1b" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>getRecursiveIntegralDependency</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a8520ddd24c1dd76a1bdd7cedae1e3621" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>PseudoIntegral</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1af408c2c83f1e753420422458362aad29" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>PseudoIntegral</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1af45368165ebc9d4a0b364f92734a68cf" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>PseudoIntegral</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1ac908e33f7b658e7bbf6a2a095811ec5e" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>testBoundsInfinity</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1ac4db74291ecd13937554962d0fa3de87" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>testIntegralDep</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1a599e3faf2b8ff69fd8619d28d7cc142b" prot="private" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>vectorIntegrals</name></member>
      <member refid="classcsl_1_1PseudoIntegral_1ae974a01abb6f2fb8b1e041512a436f76" prot="public" virt="non-virtual"><scope>csl::PseudoIntegral</scope><name>~PseudoIntegral</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
