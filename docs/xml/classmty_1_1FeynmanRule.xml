<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classmty_1_1FeynmanRule" kind="class" language="C++" prot="public">
    <compoundname>mty::FeynmanRule</compoundname>
    <includes refid="feynmanRule_8h" local="no">feynmanRule.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmty_1_1FeynmanRule_1adab07d38fe5d37d9961c98fd988dbe00" prot="public" static="no">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">InteractionTerm::TermType</ref></type>
        <definition>using mty::FeynmanRule::TermType =  InteractionTerm::TermType</definition>
        <argsstring></argsstring>
        <name>TermType</name>
        <qualifiedname>mty::FeynmanRule::TermType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="45" column="5" bodyfile="src/marty/core/feynmanRule.h" bodystart="45" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmty_1_1FeynmanRule_1aef81b173a0a833589bc590654240f8bf" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt;</type>
        <definition>std::vector&lt;QuantumField&gt; mty::FeynmanRule::fieldProduct</definition>
        <argsstring></argsstring>
        <name>fieldProduct</name>
        <qualifiedname>mty::FeynmanRule::fieldProduct</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="107" column="20" bodyfile="src/marty/core/feynmanRule.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1FeynmanRule_1a8f53d023fa0da992494a74b88af2e235" prot="private" static="no" mutable="no">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">TermType</ref></type>
        <definition>TermType mty::FeynmanRule::term</definition>
        <argsstring></argsstring>
        <name>term</name>
        <qualifiedname>mty::FeynmanRule::term</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="108" column="34" bodyfile="src/marty/core/feynmanRule.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1FeynmanRule_1ac262a71d86030b338f8136d87a550125" prot="private" static="no" mutable="no">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt;</type>
        <definition>std::shared_ptr&lt;wick::Graph&gt; mty::FeynmanRule::diagram</definition>
        <argsstring></argsstring>
        <name>diagram</name>
        <qualifiedname>mty::FeynmanRule::diagram</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="109" column="21" bodyfile="src/marty/core/feynmanRule.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1FeynmanRule_1a7c67be6bc605232218bdeba073741351" prot="private" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::FeynmanRule::expr</definition>
        <argsstring></argsstring>
        <name>expr</name>
        <qualifiedname>mty::FeynmanRule::expr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="110" column="34" bodyfile="src/marty/core/feynmanRule.h" bodystart="110" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a70757202b75ffb304f1cee11e21b8296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::FeynmanRule::FeynmanRule</definition>
        <argsstring>(mty::Model &amp;model, TermType const &amp;interactionTerm)</argsstring>
        <name>FeynmanRule</name>
        <qualifiedname>mty::FeynmanRule::FeynmanRule</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">TermType</ref> const &amp;</type>
          <declname>interactionTerm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="47" column="5" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="50" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ad0da52fe4479a87e8b92403712a6bab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::FeynmanRule::FeynmanRule</definition>
        <argsstring>()</argsstring>
        <name>FeynmanRule</name>
        <qualifiedname>mty::FeynmanRule::FeynmanRule</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="49" column="5" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1adb2ccf930dc595b3a3e95b1f95fbbecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::FeynmanRule::FeynmanRule</definition>
        <argsstring>(FeynmanRule const &amp;other)</argsstring>
        <name>FeynmanRule</name>
        <qualifiedname>mty::FeynmanRule::FeynmanRule</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="50" column="5" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a07ba59211be5327ab1ab12cdd42b0e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &amp;</type>
        <definition>FeynmanRule &amp; mty::FeynmanRule::operator=</definition>
        <argsstring>(FeynmanRule const &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>mty::FeynmanRule::operator=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="51" column="17" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="39" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a2f111df6b2f56a36ed84596ef6609cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::FeynmanRule::FeynmanRule</definition>
        <argsstring>(FeynmanRule &amp;&amp;other)=default</argsstring>
        <name>FeynmanRule</name>
        <qualifiedname>mty::FeynmanRule::FeynmanRule</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a87e2406eb44fedd70f6cabb81be3feed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &amp;</type>
        <definition>FeynmanRule &amp; mty::FeynmanRule::operator=</definition>
        <argsstring>(FeynmanRule &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>mty::FeynmanRule::operator=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="53" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1abe2289dc975f0eac81078e400b7ed5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; &amp;</type>
        <definition>std::vector&lt; QuantumField &gt; &amp; mty::FeynmanRule::getFieldProduct</definition>
        <argsstring>()</argsstring>
        <name>getFieldProduct</name>
        <qualifiedname>mty::FeynmanRule::getFieldProduct</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="55" column="23" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a66902bf0af50f6bec501bdaa13a2501b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; const &amp;</type>
        <definition>std::vector&lt; QuantumField &gt; const  &amp; mty::FeynmanRule::getFieldProduct</definition>
        <argsstring>() const</argsstring>
        <name>getFieldProduct</name>
        <qualifiedname>mty::FeynmanRule::getFieldProduct</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="56" column="23" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ae1960c284c3fdde7f1b939fb8e700bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::FeynmanRule::getFieldProduct</definition>
        <argsstring>(csl::Tensor const &amp;point, std::vector&lt; csl::Tensor &gt;::iterator &amp;first, std::vector&lt; csl::Tensor &gt;::iterator last)</argsstring>
        <name>getFieldProduct</name>
        <qualifiedname>mty::FeynmanRule::getFieldProduct</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt;::iterator &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt;::iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="57" column="38" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="161" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1aee48f6716f93a6659e3ab620a7f54eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">TermType</ref> &amp;</type>
        <definition>FeynmanRule::TermType &amp; mty::FeynmanRule::getInteractionTerm</definition>
        <argsstring>()</argsstring>
        <name>getInteractionTerm</name>
        <qualifiedname>mty::FeynmanRule::getInteractionTerm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="60" column="37" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ad412b222c03089b8cd17182599822699" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">TermType</ref> const &amp;</type>
        <definition>FeynmanRule::TermType const  &amp; mty::FeynmanRule::getInteractionTerm</definition>
        <argsstring>() const</argsstring>
        <name>getInteractionTerm</name>
        <qualifiedname>mty::FeynmanRule::getInteractionTerm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="61" column="37" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ad92ae07a8df61ec3baa09eac6ae019f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt; &amp;</type>
        <definition>std::shared_ptr&lt; wick::Graph &gt; &amp; mty::FeynmanRule::getDiagram</definition>
        <argsstring>()</argsstring>
        <name>getDiagram</name>
        <qualifiedname>mty::FeynmanRule::getDiagram</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="62" column="24" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a8fb55af91a19ad1b09dd9c34abac4869" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt; const &amp;</type>
        <definition>std::shared_ptr&lt; wick::Graph &gt; const  &amp; mty::FeynmanRule::getDiagram</definition>
        <argsstring>() const</argsstring>
        <name>getDiagram</name>
        <qualifiedname>mty::FeynmanRule::getDiagram</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="63" column="27" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a059643d0c25384067b4c7aeed82c9a89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::FeynmanRule::getExpr</definition>
        <argsstring>() const</argsstring>
        <name>getExpr</name>
        <qualifiedname>mty::FeynmanRule::getExpr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="64" column="41" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a53976ed62d7d25a905819ec6031ec56d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::contains</definition>
        <argsstring>(mty::QuantumFieldParent const *parent) const</argsstring>
        <name>contains</name>
        <qualifiedname>mty::FeynmanRule::contains</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> const *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="65" column="12" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a5a04b978f1f1049cd04a65775f147828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::FeynmanRule::count</definition>
        <argsstring>(mty::QuantumFieldParent const *parent) const</argsstring>
        <name>count</name>
        <qualifiedname>mty::FeynmanRule::count</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> const *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="66" column="12" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="235" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a425f9d5e78a7b143d3e314397ab7847e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::contains</definition>
        <argsstring>(mty::Particle const &amp;p) const</argsstring>
        <name>contains</name>
        <qualifiedname>mty::FeynmanRule::contains</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="67" column="12" bodyfile="src/marty/core/feynmanRule.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ab7e48bef0a3ea6980fad08e43fee4ff8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::containsWeakly</definition>
        <argsstring>(mty::QuantumFieldParent const *parent) const</argsstring>
        <name>containsWeakly</name>
        <qualifiedname>mty::FeynmanRule::containsWeakly</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> const *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="71" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a460723c4503300436067d07477cd500f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::containsWeakly</definition>
        <argsstring>(mty::Particle const &amp;p) const</argsstring>
        <name>containsWeakly</name>
        <qualifiedname>mty::FeynmanRule::containsWeakly</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="72" column="10" bodyfile="src/marty/core/feynmanRule.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a78e371015b5c76dd7e53d68874f448ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::FeynmanRule::count</definition>
        <argsstring>(mty::Particle const &amp;p) const</argsstring>
        <name>count</name>
        <qualifiedname>mty::FeynmanRule::count</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="76" column="12" bodyfile="src/marty/core/feynmanRule.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a068551147b29e52b973f7423ec55b228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::FeynmanRule::setFieldProduct</definition>
        <argsstring>(std::vector&lt; QuantumField &gt; const &amp;fieldProduct)</argsstring>
        <name>setFieldProduct</name>
        <qualifiedname>mty::FeynmanRule::setFieldProduct</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; const &amp;</type>
          <declname>fieldProduct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="81" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ab09f597833384c9e2de5d55f4bbb4020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::FeynmanRule::setInteractionTerm</definition>
        <argsstring>(TermType const &amp;term)</argsstring>
        <name>setInteractionTerm</name>
        <qualifiedname>mty::FeynmanRule::setInteractionTerm</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">TermType</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="82" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a45a8c757f39b05146795e23019585bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::FeynmanRule::setDiagram</definition>
        <argsstring>(std::shared_ptr&lt; wick::Graph &gt; const &amp;diagram)</argsstring>
        <name>setDiagram</name>
        <qualifiedname>mty::FeynmanRule::setDiagram</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt; const &amp;</type>
          <declname>diagram</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="83" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1aa63cc827a296768979096045c9d531fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::FeynmanRule::setExpr</definition>
        <argsstring>(csl::Expr const &amp;expr)</argsstring>
        <name>setExpr</name>
        <qualifiedname>mty::FeynmanRule::setExpr</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="84" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a8d67c56aad0a820df8830d515200a992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::FeynmanRule::renameIndices</definition>
        <argsstring>()</argsstring>
        <name>renameIndices</name>
        <qualifiedname>mty::FeynmanRule::renameIndices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="86" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="264" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ae1bcbaa11b3a6265c5c127b031cf7e49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::isZero</definition>
        <argsstring>() const</argsstring>
        <name>isZero</name>
        <qualifiedname>mty::FeynmanRule::isZero</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="88" column="12" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a42fa68f0e1f653dea6608fee1d9285ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <qualifiedname>mty::FeynmanRule::isEmpty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="89" column="12" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ae19ccd3207fdcbf43d9b68439d77cf16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::isSame</definition>
        <argsstring>(FeynmanRule const &amp;other) const</argsstring>
        <name>isSame</name>
        <qualifiedname>mty::FeynmanRule::isSame</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="90" column="12" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="280" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1adbe25002098cd04f6faff563aadf1052" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::FeynmanRule::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <qualifiedname>mty::FeynmanRule::getSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="91" column="12" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a2f52f2b664a0c511d800128977437eaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::operator==</definition>
        <argsstring>(FeynmanRule const &amp;) const</argsstring>
        <name>operator==</name>
        <qualifiedname>mty::FeynmanRule::operator==</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="93" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ac914123954ad2bbbf80336c1cd5722a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::operator!=</definition>
        <argsstring>(FeynmanRule const &amp;) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>mty::FeynmanRule::operator!=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="94" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1ac5cd90cc6d5fcb24cbae247e58a432a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::operator&lt;</definition>
        <argsstring>(FeynmanRule const &amp;) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>mty::FeynmanRule::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="95" column="5" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="322" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a9a6708acac20297683509d0fb621ee0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::operator&gt;</definition>
        <argsstring>(FeynmanRule const &amp;) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>mty::FeynmanRule::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="96" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1aa364a0d2f17167fcc3bc58f5500e0bc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::operator&lt;=</definition>
        <argsstring>(FeynmanRule const &amp;) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>mty::FeynmanRule::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="97" column="5" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a45954e865ef5cb65ad8cb397a633c916" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::FeynmanRule::operator&gt;=</definition>
        <argsstring>(FeynmanRule const &amp;) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>mty::FeynmanRule::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="98" column="10" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="347" bodyend="350"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classmty_1_1FeynmanRule_1ab7665e2734d31451c82bb1ab96ac17ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, FeynmanRule const &amp;rule)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::FeynmanRule::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="100" column="12" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="352" bodyend="364"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmty_1_1FeynmanRule_1a4e712de08c73c15fe70c7c26b623d97e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::FeynmanRule::directCMatrix</definition>
        <argsstring>(csl::Expr &amp;rule)</argsstring>
        <name>directCMatrix</name>
        <qualifiedname>mty::FeynmanRule::directCMatrix</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.h" line="104" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Represents a Feynman rule. </para>
    </briefdescription>
    <detaileddescription>
<para>This object lauches the vertex calculation in its constructor to get the expression of the Feynman rule. It may, mater on, give any kind of information about the vertex, including of course the fields inside and the expression that will enter amplitude calculations. </para>
    </detaileddescription>
    <location file="src/marty/core/feynmanRule.h" line="42" column="1" bodyfile="src/marty/core/feynmanRule.h" bodystart="42" bodyend="111"/>
    <listofallmembers>
      <member refid="classmty_1_1FeynmanRule_1a53976ed62d7d25a905819ec6031ec56d" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>contains</name></member>
      <member refid="classmty_1_1FeynmanRule_1a425f9d5e78a7b143d3e314397ab7847e" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>contains</name></member>
      <member refid="classmty_1_1FeynmanRule_1ab7e48bef0a3ea6980fad08e43fee4ff8" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>containsWeakly</name></member>
      <member refid="classmty_1_1FeynmanRule_1a460723c4503300436067d07477cd500f" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>containsWeakly</name></member>
      <member refid="classmty_1_1FeynmanRule_1a5a04b978f1f1049cd04a65775f147828" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>count</name></member>
      <member refid="classmty_1_1FeynmanRule_1a78e371015b5c76dd7e53d68874f448ab" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>count</name></member>
      <member refid="classmty_1_1FeynmanRule_1ac262a71d86030b338f8136d87a550125" prot="private" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>diagram</name></member>
      <member refid="classmty_1_1FeynmanRule_1a4e712de08c73c15fe70c7c26b623d97e" prot="private" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>directCMatrix</name></member>
      <member refid="classmty_1_1FeynmanRule_1a7c67be6bc605232218bdeba073741351" prot="private" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>expr</name></member>
      <member refid="classmty_1_1FeynmanRule_1a70757202b75ffb304f1cee11e21b8296" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>FeynmanRule</name></member>
      <member refid="classmty_1_1FeynmanRule_1ad0da52fe4479a87e8b92403712a6bab5" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>FeynmanRule</name></member>
      <member refid="classmty_1_1FeynmanRule_1adb2ccf930dc595b3a3e95b1f95fbbecc" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>FeynmanRule</name></member>
      <member refid="classmty_1_1FeynmanRule_1a2f111df6b2f56a36ed84596ef6609cf2" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>FeynmanRule</name></member>
      <member refid="classmty_1_1FeynmanRule_1aef81b173a0a833589bc590654240f8bf" prot="private" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>fieldProduct</name></member>
      <member refid="classmty_1_1FeynmanRule_1ad92ae07a8df61ec3baa09eac6ae019f9" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getDiagram</name></member>
      <member refid="classmty_1_1FeynmanRule_1a8fb55af91a19ad1b09dd9c34abac4869" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getDiagram</name></member>
      <member refid="classmty_1_1FeynmanRule_1a059643d0c25384067b4c7aeed82c9a89" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getExpr</name></member>
      <member refid="classmty_1_1FeynmanRule_1abe2289dc975f0eac81078e400b7ed5ef" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getFieldProduct</name></member>
      <member refid="classmty_1_1FeynmanRule_1a66902bf0af50f6bec501bdaa13a2501b" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getFieldProduct</name></member>
      <member refid="classmty_1_1FeynmanRule_1ae1960c284c3fdde7f1b939fb8e700bf4" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getFieldProduct</name></member>
      <member refid="classmty_1_1FeynmanRule_1aee48f6716f93a6659e3ab620a7f54eb2" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getInteractionTerm</name></member>
      <member refid="classmty_1_1FeynmanRule_1ad412b222c03089b8cd17182599822699" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getInteractionTerm</name></member>
      <member refid="classmty_1_1FeynmanRule_1adbe25002098cd04f6faff563aadf1052" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>getSize</name></member>
      <member refid="classmty_1_1FeynmanRule_1a42fa68f0e1f653dea6608fee1d9285ba" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>isEmpty</name></member>
      <member refid="classmty_1_1FeynmanRule_1ae19ccd3207fdcbf43d9b68439d77cf16" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>isSame</name></member>
      <member refid="classmty_1_1FeynmanRule_1ae1bcbaa11b3a6265c5c127b031cf7e49" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>isZero</name></member>
      <member refid="classmty_1_1FeynmanRule_1ac914123954ad2bbbf80336c1cd5722a5" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator!=</name></member>
      <member refid="classmty_1_1FeynmanRule_1ac5cd90cc6d5fcb24cbae247e58a432a8" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator&lt;</name></member>
      <member refid="classmty_1_1FeynmanRule_1ab7665e2734d31451c82bb1ab96ac17ba" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmty_1_1FeynmanRule_1aa364a0d2f17167fcc3bc58f5500e0bc8" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator&lt;=</name></member>
      <member refid="classmty_1_1FeynmanRule_1a07ba59211be5327ab1ab12cdd42b0e48" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator=</name></member>
      <member refid="classmty_1_1FeynmanRule_1a87e2406eb44fedd70f6cabb81be3feed" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator=</name></member>
      <member refid="classmty_1_1FeynmanRule_1a2f52f2b664a0c511d800128977437eaa" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator==</name></member>
      <member refid="classmty_1_1FeynmanRule_1a9a6708acac20297683509d0fb621ee0c" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator&gt;</name></member>
      <member refid="classmty_1_1FeynmanRule_1a45954e865ef5cb65ad8cb397a633c916" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>operator&gt;=</name></member>
      <member refid="classmty_1_1FeynmanRule_1a8d67c56aad0a820df8830d515200a992" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>renameIndices</name></member>
      <member refid="classmty_1_1FeynmanRule_1a45a8c757f39b05146795e23019585bcf" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>setDiagram</name></member>
      <member refid="classmty_1_1FeynmanRule_1aa63cc827a296768979096045c9d531fe" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>setExpr</name></member>
      <member refid="classmty_1_1FeynmanRule_1a068551147b29e52b973f7423ec55b228" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>setFieldProduct</name></member>
      <member refid="classmty_1_1FeynmanRule_1ab09f597833384c9e2de5d55f4bbb4020" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>setInteractionTerm</name></member>
      <member refid="classmty_1_1FeynmanRule_1a8f53d023fa0da992494a74b88af2e235" prot="private" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>term</name></member>
      <member refid="classmty_1_1FeynmanRule_1adab07d38fe5d37d9961c98fd988dbe00" prot="public" virt="non-virtual"><scope>mty::FeynmanRule</scope><name>TermType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
