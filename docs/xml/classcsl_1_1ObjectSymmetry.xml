<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1ObjectSymmetry" kind="class" language="C++" prot="public">
    <compoundname>csl::ObjectSymmetry</compoundname>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcsl_1_1ObjectSymmetry_1aa9c4cd544df9d6ca35ed9ec0fd3deb2f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classcsl_1_1ObjectPermutation" kindref="compound">ObjectPermutation</ref>&lt; T &gt; &gt;</type>
        <definition>std::vector&lt;ObjectPermutation&lt;T&gt; &gt; csl::ObjectSymmetry&lt; T &gt;::permutations</definition>
        <argsstring></argsstring>
        <name>permutations</name>
        <qualifiedname>csl::ObjectSymmetry::permutations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="199" column="17" bodyfile="src/csl/objectSymmetry.h" bodystart="199" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a364712d7a60c4fa0b562fc1aa2413393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::ObjectSymmetry&lt; T &gt;::ObjectSymmetry</definition>
        <argsstring>()</argsstring>
        <name>ObjectSymmetry</name>
        <qualifiedname>csl::ObjectSymmetry::ObjectSymmetry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="164" column="5" bodyfile="src/csl/objectSymmetry.h" bodystart="362" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a35b6a0aee0dce5dfa99116e53d4da6e0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::ObjectSymmetry&lt; T &gt;::ObjectSymmetry</definition>
        <argsstring>(const ObjectPermutation&lt; T &gt; &amp;first)</argsstring>
        <name>ObjectSymmetry</name>
        <qualifiedname>csl::ObjectSymmetry::ObjectSymmetry</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectPermutation" kindref="compound">ObjectPermutation</ref>&lt; T &gt; &amp;</type>
          <declname>first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="166" column="14" bodyfile="src/csl/objectSymmetry.h" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1ac1b00e54f5e69a29dc65bffe61bd2bfd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::ObjectSymmetry&lt; T &gt;::ObjectSymmetry</definition>
        <argsstring>(const std::vector&lt; ObjectPermutation&lt; T &gt; &gt; &amp;t_perm)</argsstring>
        <name>ObjectSymmetry</name>
        <qualifiedname>csl::ObjectSymmetry::ObjectSymmetry</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcsl_1_1ObjectPermutation" kindref="compound">ObjectPermutation</ref>&lt; T &gt; &gt; &amp;</type>
          <declname>t_perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="168" column="14" bodyfile="src/csl/objectSymmetry.h" bodystart="373" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1ac5feaf319032058b4b312663648fe781" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::ObjectSymmetry&lt; T &gt;::ObjectSymmetry</definition>
        <argsstring>(std::vector&lt; ObjectPermutation&lt; T &gt; &gt; &amp;&amp;t_perm)</argsstring>
        <name>ObjectSymmetry</name>
        <qualifiedname>csl::ObjectSymmetry::ObjectSymmetry</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1ObjectPermutation" kindref="compound">ObjectPermutation</ref>&lt; T &gt; &gt; &amp;&amp;</type>
          <declname>t_perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="170" column="14" bodyfile="src/csl/objectSymmetry.h" bodystart="380" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1aa9a2944b74bced32ac44ecf9226ace53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::ObjectSymmetry&lt; T &gt;::ObjectSymmetry</definition>
        <argsstring>(const ObjectSymmetry&lt; T &gt; &amp;other)=default</argsstring>
        <name>ObjectSymmetry</name>
        <qualifiedname>csl::ObjectSymmetry::ObjectSymmetry</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="172" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1aa5b0b30273650d3f44e6848b1145dae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::ObjectSymmetry&lt; T &gt;::ObjectSymmetry</definition>
        <argsstring>(ObjectSymmetry&lt; T &gt; &amp;&amp;other)=default</argsstring>
        <name>ObjectSymmetry</name>
        <qualifiedname>csl::ObjectSymmetry::ObjectSymmetry</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="174" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a252a9aba65b0eaa98f7ba2e032fb0ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref> &amp;</type>
        <definition>ObjectSymmetry &amp; csl::ObjectSymmetry&lt; T &gt;::operator=</definition>
        <argsstring>(const ObjectSymmetry&lt; T &gt; &amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>csl::ObjectSymmetry::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="176" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a8e50380272233cefc8b9a827fdb59215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref> &amp;</type>
        <definition>ObjectSymmetry &amp; csl::ObjectSymmetry&lt; T &gt;::operator=</definition>
        <argsstring>(ObjectSymmetry&lt; T &gt; &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>csl::ObjectSymmetry::operator=</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="178" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a582f3fbf487cb849bc3caf95713deffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::ObjectSymmetry&lt; T &gt;::push_back</definition>
        <argsstring>(T a, T b, bool symmetric=true)</argsstring>
        <name>push_back</name>
        <qualifiedname>csl::ObjectSymmetry::push_back</qualifiedname>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>symmetric</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="180" column="10" bodyfile="src/csl/objectSymmetry.h" bodystart="386" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1ab48ad93e7270d11ac42833b65b3c2c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::ObjectSymmetry&lt; T &gt;::push_back</definition>
        <argsstring>(const ObjectPermutation&lt; T &gt; &amp;object)</argsstring>
        <name>push_back</name>
        <qualifiedname>csl::ObjectSymmetry::push_back</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectPermutation" kindref="compound">ObjectPermutation</ref>&lt; T &gt; &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="182" column="10" bodyfile="src/csl/objectSymmetry.h" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a5bdf6c69b1e3b00f380ab5c8981f3602" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; T &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; T &gt; &gt; csl::ObjectSymmetry&lt; T &gt;::operator[]</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;keys) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>csl::ObjectSymmetry::operator[]</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="184" column="17" bodyfile="src/csl/objectSymmetry.h" bodystart="402" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a24c154a50c54f3c326a1dd4304ce4015" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt;</type>
        <definition>ObjectSymmetry&lt; T &gt; csl::ObjectSymmetry&lt; T &gt;::operator+</definition>
        <argsstring>(const ObjectPermutation&lt; T &gt; &amp;other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>csl::ObjectSymmetry::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectPermutation" kindref="compound">ObjectPermutation</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="186" column="20" bodyfile="src/csl/objectSymmetry.h" bodystart="413" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1ac50d668501c9ba288f09a847f82d711b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt;</type>
        <definition>ObjectSymmetry&lt; T &gt; csl::ObjectSymmetry&lt; T &gt;::operator+</definition>
        <argsstring>(const ObjectSymmetry&lt; T &gt; &amp;other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>csl::ObjectSymmetry::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="188" column="20" bodyfile="src/csl/objectSymmetry.h" bodystart="423" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a1577c372eeed21a35afe02df1c3045d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt;</type>
        <definition>ObjectSymmetry&lt; T &gt; csl::ObjectSymmetry&lt; T &gt;::operator*</definition>
        <argsstring>(const ObjectSymmetry&lt; T &gt; &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>csl::ObjectSymmetry::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="190" column="20" bodyfile="src/csl/objectSymmetry.h" bodystart="444" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1ObjectSymmetry_1a93c5efa155d593a2b2bdb5b91019af38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; T &gt;</type>
        <definition>ObjectSymmetry&lt; T &gt; csl::ObjectSymmetry&lt; T &gt;::operator*</definition>
        <argsstring>(const ObjectPermutation&lt; T &gt; &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>csl::ObjectSymmetry::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectPermutation" kindref="compound">ObjectPermutation</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="192" column="20" bodyfile="src/csl/objectSymmetry.h" bodystart="433" bodyend="440"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcsl_1_1ObjectSymmetry_1a93cc3d66de5f8d742936d0b331534877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const ObjectSymmetry&lt; U &gt; &amp;perm)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>csl::ObjectSymmetry::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1ObjectSymmetry" kindref="compound">ObjectSymmetry</ref>&lt; U &gt; &amp;</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/objectSymmetry.h" line="195" column="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/csl/objectSymmetry.h" line="41" column="1" bodyfile="src/csl/objectSymmetry.h" bodystart="159" bodyend="200"/>
    <listofallmembers>
      <member refid="classcsl_1_1ObjectSymmetry_1a364712d7a60c4fa0b562fc1aa2413393" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>ObjectSymmetry</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a35b6a0aee0dce5dfa99116e53d4da6e0" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>ObjectSymmetry</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1ac1b00e54f5e69a29dc65bffe61bd2bfd" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>ObjectSymmetry</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1ac5feaf319032058b4b312663648fe781" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>ObjectSymmetry</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1aa9a2944b74bced32ac44ecf9226ace53" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>ObjectSymmetry</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1aa5b0b30273650d3f44e6848b1145dae8" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>ObjectSymmetry</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a1577c372eeed21a35afe02df1c3045d5" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>operator*</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a93c5efa155d593a2b2bdb5b91019af38" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>operator*</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a24c154a50c54f3c326a1dd4304ce4015" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>operator+</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1ac50d668501c9ba288f09a847f82d711b" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>operator+</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a93cc3d66de5f8d742936d0b331534877" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>operator&lt;&lt;</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a252a9aba65b0eaa98f7ba2e032fb0ba0" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>operator=</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a8e50380272233cefc8b9a827fdb59215" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>operator=</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a5bdf6c69b1e3b00f380ab5c8981f3602" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1aa9c4cd544df9d6ca35ed9ec0fd3deb2f" prot="private" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>permutations</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1a582f3fbf487cb849bc3caf95713deffe" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>push_back</name></member>
      <member refid="classcsl_1_1ObjectSymmetry_1ab48ad93e7270d11ac42833b65b3c2c37" prot="public" virt="non-virtual"><scope>csl::ObjectSymmetry</scope><name>push_back</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
