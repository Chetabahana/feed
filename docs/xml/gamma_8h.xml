<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="gamma_8h" kind="file" language="C++">
    <compoundname>gamma.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="gamma__api__error_8h" local="yes">gamma_api_error.h</includes>
    <includedby refid="gamma_8cpp" local="yes">src/marty/api/gamma.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/marty/api/gamma.h</label>
        <link refid="gamma_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>gamma_api_error.h</label>
        <link refid="gamma__api__error_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>exception</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesgl">sgl</innernamespace>
    <innernamespace refid="namespacemty">mty</innernamespace>
    <innernamespace refid="namespacemty_1_1gamma__api">mty::gamma_api</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MARTY_API_GAMMA_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MARTY_API_GAMMA_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gamma_api_error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">sgl<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GExpr;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sgl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mty::gamma_api<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Expr<sp/>=<sp/><ref refid="classsgl_1_1GExpr" kindref="compound">sgl::GExpr</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>keepSymbolic4D(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>symbolic);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>FierzBasis<sp/>{<sp/>Standard,<sp/>Chiral<sp/>};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Single<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">Expr<sp/>g(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nu);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">Expr<sp/>eps(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">Expr<sp/>gamma(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">Expr<sp/>gamma(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nu);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">Expr<sp/>gamma5();</highlight></codeline>
<codeline lineno="26"><highlight class="normal">Expr<sp/>P_L();</highlight></codeline>
<codeline lineno="27"><highlight class="normal">Expr<sp/>P_R();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">Expr<sp/>C();</highlight></codeline>
<codeline lineno="29"><highlight class="normal">Expr<sp/>DMinko();</highlight></codeline>
<codeline lineno="30"><highlight class="normal">Expr<sp/>imaginaryUnit();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>chain<sp/>of<sp/>gamma<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">Expr<sp/>current(std::vector&lt;Expr&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;gammas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iLeft,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iRight);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">Expr<sp/>trace(std::vector&lt;Expr&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;gammas);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">Expr<sp/>ordered(Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;expr);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">Expr<sp/>simplified(Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;expr);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">Expr<sp/>project(Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;expr,<sp/>FierzBasis<sp/>basis);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">Expr<sp/>applySingleFierz(Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;chain1,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;chain2,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FierzBasis<sp/><sp/>basis<sp/>=<sp/>FierzBasis::Chiral);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">Expr<sp/>applyDoubleFierz(Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;chain1,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;chain2,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FierzBasis<sp/><sp/>basis<sp/>=<sp/>FierzBasis::Chiral);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">std::string<sp/>generateString(Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;expr);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">std::string<sp/>generateLatex(Expr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;expr);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mty::gamma_api</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/marty/api/gamma.h"/>
  </compounddef>
</doxygen>
