<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1Symmetry" kind="class" language="C++" prot="public">
    <compoundname>csl::Symmetry</compoundname>
    <derivedcompoundref refid="classcsl_1_1IndexedSymmetry" prot="public" virt="non-virtual">csl::IndexedSymmetry</derivedcompoundref>
    <includes refid="symmetry_8h" local="no">symmetry.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classcsl_1_1Symmetry_1a8baa60e7441207afb4a49c9ad9e756c2" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int csl::Symmetry::dim</definition>
        <argsstring></argsstring>
        <name>dim</name>
        <qualifiedname>csl::Symmetry::dim</qualifiedname>
        <briefdescription>
<para>Dimension of the symmetry, i.e. number of indices of the <ref refid="classcsl_1_1TensorElement" kindref="compound">TensorElement</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="286" column="9" bodyfile="src/csl/symmetry.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Symmetry_1a726d5e0d0ddf8bfed310f629108f3370" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool csl::Symmetry::mustGetSpan</definition>
        <argsstring></argsstring>
        <name>mustGetSpan</name>
        <qualifiedname>csl::Symmetry::mustGetSpan</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="288" column="10" bodyfile="src/csl/symmetry.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Symmetry_1ac796bc32129e793f5d3314b21dfe27df" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> &gt;</type>
        <definition>std::vector&lt;Permutation&gt; csl::Symmetry::permutation</definition>
        <argsstring></argsstring>
        <name>permutation</name>
        <qualifiedname>csl::Symmetry::permutation</qualifiedname>
        <briefdescription>
<para>List of the permutations for which the <ref refid="classcsl_1_1TensorElement" kindref="compound">TensorElement</ref> have a symmetry or an antisymmetry property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="294" column="17" bodyfile="src/csl/symmetry.h" bodystart="294" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1Symmetry_1a32e5ba2a585c4686fa3ba1992c52cf57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Symmetry::Symmetry</definition>
        <argsstring>()</argsstring>
        <name>Symmetry</name>
        <qualifiedname>csl::Symmetry::Symmetry</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="300" column="5" bodyfile="src/csl/symmetry.cpp" bodystart="363" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1af1d7357f37d7a60a0aa27281b181be33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Symmetry::Symmetry</definition>
        <argsstring>(int t_dim)</argsstring>
        <name>Symmetry</name>
        <qualifiedname>csl::Symmetry::Symmetry</qualifiedname>
        <param>
          <type>int</type>
          <declname>t_dim</declname>
        </param>
        <briefdescription>
<para>Initializes the symmetry in a given dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="305" column="5" bodyfile="src/csl/symmetry.cpp" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1af856c38edc16c6c1b0765674a7f645b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Symmetry::Symmetry</definition>
        <argsstring>(const Symmetry &amp;t_symmetry)=default</argsstring>
        <name>Symmetry</name>
        <qualifiedname>csl::Symmetry::Symmetry</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> &amp;</type>
          <declname>t_symmetry</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_symmetry</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="312" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1aff5592b6996b5a591fb28fee4ceadf0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::Symmetry::~Symmetry</definition>
        <argsstring>()</argsstring>
        <name>~Symmetry</name>
        <qualifiedname>csl::Symmetry::~Symmetry</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="317" column="5" bodyfile="src/csl/symmetry.h" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1ae03ef7f15091cbdfe60f3b126d5bcd8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int csl::Symmetry::getDim</definition>
        <argsstring>() const</argsstring>
        <name>getDim</name>
        <qualifiedname>csl::Symmetry::getDim</qualifiedname>
        <briefdescription>
<para>The dimension of the symmetry is the number of indices on which it is applied, and then also the Permutation::size of the <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> objects it encapsulates. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The dimension of the <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="328" column="9" bodyfile="src/csl/symmetry.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1acf7900a021d3305c7b28219f87f5912c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t csl::Symmetry::getNPermutation</definition>
        <argsstring>() const</argsstring>
        <name>getNPermutation</name>
        <qualifiedname>csl::Symmetry::getNPermutation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> objects the <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> handles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="333" column="12" bodyfile="src/csl/symmetry.cpp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1a3733cbdb336ee0c56a5a5558dbe0f519" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> &gt;</type>
        <definition>vector&lt; Permutation &gt; csl::Symmetry::getPermutation</definition>
        <argsstring>() const</argsstring>
        <name>getPermutation</name>
        <qualifiedname>csl::Symmetry::getPermutation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The vector of <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> objects managed by the <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="338" column="17" bodyfile="src/csl/symmetry.cpp" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1a2efd24a6a2b15233c06588e850dc4c11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int csl::Symmetry::getSymmetryOf</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>getSymmetryOf</name>
        <qualifiedname>csl::Symmetry::getSymmetryOf</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="340" column="9" bodyfile="src/csl/symmetry.cpp" bodystart="387" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1a94702e263f2507f1d0a62e44439f91db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Symmetry::addSymmetry</definition>
        <argsstring>(const Permutation &amp;newPermutation, int sym=1)</argsstring>
        <name>addSymmetry</name>
        <qualifiedname>csl::Symmetry::addSymmetry</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> &amp;</type>
          <declname>newPermutation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sym</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Adds a new symmetry in the form of a <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref>. The user must give the <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> and the symmetry factor associated (1 if the <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> is a symmetry, -1 if it is an anti-symmetry). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newPermutation</parametername>
</parameternamelist>
<parameterdescription>
<para>New <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> describing the symmetry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> factor, +1 or -1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="350" column="10" bodyfile="src/csl/symmetry.cpp" bodystart="409" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1a5f1e218c4d422f33951eda6a23433cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Symmetry::addSymmetry</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;newPermutation, int sym=1)</argsstring>
        <name>addSymmetry</name>
        <qualifiedname>csl::Symmetry::addSymmetry</qualifiedname>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>newPermutation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sym</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Adds a new symmetry in the form of a <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref>. The user must give the <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> and the symmetry factor associated (1 if the <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> is a symmetry, -1 if it is an anti-symmetry). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function may be used only if the symmetry has already a defined dimension.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newPermutation</parametername>
</parameternamelist>
<parameterdescription>
<para>New <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> describing the symmetry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> factor, +1 or -1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="362" column="10" bodyfile="src/csl/symmetry.cpp" bodystart="443" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1af7a29267a3cdc6a65d9e953db7b05670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Symmetry::addSymmetry</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;newPermutation, int sym=1)</argsstring>
        <name>addSymmetry</name>
        <qualifiedname>csl::Symmetry::addSymmetry</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>newPermutation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sym</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Adds a new symmetry in the form of a <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref>. The user must give the <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> and the symmetry factor associated (1 if the <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> is a symmetry, -1 if it is an anti-symmetry). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function may be used only if the symmetry has already a defined dimension.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newPermutation</parametername>
</parameternamelist>
<parameterdescription>
<para>New <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> describing the symmetry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> factor, +1 or -1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="374" column="10" bodyfile="src/csl/symmetry.cpp" bodystart="453" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1ad24effa78e6d5734bc4a9df89f038562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Symmetry::adjustPermutationSize</definition>
        <argsstring>()</argsstring>
        <name>adjustPermutationSize</name>
        <qualifiedname>csl::Symmetry::adjustPermutationSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="377" column="10" bodyfile="src/csl/symmetry.cpp" bodystart="469" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1a3db8a76f92ffde793418023ca2006f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Symmetry::setMustGetSpan</definition>
        <argsstring>(bool t_must)</argsstring>
        <name>setMustGetSpan</name>
        <qualifiedname>csl::Symmetry::setMustGetSpan</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_must</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="379" column="10" bodyfile="src/csl/symmetry.cpp" bodystart="464" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1aa5871bff212cd60b52c305ff35041e13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Symmetry::operator==</definition>
        <argsstring>(const Symmetry &amp;symmetry) const</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::Symmetry::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> &amp;</type>
          <declname>symmetry</declname>
        </param>
        <briefdescription>
<para>operator==, compares two <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symmetry</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> to compare to *this.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two symmetries are the same. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="389" column="10" bodyfile="src/csl/symmetry.cpp" bodystart="480" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1ab4ee356a013b40083d495cf0884c0128" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Symmetry::operator!=</definition>
        <argsstring>(const Symmetry &amp;symmetry) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>csl::Symmetry::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> &amp;</type>
          <declname>symmetry</declname>
        </param>
        <briefdescription>
<para>operator!=, compares two <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symmetry</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> to compare to *this.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>False</bold> if the two symmetries are the same. </para>
</simplesect>
<simplesect kind="return"><para><bold>True</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="399" column="10" bodyfile="src/csl/symmetry.cpp" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Symmetry_1a81efaa52aab7fd858e4f92eee20ff54f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref></type>
        <definition>Symmetry csl::Symmetry::operator*</definition>
        <argsstring>(const Symmetry &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>csl::Symmetry::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="401" column="14" bodyfile="src/csl/symmetry.cpp" bodystart="513" bodyend="524"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcsl_1_1Symmetry_1a5fef630bd23d828521e00da9c25ef6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const Symmetry &amp;symmetry)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>csl::Symmetry::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> &amp;</type>
          <declname>symmetry</declname>
        </param>
        <briefdescription>
<para>operator&lt;&lt;, displays the <ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> <bold>symmetry</bold> in the output <bold>fout</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permutation</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Symmetry" kindref="compound">Symmetry</ref> to diplay.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the modified flux <bold>fout</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/symmetry.h" line="412" column="12" bodyfile="src/csl/symmetry.cpp" bodystart="526" bodyend="540"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Handles the full symmetry properties of an <ref refid="classcsl_1_1TensorElement" kindref="compound">TensorElement</ref>, i.e. a vector of <ref refid="classcsl_1_1Permutation" kindref="compound">Permutation</ref> objects, each giving a permutation of the indices and the sign of the permutation (if the permutation is symmetric or anti-symmetric). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>csl::IndexedSymmetry</label>
        <link refid="classcsl_1_1IndexedSymmetry"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>csl::Symmetry</label>
        <link refid="classcsl_1_1Symmetry"/>
      </node>
    </inheritancegraph>
    <location file="src/csl/symmetry.h" line="277" column="1" bodyfile="src/csl/symmetry.h" bodystart="277" bodyend="414"/>
    <listofallmembers>
      <member refid="classcsl_1_1Symmetry_1a94702e263f2507f1d0a62e44439f91db" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1Symmetry_1a5f1e218c4d422f33951eda6a23433cef" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1Symmetry_1af7a29267a3cdc6a65d9e953db7b05670" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1Symmetry_1ad24effa78e6d5734bc4a9df89f038562" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>adjustPermutationSize</name></member>
      <member refid="classcsl_1_1Symmetry_1a8baa60e7441207afb4a49c9ad9e756c2" prot="protected" virt="non-virtual"><scope>csl::Symmetry</scope><name>dim</name></member>
      <member refid="classcsl_1_1Symmetry_1ae03ef7f15091cbdfe60f3b126d5bcd8f" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>getDim</name></member>
      <member refid="classcsl_1_1Symmetry_1acf7900a021d3305c7b28219f87f5912c" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>getNPermutation</name></member>
      <member refid="classcsl_1_1Symmetry_1a3733cbdb336ee0c56a5a5558dbe0f519" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>getPermutation</name></member>
      <member refid="classcsl_1_1Symmetry_1a2efd24a6a2b15233c06588e850dc4c11" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>getSymmetryOf</name></member>
      <member refid="classcsl_1_1Symmetry_1a726d5e0d0ddf8bfed310f629108f3370" prot="protected" virt="non-virtual"><scope>csl::Symmetry</scope><name>mustGetSpan</name></member>
      <member refid="classcsl_1_1Symmetry_1ab4ee356a013b40083d495cf0884c0128" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Symmetry_1a81efaa52aab7fd858e4f92eee20ff54f" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>operator*</name></member>
      <member refid="classcsl_1_1Symmetry_1a5fef630bd23d828521e00da9c25ef6f4" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>operator&lt;&lt;</name></member>
      <member refid="classcsl_1_1Symmetry_1aa5871bff212cd60b52c305ff35041e13" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Symmetry_1ac796bc32129e793f5d3314b21dfe27df" prot="protected" virt="non-virtual"><scope>csl::Symmetry</scope><name>permutation</name></member>
      <member refid="classcsl_1_1Symmetry_1a3db8a76f92ffde793418023ca2006f37" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>setMustGetSpan</name></member>
      <member refid="classcsl_1_1Symmetry_1a32e5ba2a585c4686fa3ba1992c52cf57" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>Symmetry</name></member>
      <member refid="classcsl_1_1Symmetry_1af1d7357f37d7a60a0aa27281b181be33" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>Symmetry</name></member>
      <member refid="classcsl_1_1Symmetry_1af856c38edc16c6c1b0765674a7f645b1" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>Symmetry</name></member>
      <member refid="classcsl_1_1Symmetry_1aff5592b6996b5a591fb28fee4ceadf0d" prot="public" virt="non-virtual"><scope>csl::Symmetry</scope><name>~Symmetry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
