<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="namespacemty" kind="namespace" language="C++">
    <compoundname>mty</compoundname>
    <innerclass refid="classmty_1_1AbstractGroup" prot="public">mty::AbstractGroup</innerclass>
    <innerclass refid="classmty_1_1AlgebraState" prot="public">mty::AlgebraState</innerclass>
    <innerclass refid="classmty_1_1Amplitude" prot="public">mty::Amplitude</innerclass>
    <innerclass refid="classmty_1_1AmplitudeInitializer" prot="public">mty::AmplitudeInitializer</innerclass>
    <innerclass refid="classmty_1_1BaseVectorBoson" prot="public">mty::BaseVectorBoson</innerclass>
    <innerclass refid="classmty_1_1Cache" prot="public">mty::Cache</innerclass>
    <innerclass refid="structmty_1_1CallBack" prot="public">mty::CallBack</innerclass>
    <innerclass refid="structmty_1_1CallBack_3_01void_07Args_8_8_8_08_4" prot="public">mty::CallBack&lt; void(Args...)&gt;</innerclass>
    <innerclass refid="structmty_1_1ColorSpec" prot="public">mty::ColorSpec</innerclass>
    <innerclass refid="classmty_1_1ConjugationInfo" prot="public">mty::ConjugationInfo</innerclass>
    <innerclass refid="classmty_1_1ConjugationList" prot="public">mty::ConjugationList</innerclass>
    <innerclass refid="classmty_1_1DiracFermion" prot="public">mty::DiracFermion</innerclass>
    <innerclass refid="classmty_1_1DiracSpace" prot="public">mty::DiracSpace</innerclass>
    <innerclass refid="structmty_1_1disable__model" prot="public">mty::disable_model</innerclass>
    <innerclass refid="classmty_1_1double__vector" prot="public">mty::double_vector</innerclass>
    <innerclass refid="classmty_1_1double__vector__iterator" prot="public">mty::double_vector_iterator</innerclass>
    <innerclass refid="classmty_1_1double__vector__single__view" prot="public">mty::double_vector_single_view</innerclass>
    <innerclass refid="classmty_1_1Drawer" prot="public">mty::Drawer</innerclass>
    <innerclass refid="classmty_1_1E6Gauged" prot="public">mty::E6Gauged</innerclass>
    <innerclass refid="classmty_1_1E7Gauged" prot="public">mty::E7Gauged</innerclass>
    <innerclass refid="classmty_1_1E8Gauged" prot="public">mty::E8Gauged</innerclass>
    <innerclass refid="structmty_1_1enable__model" prot="public">mty::enable_model</innerclass>
    <innerclass refid="classmty_1_1Expander" prot="public">mty::Expander</innerclass>
    <innerclass refid="classmty_1_1F4Gauged" prot="public">mty::F4Gauged</innerclass>
    <innerclass refid="classmty_1_1FermionChain" prot="public">mty::FermionChain</innerclass>
    <innerclass refid="structmty_1_1FermionLine" prot="public">mty::FermionLine</innerclass>
    <innerclass refid="classmty_1_1FermionPropStruct" prot="public">mty::FermionPropStruct</innerclass>
    <innerclass refid="classmty_1_1FeynmanDiagram" prot="public">mty::FeynmanDiagram</innerclass>
    <innerclass refid="classmty_1_1FeynmanIntegral" prot="public">mty::FeynmanIntegral</innerclass>
    <innerclass refid="classmty_1_1FeynmanRule" prot="public">mty::FeynmanRule</innerclass>
    <innerclass refid="classmty_1_1FeynOptions" prot="public">mty::FeynOptions</innerclass>
    <innerclass refid="structmty_1_1FeynruleKey" prot="public">mty::FeynruleKey</innerclass>
    <innerclass refid="classmty_1_1FeynruleMomentum" prot="public">mty::FeynruleMomentum</innerclass>
    <innerclass refid="structmty_1_1FeynruleTarget" prot="public">mty::FeynruleTarget</innerclass>
    <innerclass refid="classmty_1_1FieldStrength" prot="public">mty::FieldStrength</innerclass>
    <innerclass refid="classmty_1_1Flavor" prot="public">mty::Flavor</innerclass>
    <innerclass refid="structmty_1_1FlavorFlag" prot="public">mty::FlavorFlag</innerclass>
    <innerclass refid="classmty_1_1FlavorGroup" prot="public">mty::FlavorGroup</innerclass>
    <innerclass refid="classmty_1_1FlavorIrrep" prot="public">mty::FlavorIrrep</innerclass>
    <innerclass refid="classmty_1_1G2Gauged" prot="public">mty::G2Gauged</innerclass>
    <innerclass refid="classmty_1_1Gauge" prot="public">mty::Gauge</innerclass>
    <innerclass refid="classmty_1_1GaugeBoson" prot="public">mty::GaugeBoson</innerclass>
    <innerclass refid="classmty_1_1GaugedGroup" prot="public">mty::GaugedGroup</innerclass>
    <innerclass refid="classmty_1_1GaugeIrrep" prot="public">mty::GaugeIrrep</innerclass>
    <innerclass refid="classmty_1_1Generator" prot="public">mty::Generator</innerclass>
    <innerclass refid="classmty_1_1GeneratorElement" prot="public">mty::GeneratorElement</innerclass>
    <innerclass refid="classmty_1_1GeneratorParent" prot="public">mty::GeneratorParent</innerclass>
    <innerclass refid="classmty_1_1GhostBoson" prot="public">mty::GhostBoson</innerclass>
    <innerclass refid="classmty_1_1GoldstoneBoson" prot="public">mty::GoldstoneBoson</innerclass>
    <innerclass refid="classmty_1_1GTHDM__Model" prot="public">mty::GTHDM_Model</innerclass>
    <innerclass refid="structmty_1_1IndexData" prot="public">mty::IndexData</innerclass>
    <innerclass refid="classmty_1_1Insertion" prot="public">mty::Insertion</innerclass>
    <innerclass refid="structmty_1_1InsertionRequirement" prot="public">mty::InsertionRequirement</innerclass>
    <innerclass refid="classmty_1_1InteractionTerm" prot="public">mty::InteractionTerm</innerclass>
    <innerclass refid="classmty_1_1Irrep" prot="public">mty::Irrep</innerclass>
    <innerclass refid="classmty_1_1IrrepMap" prot="public">mty::IrrepMap</innerclass>
    <innerclass refid="classmty_1_1iterable__view" prot="public">mty::iterable_view</innerclass>
    <innerclass refid="classmty_1_1Kinematics" prot="public">mty::Kinematics</innerclass>
    <innerclass refid="classmty_1_1Lagrangian" prot="public">mty::Lagrangian</innerclass>
    <innerclass refid="classmty_1_1Library" prot="public">mty::Library</innerclass>
    <innerclass refid="structmty_1_1MassBlock" prot="public">mty::MassBlock</innerclass>
    <innerclass refid="classmty_1_1Model" prot="public">mty::Model</innerclass>
    <innerclass refid="classmty_1_1ModelBuilder" prot="public">mty::ModelBuilder</innerclass>
    <innerclass refid="classmty_1_1ModelData" prot="public">mty::ModelData</innerclass>
    <innerclass refid="classmty_1_1MomentumConservater" prot="public">mty::MomentumConservater</innerclass>
    <innerclass refid="structmty_1_1MSSM__Data" prot="public">mty::MSSM_Data</innerclass>
    <innerclass refid="classmty_1_1MSSM__HEM" prot="public">mty::MSSM_HEM</innerclass>
    <innerclass refid="classmty_1_1MSSM__Model" prot="public">mty::MSSM_Model</innerclass>
    <innerclass refid="classmty_1_1NMFV__Model" prot="public">mty::NMFV_Model</innerclass>
    <innerclass refid="classmty_1_1NonAbelianGauged" prot="public">mty::NonAbelianGauged</innerclass>
    <innerclass refid="structmty_1_1OpInsertion" prot="public">mty::OpInsertion</innerclass>
    <innerclass refid="classmty_1_1Particle" prot="public">mty::Particle</innerclass>
    <innerclass refid="structmty_1_1PartitionPair" prot="public">mty::PartitionPair</innerclass>
    <innerclass refid="structmty_1_1PartnerShip" prot="public">mty::PartnerShip</innerclass>
    <innerclass refid="structmty_1_1PenguinPatchData" prot="public">mty::PenguinPatchData</innerclass>
    <innerclass refid="classmty_1_1PMSSM__data" prot="public">mty::PMSSM_data</innerclass>
    <innerclass refid="classmty_1_1PMSSM__LEM" prot="public">mty::PMSSM_LEM</innerclass>
    <innerclass refid="classmty_1_1PMSSM__Model" prot="public">mty::PMSSM_Model</innerclass>
    <innerclass refid="classmty_1_1PolarizationField" prot="public">mty::PolarizationField</innerclass>
    <innerclass refid="classmty_1_1ProcessData" prot="public">mty::ProcessData</innerclass>
    <innerclass refid="classmty_1_1Propagator" prot="public">mty::Propagator</innerclass>
    <innerclass refid="classmty_1_1QCD__Model" prot="public">mty::QCD_Model</innerclass>
    <innerclass refid="classmty_1_1QED__Model" prot="public">mty::QED_Model</innerclass>
    <innerclass refid="classmty_1_1QuantumField" prot="public">mty::QuantumField</innerclass>
    <innerclass refid="classmty_1_1QuantumFieldParent" prot="public">mty::QuantumFieldParent</innerclass>
    <innerclass refid="classmty_1_1QuantumNumberData" prot="public">mty::QuantumNumberData</innerclass>
    <innerclass refid="classmty_1_1ScalarBoson" prot="public">mty::ScalarBoson</innerclass>
    <innerclass refid="classmty_1_1SemiSimpleAlgebra" prot="public">mty::SemiSimpleAlgebra</innerclass>
    <innerclass refid="classmty_1_1SemiSimpleGroup" prot="public">mty::SemiSimpleGroup</innerclass>
    <innerclass refid="classmty_1_1SM__Model" prot="public">mty::SM_Model</innerclass>
    <innerclass refid="classmty_1_1SOGauged" prot="public">mty::SOGauged</innerclass>
    <innerclass refid="classmty_1_1Spectrum" prot="public">mty::Spectrum</innerclass>
    <innerclass refid="classmty_1_1SpGauged" prot="public">mty::SpGauged</innerclass>
    <innerclass refid="classmty_1_1SUGauged" prot="public">mty::SUGauged</innerclass>
    <innerclass refid="classmty_1_1SumGaugeIrrep" prot="public">mty::SumGaugeIrrep</innerclass>
    <innerclass refid="classmty_1_1SumIrrep" prot="public">mty::SumIrrep</innerclass>
    <innerclass refid="classmty_1_1THDM__Model" prot="public">mty::THDM_Model</innerclass>
    <innerclass refid="classmty_1_1TraceIdentity" prot="public">mty::TraceIdentity</innerclass>
    <innerclass refid="classmty_1_1U1Gauged" prot="public">mty::U1Gauged</innerclass>
    <innerclass refid="classmty_1_1VectorBoson" prot="public">mty::VectorBoson</innerclass>
    <innerclass refid="classmty_1_1WeylFermion" prot="public">mty::WeylFermion</innerclass>
    <innerclass refid="classmty_1_1Wick" prot="public">mty::Wick</innerclass>
    <innerclass refid="structmty_1_1Wilson" prot="public">mty::Wilson</innerclass>
    <innerclass refid="classmty_1_1WilsonCoefficient" prot="public">mty::WilsonCoefficient</innerclass>
    <innerclass refid="classmty_1_1WilsonOperator" prot="public">mty::WilsonOperator</innerclass>
    <innerclass refid="structmty_1_1WilsonSet" prot="public">mty::WilsonSet</innerclass>
    <innerclass refid="structmty_1_1Z2__charges" prot="public">mty::Z2_charges</innerclass>
    <innerclass refid="structmty_1_1Z2__charges_3_011_01_4" prot="public">mty::Z2_charges&lt; 1 &gt;</innerclass>
    <innerclass refid="structmty_1_1Z2__charges_3_012_01_4" prot="public">mty::Z2_charges&lt; 2 &gt;</innerclass>
    <innerclass refid="structmty_1_1Z2__charges_3_013_01_4" prot="public">mty::Z2_charges&lt; 3 &gt;</innerclass>
    <innerclass refid="structmty_1_1Z2__charges_3_014_01_4" prot="public">mty::Z2_charges&lt; 4 &gt;</innerclass>
    <innernamespace refid="namespacemty_1_1algebra">mty::algebra</innernamespace>
    <innernamespace refid="namespacemty_1_1error">mty::error</innernamespace>
    <innernamespace refid="namespacemty_1_1experimental">mty::experimental</innernamespace>
    <innernamespace refid="namespacemty_1_1filter">mty::filter</innernamespace>
    <innernamespace refid="namespacemty_1_1gamma__api">mty::gamma_api</innernamespace>
    <innernamespace refid="namespacemty_1_1gauge">mty::gauge</innernamespace>
    <innernamespace refid="namespacemty_1_1group">mty::group</innernamespace>
    <innernamespace refid="namespacemty_1_1interaction">mty::interaction</innernamespace>
    <innernamespace refid="namespacemty_1_1lha">mty::lha</innernamespace>
    <innernamespace refid="namespacemty_1_1lib">mty::lib</innernamespace>
    <innernamespace refid="namespacemty_1_1log">mty::log</innernamespace>
    <innernamespace refid="namespacemty_1_1mssm__input">mty::mssm_input</innernamespace>
    <innernamespace refid="namespacemty_1_1option">mty::option</innernamespace>
    <innernamespace refid="namespacemty_1_1simpli">mty::simpli</innernamespace>
    <innernamespace refid="namespacemty_1_1sm__input">mty::sm_input</innernamespace>
    <innernamespace refid="namespacemty_1_1Topology">mty::Topology</innernamespace>
    <innernamespace refid="namespacemty_1_1wick">mty::wick</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacemty_1a5d24a0077000f773d24680dab690209d" prot="public" static="no" strong="yes">
        <type></type>
        <name>DiracCoupling</name>
        <qualifiedname>mty::DiracCoupling</qualifiedname>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209da5dbc98dcc983a70728bd082d1a47546e" prot="public">
          <name>S</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209da44c29edb103a2872f519ad0c9a0fdaaa" prot="public">
          <name>P</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209dad20caec3b48a1eef164cb4ca81ba2587" prot="public">
          <name>L</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209dae1e1d3d40573127e9ee0480caf1283d6" prot="public">
          <name>R</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209da5206560a306a2e085a437fd258eb57ce" prot="public">
          <name>V</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209da7fc56270e7a70fa81a5935b72eacbe29" prot="public">
          <name>A</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209da52cbb9f4fa86ab9c03f3b50d5d6244af" prot="public">
          <name>VL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209daef8a9f751393cecaf3e811c30ee3e756" prot="public">
          <name>VR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209dab9ece18c950afbfa6b0fdbfa4ff731d3" prot="public">
          <name>T</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209da890a10788493e3d572586e991cd43543" prot="public">
          <name>TA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209dac4534c00ebdb14023f4f538811df5209" prot="public">
          <name>TL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a5d24a0077000f773d24680dab690209daebe021079e5a3c4f42ca6119eab92633" prot="public">
          <name>TR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.h" line="17" column="1" bodyfile="src/marty/core/builtinOperators.h" bodystart="17" bodyend="17"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1ae54dd59d73a20110edd0c24147103f54" prot="public" static="no" strong="yes">
        <type></type>
        <name>ColorCoupling</name>
        <qualifiedname>mty::ColorCoupling</qualifiedname>
        <enumvalue id="namespacemty_1ae54dd59d73a20110edd0c24147103f54a490aa6e856ccf208a054389e47ce0d06" prot="public">
          <name>Id</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1ae54dd59d73a20110edd0c24147103f54a92a8f0b9d28a89b480bd1d29f46f0484" prot="public">
          <name>Generator</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1ae54dd59d73a20110edd0c24147103f54a23709652ceedf22aad4bbb6a355b83e2" prot="public">
          <name>Crossed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1ae54dd59d73a20110edd0c24147103f54a03c73036efa6612d50e6592c5f97edfb" prot="public">
          <name>InvCrossed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.h" line="19" column="1" bodyfile="src/marty/core/builtinOperators.h" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a644b433e29b39186fefa79e1903b44ab" prot="public" static="no" strong="no">
        <type></type>
        <name>Order</name>
        <qualifiedname>mty::Order</qualifiedname>
        <enumvalue id="namespacemty_1a644b433e29b39186fefa79e1903b44aba0ebe8f37173a4b29c395b800fdfcc525" prot="public">
          <name>TreeLevel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a644b433e29b39186fefa79e1903b44aba332e7934880d34c053bc4b25bf9cd569" prot="public">
          <name>OneLoop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/expander.h" line="35" column="1" bodyfile="src/marty/core/expander.h" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a111109fe2ace50b23b051ed8fbcbf41b" prot="public" static="no" strong="yes">
        <type></type>
        <name>IntegralType</name>
        <qualifiedname>mty::IntegralType</qualifiedname>
        <enumvalue id="namespacemty_1a111109fe2ace50b23b051ed8fbcbf41ba6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a111109fe2ace50b23b051ed8fbcbf41ba7fc56270e7a70fa81a5935b72eacbe29" prot="public">
          <name>A</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a111109fe2ace50b23b051ed8fbcbf41ba9d5ed678fe57bcca610140957afab571" prot="public">
          <name>B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a111109fe2ace50b23b051ed8fbcbf41ba0d61f8370cad1d412f80b84d143e1257" prot="public">
          <name>C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a111109fe2ace50b23b051ed8fbcbf41baf623e75af30e62bbd73d6df5b50bb7b5" prot="public">
          <name>D</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a111109fe2ace50b23b051ed8fbcbf41ba3a3ea00cfc35332cedf6e5e9a32e94da" prot="public">
          <name>E</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="30" column="1" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1" prot="public" static="no" strong="yes">
        <type></type>
        <name>IntegralID_E</name>
        <qualifiedname>mty::IntegralID_E</qualifiedname>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab3e654bda369607f2a4809e5f3282b52" prot="public">
          <name>ee0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a63c4da4fde984fa5c719cdcf2147ab7f" prot="public">
          <name>ee1</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a87dba6b5e5e739d7a8506bbceb19e4be" prot="public">
          <name>ee2</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a272dec0a14ee301b59ec3ec6bff6ec3e" prot="public">
          <name>ee3</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1acf43a50e3520eee780c2ac98da94382f" prot="public">
          <name>ee4</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a82b03ae4d863d3119bf95943ae3cb11b" prot="public">
          <name>ee00</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a326f2c9d46a3ac791fc8edb66405d45d" prot="public">
          <name>ee11</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a1d2e4110d4c78e343c29767279426a75" prot="public">
          <name>ee12</name>
          <initializer>= 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a41d11b92724cd7f9340827dde2c3ad01" prot="public">
          <name>ee13</name>
          <initializer>= 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ad3ee6ef97c3a88ee83f00d757b54fc4e" prot="public">
          <name>ee14</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aabe741c62da9f5c71876782a61950528" prot="public">
          <name>ee22</name>
          <initializer>= 30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ac3ff4a6d93987d774bf515e2ff1e2ca3" prot="public">
          <name>ee23</name>
          <initializer>= 33</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ae08f586282b13fb37890f8a2f2604e1c" prot="public">
          <name>ee24</name>
          <initializer>= 36</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aac2a2b454bea83a227da5eff32233043" prot="public">
          <name>ee33</name>
          <initializer>= 39</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a086b382e412835fc77d5df6896f34b6f" prot="public">
          <name>ee34</name>
          <initializer>= 42</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a27481fed8114b442208a3d6881eec32a" prot="public">
          <name>ee44</name>
          <initializer>= 45</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aae5bb0987c0aa515d5b36430c1b05a73" prot="public">
          <name>ee001</name>
          <initializer>= 48</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a9d84ae13c28bb931847482e673961b05" prot="public">
          <name>ee002</name>
          <initializer>= 51</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a7499a77ab7cffdf4793027ba578b0162" prot="public">
          <name>ee003</name>
          <initializer>= 54</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aeeaa53d3c9d649b98ac48072ccf55df7" prot="public">
          <name>ee004</name>
          <initializer>= 57</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a20ce5b0542a1b4796f6b5546568d590c" prot="public">
          <name>ee111</name>
          <initializer>= 60</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aed63920b87dee6292844062e7d48663b" prot="public">
          <name>ee112</name>
          <initializer>= 63</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a43b01643edf9b11ca33b118209194f40" prot="public">
          <name>ee113</name>
          <initializer>= 66</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a329386d367a4e7716b5f6887ee801c75" prot="public">
          <name>ee114</name>
          <initializer>= 69</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a9135d639882e67aeb042989d8fa813e8" prot="public">
          <name>ee122</name>
          <initializer>= 72</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af4808c7d4bc4a9afcd29272453dadef9" prot="public">
          <name>ee123</name>
          <initializer>= 75</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af76267a923c4b84cae96362ae5c59261" prot="public">
          <name>ee124</name>
          <initializer>= 78</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1adaec978e325969953f44d4fd7df4172a" prot="public">
          <name>ee133</name>
          <initializer>= 81</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a5ede4f929038de4c163f8b75839de5c5" prot="public">
          <name>ee134</name>
          <initializer>= 84</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a17c4daff7b7cf7e39c0eef84f4e40cd1" prot="public">
          <name>ee144</name>
          <initializer>= 87</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab767bd30af8392b8caee416fefba6e84" prot="public">
          <name>ee222</name>
          <initializer>= 90</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a21c67d4edce535195429e642db257d86" prot="public">
          <name>ee223</name>
          <initializer>= 93</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a8defc1e816517faa8cb0552aa77f59be" prot="public">
          <name>ee224</name>
          <initializer>= 96</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a848622a7204db9250bba10d5df7f7f8f" prot="public">
          <name>ee233</name>
          <initializer>= 99</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a13cea03c7d84427dcb68ea94552cf347" prot="public">
          <name>ee234</name>
          <initializer>= 102</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a5c7183b135ce169c0228c2ed4de0befa" prot="public">
          <name>ee244</name>
          <initializer>= 105</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a489828701f0c003f0446314deb965c7c" prot="public">
          <name>ee333</name>
          <initializer>= 108</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a921073b7775347f851cacb6870c36860" prot="public">
          <name>ee334</name>
          <initializer>= 111</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ad67fe297f713496b47d4f62df1414324" prot="public">
          <name>ee344</name>
          <initializer>= 114</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aa3f2c09d07a68edce55961797f52731d" prot="public">
          <name>ee444</name>
          <initializer>= 117</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a68edcc387cda0c0a4ab352c3edbc5ea3" prot="public">
          <name>ee0000</name>
          <initializer>= 120</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a47955d1d470d221fbef39801f4019e0d" prot="public">
          <name>ee0011</name>
          <initializer>= 123</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1afbe6b0e53e00fc3275cb5029f593c7f1" prot="public">
          <name>ee0012</name>
          <initializer>= 126</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ac7c684628fe8faca5816c352582d871a" prot="public">
          <name>ee0013</name>
          <initializer>= 129</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a808faa2b31b797297371d7cc833ab702" prot="public">
          <name>ee0014</name>
          <initializer>= 132</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a2956d03668a65985a811d3b3111ffbb2" prot="public">
          <name>ee0022</name>
          <initializer>= 135</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ad22d09015f3a698e7e46ae4cfd4e85fd" prot="public">
          <name>ee0023</name>
          <initializer>= 138</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a650849659cddb5b75f5e5cce79e7d140" prot="public">
          <name>ee0024</name>
          <initializer>= 141</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a6e02162aad0679dbbfc69b476a98f8c4" prot="public">
          <name>ee0033</name>
          <initializer>= 144</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a491e90e4c81860e54b977715e5e45ad0" prot="public">
          <name>ee0034</name>
          <initializer>= 147</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab353dd0990d3efe2304b941fc536ce08" prot="public">
          <name>ee0044</name>
          <initializer>= 150</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aed5c225da127dbdbebdbdc7c4f031638" prot="public">
          <name>ee1111</name>
          <initializer>= 153</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ae2f196be3f3de125407e1f8314cd9f68" prot="public">
          <name>ee1112</name>
          <initializer>= 156</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a70068570fe395ff65f2eb44af858b17b" prot="public">
          <name>ee1113</name>
          <initializer>= 159</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aec3206f62947e964e9d3289a814beed2" prot="public">
          <name>ee1114</name>
          <initializer>= 162</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a7536f6966825c741b9b7a03bae93a696" prot="public">
          <name>ee1122</name>
          <initializer>= 165</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a6e986b62f80b1223bfdee0a8d6b8f1e2" prot="public">
          <name>ee1123</name>
          <initializer>= 168</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab7112315d37e44b635605b6e02e76d1c" prot="public">
          <name>ee1124</name>
          <initializer>= 171</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aa8c85d748e102a0c05b79c230f544d56" prot="public">
          <name>ee1133</name>
          <initializer>= 174</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a1afdcb5bb3c1aad2b4d136b4796d6eeb" prot="public">
          <name>ee1134</name>
          <initializer>= 177</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a665aede5545e51650ea4b3adf3a5c52b" prot="public">
          <name>ee1144</name>
          <initializer>= 180</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a056c1b8dbb03b64738aa3e47a441274e" prot="public">
          <name>ee1222</name>
          <initializer>= 183</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a553034070e4d81bc8778f17a56c9a4c6" prot="public">
          <name>ee1223</name>
          <initializer>= 186</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1afc94237ff8bf33fa3ceade4df071a078" prot="public">
          <name>ee1224</name>
          <initializer>= 189</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab6f6a5d41fe827eda3b9041638077c9b" prot="public">
          <name>ee1233</name>
          <initializer>= 192</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a0d8af6066d8130fa71d341aa7a5363aa" prot="public">
          <name>ee1234</name>
          <initializer>= 195</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a93703ad459c4083b1a27219f20e4c0a6" prot="public">
          <name>ee1244</name>
          <initializer>= 198</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af192d5cf1e1bbc9f579de185448e86ad" prot="public">
          <name>ee1333</name>
          <initializer>= 201</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aae17f483f6518a10fa368ca83aeb35a5" prot="public">
          <name>ee1334</name>
          <initializer>= 204</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a21295c8abd861d90dbc9d7e000f9f2b8" prot="public">
          <name>ee1344</name>
          <initializer>= 207</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a87fdaa6065f03e3310ae7dd0e1615c95" prot="public">
          <name>ee1444</name>
          <initializer>= 210</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a56c79a19228f50b8080640ba187346a8" prot="public">
          <name>ee2222</name>
          <initializer>= 213</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a1dd0577428bb2210d52d14b1df90c238" prot="public">
          <name>ee2223</name>
          <initializer>= 216</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a7f21d7f8b0ce2a5d488eeda21183da52" prot="public">
          <name>ee2224</name>
          <initializer>= 219</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a5abca7faebcc16ba97e0f76efa2e6ca9" prot="public">
          <name>ee2233</name>
          <initializer>= 222</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a845cb974c8ab7d79960fd0d753e5cffd" prot="public">
          <name>ee2234</name>
          <initializer>= 225</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aab829555398a4ddb17d68abac21e0812" prot="public">
          <name>ee2244</name>
          <initializer>= 228</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a76d545dbd447180c29ae0748bc20b9fd" prot="public">
          <name>ee2333</name>
          <initializer>= 231</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ae5b3206fe48451331a1b1c8dc2c382d4" prot="public">
          <name>ee2334</name>
          <initializer>= 234</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aabf0e6e2ba03eb7a237cdb50be50882f" prot="public">
          <name>ee2344</name>
          <initializer>= 237</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a936e6d48f2845688233f6d37ab142ee1" prot="public">
          <name>ee2444</name>
          <initializer>= 240</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1afc927f38fcf74571a771fd846ce34716" prot="public">
          <name>ee3333</name>
          <initializer>= 243</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a2905bd1521b9d30c0a195313e3738036" prot="public">
          <name>ee3334</name>
          <initializer>= 246</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ae8cd647325b3ac17f317179bbf4e104f" prot="public">
          <name>ee3344</name>
          <initializer>= 249</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a5605d29a0e58679b96ea54956440ca63" prot="public">
          <name>ee3444</name>
          <initializer>= 252</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af1648321fe04ea8f1cdb139355980a03" prot="public">
          <name>ee4444</name>
          <initializer>= 255</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a4481608614f22a3f968364aa0ad41fa2" prot="public">
          <name>ee00001</name>
          <initializer>= 258</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a359ab61ea154340c59a65913d7da4550" prot="public">
          <name>ee00002</name>
          <initializer>= 261</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a268dc43d7d1c9ed05f05b754c5c2e292" prot="public">
          <name>ee00003</name>
          <initializer>= 264</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a31e4e9557e1696cc329102f57f717a92" prot="public">
          <name>ee00004</name>
          <initializer>= 267</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1afbf59e771452275da3addf81cd231f27" prot="public">
          <name>ee00111</name>
          <initializer>= 270</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aeec8776683ad44b2d0f80c5ff9d05dcb" prot="public">
          <name>ee00112</name>
          <initializer>= 273</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a435cd0f165056d46474fc5592c247149" prot="public">
          <name>ee00113</name>
          <initializer>= 276</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a8b27196159b95ed826f98efe2ae485a2" prot="public">
          <name>ee00114</name>
          <initializer>= 279</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a3620b4c226fc4f82cf58774f39cbce5c" prot="public">
          <name>ee00122</name>
          <initializer>= 282</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a69d71be93f23a3a3f12f89fc086d937a" prot="public">
          <name>ee00123</name>
          <initializer>= 285</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab46cdb546a712a86ed7bf098b091fefe" prot="public">
          <name>ee00124</name>
          <initializer>= 288</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a30693b8bf080ae7e70b650c67e23bd38" prot="public">
          <name>ee00133</name>
          <initializer>= 291</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab79dd8516c077c0ee2a8944d35185c00" prot="public">
          <name>ee00134</name>
          <initializer>= 294</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aa9dc3155e09a1d73f47d39234f4209c7" prot="public">
          <name>ee00144</name>
          <initializer>= 297</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a05d2e1f4851d467bf8e451072063f8c9" prot="public">
          <name>ee00222</name>
          <initializer>= 300</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aeaf8adb63d6760b906931b1c9f30f40e" prot="public">
          <name>ee00223</name>
          <initializer>= 303</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af410d2665393ff2d6ae0be955e7d66e0" prot="public">
          <name>ee00224</name>
          <initializer>= 306</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ad979615e6f4576ce9fe535a9ac208299" prot="public">
          <name>ee00233</name>
          <initializer>= 309</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a2cf8b2b8cea4d5832254964ce5af4f42" prot="public">
          <name>ee00234</name>
          <initializer>= 312</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a25302410dee8fba833001f284c09e302" prot="public">
          <name>ee00244</name>
          <initializer>= 315</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a4b30dcdf98ed2c25f56130b5928d8528" prot="public">
          <name>ee00333</name>
          <initializer>= 318</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ad184efb3d6f170e8d796a319e4b17184" prot="public">
          <name>ee00334</name>
          <initializer>= 321</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1abb9c58b1aab05f37607bd474d9cbe775" prot="public">
          <name>ee00344</name>
          <initializer>= 324</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a6f64886b08175ac92f2c84feed87c024" prot="public">
          <name>ee00444</name>
          <initializer>= 327</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab8f6da80af6b9bf50530637519f4cbd6" prot="public">
          <name>ee11111</name>
          <initializer>= 330</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a1035f8e81d7d68fc50953ebfc4640d28" prot="public">
          <name>ee11112</name>
          <initializer>= 333</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ac1dbab48ca6b499d25e9455437e89556" prot="public">
          <name>ee11113</name>
          <initializer>= 336</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a99c0d679923a43befb3f16e0e4f47a10" prot="public">
          <name>ee11114</name>
          <initializer>= 339</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aa61315281a9426c1eb2f8f031559368a" prot="public">
          <name>ee11122</name>
          <initializer>= 342</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab8a45bb88ad262d7ce8754783379bc0a" prot="public">
          <name>ee11123</name>
          <initializer>= 345</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a7b3837ac0e5771ee5dc6461d39a54431" prot="public">
          <name>ee11124</name>
          <initializer>= 348</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a041fb6ea9ea0efbf60b13b6867812f1d" prot="public">
          <name>ee11133</name>
          <initializer>= 351</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a783ce07eb1458bc241cd9edd7b4479e8" prot="public">
          <name>ee11134</name>
          <initializer>= 354</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1acbf8ecdeb5a56c5c8b2e73ddd5d3ead2" prot="public">
          <name>ee11144</name>
          <initializer>= 357</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a627a706f24e258606915f96d994c9ab7" prot="public">
          <name>ee11222</name>
          <initializer>= 360</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aa657c09f9ec209c2eb0410c8b1ea93d7" prot="public">
          <name>ee11223</name>
          <initializer>= 363</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aac0d18e27ae32a76b800fd08d7686501" prot="public">
          <name>ee11224</name>
          <initializer>= 366</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a2fbd0a1e394c1bb2fcc06e9a6965daa5" prot="public">
          <name>ee11233</name>
          <initializer>= 369</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a5d808ff15175efcee53fd9f727892e95" prot="public">
          <name>ee11234</name>
          <initializer>= 372</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a3ebe0cedc026e37934b63485ab85b202" prot="public">
          <name>ee11244</name>
          <initializer>= 375</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a9f5ad76f14e02ff609268008c9cd5efc" prot="public">
          <name>ee11333</name>
          <initializer>= 378</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1affa30f79e26903922c34d71dbbe357d7" prot="public">
          <name>ee11334</name>
          <initializer>= 381</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aaff6122e558f7ebf1e4d8b06c396ac9c" prot="public">
          <name>ee11344</name>
          <initializer>= 384</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1aeb5cc79aef409f51a0326d469aead513" prot="public">
          <name>ee11444</name>
          <initializer>= 387</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a5ac9e94f3fc3a29833f74129d69e5991" prot="public">
          <name>ee12222</name>
          <initializer>= 390</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a65c0bb67fa554072c3792b2c2d0a2161" prot="public">
          <name>ee12223</name>
          <initializer>= 393</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a9c6210dc53f2e7a4af81ebf81f5f2d5a" prot="public">
          <name>ee12224</name>
          <initializer>= 396</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a2ddcad90beca2298c4609def4be3384b" prot="public">
          <name>ee12233</name>
          <initializer>= 399</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ae5751afd31691a88c49865627b5c76fa" prot="public">
          <name>ee12234</name>
          <initializer>= 402</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a07854911af9a4ba56488ce1b0f757f5e" prot="public">
          <name>ee12244</name>
          <initializer>= 405</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af7c5954f6fddd7cd53c45fd214c1738a" prot="public">
          <name>ee12333</name>
          <initializer>= 408</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ad9ead71170cbb51766792f25635ca00c" prot="public">
          <name>ee12334</name>
          <initializer>= 411</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a2257e8f984c31679da87224016934355" prot="public">
          <name>ee12344</name>
          <initializer>= 414</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a83ea13b3e00d8815a0f4dfe03853e5fe" prot="public">
          <name>ee12444</name>
          <initializer>= 417</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a69f19b287bae79a6867b294783017212" prot="public">
          <name>ee13333</name>
          <initializer>= 420</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a07d487f4c90f3e6778519525b10329e3" prot="public">
          <name>ee13334</name>
          <initializer>= 423</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a761c62b85c3d3a91705d8ba10637b5f2" prot="public">
          <name>ee13344</name>
          <initializer>= 426</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a0242229ac80faa29614e2aaff7dcfcaa" prot="public">
          <name>ee13444</name>
          <initializer>= 429</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ac53a0f1976dc45d7b6319664a6b1a7b1" prot="public">
          <name>ee14444</name>
          <initializer>= 432</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a27be4101c0604a599d1589a9c6eca41d" prot="public">
          <name>ee22222</name>
          <initializer>= 435</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a3374c0e57282581c43f4b38fc56bf30e" prot="public">
          <name>ee22223</name>
          <initializer>= 438</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a0e62ec7cf02c1947736e2136d95bcfef" prot="public">
          <name>ee22224</name>
          <initializer>= 441</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a336eb94d885f96bf0974228cf7989856" prot="public">
          <name>ee22233</name>
          <initializer>= 444</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a67148c47b2f3efca8dde051dd574089b" prot="public">
          <name>ee22234</name>
          <initializer>= 447</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ad3ac5f8c218875c233fcb20b472fa879" prot="public">
          <name>ee22244</name>
          <initializer>= 450</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af3a98988d98c3e0528781616fb1ec4e7" prot="public">
          <name>ee22333</name>
          <initializer>= 453</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af6d11369f7af912d648ea1d2f8133bb0" prot="public">
          <name>ee22334</name>
          <initializer>= 456</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a392799505a68d880161099d8b5fec0fe" prot="public">
          <name>ee22344</name>
          <initializer>= 459</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a0e0687dd7a871f9f833fdae3d71e5e6c" prot="public">
          <name>ee22444</name>
          <initializer>= 462</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a208e03224e9aa7f17b9482a40625261d" prot="public">
          <name>ee23333</name>
          <initializer>= 465</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a722792ca89f0daafed30eb8f7a0c9a84" prot="public">
          <name>ee23334</name>
          <initializer>= 468</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ab54af81b3cfb632047d5b37af32c632a" prot="public">
          <name>ee23344</name>
          <initializer>= 471</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1ac3ca56199a1144ca44838e74b1dcb79f" prot="public">
          <name>ee23444</name>
          <initializer>= 474</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a85fe47a810b3b58dfe9eafc8a18d0833" prot="public">
          <name>ee24444</name>
          <initializer>= 477</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a443222ab0ef3a408180dbd06a59e7dd6" prot="public">
          <name>ee33333</name>
          <initializer>= 480</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a4d8b48ba4097ea27c406bac661bbe2ca" prot="public">
          <name>ee33334</name>
          <initializer>= 483</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a3064efccaf3de662ef010c5622223420" prot="public">
          <name>ee33344</name>
          <initializer>= 486</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1af20617f0d276eda75a94f2e9b64d172b" prot="public">
          <name>ee33444</name>
          <initializer>= 489</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a0ab199bb7ae1d96c87001da6604ec3c7" prot="public">
          <name>ee34444</name>
          <initializer>= 492</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1a0d6671b69695cc59064923c5beb2f8f3" prot="public">
          <name>ee44444</name>
          <initializer>= 495</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a9ee7f7a0cc82ea49fbaeaf9b2a510bf1acbecfb35e4828adefab73acbc24915b1" prot="public">
          <name>eeLAST</name>
          <initializer>= 498</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="254" column="1" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="254" bodyend="426"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6f" prot="public" static="no" strong="yes">
        <type></type>
        <name>IntegralID_D</name>
        <qualifiedname>mty::IntegralID_D</qualifiedname>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa477fde6198d72a5bf98a3b85165f20ea" prot="public">
          <name>dd0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa0a93c4e8557cb6897b438861e21c55ee" prot="public">
          <name>dd1</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa8546f9c88ab637678947a81775464b17" prot="public">
          <name>dd2</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fafcdbd14ffa933c5622e48828e824c517" prot="public">
          <name>dd3</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fae44107ddb6bff10d8cdb7c25b2994126" prot="public">
          <name>dd00</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa901276b81ee48efcdbfd2b28c26a5dad" prot="public">
          <name>dd11</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa2b2f22a1233e20475693a9c9bf33c72a" prot="public">
          <name>dd12</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa5a2c3368008eaabde61bd342fbe7576e" prot="public">
          <name>dd13</name>
          <initializer>= 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6faf9eaf66d48829bdedd980e285e80c94a" prot="public">
          <name>dd22</name>
          <initializer>= 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fad1911cd76a5161b116ae1f958e1a9cee" prot="public">
          <name>dd23</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fae3cdde1a7ca7157a27d27b1fa9c5dc5d" prot="public">
          <name>dd33</name>
          <initializer>= 30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fae4edc18a856dcd09d8baa8acd97f82dc" prot="public">
          <name>dd001</name>
          <initializer>= 33</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa8eb6441839d9376ca2d6f3cd15787dfb" prot="public">
          <name>dd002</name>
          <initializer>= 36</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6faba0fd01d4a56a6d26f859f4d73067e2d" prot="public">
          <name>dd003</name>
          <initializer>= 39</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6faf7100c5e60ee3919923deede334a1c18" prot="public">
          <name>dd111</name>
          <initializer>= 42</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa06dcc48d17a58162024f90e0b58cff9c" prot="public">
          <name>dd112</name>
          <initializer>= 45</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fab23009f9d632017c438e0671ee3b1947" prot="public">
          <name>dd113</name>
          <initializer>= 48</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fae16979a0c96e618b4a9a0994cad2460d" prot="public">
          <name>dd122</name>
          <initializer>= 51</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa87b1f62d552fd91a6f069e2d94628f4e" prot="public">
          <name>dd123</name>
          <initializer>= 54</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6faf357afe0a0ace3ea8483690889b0f782" prot="public">
          <name>dd133</name>
          <initializer>= 57</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa4b0fdefb6c3a4a91280c91f62be0ccfa" prot="public">
          <name>dd222</name>
          <initializer>= 60</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa50089c62175749808410aca8250b0c1b" prot="public">
          <name>dd223</name>
          <initializer>= 63</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa6736520a21201a1b7ca98b04a73cb344" prot="public">
          <name>dd233</name>
          <initializer>= 66</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa4179ac248499448de2f232ac8fbd53bf" prot="public">
          <name>dd333</name>
          <initializer>= 69</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa10953f4f60de78e2ca62476e001e259d" prot="public">
          <name>dd0000</name>
          <initializer>= 72</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6faa4a035f53789bde1bf1c9b1d6bce3161" prot="public">
          <name>dd0011</name>
          <initializer>= 75</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa8ec4197f0df55b865e73674d1b3114a1" prot="public">
          <name>dd0012</name>
          <initializer>= 78</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fad3c5221e8387b5df9ab971f46058c59d" prot="public">
          <name>dd0013</name>
          <initializer>= 81</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa8a25bf378cf3e78c8d0711060ba7209d" prot="public">
          <name>dd0022</name>
          <initializer>= 84</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fab97e63dcd2785ee4aacfa90125972306" prot="public">
          <name>dd0023</name>
          <initializer>= 87</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa811240c626218bd5e3c61096fc1b45d6" prot="public">
          <name>dd0033</name>
          <initializer>= 90</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fae6f119bc62a95f76c2c606d08a590ad7" prot="public">
          <name>dd1111</name>
          <initializer>= 93</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa555369a39404ce982e6f5057e8e2d18b" prot="public">
          <name>dd1112</name>
          <initializer>= 96</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa310b895e5f91c0a5ffd3701207a000ac" prot="public">
          <name>dd1113</name>
          <initializer>= 99</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa6c932d0aa4f7646fde013f9372caa7be" prot="public">
          <name>dd1122</name>
          <initializer>= 102</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fae786ffc7913b887b54aa9c06758375b3" prot="public">
          <name>dd1123</name>
          <initializer>= 105</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa4bd2d5a8293179e36d43b044fe92f5db" prot="public">
          <name>dd1133</name>
          <initializer>= 108</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa9b2ae4348d203dc3013e7821cf38690e" prot="public">
          <name>dd1222</name>
          <initializer>= 111</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa7c7a968985d07542fda7ef0c10c1ac39" prot="public">
          <name>dd1223</name>
          <initializer>= 114</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fad1bcab573e66c80501ffa1a9af5c0b41" prot="public">
          <name>dd1233</name>
          <initializer>= 117</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa2783f8769c65cb94cc778516e5317b07" prot="public">
          <name>dd1333</name>
          <initializer>= 120</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa50628639f6f97481d05095ad0283a89b" prot="public">
          <name>dd2222</name>
          <initializer>= 123</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fab08580ec14e1fa2fbbdb22318e1b67a3" prot="public">
          <name>dd2223</name>
          <initializer>= 126</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa8added17e00ce75952201d58c50c62e2" prot="public">
          <name>dd2233</name>
          <initializer>= 129</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa1d3f72f8b4e528db4e369e29f85661e5" prot="public">
          <name>dd2333</name>
          <initializer>= 132</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fad9158b05296be20cf193a1e7d4e42b6c" prot="public">
          <name>dd3333</name>
          <initializer>= 135</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fab91de9bc3740798b34f28181ce0b82ba" prot="public">
          <name>dd00001</name>
          <initializer>= 138</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa8853e6595f3d5be93d9b0602bf3b7893" prot="public">
          <name>dd00002</name>
          <initializer>= 141</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa236ba2b53e91386c41a285763803878d" prot="public">
          <name>dd00003</name>
          <initializer>= 144</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6faeb0a755605984aa2bde56b24e779bd68" prot="public">
          <name>dd00111</name>
          <initializer>= 147</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6facaa8f904f218e5eeccc9c409866376b8" prot="public">
          <name>dd00112</name>
          <initializer>= 150</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa53e42ea2ff8a02690c167314d962dbcf" prot="public">
          <name>dd00113</name>
          <initializer>= 153</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa60d32927a09d7784998280a19c74560c" prot="public">
          <name>dd00122</name>
          <initializer>= 156</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6faf45229319acc79e23fb0fb1d1497a118" prot="public">
          <name>dd00123</name>
          <initializer>= 159</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa518b8c461a15445c50ff032d2696f94d" prot="public">
          <name>dd00133</name>
          <initializer>= 162</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa142871f5cdd5d8bb27340d9c86e1d6bc" prot="public">
          <name>dd00222</name>
          <initializer>= 165</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa093725406f61e12b34332078eadf67b8" prot="public">
          <name>dd00223</name>
          <initializer>= 168</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fac2e38d4a74a6325acef9ffacd7c600fb" prot="public">
          <name>dd00233</name>
          <initializer>= 171</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa21e9b54fd8734473e28b2bf8390ff5ba" prot="public">
          <name>dd00333</name>
          <initializer>= 174</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa860a6459de8d4ba80b3e747036c30d6f" prot="public">
          <name>dd11111</name>
          <initializer>= 177</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa0bc15bdb8328d4602e60d4ea9c550821" prot="public">
          <name>dd11112</name>
          <initializer>= 180</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fabf2ab2eb09ac86c55831e87349805ec2" prot="public">
          <name>dd11113</name>
          <initializer>= 183</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa2a7367c59f9b6ae82bd1980b37564096" prot="public">
          <name>dd11122</name>
          <initializer>= 186</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fafb2026dd98920b6fdc861efa3fa67609" prot="public">
          <name>dd11123</name>
          <initializer>= 189</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fabae239ef9a98fe45abab8f7fe81f88ab" prot="public">
          <name>dd11133</name>
          <initializer>= 192</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa0823eb5c3e6edac74e27de6a85f39e44" prot="public">
          <name>dd11222</name>
          <initializer>= 195</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa332e5f23c14527f4422dda9dc33eb215" prot="public">
          <name>dd11223</name>
          <initializer>= 198</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa866b552f22d87d123113ce431f628841" prot="public">
          <name>dd11233</name>
          <initializer>= 201</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa99845f3aa4ceb47443007501341bdc52" prot="public">
          <name>dd11333</name>
          <initializer>= 204</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa6900908f351849b73745dda6157d0349" prot="public">
          <name>dd12222</name>
          <initializer>= 207</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa9c8de49ba4cacc039c35890ba0ae7329" prot="public">
          <name>dd12223</name>
          <initializer>= 210</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fadf3706884e1c4d912a3def7bf464ded3" prot="public">
          <name>dd12233</name>
          <initializer>= 213</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fae98ce5c1aa7e88e0b9054c9013505fd1" prot="public">
          <name>dd12333</name>
          <initializer>= 216</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fadd72c6792c0b00283c8b6d2efbb62380" prot="public">
          <name>dd13333</name>
          <initializer>= 219</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa64983bb5e7be0104d0f5dab53f17627b" prot="public">
          <name>dd22222</name>
          <initializer>= 222</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa7afbd4e86c93a1a3c54b2880ee666fd6" prot="public">
          <name>dd22223</name>
          <initializer>= 225</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa79392716a5f8567d7ab9f56e09dade6d" prot="public">
          <name>dd22233</name>
          <initializer>= 228</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa99812911ba1483f8afdc352b87b6209c" prot="public">
          <name>dd22333</name>
          <initializer>= 231</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa7aefbeea1c8936f64b75edf42254e0e8" prot="public">
          <name>dd23333</name>
          <initializer>= 234</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa5d6cf77eecc49bab593ff8accd49f813" prot="public">
          <name>dd33333</name>
          <initializer>= 237</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a153b34fca2b51267f9e6fdbffb6d5d6fa8b606abed6b4faf716ca67b106e75d9a" prot="public">
          <name>ddLAST</name>
          <initializer>= 240</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="428" column="1" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="428" bodyend="514"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eaf" prot="public" static="no" strong="yes">
        <type></type>
        <name>IntegralID_C</name>
        <qualifiedname>mty::IntegralID_C</qualifiedname>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafab26b5bd439240902daba36f49e55f985" prot="public">
          <name>cc0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafad68005ccf362b82d084551b6291792a3" prot="public">
          <name>cc1</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafaa964065211872fb76f876c6c3e952ea3" prot="public">
          <name>cc2</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa32d54124b29425e3b1aeed32f787847d" prot="public">
          <name>cc00</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafaaafe421b8ad20fe391be17a529c844c2" prot="public">
          <name>cc11</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa4a96420492dd5aab19a5791ecddbc976" prot="public">
          <name>cc12</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa77766027bc4789dbbe85a97d4cdb167a" prot="public">
          <name>cc22</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa17db1dcb3b37187343a35409598d80b4" prot="public">
          <name>cc001</name>
          <initializer>= 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa900cf28f0971cdbcf080a78c86af6b9a" prot="public">
          <name>cc002</name>
          <initializer>= 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafafc3469e4372a633a5008ecb9b1c2209c" prot="public">
          <name>cc111</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa0861dab7c613705daedb8bdb740f6a08" prot="public">
          <name>cc112</name>
          <initializer>= 30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafaf76d5014332ba386b42a187a1fbb88b7" prot="public">
          <name>cc122</name>
          <initializer>= 33</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa762ed8f670bd535812dabec29882235f" prot="public">
          <name>cc222</name>
          <initializer>= 36</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafadb69461cfa3c4935b3aef2363ce0974f" prot="public">
          <name>cc0000</name>
          <initializer>= 39</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafaa7b1f79823b91d32ccad3c3b3e17dcc4" prot="public">
          <name>cc0011</name>
          <initializer>= 42</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa5043af09a51e132ecfdfb12fdf25e6c9" prot="public">
          <name>cc0012</name>
          <initializer>= 45</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa84ae9d7350e13b021624aa9538dff926" prot="public">
          <name>cc0022</name>
          <initializer>= 48</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa7d4d52acc885d6972ddbc323c9b21fcf" prot="public">
          <name>cc1111</name>
          <initializer>= 51</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafaef6a9e4e448cbaa99433bba61d633eb4" prot="public">
          <name>cc1112</name>
          <initializer>= 54</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafab46ff79efda5871ddad88b3d58460fda" prot="public">
          <name>cc1122</name>
          <initializer>= 57</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa8650b08e187e984c374a5f23245549e0" prot="public">
          <name>cc1222</name>
          <initializer>= 60</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa706e296fd1674c567f8b9eeb2993b54d" prot="public">
          <name>cc2222</name>
          <initializer>= 63</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a65f57467f7b23fc9e6e31724caf55eafa6d81e6fee9deaff25f80573d96688345" prot="public">
          <name>ccLAST</name>
          <initializer>= 66</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="516" column="1" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="516" bodyend="543"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a862df90db149e787290b5d4b4aa9740b" prot="public" static="no" strong="yes">
        <type></type>
        <name>IntegralID_B</name>
        <qualifiedname>mty::IntegralID_B</qualifiedname>
        <enumvalue id="namespacemty_1a862df90db149e787290b5d4b4aa9740ba15d450e27d6408c12949d57c3047c206" prot="public">
          <name>bb0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a862df90db149e787290b5d4b4aa9740ba8a2e0a5eece6b7020e5308bcd0df4aa3" prot="public">
          <name>bb1</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a862df90db149e787290b5d4b4aa9740baf739a3489d9af9b6f54bdd5fbf65a321" prot="public">
          <name>bb00</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a862df90db149e787290b5d4b4aa9740baee124906f36150d9467c77414a02748f" prot="public">
          <name>bb11</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a862df90db149e787290b5d4b4aa9740ba1f690847169fa04c493c8cd3cb6a5f96" prot="public">
          <name>bb001</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a862df90db149e787290b5d4b4aa9740ba047c008208fb87effab45dfe8ad0ca7f" prot="public">
          <name>bb111</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a862df90db149e787290b5d4b4aa9740ba1fb2d43c51bae8ebf1699fa55503bef2" prot="public">
          <name>bbLAST</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="545" column="1" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="545" bodyend="555"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1ac54022cf367ea343468e04c9b4511dfa" prot="public" static="no" strong="yes">
        <type></type>
        <name>IntegralID_A</name>
        <qualifiedname>mty::IntegralID_A</qualifiedname>
        <enumvalue id="namespacemty_1ac54022cf367ea343468e04c9b4511dfaa2cae090026e1d765432f7d9d418052d6" prot="public">
          <name>aa0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1ac54022cf367ea343468e04c9b4511dfaa49c317d295edb95787225b822fd4215b" prot="public">
          <name>aa00</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1ac54022cf367ea343468e04c9b4511dfaa0136f4309fc8a7e56730f1089059a48b" prot="public">
          <name>aaLAST</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="557" column="1" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="557" bodyend="562"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1ad12c41824d3d8370e1ff2259052ddb79" prot="public" static="no" strong="yes">
        <type></type>
        <name>DecompositionMode</name>
        <qualifiedname>mty::DecompositionMode</qualifiedname>
        <enumvalue id="namespacemty_1ad12c41824d3d8370e1ff2259052ddb79a30fc6bbba82125243ecf4ddb27fee645" prot="public">
          <name>Minimal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1ad12c41824d3d8370e1ff2259052ddb79af82e824f379ba73d051baa3d8e4c726c" prot="public">
          <name>BasisProjection</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1ad12c41824d3d8370e1ff2259052ddb79aca1b12f70c0a8471440324a11e4590af" prot="public">
          <name>Matching</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.h" line="52" column="1" bodyfile="src/marty/core/model.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a3b8d44bbd788deaabcd8a279d26a9c84" prot="public" static="no" strong="yes">
        <type></type>
        <name>OperatorBasis</name>
        <qualifiedname>mty::OperatorBasis</qualifiedname>
        <enumvalue id="namespacemty_1a3b8d44bbd788deaabcd8a279d26a9c84ae096ece8248f211a75d1a3f845a99698" prot="public">
          <name>Chiral</name>
          <briefdescription>
<para>Uses projectors <formula id="75">$ P_L,P_R $</formula>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a3b8d44bbd788deaabcd8a279d26a9c84aeb6d8ae6f20283755b339c0dc273988b" prot="public">
          <name>Standard</name>
          <briefdescription>
<para>Uses <formula id="204">$ 1,\gamma^5 $</formula>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a3b8d44bbd788deaabcd8a279d26a9c84a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
<para>Does not force any particular decomposition. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Operator basis for <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/operatorBasis.h" line="8" column="1" bodyfile="src/marty/core/operatorBasis.h" bodystart="8" bodyend="21"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a1ad7d9911e71ba89b54481af0a475112" prot="public" static="no" strong="yes">
        <type></type>
        <name>Chirality</name>
        <qualifiedname>mty::Chirality</qualifiedname>
        <enumvalue id="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a945d5e233cf7d6240f6b783b36a374ff" prot="public">
          <name>Left</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Left chirality for <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a92b09c7c48c520c3c55e497875da437c" prot="public">
          <name>Right</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Rihght chirality for <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No chirality for <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Chirality for fermions. Either Left or Right for <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref>, or None for <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="37" column="1" bodyfile="src/marty/core/quantumField.h" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="namespacemty_1a78c0779efc16a73e619daa2d5ad15374" prot="public" static="no" strong="yes">
        <type></type>
        <name>ParticleType</name>
        <qualifiedname>mty::ParticleType</qualifiedname>
        <enumvalue id="namespacemty_1a78c0779efc16a73e619daa2d5ad15374a11629726804cd05cbb38f26c38caa5cf" prot="public">
          <name>ScalarBoson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a78c0779efc16a73e619daa2d5ad15374a817f9e2715dae694ed7b334e752a3528" prot="public">
          <name>VectorBoson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a78c0779efc16a73e619daa2d5ad15374aa087ec0c48987c679c25409e540ce78d" prot="public">
          <name>FieldStrength</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a78c0779efc16a73e619daa2d5ad15374ad74b2dc6aa599fe04b9319d2c621b655" prot="public">
          <name>GhostBoson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a78c0779efc16a73e619daa2d5ad15374a0f26e984066f1efe950e19c64fd4c8d3" prot="public">
          <name>GoldstoneBoson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a78c0779efc16a73e619daa2d5ad15374a8550aac18fe6ad8702c2350f5a390b6e" prot="public">
          <name>WeylFermion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1a78c0779efc16a73e619daa2d5ad15374a0a55a0deacec0d480d5df95b17536ee5" prot="public">
          <name>DiracFermion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="90" column="1" bodyfile="src/marty/core/quantumField.h" bodystart="90" bodyend="99"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacemty_1a15e2a28e1f40c75f0d29b05c5a579454" prot="public" static="no">
        <type><ref refid="classmty_1_1ConjugationInfo_1a893504d132addaa8d00ceb1ad921aa74" kindref="member">ConjugationInfo::FieldList</ref></type>
        <definition>using mty::FieldList =  ConjugationInfo::FieldList</definition>
        <argsstring></argsstring>
        <name>FieldList</name>
        <qualifiedname>mty::FieldList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="24" column="1" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemty_1a8db9f448b1559326430f115070d06b45" prot="public" static="no">
        <type>class <ref refid="classmty_1_1AbstractGroup" kindref="compound">mty::AbstractGroup</ref></type>
        <definition>typedef class mty::AbstractGroup mty::Group</definition>
        <argsstring></argsstring>
        <name>Group</name>
        <qualifiedname>mty::Group</qualifiedname>
        <briefdescription>
<para>Abstract base class for groups. </para>
        </briefdescription>
        <detaileddescription>
<para>This class is mostly composed of empty virtual functions. It only handles a std::string for the name, and an integer for the dimension of the group. See <ref refid="classmty_1_1SemiSimpleGroup" kindref="compound">SemiSimpleGroup</ref> to get to group features. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.h" line="195" column="7"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemty_1ae838d8e54cd67eb5f0f5a10ebe1f712a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::array&lt; int, N &gt;, long long int &gt;</type>
        <definition>using mty::GIndex_t =  std::pair&lt;std::array&lt;int, N&gt;, long long int&gt;</definition>
        <argsstring></argsstring>
        <name>GIndex_t</name>
        <qualifiedname>mty::GIndex_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="99" column="1" bodyfile="src/marty/core/groupIndices.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemty_1a4d5d65257c5ad2083c6c2033d1a66c97" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using mty::ltComplexType =  std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>ltComplexType</name>
        <qualifiedname>mty::ltComplexType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="31" column="1" bodyfile="src/marty/core/looptools_extension.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemty_1a5e81fea4b6d95b3e02c7b46b6239979f" prot="public" static="no">
        <type>double</type>
        <definition>using mty::ltRealType =  double</definition>
        <argsstring></argsstring>
        <name>ltRealType</name>
        <qualifiedname>mty::ltRealType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="32" column="1" bodyfile="src/marty/core/looptools_extension.h" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacemty_1aa1385f53c94af7cfd2e316c18cf48cb2" prot="public" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::V_CKM</definition>
        <argsstring></argsstring>
        <name>V_CKM</name>
        <qualifiedname>mty::V_CKM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/ckm.h" line="30" column="20" bodyfile="src/marty/core/ckm.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1af4ecafa84a117fd6465499d93918cf91" prot="public" static="no" mutable="no">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classcsl_1_1TDerivativeParent" kindref="compound">csl::TDerivativeParent</ref> &gt;</type>
        <definition>std::shared_ptr&lt;csl::TDerivativeParent&gt; mty::partialMinko_shared</definition>
        <argsstring></argsstring>
        <name>partialMinko_shared</name>
        <qualifiedname>mty::partialMinko_shared</qualifiedname>
        <initializer>= csl::tderivative_s(&quot;d&quot;, &amp;<ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/diracology.h" line="35" column="24" bodyfile="src/marty/core/diracology.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a6cfe066e54e145be99a81d5c3012fd98" prot="public" static="no" mutable="no">
        <type><ref refid="classcsl_1_1TDerivativeParent" kindref="compound">csl::TDerivativeParent</ref> &amp;</type>
        <definition>csl::TDerivativeParent&amp; mty::partialMinko</definition>
        <argsstring></argsstring>
        <name>partialMinko</name>
        <qualifiedname>mty::partialMinko</qualifiedname>
        <initializer>= *partialMinko_shared</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/diracology.h" line="38" column="31" bodyfile="src/marty/core/diracology.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a145e7760a8bdc46e697c4939f42c145e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>bool</type>
        <definition>bool mty::enableApp</definition>
        <argsstring></argsstring>
        <name>enableApp</name>
        <qualifiedname>mty::enableApp</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/drawer.cpp" line="210" column="23" bodyfile="src/marty/core/drawer.cpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1ae2a9ad551f8ade24b1140c909cf8693f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>bool</type>
        <definition>bool mty::displayDebug</definition>
        <argsstring></argsstring>
        <name>displayDebug</name>
        <qualifiedname>mty::displayDebug</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="137" column="23" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a3f66d9dd1ea832c9560d543316033531" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>const csl::Expr mty::FiniteFlag</definition>
        <argsstring></argsstring>
        <name>FiniteFlag</name>
        <qualifiedname>mty::FiniteFlag</qualifiedname>
        <initializer>= csl::constant_s(&quot;Finite&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="39" column="24" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a4d9e4b57718635d5f0988840b9095608" prot="public" static="no" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int mty::loopToolsStep</definition>
        <argsstring></argsstring>
        <name>loopToolsStep</name>
        <qualifiedname>mty::loopToolsStep</qualifiedname>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="59" column="22" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a581a8ba7494b09ed8f1c049c344846cb" prot="public" static="no" mutable="no">
        <type><ref refid="classmty_1_1group_1_1Lorentz" kindref="compound">mty::group::Lorentz</ref> *</type>
        <definition>mty::group::Lorentz* mty::Lorentz</definition>
        <argsstring></argsstring>
        <name>Lorentz</name>
        <qualifiedname>mty::Lorentz</qualifiedname>
        <initializer>= new <ref refid="classmty_1_1group_1_1Lorentz" kindref="compound">mty::group::Lorentz</ref>()</initializer>
        <briefdescription>
<para>Global variable. Lorentz group in the form of a raw pointer to an <ref refid="classmty_1_1AbstractGroup" kindref="compound">AbstractGroup</ref>. This variable should be used whereever the Lorentz group is used in the program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.h" line="776" column="28" bodyfile="src/marty/core/group.h" bodystart="776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a0ddf1a9e85e7dd70822ff961998b54d2" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 6 &gt;, 12 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;6&gt;, 12&gt; mty::I2_E6_data</definition>
        <argsstring></argsstring>
        <name>I2_E6_data</name>
        <qualifiedname>mty::I2_E6_data</qualifiedname>
        <initializer>= {GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 1}, 4}),
       GIndex_t&lt;6&gt;({{0, 1, 0, 0, 0, 0}, 25}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 1, 0, 0}, 25}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 2, 0}, 28}),
       GIndex_t&lt;6&gt;({{2, 0, 0, 0, 0, 0}, 28}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 1, 0}, 50}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 1}, 160}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 1}, 160}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 2}, 270}),
       GIndex_t&lt;6&gt;({{0, 0, 1, 0, 0, 0}, 300})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="101" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="102" bodyend="113"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a193c2ca8a8ed0ff05c54729a219a2213" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 6 &gt;, 12 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;6&gt;, 12&gt; mty::I5_E6_data</definition>
        <argsstring></argsstring>
        <name>I5_E6_data</name>
        <qualifiedname>mty::I5_E6_data</qualifiedname>
        <initializer>= {GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 0}, -1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 1}, 0}),
       GIndex_t&lt;6&gt;({{0, 1, 0, 0, 0, 0}, 11}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 1, 0, 0}, -11}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 2, 0}, -44}),
       GIndex_t&lt;6&gt;({{2, 0, 0, 0, 0, 0}, 44}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 1, 0}, 0}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 1}, -88}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 1}, 88}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 2}, 0}),
       GIndex_t&lt;6&gt;({{0, 0, 1, 0, 0, 0}, 0})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="115" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a634212a37215ccec785edc05cb34e220" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 6 &gt;, 12 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;6&gt;, 12&gt; mty::I6_E6_data</definition>
        <argsstring></argsstring>
        <name>I6_E6_data</name>
        <qualifiedname>mty::I6_E6_data</qualifiedname>
        <initializer>= {GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 1}, -6}),
       GIndex_t&lt;6&gt;({{0, 1, 0, 0, 0, 0}, -5}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 1, 0, 0}, -5}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 2, 0}, 58}),
       GIndex_t&lt;6&gt;({{2, 0, 0, 0, 0, 0}, 58}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 1, 0}, 60}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 1}, -80}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 1}, -80}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 2}, -720}),
       GIndex_t&lt;6&gt;({{0, 0, 1, 0, 0, 0}, -270})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="129" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="130" bodyend="141"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a6736daf77d6834418c34a6eb45539248" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 6 &gt;, 12 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;6&gt;, 12&gt; mty::I8_E6_data</definition>
        <argsstring></argsstring>
        <name>I8_E6_data</name>
        <qualifiedname>mty::I8_E6_data</qualifiedname>
        <initializer>= {GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 1}, 18}),
       GIndex_t&lt;6&gt;({{0, 1, 0, 0, 0, 0}, -101}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 1, 0, 0}, -101}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 2, 0}, 154}),
       GIndex_t&lt;6&gt;({{2, 0, 0, 0, 0, 0}, 154}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 1, 0}, 36}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 1}, 664}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 1}, 664}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 2}, 3672}),
       GIndex_t&lt;6&gt;({{0, 0, 1, 0, 0, 0}, -918})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="143" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="144" bodyend="155"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a010498c3544eb3893af6e3b1526ff5f9" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 6 &gt;, 12 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;6&gt;, 12&gt; mty::I9_E6_data</definition>
        <argsstring></argsstring>
        <name>I9_E6_data</name>
        <qualifiedname>mty::I9_E6_data</qualifiedname>
        <initializer>= {GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 0}, -1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 1}, 0}),
       GIndex_t&lt;6&gt;({{0, 1, 0, 0, 0, 0}, -229}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 1, 0, 0}, 229}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 2, 0}, -284}),
       GIndex_t&lt;6&gt;({{2, 0, 0, 0, 0, 0}, 284}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 1, 0}, 0}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 1}, 152}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 1}, -152}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 2}, 0}),
       GIndex_t&lt;6&gt;({{0, 0, 1, 0, 0, 0}, 0})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="157" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="158" bodyend="169"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1ad4fab5239811ca44a5007acf60238668" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 6 &gt;, 12 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;6&gt;, 12&gt; mty::I12_E6_data</definition>
        <argsstring></argsstring>
        <name>I12_E6_data</name>
        <qualifiedname>mty::I12_E6_data</qualifiedname>
        <initializer>= {GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 1}, -62}),
       GIndex_t&lt;6&gt;({{0, 1, 0, 0, 0, 0}, -2021}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 1, 0, 0}, -2021}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 2, 0}, 2074}),
       GIndex_t&lt;6&gt;({{2, 0, 0, 0, 0, 0}, 2074}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 1, 0}, 116}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 1, 1}, 424}),
       GIndex_t&lt;6&gt;({{1, 0, 0, 0, 0, 1}, 424}),
       GIndex_t&lt;6&gt;({{0, 0, 0, 0, 0, 2}, -131928}),
       GIndex_t&lt;6&gt;({{0, 0, 1, 0, 0, 0}, 122202})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="171" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="172" bodyend="183"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1accceefbb6e0fb4db8e4d14d8a541529d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 7 &gt;, 21 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;7&gt;, 21&gt; mty::I2_E7_data</definition>
        <argsstring></argsstring>
        <name>I2_E7_data</name>
        <qualifiedname>mty::I2_E7_data</qualifiedname>
        <initializer>= {GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 0}, 3}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 1}, 30}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 2, 0}, 55}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 0, 0}, 54}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 1, 0}, 270}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 0, 0}, 351}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 0, 0}, 390}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 3, 0}, 1440}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 1, 0, 0, 0}, 1430}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 1}, 2145}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 1, 0}, 2832}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 1}, 4995}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 2, 0}, 9450}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 1, 0, 0}, 9152}),
       GIndex_t&lt;7&gt;({{3, 0, 0, 0, 0, 0, 0}, 17940}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 2}, 17820}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 4, 0}, 24310}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 1, 0}, 21762}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 1, 0}, 23760}),
       GIndex_t&lt;7&gt;({{0, 0, 1, 0, 0, 0, 0}, 24750})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="191" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="192" bodyend="212"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1afd891056b6802caffa1e8962419f2d8b" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 7 &gt;, 21 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;7&gt;, 21&gt; mty::I6_E7_data</definition>
        <argsstring></argsstring>
        <name>I6_E7_data</name>
        <qualifiedname>mty::I6_E7_data</qualifiedname>
        <initializer>= {GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 0}, -2}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 1}, -10}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 2, 0}, 90}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 0, 0}, 24}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 1, 0}, 30}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 0, 0}, -354}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 0, 0}, -200}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 3, 0}, 3600}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 1, 0, 0, 0}, -10}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 1}, 530}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 1, 0}, 2872}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 1}, -3165}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 2, 0}, 8400}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 1, 0, 0}, -328}),
       GIndex_t&lt;7&gt;({{3, 0, 0, 0, 0, 0, 0}, -26380}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 2}, -9000}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 4, 0}, 88400}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 1, 0}, -9318}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 1, 0}, 600}),
       GIndex_t&lt;7&gt;({{0, 0, 1, 0, 0, 0, 0}, -9000})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="214" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="215" bodyend="235"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1aa294f792c87d848fb1d022bea502a807" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 7 &gt;, 21 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;7&gt;, 21&gt; mty::I8_E7_data</definition>
        <argsstring></argsstring>
        <name>I8_E7_data</name>
        <qualifiedname>mty::I8_E7_data</qualifiedname>
        <initializer>= {GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 0}, 10}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 1}, -82}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 2, 0}, 174}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 0, 0}, -72}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 1, 0}, 774}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 0, 0}, 2682}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 0, 0}, 40}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 3, 0}, 10176}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 1, 0, 0, 0}, -3442}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 1}, -3658}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 1, 0}, 256}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 1}, 963}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 2, 0}, 41328}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 1, 0, 0}, 9320}),
       GIndex_t&lt;7&gt;({{3, 0, 0, 0, 0, 0, 0}, 271676}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 2}, -94824}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 4, 0}, 329888}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 1, 0}, 155826}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 1, 0}, 12672}),
       GIndex_t&lt;7&gt;({{0, 0, 1, 0, 0, 0, 0}, -63240})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="237" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="238" bodyend="258"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a7d1eea49223dda50db62e9634e791191" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 7 &gt;, 21 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;7&gt;, 21&gt; mty::I10_E7_data</definition>
        <argsstring></argsstring>
        <name>I10_E7_data</name>
        <qualifiedname>mty::I10_E7_data</qualifiedname>
        <initializer>= {GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 0}, -2}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 1}, 230}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 2, 0}, 570}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 0, 0}, -456}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 1, 0}, -210}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 0, 0}, -834}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 0, 0}, 760}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 3, 0}, 50160}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 1, 0, 0, 0}, -7450}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 1}, 13490}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 1, 0}, -16568}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 1}, 36195}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 2, 0}, 59280}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 1, 0, 0}, -78088}),
       GIndex_t&lt;7&gt;({{3, 0, 0, 0, 0, 0, 0}, -116620}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 2}, 404280}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 4, 0}, 2153840}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 1, 0}, -75318}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 1, 0}, 22440}),
       GIndex_t&lt;7&gt;({{0, 0, 1, 0, 0, 0, 0}, 79800})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="260" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="261" bodyend="281"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1aecf3ef0fbbb307c8ff8be21337539e92" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 7 &gt;, 21 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;7&gt;, 21&gt; mty::I12_E7_data</definition>
        <argsstring></argsstring>
        <name>I12_E7_data</name>
        <qualifiedname>mty::I12_E7_data</qualifiedname>
        <initializer>= {GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 0}, 1}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 0}, -30}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 1}, -2082}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 2, 0}, 2134}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 0, 0}, -1992}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 1, 0}, 534}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 0, 0}, -63438}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 0, 0}, 57480}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 3, 0}, 292896}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 1, 0, 0, 0}, 63998}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 1, 1}, -171138}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 1, 1, 0}, -172464}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 0, 1}, -366717}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 0, 2, 0}, 410928}),
       GIndex_t&lt;7&gt;({{1, 0, 0, 0, 1, 0, 0}, -197560}),
       GIndex_t&lt;7&gt;({{3, 0, 0, 0, 0, 0, 0}, -13615284}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 0, 2}, -6024744}),
       GIndex_t&lt;7&gt;({{0, 0, 0, 0, 0, 4, 0}, 17066368}),
       GIndex_t&lt;7&gt;({{2, 0, 0, 0, 0, 1, 0}, -3178974}),
       GIndex_t&lt;7&gt;({{0, 1, 0, 0, 0, 1, 0}, 3531792}),
       GIndex_t&lt;7&gt;({{0, 0, 1, 0, 0, 0, 0}, 2601722601720})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="283" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="284" bodyend="304"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a481f7700907108bb03660d484842a6be" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 8 &gt;, 29 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;8&gt;, 29&gt; mty::I2_E8_data</definition>
        <argsstring></argsstring>
        <name>I2_E8_data</name>
        <qualifiedname>mty::I2_E8_data</qualifiedname>
        <initializer>= {GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 1, 0}, 25}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 0, 0}, 225}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 0, 0}, 245}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 0, 1}, 1425}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 1, 0}, 8379}),
       GIndex_t&lt;8&gt;({{3, 0, 0, 0, 0, 0, 0}, 22750}),
       GIndex_t&lt;8&gt;({{0, 0, 1, 0, 0, 0, 0}, 29640}),
       GIndex_t&lt;8&gt;({{1, 1, 0, 0, 0, 0, 0}, 51200}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 2, 0}, 65610}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 1, 0, 0}, 88200}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 0, 1}, 372736}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 1, 0}, 1083000}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 1, 0}, 1148175}),
       GIndex_t&lt;8&gt;({{4, 0, 0, 0, 0, 0, 0}, 1404150}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 1, 0, 0, 0}, 2360085}),
       GIndex_t&lt;8&gt;({{0, 2, 0, 0, 0, 0, 0}, 3441375}),
       GIndex_t&lt;8&gt;({{2, 1, 0, 0, 0, 0, 0}, 4843800}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 1, 1}, 5068800}),
       GIndex_t&lt;8&gt;({{1, 0, 1, 0, 0, 0, 0}, 5740875}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 2, 0}, 14773500}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 1, 0, 0}, 19426550}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 0, 1}, 40883535}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 0, 1}, 42214200}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 3, 0}, 60885500}),
       GIndex_t&lt;8&gt;({{3, 0, 0, 0, 0, 1, 0}, 79228100}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 0, 2}, 83281275}),
       GIndex_t&lt;8&gt;({{0, 0, 1, 0, 0, 1, 0}, 93400125}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 1, 0, 0}, 139094340})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="312" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="313" bodyend="341"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1ae86bc7059bc13bb9388edf5a2760dfe1" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 8 &gt;, 29 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;8&gt;, 29&gt; mty::I8_E8_data</definition>
        <argsstring></argsstring>
        <name>I8_E8_data</name>
        <qualifiedname>mty::I8_E8_data</qualifiedname>
        <initializer>= {GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 1, 0}, -17}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 0, 0}, 393}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 0, 0}, 119}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 0, 1}, -801}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 1, 0}, 357}),
       GIndex_t&lt;8&gt;({{3, 0, 0, 0, 0, 0, 0}, 64330}),
       GIndex_t&lt;8&gt;({{0, 0, 1, 0, 0, 0, 0}, 576}),
       GIndex_t&lt;8&gt;({{1, 1, 0, 0, 0, 0, 0}, 59264}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 2, 0}, -68202}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 1, 0, 0}, -64176}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 0, 1}, 12544}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 1, 0}, 991440}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 1, 0}, -64071}),
       GIndex_t&lt;8&gt;({{4, 0, 0, 0, 0, 0, 0}, 6100842}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 1, 0, 0, 0}, -942669}),
       GIndex_t&lt;8&gt;({{0, 2, 0, 0, 0, 0, 0}, 3576615}),
       GIndex_t&lt;8&gt;({{2, 1, 0, 0, 0, 0, 0}, 10500696}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 1, 1}, -4540800}),
       GIndex_t&lt;8&gt;({{1, 0, 1, 0, 0, 0, 0}, 3591945}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 2, 0}, -7295820}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 1, 0, 0}, -3552406}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 0, 1}, 36197469}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 0, 1}, -2179296}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 3, 0}, -95237740}),
       GIndex_t&lt;8&gt;({{3, 0, 0, 0, 0, 1, 0}, 167887580}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 0, 2}, -77203203}),
       GIndex_t&lt;8&gt;({{0, 0, 1, 0, 0, 1, 0}, -36251565}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 1, 0, 0}, -107301348})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="343" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="344" bodyend="372"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1acda11dca99711373f089255d15b935b9" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 8 &gt;, 29 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;8&gt;, 29&gt; mty::I12_E8_data</definition>
        <argsstring></argsstring>
        <name>I12_E8_data</name>
        <qualifiedname>mty::I12_E8_data</qualifiedname>
        <initializer>= {GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 0, 0}, 1}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 1, 0}, 223}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 0, 0}, 2073}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 0, 0}, -1801}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 0, 1}, -3921}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 1, 0}, 64677}),
       GIndex_t&lt;8&gt;({{3, 0, 0, 0, 0, 0, 0}, 653050}),
       GIndex_t&lt;8&gt;({{0, 0, 1, 0, 0, 0, 0}, -300624}),
       GIndex_t&lt;8&gt;({{1, 1, 0, 0, 0, 0, 0}, -176896}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 2, 0}, 1623078}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 1, 0, 0}, 344544}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 0, 1}, -928256}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 1, 0}, 15398400}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 1, 0}, 732969}),
       GIndex_t&lt;8&gt;({{4, 0, 0, 0, 0, 0, 0}, 97389402}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 1, 0, 0, 0}, -20062029}),
       GIndex_t&lt;8&gt;({{0, 2, 0, 0, 0, 0, 0}, -53721225}),
       GIndex_t&lt;8&gt;({{2, 1, 0, 0, 0, 0, 0}, 50453496}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 1, 1}, 36284160}),
       GIndex_t&lt;8&gt;({{1, 0, 1, 0, 0, 0, 0}, -51773175}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 0, 2, 0}, 368355300}),
       GIndex_t&lt;8&gt;({{1, 0, 0, 0, 1, 0, 0}, 74388314}),
       GIndex_t&lt;8&gt;({{2, 0, 0, 0, 0, 0, 1}, 182867949}),
       GIndex_t&lt;8&gt;({{0, 1, 0, 0, 0, 0, 1}, -439704336}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 3, 0}, 3610174100}),
       GIndex_t&lt;8&gt;({{3, 0, 0, 0, 0, 1, 0}, 2727186380}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 0, 0, 2}, -459950403}),
       GIndex_t&lt;8&gt;({{0, 0, 1, 0, 0, 1, 0}, -180072525}),
       GIndex_t&lt;8&gt;({{0, 0, 0, 0, 1, 0, 0}, -484327668})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="374" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="375" bodyend="403"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1ab1e4173717817ef7bc2a64bd6f454783" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 4 &gt;, 7 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;4&gt;, 7&gt; mty::I2_F4_data</definition>
        <argsstring></argsstring>
        <name>I2_F4_data</name>
        <qualifiedname>mty::I2_F4_data</qualifiedname>
        <initializer>= {GIndex_t&lt;4&gt;({{0, 0, 0, 1}, 1}),
       GIndex_t&lt;4&gt;({{1, 0, 0, 0}, 3}),
       GIndex_t&lt;4&gt;({{0, 0, 1, 0}, 21}),
       GIndex_t&lt;4&gt;({{0, 0, 0, 2}, 27}),
       GIndex_t&lt;4&gt;({{1, 0, 0, 1}, 108}),
       GIndex_t&lt;4&gt;({{2, 0, 0, 0}, 135}),
       GIndex_t&lt;4&gt;({{0, 1, 0, 0}, 147})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="411" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="412" bodyend="418"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1abbe20d88dfc2a865541c20d711b21ceb" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 4 &gt;, 7 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;4&gt;, 7&gt; mty::I6_F4_data</definition>
        <argsstring></argsstring>
        <name>I6_F4_data</name>
        <qualifiedname>mty::I6_F4_data</qualifiedname>
        <initializer>= {GIndex_t&lt;4&gt;({{0, 0, 0, 1}, 1}),
       GIndex_t&lt;4&gt;({{1, 0, 0, 0}, -7}),
       GIndex_t&lt;4&gt;({{0, 0, 1, 0}, 1}),
       GIndex_t&lt;4&gt;({{0, 0, 0, 2}, 57}),
       GIndex_t&lt;4&gt;({{1, 0, 0, 1}, -132}),
       GIndex_t&lt;4&gt;({{2, 0, 0, 0}, -645}),
       GIndex_t&lt;4&gt;({{0, 1, 0, 0}, -133})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="420" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="421" bodyend="427"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a30d82f5515e172806e1423b4ac898f69" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 4 &gt;, 7 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;4&gt;, 7&gt; mty::I8_F4_data</definition>
        <argsstring></argsstring>
        <name>I8_F4_data</name>
        <qualifiedname>mty::I8_F4_data</qualifiedname>
        <initializer>= {GIndex_t&lt;4&gt;({{0, 0, 0, 1}, 1}),
       GIndex_t&lt;4&gt;({{1, 0, 0, 0}, 17}),
       GIndex_t&lt;4&gt;({{0, 0, 1, 0}, -119}),
       GIndex_t&lt;4&gt;({{0, 0, 0, 2}, 153}),
       GIndex_t&lt;4&gt;({{1, 0, 0, 1}, 612}),
       GIndex_t&lt;4&gt;({{2, 0, 0, 0}, 2907}),
       GIndex_t&lt;4&gt;({{0, 1, 0, 0}, -1309})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="429" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="430" bodyend="436"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1abdfde81b375f730a8165c18a70c9d471" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 4 &gt;, 7 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;4&gt;, 7&gt; mty::I12_F4_data</definition>
        <argsstring></argsstring>
        <name>I12_F4_data</name>
        <qualifiedname>mty::I12_F4_data</qualifiedname>
        <initializer>= {GIndex_t&lt;4&gt;({{0, 0, 0, 1}, 1}),
       GIndex_t&lt;4&gt;({{1, 0, 0, 0}, -63}),
       GIndex_t&lt;4&gt;({{0, 0, 1, 0}, -1959}),
       GIndex_t&lt;4&gt;({{0, 0, 0, 2}, 2073}),
       GIndex_t&lt;4&gt;({{1, 0, 0, 1}, 372}),
       GIndex_t&lt;4&gt;({{2, 0, 0, 0}, -134373}),
       GIndex_t&lt;4&gt;({{0, 1, 0, 0}, 125811})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="438" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="439" bodyend="445"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a7029c997f61cfc50c5a943bc4b699c0e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 2 &gt;, 16 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;2&gt;, 16&gt; mty::I2_G2_data</definition>
        <argsstring></argsstring>
        <name>I2_G2_data</name>
        <qualifiedname>mty::I2_G2_data</qualifiedname>
        <initializer>= {GIndex_t&lt;2&gt;({{0, 1}, 1}),
       GIndex_t&lt;2&gt;({{1, 0}, 4}),
       GIndex_t&lt;2&gt;({{0, 2}, 9}),
       GIndex_t&lt;2&gt;({{1, 1}, 32}),
       GIndex_t&lt;2&gt;({{0, 3}, 44}),
       GIndex_t&lt;2&gt;({{2, 0}, 55}),
       GIndex_t&lt;2&gt;({{0, 4}, 156}),
       GIndex_t&lt;2&gt;({{1, 2}, 144}),
       GIndex_t&lt;2&gt;({{3, 0}, 351}),
       GIndex_t&lt;2&gt;({{2, 1}, 286}),
       GIndex_t&lt;2&gt;({{0, 5}, 450}),
       GIndex_t&lt;2&gt;({{1, 3}, 480}),
       GIndex_t&lt;2&gt;({{0, 6}, 1122}),
       GIndex_t&lt;2&gt;({{2, 2}, 972}),
       GIndex_t&lt;2&gt;({{4, 0}, 1496}),
       GIndex_t&lt;2&gt;({{3, 1}, 1472})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="453" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="454" bodyend="469"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a70067d1ea3a582a57fdb5417f4dc3ce4" prot="public" static="no" constexpr="yes" mutable="no">
        <type>std::array&lt; GIndex_t&lt; 2 &gt;, 16 &gt;</type>
        <definition>std::array&lt;GIndex_t&lt;2&gt;, 16&gt; mty::I6_G2_data</definition>
        <argsstring></argsstring>
        <name>I6_G2_data</name>
        <qualifiedname>mty::I6_G2_data</qualifiedname>
        <initializer>= {GIndex_t&lt;2&gt;({{0, 1}, 1}),
       GIndex_t&lt;2&gt;({{1, 0}, -26}),
       GIndex_t&lt;2&gt;({{0, 2}, 39}),
       GIndex_t&lt;2&gt;({{1, 1}, -208}),
       GIndex_t&lt;2&gt;({{0, 3}, 494}),
       GIndex_t&lt;2&gt;({{2, 0}, -1235}),
       GIndex_t&lt;2&gt;({{0, 4}, 3666}),
       GIndex_t&lt;2&gt;({{1, 2}, -456}),
       GIndex_t&lt;2&gt;({{3, 0}, -20709}),
       GIndex_t&lt;2&gt;({{2, 1}, -7904}),
       GIndex_t&lt;2&gt;({{0, 5}, 19500}),
       GIndex_t&lt;2&gt;({{1, 3}, 2640}),
       GIndex_t&lt;2&gt;({{0, 6}, 82212}),
       GIndex_t&lt;2&gt;({{2, 2}, -27378}),
       GIndex_t&lt;2&gt;({{4, 0}, -193324}),
       GIndex_t&lt;2&gt;({{3, 1}, -109408})}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="471" column="29" bodyfile="src/marty/core/groupIndices.h" bodystart="472" bodyend="487"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1aa259cfefd6b0e881e72fb37000f19802" prot="public" static="no" mutable="no">
        <type>csl::allocator&lt; <ref refid="classmty_1_1Propagator" kindref="compound">Propagator</ref> &gt;</type>
        <definition>csl::allocator&lt;Propagator&gt; mty::alloc_propagator</definition>
        <argsstring></argsstring>
        <name>alloc_propagator</name>
        <qualifiedname>mty::alloc_propagator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/propagator.h" line="70" column="23" bodyfile="src/marty/core/propagator.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a51882234d40a3afe1e6da12f4c612388" prot="public" static="no" mutable="no">
        <type>csl::allocator&lt; <ref refid="classmty_1_1FermionPropStruct" kindref="compound">FermionPropStruct</ref> &gt;</type>
        <definition>csl::allocator&lt;FermionPropStruct&gt; mty::alloc_fermionprop</definition>
        <argsstring></argsstring>
        <name>alloc_fermionprop</name>
        <qualifiedname>mty::alloc_fermionprop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/propagator.h" line="124" column="23" bodyfile="src/marty/core/propagator.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1a6bc726c83cc204caa10b9fdeef8a19f0" prot="public" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::defaultSpaceTimePoint</definition>
        <argsstring></argsstring>
        <name>defaultSpaceTimePoint</name>
        <qualifiedname>mty::defaultSpaceTimePoint</qualifiedname>
        <initializer>= csl::tensor_s(&quot;X&quot;, &amp;<ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref>)</initializer>
        <briefdescription>
<para>Default space-time point when not given while defining a <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>See QuantumField::operator(). To define a <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>, one needs in general indices (except for fully scalar fields), and a space-time point. This defines an object like <formula id="206">$ A^{\mu A}(X) $</formula>. That being said, it is rarely important to specify the space-time point of the field. In particular, in any interaction term of the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> all fields are at the same point. This variable is given by default to <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> when no point is given. A code like <programlisting><codeline><highlight class="normal">A({mu,<sp/>A});<sp/></highlight></codeline>
</programlisting> is equivalent to <programlisting><codeline><highlight class="normal">A({mu,<sp/>A},<sp/><ref refid="namespacemty_1a6bc726c83cc204caa10b9fdeef8a19f0" kindref="member">defaultSpaceTimePoint</ref>)<sp/></highlight></codeline>
</programlisting>. Then, whe integrated to the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>, the point is automatically replaced by the one of the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="88" column="20" bodyfile="src/marty/core/quantumField.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1af4b0363afcde72ad2077cdaecf669113" prot="public" static="no" constexpr="yes" mutable="no">
        <type>bool</type>
        <definition>bool mty::useExperimental</definition>
        <argsstring></argsstring>
        <name>useExperimental</name>
        <qualifiedname>mty::useExperimental</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/semiSimpleAlgebra.cpp" line="612" column="16" bodyfile="src/marty/core/semiSimpleAlgebra.cpp" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacemty_1ad0b08fc1341860518327899973b0eeba" prot="public" static="no" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int mty::GTHDM_type</definition>
        <argsstring></argsstring>
        <name>GTHDM_type</name>
        <qualifiedname>mty::GTHDM_type</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/models/gthdm.h" line="8" column="15" bodyfile="src/marty/models/gthdm.h" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacemty_1a288c7f46722ce39cb4b5d013c9d5b45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::saveParticleData</definition>
        <argsstring>(std::string const &amp;fileName, QuantumNumberData const &amp;qData, ProcessData const &amp;pData)</argsstring>
        <name>saveParticleData</name>
        <qualifiedname>mty::saveParticleData</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumNumberData" kindref="compound">QuantumNumberData</ref> const &amp;</type>
          <declname>qData</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1ProcessData" kindref="compound">ProcessData</ref> const &amp;</type>
          <declname>pData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty-plugins/boltzmann-solver/processdata.cpp" line="108" column="10" bodyfile="src/marty-plugins/boltzmann-solver/processdata.cpp" bodystart="108" bodyend="119" declfile="src/marty-plugins/boltzmann-solver/processdata.h" declline="56" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2076aa355f16af682b929af7dc9200d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const AlgebraState &amp;state)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1AlgebraState" kindref="compound">AlgebraState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/algebraState.cpp" line="78" column="1" bodyfile="src/marty/core/algebraState.cpp" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa2a4ac00e047536313e6c965bb22c016" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::compareFields</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, size_t pos)</argsstring>
        <name>compareFields</name>
        <qualifiedname>mty::compareFields</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/amplitudeInitializer.cpp" line="378" column="13" bodyfile="src/marty/core/amplitudeInitializer.cpp" bodystart="378" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad4b47947e0ab4d6ac77b26b0003ebb3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::bernoulliCombinatorial</definition>
        <argsstring>(size_t i, size_t j)</argsstring>
        <name>bernoulliCombinatorial</name>
        <qualifiedname>mty::bernoulliCombinatorial</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/bernoulli.h" line="31" column="18" bodyfile="src/marty/core/bernoulli.h" bodystart="31" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a39533403466f5815b8669982ff4c8b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::bernoulliRecursion</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;B, size_t n)</argsstring>
        <name>bernoulliRecursion</name>
        <qualifiedname>mty::bernoulliRecursion</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/bernoulli.h" line="45" column="18" bodyfile="src/marty/core/bernoulli.h" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3a720ed504de54e6c1fae65252e7e43e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::bernoulliNumber</definition>
        <argsstring>(size_t i)</argsstring>
        <name>bernoulliNumber</name>
        <qualifiedname>mty::bernoulliNumber</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/bernoulli.h" line="55" column="18" bodyfile="src/marty/core/bernoulli.h" bodystart="55" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a902d618075de38329513f58f6de1f407" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> *</type>
        <definition>static mty::QuantumField * mty::qf</definition>
        <argsstring>(csl::Expr &amp;expr)</argsstring>
        <name>qf</name>
        <qualifiedname>mty::qf</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="17" column="26" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1fe2957d5d993d72bb1f78da308a7ed9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref></type>
        <definition>static mty::QuantumField mty::createField</definition>
        <argsstring>(mty::Insertion const &amp;ins, csl::Tensor const &amp;momentum)</argsstring>
        <name>createField</name>
        <qualifiedname>mty::createField</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> const &amp;</type>
          <declname>ins</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>momentum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="22" column="26" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="22" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae8df5ab5ebc6f53a9f340be17319617e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>static csl::Expr mty::fermionExpr</definition>
        <argsstring>(OpInsertion const &amp;ins, bool conj)</argsstring>
        <name>fermionExpr</name>
        <qualifiedname>mty::fermionExpr</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> const &amp;</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>conj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="32" column="18" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5415481a3739aee4bf6a10a5865eaa78" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> &gt;</type>
        <definition>static std::vector&lt; OpInsertion &gt; mty::getOpInsertions</definition>
        <argsstring>(Kinematics const &amp;kinematics)</argsstring>
        <name>getOpInsertions</name>
        <qualifiedname>mty::getOpInsertions</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> const &amp;</type>
          <declname>kinematics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="43" column="20" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="43" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aea8d146aed6d4f4f93d58de0432c68c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::requirementsSatisfied</definition>
        <argsstring>(std::vector&lt; OpInsertion &gt; const &amp;insertions, std::vector&lt; InsertionRequirement &gt; const &amp;requirements)</argsstring>
        <name>requirementsSatisfied</name>
        <qualifiedname>mty::requirementsSatisfied</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1InsertionRequirement" kindref="compound">InsertionRequirement</ref> &gt; const &amp;</type>
          <declname>requirements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="60" column="1" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="60" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2a6d693477de61ab27d6bbdf591f9c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::getMagneticCoupling</definition>
        <argsstring>(DiracCoupling coupling, csl::Index alpha, csl::Index beta)</argsstring>
        <name>getMagneticCoupling</name>
        <qualifiedname>mty::getMagneticCoupling</qualifiedname>
        <param>
          <type>DiracCoupling</type>
          <declname>coupling</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="84" column="1" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="84" bodyend="103" declfile="src/marty/core/builtinOperators.h" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3272ddd7b77395d060a948167eb3da21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getMagneticGenerator</definition>
        <argsstring>(mty::Model const &amp;model, csl::Expr &amp;psi_star, csl::Expr &amp;psi, csl::Expr &amp;A)</argsstring>
        <name>getMagneticGenerator</name>
        <qualifiedname>mty::getMagneticGenerator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi_star</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="105" column="11" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="105" bodyend="156" declfile="src/marty/core/builtinOperators.h" declline="34" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a837efa643f1d24eaf30057df6492f377" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>static std::vector&lt; Wilson &gt; mty::buildMagneticOperator</definition>
        <argsstring>(Model const &amp;model, OpInsertion const &amp;leftFermion, OpInsertion const &amp;rightFermion, OpInsertion const &amp;vectorBoson, csl::Tensor momentum, DiracCoupling coupling)</argsstring>
        <name>buildMagneticOperator</name>
        <qualifiedname>mty::buildMagneticOperator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> const &amp;</type>
          <declname>leftFermion</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> const &amp;</type>
          <declname>rightFermion</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> const &amp;</type>
          <declname>vectorBoson</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>momentum</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="159" column="1" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="159" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4ab0559a10dd4ad8202babfc63e7c405" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::areSwapped</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;fermionOrder)</argsstring>
        <name>areSwapped</name>
        <qualifiedname>mty::areSwapped</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>fermionOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="198" column="13" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="198" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac3d6c936652714602f6732e10e21e7fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; <ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref>, 3 &gt;</type>
        <definition>static std::array&lt; OpInsertion, 3 &gt; mty::getMagneticInsertions</definition>
        <argsstring>(std::vector&lt; OpInsertion &gt; const &amp;insertions, bool swapped)</argsstring>
        <name>getMagneticInsertions</name>
        <qualifiedname>mty::getMagneticInsertions</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>swapped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="214" column="1" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="214" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a69b3a7134d9c07816471ac1afc9edeaa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mty::addMagneticContribution</definition>
        <argsstring>(std::vector&lt; Wilson &gt; &amp;contributions, csl::Expr const &amp;factor, Model const &amp;model, OpInsertion const &amp;leftFermion, OpInsertion const &amp;rightFermion, OpInsertion const &amp;vectorBoson, csl::Tensor momentum, DiracCoupling coupling)</argsstring>
        <name>addMagneticContribution</name>
        <qualifiedname>mty::addMagneticContribution</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; &amp;</type>
          <declname>contributions</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> const &amp;</type>
          <declname>leftFermion</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> const &amp;</type>
          <declname>rightFermion</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> const &amp;</type>
          <declname>vectorBoson</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>momentum</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="237" column="13" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="237" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a12094714d28e87bc320fc5d3338e4e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::chromoMagneticOperator</definition>
        <argsstring>(Model const &amp;model, WilsonSet const &amp;wilsons, DiracCoupling coupling)</argsstring>
        <name>chromoMagneticOperator</name>
        <qualifiedname>mty::chromoMagneticOperator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="254" column="13" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="254" bodyend="311" declfile="src/marty/core/builtinOperators.h" declline="39" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aed56e42195370a55d53376050ba3a709" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mty::setUpDim6FermionOrder</definition>
        <argsstring>(WilsonSet const &amp;wilsons, std::vector&lt; int &gt; &amp;fermionOrder)</argsstring>
        <name>setUpDim6FermionOrder</name>
        <qualifiedname>mty::setUpDim6FermionOrder</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>fermionOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="313" column="13" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="313" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acaa330a3931aaccd54bc6cc35f5dc3be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, 4 &gt;</type>
        <definition>static std::array&lt; csl::Expr, 4 &gt; mty::getExternalDim6Fermions</definition>
        <argsstring>(std::vector&lt; OpInsertion &gt; const &amp;insertions, std::vector&lt; int &gt; const &amp;fermionOrder)</argsstring>
        <name>getExternalDim6Fermions</name>
        <qualifiedname>mty::getExternalDim6Fermions</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1OpInsertion" kindref="compound">OpInsertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>fermionOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="339" column="1" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="339" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6dfa3782063aba8c8a8689ffea38a74c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>static std::vector&lt; Wilson &gt; mty::getDiracCurrent</definition>
        <argsstring>(DiracCoupling current, csl::Index const &amp;a, csl::Index const &amp;b, csl::Index const &amp;mu, csl::Index const &amp;nu=csl::Index())</argsstring>
        <name>getDiracCurrent</name>
        <qualifiedname>mty::getDiracCurrent</qualifiedname>
        <param>
          <type>DiracCoupling</type>
          <declname>current</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>nu</declname>
          <defval><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="348" column="20" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="348" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad0f3eafd062c15307773255088e7bba9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>static std::vector&lt; Wilson &gt; mty::getDiracCurrent</definition>
        <argsstring>(DiracCoupling c1, DiracCoupling c2, csl::Expr &amp;psi1, csl::Expr &amp;psi2, csl::Expr &amp;psi3, csl::Expr &amp;psi4)</argsstring>
        <name>getDiracCurrent</name>
        <qualifiedname>mty::getDiracCurrent</qualifiedname>
        <param>
          <type>DiracCoupling</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>c2</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi1</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi2</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi3</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="394" column="20" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="394" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2c6e8ec65746b82c045d2b5f451962ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; size_t, size_t &gt;</type>
        <definition>static std::pair&lt; size_t, size_t &gt; mty::findTwoIdenticalReps</definition>
        <argsstring>(mty::Irrep const &amp;rep1, mty::Irrep const &amp;rep2, mty::Irrep const &amp;rep3, mty::Irrep const &amp;rep4)</argsstring>
        <name>findTwoIdenticalReps</name>
        <qualifiedname>mty::findTwoIdenticalReps</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep1</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep2</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep3</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="421" column="18" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="421" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ada05c8920567ef363cbb4cf9c556bebd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::areIdenticalReps</definition>
        <argsstring>(mty::Irrep const &amp;rep1, mty::Irrep const &amp;rep2, mty::Irrep const &amp;rep3, mty::Irrep const &amp;rep4)</argsstring>
        <name>areIdenticalReps</name>
        <qualifiedname>mty::areIdenticalReps</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep1</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep2</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep3</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="447" column="13" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="447" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa072f147068ebe850a61fa1e802c0453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &amp;</type>
        <definition>csl::Index &amp; mty::groupIndex</definition>
        <argsstring>(Model const &amp;model, Group const *group, csl::Expr &amp;psi)</argsstring>
        <name>groupIndex</name>
        <qualifiedname>mty::groupIndex</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">Group</ref> const *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="455" column="12" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="455" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1b307295d211ff8e5403099f554e5fc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>static csl::Expr mty::getTrivialColorCouplings</definition>
        <argsstring>(Model const &amp;model, csl::Expr &amp;psi1, csl::Expr &amp;psi2, csl::Expr &amp;psi3, csl::Expr &amp;psi4)</argsstring>
        <name>getTrivialColorCouplings</name>
        <qualifiedname>mty::getTrivialColorCouplings</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi1</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi2</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi3</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="468" column="18" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="468" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3e60e8740748f4568dad05d901b63dc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ColorCoupling</type>
        <definition>static ColorCoupling mty::getColorCoupling</definition>
        <argsstring>(std::vector&lt; ColorSpec &gt; const &amp;colorCouplings, std::string const &amp;group)</argsstring>
        <name>getColorCoupling</name>
        <qualifiedname>mty::getColorCoupling</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1ColorSpec" kindref="compound">ColorSpec</ref> &gt; const &amp;</type>
          <declname>colorCouplings</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="496" column="1" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="496" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a650f688b6dfa58dc05fb64b86688630c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>static csl::Expr mty::getColorCoupling</definition>
        <argsstring>(ColorCoupling coupling, csl::Index const &amp;a1, csl::Index const &amp;a2, csl::Index const &amp;a3, csl::Index const &amp;a4, csl::Tensor &amp;T, csl::Index const &amp;A)</argsstring>
        <name>getColorCoupling</name>
        <qualifiedname>mty::getColorCoupling</qualifiedname>
        <param>
          <type>ColorCoupling</type>
          <declname>coupling</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a2</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a3</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a4</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="507" column="18" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="507" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2560956bf32ca886979d02af9bd594bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>static csl::Expr mty::getGeneralColorCouplings</definition>
        <argsstring>(Model const &amp;model, std::vector&lt; ColorSpec &gt; const &amp;colorCouplings, csl::Expr &amp;psi1, csl::Expr &amp;psi2, csl::Expr &amp;psi3, csl::Expr &amp;psi4)</argsstring>
        <name>getGeneralColorCouplings</name>
        <qualifiedname>mty::getGeneralColorCouplings</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1ColorSpec" kindref="compound">ColorSpec</ref> &gt; const &amp;</type>
          <declname>colorCouplings</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi1</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi2</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi3</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="530" column="1" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="530" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5eff6ceeba0ed21e3f4db726f45f6747" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>static csl::Expr mty::getColorCurrent</definition>
        <argsstring>(Model const &amp;model, std::vector&lt; ColorSpec &gt; const &amp;colorCouplings, csl::Expr &amp;psi1, csl::Expr &amp;psi2, csl::Expr &amp;psi3, csl::Expr &amp;psi4)</argsstring>
        <name>getColorCurrent</name>
        <qualifiedname>mty::getColorCurrent</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1ColorSpec" kindref="compound">ColorSpec</ref> &gt; const &amp;</type>
          <declname>colorCouplings</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi1</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi2</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi3</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>psi4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="561" column="18" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="561" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4324507948d77de1d740a687de4d6ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::dimension6Operator</definition>
        <argsstring>(Model const &amp;model, WilsonSet const &amp;wilsons, DiracCoupling leftCurrent, DiracCoupling rightCurrent, std::vector&lt; ColorSpec &gt; const &amp;colorCouplings, std::vector&lt; int &gt; fermionOrder)</argsstring>
        <name>dimension6Operator</name>
        <qualifiedname>mty::dimension6Operator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>leftCurrent</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>rightCurrent</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1ColorSpec" kindref="compound">ColorSpec</ref> &gt; const &amp;</type>
          <declname>colorCouplings</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>fermionOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="576" column="1" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="576" bodyend="607" declfile="src/marty/core/builtinOperators.h" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad61faf134d7e987fb164bb5fff631e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::dimension5Operator</definition>
        <argsstring>(Model const &amp;model, WilsonSet const &amp;wilsons, DiracCoupling current)</argsstring>
        <name>dimension5Operator</name>
        <qualifiedname>mty::dimension5Operator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.cpp" line="609" column="13" bodyfile="src/marty/core/builtinOperators.cpp" bodystart="609" bodyend="658" declfile="src/marty/core/builtinOperators.h" declline="43" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a89bcf91b9b34095710b7e7fd14476c3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::dimension6Operator</definition>
        <argsstring>(Model const &amp;model, WilsonSet const &amp;wilsons, DiracCoupling leftCurrent, DiracCoupling rightCurrent, std::vector&lt; int &gt; fermionOrder={})</argsstring>
        <name>dimension6Operator</name>
        <qualifiedname>mty::dimension6Operator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>leftCurrent</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>rightCurrent</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>fermionOrder</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.h" line="55" column="20" bodyfile="src/marty/core/builtinOperators.h" bodystart="55" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a327d69e413a881af765e3d0bf16247ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::dimension6Operator</definition>
        <argsstring>(Model const &amp;model, WilsonSet const &amp;wilsons, DiracCoupling leftCurrent, DiracCoupling rightCurrent, ColorSpec const &amp;colorCoupling, std::vector&lt; int &gt; fermionOrder={})</argsstring>
        <name>dimension6Operator</name>
        <qualifiedname>mty::dimension6Operator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>leftCurrent</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>rightCurrent</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1ColorSpec" kindref="compound">ColorSpec</ref> const &amp;</type>
          <declname>colorCoupling</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>fermionOrder</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/builtinOperators.h" line="70" column="20" bodyfile="src/marty/core/builtinOperators.h" bodystart="70" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5d42a1ef614cd78f49f0b299fbb0a47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::buildCKM</definition>
        <argsstring>(const csl::Space *flavorSpace)</argsstring>
        <name>buildCKM</name>
        <qualifiedname>mty::buildCKM</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> *</type>
          <declname>flavorSpace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/ckm.cpp" line="20" column="13" bodyfile="src/marty/core/ckm.cpp" bodystart="20" bodyend="30" declfile="src/marty/core/ckm.h" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acef1625e7f630e6dccf2ec4e28d1f059" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; <ref refid="classcolor_1_1ColorSpace" kindref="compound">color::ColorSpace</ref> const * &gt;</type>
        <definition>static std::set&lt; color::ColorSpace const * &gt; mty::getColorSpaces</definition>
        <argsstring>(csl::Expr const &amp;expr)</argsstring>
        <name>getColorSpaces</name>
        <qualifiedname>mty::getColorSpaces</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="7" column="1" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="7" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad0d2da124a109178c1d5f64b4365fc74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; <ref refid="classcolor_1_1ColorSpace" kindref="compound">color::ColorSpace</ref> const * &gt;</type>
        <definition>static std::set&lt; color::ColorSpace const * &gt; mty::getAdjointSpaces</definition>
        <argsstring>(csl::Expr const &amp;expr)</argsstring>
        <name>getAdjointSpaces</name>
        <qualifiedname>mty::getAdjointSpaces</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="28" column="1" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="28" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa70b4899134829db1cb872b4b64a1b22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>static std::vector&lt; size_t &gt; mty::getPos_fABC</definition>
        <argsstring>(csl::Expr &amp;prod, color::ColorSpace const *space)</argsstring>
        <name>getPos_fABC</name>
        <qualifiedname>mty::getPos_fABC</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type><ref refid="classcolor_1_1ColorSpace" kindref="compound">color::ColorSpace</ref> const *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="48" column="20" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="48" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a12031ae056d39b9155276183b2605377" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::hasCommonIndex</definition>
        <argsstring>(csl::Expr const &amp;tensorA, csl::Expr const &amp;tensorB)</argsstring>
        <name>hasCommonIndex</name>
        <qualifiedname>mty::hasCommonIndex</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>tensorA</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>tensorB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="64" column="13" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="64" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a96461029e6a0825e059364bbb98d93b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::isFTrace</definition>
        <argsstring>(csl::Expr const &amp;tensorA, csl::Expr const &amp;tensorB, csl::Expr const &amp;tensorC)</argsstring>
        <name>isFTrace</name>
        <qualifiedname>mty::isFTrace</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>tensorA</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>tensorB</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>tensorC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="73" column="13" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7d654b34bc6101ce5721abfb8ff2fcf8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mty::placeCommonIndex</definition>
        <argsstring>(csl::IndexStructure &amp;si, csl::IndexStructure &amp;sj, size_t posIni, size_t posInj)</argsstring>
        <name>placeCommonIndex</name>
        <qualifiedname>mty::placeCommonIndex</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> &amp;</type>
          <declname>si</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> &amp;</type>
          <declname>sj</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>posIni</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>posInj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="81" column="12" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="81" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1adb9ab0282c17392e9f31f4b1bb273b9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>static csl::Expr mty::fTrace</definition>
        <argsstring>(csl::Expr const &amp;fi, csl::Expr const &amp;fj, csl::Expr const &amp;fk, mty::GaugedGroup const *group)</argsstring>
        <name>fTrace</name>
        <qualifiedname>mty::fTrace</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>fi</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>fj</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>fk</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1GaugedGroup" kindref="compound">mty::GaugedGroup</ref> const *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="102" column="18" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="102" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0f4f1f16e368ce27b3af8f2d3f7da78a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::CalculateFColorTrace_impl</definition>
        <argsstring>(csl::Expr &amp;prod, color::ColorSpace const *space)</argsstring>
        <name>CalculateFColorTrace_impl</name>
        <qualifiedname>mty::CalculateFColorTrace_impl</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type><ref refid="classcolor_1_1ColorSpace" kindref="compound">color::ColorSpace</ref> const *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="125" column="13" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="125" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a17c1323f5e0d4bd2b4aae9d6aa80c82c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::CalculateFColorTrace</definition>
        <argsstring>(csl::Expr const &amp;expr)</argsstring>
        <name>CalculateFColorTrace</name>
        <qualifiedname>mty::CalculateFColorTrace</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="153" column="11" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="153" bodyend="165" declfile="src/marty/core/colorSimplification.h" declline="7" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7bbe9f9949f89fd70ea9ce58dd8d87b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::CalculateTrace</definition>
        <argsstring>(const mty::SemiSimpleGroup *colorGroup, const csl::Expr &amp;expr)</argsstring>
        <name>CalculateTrace</name>
        <qualifiedname>mty::CalculateTrace</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1SemiSimpleGroup" kindref="compound">mty::SemiSimpleGroup</ref> *</type>
          <declname>colorGroup</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="167" column="11" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="167" bodyend="179" declfile="src/marty/core/colorSimplification.h" declline="9" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7583577b0f2e7b241ae081f7931f41a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::CalculateColorTrace</definition>
        <argsstring>(csl::Expr const &amp;init)</argsstring>
        <name>CalculateColorTrace</name>
        <qualifiedname>mty::CalculateColorTrace</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/colorSimplification.cpp" line="181" column="11" bodyfile="src/marty/core/colorSimplification.cpp" bodystart="181" bodyend="194" declfile="src/marty/core/colorSimplification.h" declline="12" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9ae864626382375f17a3dd073acaf52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::slashed_s</definition>
        <argsstring>(csl::Tensor p, const csl::Index &amp;alpha, const csl::Index &amp;beta, const DiracSpace *space)</argsstring>
        <name>slashed_s</name>
        <qualifiedname>mty::slashed_s</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1DiracSpace" kindref="compound">DiracSpace</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/diracology.cpp" line="35" column="11" bodyfile="src/marty/core/diracology.cpp" bodystart="35" bodyend="42" declfile="src/marty/core/diracology.h" declline="137" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9be4e5fd42f0d7646d1eb27c9b8dc941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::bar_s</definition>
        <argsstring>(const csl::Expr &amp;tensor, const DiracSpace *space)</argsstring>
        <name>bar_s</name>
        <qualifiedname>mty::bar_s</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1DiracSpace" kindref="compound">DiracSpace</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/diracology.cpp" line="44" column="11" bodyfile="src/marty/core/diracology.cpp" bodystart="44" bodyend="56" declfile="src/marty/core/diracology.h" declline="142" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6f2bb4679910be33de208bbc8cebb7da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsgl_1_1TensorSet" kindref="compound">sgl::TensorSet</ref> const &amp;</type>
        <definition>sgl::TensorSet const  &amp; mty::defaultSGLTensorSet</definition>
        <argsstring>()</argsstring>
        <name>defaultSGLTensorSet</name>
        <qualifiedname>mty::defaultSGLTensorSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/diracology.cpp" line="58" column="22" bodyfile="src/marty/core/diracology.cpp" bodystart="58" bodyend="67" declfile="src/marty/core/diracology.h" declline="144" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a02560b92dad906d4c2e3db18d65ec93c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::setDiracTensor4</definition>
        <argsstring>(const DiracSpace *self)</argsstring>
        <name>setDiracTensor4</name>
        <qualifiedname>mty::setDiracTensor4</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1DiracSpace" kindref="compound">DiracSpace</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/diracology.cpp" line="107" column="6" bodyfile="src/marty/core/diracology.cpp" bodystart="107" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac7c6c5e23787f74e727098a6f942e632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::removeBosons</definition>
        <argsstring>(FieldList &amp;init)</argsstring>
        <name>removeBosons</name>
        <qualifiedname>mty::removeBosons</qualifiedname>
        <param>
          <type>FieldList &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="26" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa0c70e8230ed8523510bc3589d5fd90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; FieldList, FieldList &gt;</type>
        <definition>std::pair&lt; FieldList, FieldList &gt; mty::separatePartners</definition>
        <argsstring>(FieldList const &amp;init)</argsstring>
        <name>separatePartners</name>
        <qualifiedname>mty::separatePartners</qualifiedname>
        <param>
          <type>FieldList const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="35" column="11" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="35" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab1f08c2194ce56f276f555684041dc1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::compareFields</definition>
        <argsstring>(mty::QuantumField const &amp;A, mty::QuantumField const &amp;B)</argsstring>
        <name>compareFields</name>
        <qualifiedname>mty::compareFields</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="50" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="50" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa6b50007245c49a60177519ab0502cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FieldList::iterator</type>
        <definition>ConjugationInfo::FieldList::iterator mty::getExternalBegin</definition>
        <argsstring>(FieldList &amp;fields)</argsstring>
        <name>getExternalBegin</name>
        <qualifiedname>mty::getExternalBegin</qualifiedname>
        <param>
          <type>FieldList &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="67" column="21" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="67" bodyend="80" declfile="src/marty/core/fermionFlow.h" declline="384" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a083c5a59f2cfa25c30d4d7eb5064e743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FieldList::iterator</type>
        <definition>ConjugationInfo::FieldList::iterator mty::getInternalBegin</definition>
        <argsstring>(FieldList &amp;fields)</argsstring>
        <name>getInternalBegin</name>
        <qualifiedname>mty::getInternalBegin</qualifiedname>
        <param>
          <type>FieldList &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="82" column="21" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="82" bodyend="91" declfile="src/marty/core/fermionFlow.h" declline="386" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aaffd0ece5edec8463912ced74729ed37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FieldList::iterator</type>
        <definition>ConjugationInfo::FieldList::iterator mty::getBegin</definition>
        <argsstring>(FieldList &amp;fields)</argsstring>
        <name>getBegin</name>
        <qualifiedname>mty::getBegin</qualifiedname>
        <param>
          <type>FieldList &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="93" column="21" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="93" bodyend="97" declfile="src/marty/core/fermionFlow.h" declline="388" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a468cb3bd82980231f731d1c267683e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FieldList::iterator</type>
        <definition>FieldList::iterator mty::getPartner</definition>
        <argsstring>(FieldList::iterator A, FieldList &amp;fieldsA, FieldList &amp;partners)</argsstring>
        <name>getPartner</name>
        <qualifiedname>mty::getPartner</qualifiedname>
        <param>
          <type>FieldList::iterator</type>
          <declname>A</declname>
        </param>
        <param>
          <type>FieldList &amp;</type>
          <declname>fieldsA</declname>
        </param>
        <param>
          <type>FieldList &amp;</type>
          <declname>partners</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="100" column="1" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8168a7cb2d0a873927d7f78edc14b4df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FieldList::iterator</type>
        <definition>FieldList::iterator mty::getNext</definition>
        <argsstring>(QuantumField const *field, FieldList &amp;fields, FieldList &amp;partners, bool recurs=false)</argsstring>
        <name>getNext</name>
        <qualifiedname>mty::getNext</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>FieldList &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>FieldList &amp;</type>
          <declname>partners</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recurs</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="105" column="21" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="105" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a21539701c51b5fae6c0002e67ead7830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isSameOrder</definition>
        <argsstring>(QuantumField const *first, QuantumField const *second, FieldList const &amp;ruleOrder, bool ruleMode)</argsstring>
        <name>isSameOrder</name>
        <qualifiedname>mty::isSameOrder</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>second</declname>
        </param>
        <param>
          <type>FieldList const &amp;</type>
          <declname>ruleOrder</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="139" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="139" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af89e802cc012fa7d85c2e11e012464c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::diracIndexOf</definition>
        <argsstring>(QuantumField const *field)</argsstring>
        <name>diracIndexOf</name>
        <qualifiedname>mty::diracIndexOf</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="156" column="12" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="156" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac68f74bea62f9ef01d15c6c66dfe2753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::testBeginExternalLeg</definition>
        <argsstring>(QuantumField const *ext, std::vector&lt; ConjugationInfo &gt; &amp;info)</argsstring>
        <name>testBeginExternalLeg</name>
        <qualifiedname>mty::testBeginExternalLeg</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>ext</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1ConjugationInfo" kindref="compound">ConjugationInfo</ref> &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="167" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a79610e7281dd495699005a4f4c81e0c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::testEndExternalLeg</definition>
        <argsstring>(QuantumField const *ext, std::vector&lt; ConjugationInfo &gt; &amp;info)</argsstring>
        <name>testEndExternalLeg</name>
        <qualifiedname>mty::testEndExternalLeg</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>ext</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1ConjugationInfo" kindref="compound">ConjugationInfo</ref> &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="176" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a314bc53fc7f192002e09cb973bf77dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::testPropagator</definition>
        <argsstring>(QuantumField const *first, QuantumField const *second, csl::Index const &amp;preIndex, csl::Index const &amp;postIndex, FieldList const &amp;initialOrder, std::vector&lt; ConjugationInfo &gt; &amp;info)</argsstring>
        <name>testPropagator</name>
        <qualifiedname>mty::testPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>second</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>preIndex</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>postIndex</declname>
        </param>
        <param>
          <type>FieldList const &amp;</type>
          <declname>initialOrder</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1ConjugationInfo" kindref="compound">ConjugationInfo</ref> &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="185" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="185" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a75a8e159ca3ef31aa6fff14ca3e93788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::testVertexFields</definition>
        <argsstring>(QuantumField const *first, QuantumField const *second, csl::Index const &amp;preIndex, csl::Index const &amp;postIndex, FieldList const &amp;ruleOrder, std::vector&lt; ConjugationInfo &gt; &amp;info, bool ruleMode)</argsstring>
        <name>testVertexFields</name>
        <qualifiedname>mty::testVertexFields</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>second</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>preIndex</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>postIndex</declname>
        </param>
        <param>
          <type>FieldList const &amp;</type>
          <declname>ruleOrder</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1ConjugationInfo" kindref="compound">ConjugationInfo</ref> &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="209" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="209" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa9af281df731e52ed1fdd057b1dce45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::testFields</definition>
        <argsstring>(QuantumField const *first, QuantumField const *second, csl::Index const &amp;preIndex, csl::Index const &amp;postIndex, FieldList const &amp;, FieldList const &amp;ruleOrder, std::vector&lt; ConjugationInfo &gt; &amp;info, bool ruleMode)</argsstring>
        <name>testFields</name>
        <qualifiedname>mty::testFields</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const *</type>
          <declname>second</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>preIndex</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>postIndex</declname>
        </param>
        <param>
          <type>FieldList const &amp;</type>
        </param>
        <param>
          <type>FieldList const &amp;</type>
          <declname>ruleOrder</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1ConjugationInfo" kindref="compound">ConjugationInfo</ref> &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="227" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="227" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a207f177e2b87c1211fba13744750047c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1FermionLine" kindref="compound">FermionLine</ref> &gt;</type>
        <definition>std::vector&lt; FermionLine &gt; mty::chainFermions</definition>
        <argsstring>(FieldList const &amp;init)</argsstring>
        <name>chainFermions</name>
        <qualifiedname>mty::chainFermions</qualifiedname>
        <param>
          <type>FieldList const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="249" column="13" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="249" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa9d7d7178fac971ab7018720ffcc3b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::f</definition>
        <argsstring>(FieldList const &amp;init, FieldList const &amp;line)</argsstring>
        <name>f</name>
        <qualifiedname>mty::f</qualifiedname>
        <param>
          <type>FieldList const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>FieldList const &amp;</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="286" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="286" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aeaee0162a491ba7a3a69095203104eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::getNextIndexInChain</definition>
        <argsstring>(csl::Index &amp;first, csl::Index &amp;prev, csl::Expr const &amp;expr)</argsstring>
        <name>getNextIndexInChain</name>
        <qualifiedname>mty::getNextIndexInChain</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &amp;</type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="556" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="556" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac5edc5695efa1b0aa4f70fd42fd4529b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::findNextIndexBefore</definition>
        <argsstring>(csl::Index first, csl::Index const &amp;target, csl::Index const &amp;end, csl::Index prev, csl::Expr const &amp;expr)</argsstring>
        <name>findNextIndexBefore</name>
        <qualifiedname>mty::findNextIndexBefore</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="586" column="6" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="586" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab9dee6c4a98984144122a210934f68ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, ConjugationInfo::Type type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1ConjugationInfo_1a11e916af5b158c47d2dc1aef41d25ef1" kindref="member">ConjugationInfo::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="768" column="1" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="768" bodyend="789" declfile="src/marty/core/fermionFlow.h" declline="379" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2d6671a00f3374d0970477fb32027ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, ConjugationInfo const &amp;info)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1ConjugationInfo" kindref="compound">ConjugationInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionFlow.cpp" line="791" column="1" bodyfile="src/marty/core/fermionFlow.cpp" bodystart="791" bodyend="809" declfile="src/marty/core/fermionFlow.h" declline="381" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1a6f73d12e2d9ccf137f7a185091c2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto mty::findWeylSignature</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>findWeylSignature</name>
        <qualifiedname>mty::findWeylSignature</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionicField.cpp" line="232" column="6" bodyfile="src/marty/core/fermionicField.cpp" bodystart="232" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a784c2b760eb2840bf1e00239b3328ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mty::DiracNameOf</definition>
        <argsstring>(std::string const &amp;leftWeylName)</argsstring>
        <name>DiracNameOf</name>
        <qualifiedname>mty::DiracNameOf</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>leftWeylName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionicField.cpp" line="245" column="13" bodyfile="src/marty/core/fermionicField.cpp" bodystart="245" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3a6542ba72a90a63428e46111a4e092c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::weylfermion_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>weylfermion_s</name>
        <qualifiedname>mty::weylfermion_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Delegates the construction of a Weyl fermion and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can take any argument that the constructors WeylFermion::WeylFermion() take to forward them to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter pack</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Weyl fermion. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionicField.h" line="261" column="17" bodyfile="src/marty/core/fermionicField.h" bodystart="261" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab6d427cacdd04f8dc91cde525668be5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::diracfermion_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>diracfermion_s</name>
        <qualifiedname>mty::diracfermion_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Delegates the construction of a Dirac fermion and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can take any argument that the constructors DiracFermion::DiracFermion() take to forward them to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter pack</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Dirac fermion. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionicField.h" line="279" column="17" bodyfile="src/marty/core/fermionicField.h" bodystart="279" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aeaf80abecbed0e87ce14436cea7e8959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ordered</definition>
        <argsstring>(mty::Insertion const &amp;left, mty::Insertion const &amp;right)</argsstring>
        <name>ordered</name>
        <qualifiedname>mty::ordered</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> const &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> const &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.cpp" line="24" column="6" bodyfile="src/marty/core/fermionOrder.cpp" bodystart="24" bodyend="40" declfile="src/marty/core/fermionOrder.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3b7495a482daf567d66211236c621c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> const * &gt;</type>
        <definition>std::vector&lt; mty::Insertion const * &gt; mty::fermionsOf</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; const &amp;fields)</argsstring>
        <name>fermionsOf</name>
        <qualifiedname>mty::fermionsOf</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.cpp" line="43" column="1" bodyfile="src/marty/core/fermionOrder.cpp" bodystart="43" bodyend="53" declfile="src/marty/core/fermionOrder.h" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa3f1b61804f55fc4140a265234fe0f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> * &gt;</type>
        <definition>std::vector&lt; mty::Insertion * &gt; mty::fermionsOf</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; &amp;fields)</argsstring>
        <name>fermionsOf</name>
        <qualifiedname>mty::fermionsOf</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.cpp" line="55" column="13" bodyfile="src/marty/core/fermionOrder.cpp" bodystart="55" bodyend="65" declfile="src/marty/core/fermionOrder.h" declline="41" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af661fc97457a1858ce64e81e493ffd06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::applyGoodAdjacentOrder</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;numbers, std::vector&lt; size_t &gt; &amp;indicesLeft, std::vector&lt; mty::Insertion const * &gt; const &amp;fermions)</argsstring>
        <name>applyGoodAdjacentOrder</name>
        <qualifiedname>mty::applyGoodAdjacentOrder</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>indicesLeft</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> const * &gt; const &amp;</type>
          <declname>fermions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.cpp" line="67" column="6" bodyfile="src/marty/core/fermionOrder.cpp" bodystart="67" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae05b051dd77287ab4583362cdd6680aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::applyGoodNonAdjacentOrder</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;numbers, std::vector&lt; size_t &gt; &amp;indicesLeft, std::vector&lt; mty::Insertion const * &gt; const &amp;fermions)</argsstring>
        <name>applyGoodNonAdjacentOrder</name>
        <qualifiedname>mty::applyGoodNonAdjacentOrder</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>numbers</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>indicesLeft</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> const * &gt; const &amp;</type>
          <declname>fermions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.cpp" line="89" column="6" bodyfile="src/marty/core/fermionOrder.cpp" bodystart="89" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0853914a42f97c8227cdbfb99a02176d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; mty::defaultFermionOrder</definition>
        <argsstring>(std::vector&lt; mty::Insertion const * &gt; const &amp;fields)</argsstring>
        <name>defaultFermionOrder</name>
        <qualifiedname>mty::defaultFermionOrder</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> const * &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.cpp" line="121" column="1" bodyfile="src/marty/core/fermionOrder.cpp" bodystart="121" bodyend="133" declfile="src/marty/core/fermionOrder.h" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a36cafe6d49b5fda38e58162e43f70353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::applyFermionOrder</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; &amp;insertions, std::vector&lt; int &gt; const &amp;order)</argsstring>
        <name>applyFermionOrder</name>
        <qualifiedname>mty::applyFermionOrder</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.cpp" line="135" column="6" bodyfile="src/marty/core/fermionOrder.cpp" bodystart="135" bodyend="157" declfile="src/marty/core/fermionOrder.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7d9868da373ec427ac3b7d99927be755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::applyDefaultFermionOrder</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; &amp;insertions)</argsstring>
        <name>applyDefaultFermionOrder</name>
        <qualifiedname>mty::applyDefaultFermionOrder</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; &amp;</type>
          <declname>insertions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.cpp" line="159" column="6" bodyfile="src/marty/core/fermionOrder.cpp" bodystart="159" bodyend="162" declfile="src/marty/core/fermionOrder.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1d096fcbc6a8312f7c6ea4aa06a46fb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; mty::defaultFermionOrder</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; const &amp;fields)</argsstring>
        <name>defaultFermionOrder</name>
        <qualifiedname>mty::defaultFermionOrder</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/fermionOrder.h" line="47" column="1" bodyfile="src/marty/core/fermionOrder.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a928820cd841c87598124d04c6f29ec50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, IntegralType type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="33" column="1" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="33" bodyend="56" declfile="src/marty/core/feynmanIntegral.h" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aea19b631f0ee39514df33113a75d577f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::printLooptoolsId_A</definition>
        <argsstring>(int id, std::ostream &amp;out)</argsstring>
        <name>printLooptoolsId_A</name>
        <qualifiedname>mty::printLooptoolsId_A</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="58" column="6" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="58" bodyend="71" declfile="src/marty/core/feynmanIntegral.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab0ae4fc0596c68b5fa407bcb23d0698b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::printLooptoolsId_B</definition>
        <argsstring>(int id, std::ostream &amp;out)</argsstring>
        <name>printLooptoolsId_B</name>
        <qualifiedname>mty::printLooptoolsId_B</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="73" column="6" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="73" bodyend="113" declfile="src/marty/core/feynmanIntegral.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a03a71c856a6fc24d7c29de9a8ac4be51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::printLooptoolsId_C</definition>
        <argsstring>(int id, std::ostream &amp;out)</argsstring>
        <name>printLooptoolsId_C</name>
        <qualifiedname>mty::printLooptoolsId_C</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="115" column="6" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="115" bodyend="188" declfile="src/marty/core/feynmanIntegral.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9623cd37f4970fe476f39529a5c230c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::printLooptoolsId_D</definition>
        <argsstring>(int id, std::ostream &amp;out)</argsstring>
        <name>printLooptoolsId_D</name>
        <qualifiedname>mty::printLooptoolsId_D</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="190" column="6" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="190" bodyend="437" declfile="src/marty/core/feynmanIntegral.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6f979873f7e0960e5cb9240f53f95265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::printLooptoolsId_E</definition>
        <argsstring>(int id, std::ostream &amp;out)</argsstring>
        <name>printLooptoolsId_E</name>
        <qualifiedname>mty::printLooptoolsId_E</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="439" column="6" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="439" bodyend="785" declfile="src/marty/core/feynmanIntegral.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acb6d68c9e4fcfca81835656066f4b0e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::printLooptoolsId</definition>
        <argsstring>(IntegralType type, int id, std::ostream &amp;out)</argsstring>
        <name>printLooptoolsId</name>
        <qualifiedname>mty::printLooptoolsId</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="787" column="6" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="787" bodyend="808" declfile="src/marty/core/feynmanIntegral.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afffc7b509f96559e4c9e9362ec0207e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::loopToolsIdOf</definition>
        <argsstring>(IntegralType type, std::vector&lt; size_t &gt; const &amp;indices)</argsstring>
        <name>loopToolsIdOf</name>
        <qualifiedname>mty::loopToolsIdOf</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="810" column="5" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="810" bodyend="827" declfile="src/marty/core/feynmanIntegral.h" declline="63" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9a9a88962b215045ff8a46398e1cd0d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::loopToolsIdOf_A</definition>
        <argsstring>(std::vector&lt; size_t &gt; const &amp;indices)</argsstring>
        <name>loopToolsIdOf_A</name>
        <qualifiedname>mty::loopToolsIdOf_A</qualifiedname>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="829" column="5" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="829" bodyend="838" declfile="src/marty/core/feynmanIntegral.h" declline="65" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a267db8ed306ce6fc5e6731253d50b034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::loopToolsIdOf_B</definition>
        <argsstring>(std::vector&lt; size_t &gt; const &amp;indices)</argsstring>
        <name>loopToolsIdOf_B</name>
        <qualifiedname>mty::loopToolsIdOf_B</qualifiedname>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="842" column="5" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="842" bodyend="865" declfile="src/marty/core/feynmanIntegral.h" declline="67" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4599e7008f9ee9bd713b6645efd84ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::loopToolsIdOf_C</definition>
        <argsstring>(std::vector&lt; size_t &gt; const &amp;indices)</argsstring>
        <name>loopToolsIdOf_C</name>
        <qualifiedname>mty::loopToolsIdOf_C</qualifiedname>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="867" column="5" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="867" bodyend="924" declfile="src/marty/core/feynmanIntegral.h" declline="69" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae7cb2742b7117e178df4b06e94e57def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::loopToolsIdOf_D</definition>
        <argsstring>(std::vector&lt; size_t &gt; const &amp;indices)</argsstring>
        <name>loopToolsIdOf_D</name>
        <qualifiedname>mty::loopToolsIdOf_D</qualifiedname>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="926" column="5" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="926" bodyend="1102" declfile="src/marty/core/feynmanIntegral.h" declline="71" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad10caa719b0fc5cef24f952fb0b8133c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; int, 5 &gt;</type>
        <definition>std::array&lt; int, 5 &gt; mty::getRank5Indices</definition>
        <argsstring>(int loopToolsId)</argsstring>
        <name>getRank5Indices</name>
        <qualifiedname>mty::getRank5Indices</qualifiedname>
        <param>
          <type>int</type>
          <declname>loopToolsId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1106" column="12" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1106" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa5b872a446550a3fc10d56b56b490478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::loopToolsBegin</definition>
        <argsstring>(IntegralType type, size_t nIndices)</argsstring>
        <name>loopToolsBegin</name>
        <qualifiedname>mty::loopToolsBegin</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1280" column="5" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1280" bodyend="1364" declfile="src/marty/core/feynmanIntegral.h" declline="61" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a79b2aef301cc22aa5ec7c0b6c4e97ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::nPropagatorForIntegral</definition>
        <argsstring>(IntegralType type)</argsstring>
        <name>nPropagatorForIntegral</name>
        <qualifiedname>mty::nPropagatorForIntegral</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1366" column="8" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1366" bodyend="1382" declfile="src/marty/core/feynmanIntegral.h" declline="73" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9d5ddd5575d776bb4f6af25f54ffb327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::nIndicesForIntegral</definition>
        <argsstring>(IntegralType type)</argsstring>
        <name>nIndicesForIntegral</name>
        <qualifiedname>mty::nIndicesForIntegral</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1384" column="8" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1384" bodyend="1400" declfile="src/marty/core/feynmanIntegral.h" declline="75" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a262080447caac2fbeee8fc670b580d14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::nArgumentsForIntegral</definition>
        <argsstring>(IntegralType type)</argsstring>
        <name>nArgumentsForIntegral</name>
        <qualifiedname>mty::nArgumentsForIntegral</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1402" column="8" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1402" bodyend="1418" declfile="src/marty/core/feynmanIntegral.h" declline="77" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9b54883af3f964d5dfaf137fe4a1a5c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getDivergentFactor</definition>
        <argsstring>(IntegralType type, int integral_id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>getDivergentFactor</name>
        <qualifiedname>mty::getDivergentFactor</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>integral_id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1420" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1420" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1b306e3171de19ba194317a26fde0418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::testError</definition>
        <argsstring>(IntegralType type, std::vector&lt; csl::Expr &gt; const &amp;momentum, size_t nMomentum, std::vector&lt; csl::Expr &gt; const &amp;mass, size_t nMass, std::vector&lt; csl::Index &gt; const &amp;, size_t)</argsstring>
        <name>testError</name>
        <qualifiedname>mty::testError</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>momentum</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nMomentum</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nMass</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt; const &amp;</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1756" column="6" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1756" bodyend="1803"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6aa61a979092a97f9feedba9f2568be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::psquared</definition>
        <argsstring>(csl::Expr const &amp;init)</argsstring>
        <name>psquared</name>
        <qualifiedname>mty::psquared</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1805" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1805" bodyend="1813" declfile="src/marty/core/feynmanIntegral.h" declline="83" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa040fb6cc0b7d0ebf52b453502df2fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::psquared</definition>
        <argsstring>(csl::Expr const &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>psquared</name>
        <qualifiedname>mty::psquared</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1815" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1815" bodyend="1825" declfile="src/marty/core/feynmanIntegral.h" declline="84" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac93a0162223e281be8515ba41c81054c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::psum</definition>
        <argsstring>(csl::Expr const &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>psum</name>
        <qualifiedname>mty::psum</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1827" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1827" bodyend="1836" declfile="src/marty/core/feynmanIntegral.h" declline="85" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a197fe408f44b1580bba9c165dbc2b82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::apply</definition>
        <argsstring>(csl::Expr const &amp;init, csl::Index const &amp;index)</argsstring>
        <name>apply</name>
        <qualifiedname>mty::apply</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1838" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1838" bodyend="1852"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a81567f1af6cc8890e6bc7baa43512778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; size_t &gt; &gt; mty::getMetricIndices</definition>
        <argsstring>(std::vector&lt; size_t &gt; indices)</argsstring>
        <name>getMetricIndices</name>
        <qualifiedname>mty::getMetricIndices</qualifiedname>
        <param>
          <type>std::vector&lt; size_t &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1881" column="13" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1881" bodyend="1909"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a238aa07149d9b60490831995ed7f000c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; size_t &gt; &gt; mty::getMetricIndices</definition>
        <argsstring>(size_t n)</argsstring>
        <name>getMetricIndices</name>
        <qualifiedname>mty::getMetricIndices</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="1911" column="13" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1911" bodyend="1917"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3c5623d01a12c82e49eba1d21d27ebd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::mom</definition>
        <argsstring>(csl::Expr init)</argsstring>
        <name>mom</name>
        <qualifiedname>mty::mom</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="2134" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="2134" bodyend="2150"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab837bf05e5a6ae42aa8a3ad8ef2b6ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::feynmanintegral_s</definition>
        <argsstring>(IntegralType type, int looptoolsId, std::vector&lt; csl::Expr &gt; const &amp;argument, std::vector&lt; size_t &gt; const &amp;indices)</argsstring>
        <name>feynmanintegral_s</name>
        <qualifiedname>mty::feynmanintegral_s</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>looptoolsId</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>argument</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="2604" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="2604" bodyend="2614"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aaaf6c3f46537609157ccae75013c37a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::feynmanintegral_s</definition>
        <argsstring>(IntegralType t_type, int t_looptoolsId, std::vector&lt; csl::Expr &gt; const &amp;t_argument)</argsstring>
        <name>feynmanintegral_s</name>
        <qualifiedname>mty::feynmanintegral_s</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>t_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t_looptoolsId</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>t_argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.cpp" line="2616" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="2616" bodyend="2622"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9b54883af3f964d5dfaf137fe4a1a5c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getDivergentFactor</definition>
        <argsstring>(IntegralType type, int integral_id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>getDivergentFactor</name>
        <qualifiedname>mty::getDivergentFactor</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>integral_id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="79" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="1420" bodyend="1473" declfile="src/marty/core/feynmanIntegral.h" declline="79" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aaaf6c3f46537609157ccae75013c37a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::feynmanintegral_s</definition>
        <argsstring>(IntegralType t_type, int t_looptoolsId, std::vector&lt; csl::Expr &gt; const &amp;t_argument)</argsstring>
        <name>feynmanintegral_s</name>
        <qualifiedname>mty::feynmanintegral_s</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>t_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t_looptoolsId</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>t_argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="236" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="2616" bodyend="2622" declfile="src/marty/core/feynmanIntegral.h" declline="236" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aaf1ce4838ac8c358e486e461f62fdec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::feynmanintegral_s</definition>
        <argsstring>(IntegralType t_type, int t_looptoolsId, std::vector&lt; csl::Expr &gt; const &amp;t_argument, std::vector&lt; size_t &gt; const &amp;indices)</argsstring>
        <name>feynmanintegral_s</name>
        <qualifiedname>mty::feynmanintegral_s</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>t_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t_looptoolsId</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>t_argument</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="240" column="11" bodyfile="src/marty/core/feynmanIntegral.cpp" bodystart="2604" bodyend="2614" declfile="src/marty/core/feynmanIntegral.h" declline="240" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ade14b1b71e28a09f74c9cd6fb687dca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IntegralID</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::feynmanintegral_s</definition>
        <argsstring>(IntegralType t_type, IntegralID t_looptoolsId, std::vector&lt; csl::Expr &gt; const &amp;t_argument)</argsstring>
        <name>feynmanintegral_s</name>
        <qualifiedname>mty::feynmanintegral_s</qualifiedname>
        <param>
          <type>IntegralType</type>
          <declname>t_type</declname>
        </param>
        <param>
          <type>IntegralID</type>
          <declname>t_looptoolsId</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>t_argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanIntegral.h" line="246" column="11" bodyfile="src/marty/core/feynmanIntegral.h" bodystart="246" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a282048a45b50354163654cb225f95f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, FeynmanRule const &amp;rule)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> const &amp;</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.cpp" line="352" column="1" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="352" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9e15101e4ba07f546afd492647c5f3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::fermionicFactor</definition>
        <argsstring>(std::vector&lt; mty::QuantumField &gt; const &amp;fieldProduct)</argsstring>
        <name>fermionicFactor</name>
        <qualifiedname>mty::fermionicFactor</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; const &amp;</type>
          <declname>fieldProduct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynmanRule.cpp" line="366" column="5" bodyfile="src/marty/core/feynmanRule.cpp" bodystart="366" bodyend="380" declfile="src/marty/core/feynmanRule.h" declline="113" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a86f6e96a7edae1cef34655da284d89fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::compareKey</definition>
        <argsstring>(FeynruleKey const &amp;key, mty::QuantumField const &amp;field)</argsstring>
        <name>compareKey</name>
        <qualifiedname>mty::compareKey</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1FeynruleKey" kindref="compound">FeynruleKey</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> const &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynruleMomentum.cpp" line="94" column="6" bodyfile="src/marty/core/feynruleMomentum.cpp" bodystart="94" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab3287a02d71ddfb74a629c4acc0f3ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, FeynruleMomentum const &amp;mom)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynruleMomentum" kindref="compound">FeynruleMomentum</ref> const &amp;</type>
          <declname>mom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/feynruleMomentum.cpp" line="234" column="1" bodyfile="src/marty/core/feynruleMomentum.cpp" bodystart="234" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a34c29808b55ae71d088af0133be31b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const FlavorIrrep &amp;irrep)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1FlavorIrrep" kindref="compound">FlavorIrrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/flavor.cpp" line="191" column="1" bodyfile="src/marty/core/flavor.cpp" bodystart="191" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4e5a3a8d9c0738a64f931e52a5617fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const Gauge &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/gauge.cpp" line="256" column="1" bodyfile="src/marty/core/gauge.cpp" bodystart="256" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad64a7ed32c927b00147b2843b0745ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const GaugeIrrep &amp;irrep)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1GaugeIrrep" kindref="compound">GaugeIrrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/gauge.cpp" line="282" column="1" bodyfile="src/marty/core/gauge.cpp" bodystart="282" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afdfcf5350c8f7d874d5c35ad2bab2591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const SumGaugeIrrep &amp;irrep)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1SumGaugeIrrep" kindref="compound">SumGaugeIrrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/gauge.cpp" line="431" column="1" bodyfile="src/marty/core/gauge.cpp" bodystart="431" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad66aa9b60468e646d1e276e3b6dd93b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::normalization</definition>
        <argsstring>(mty::gauge::GroupType type)</argsstring>
        <name>normalization</name>
        <qualifiedname>mty::normalization</qualifiedname>
        <param>
          <type>mty::gauge::GroupType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/gaugedGroup.cpp" line="71" column="11" bodyfile="src/marty/core/gaugedGroup.cpp" bodystart="71" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acd1d078abe59827ce50da5ff585d640a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mty::getGeneratorName</definition>
        <argsstring>(std::string const &amp;init, std::string const &amp;groupName, std::vector&lt; int &gt; const &amp;labels)</argsstring>
        <name>getGeneratorName</name>
        <qualifiedname>mty::getGeneratorName</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>groupName</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/gaugedGroup.cpp" line="347" column="13" bodyfile="src/marty/core/gaugedGroup.cpp" bodystart="347" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aad3885e0c951256eaef55b36a2d21cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unique_ptr&lt; <ref refid="classmty_1_1GaugedGroup" kindref="compound">GaugedGroup</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GaugedGroup &gt; mty::createGaugedGroup</definition>
        <argsstring>(SemiSimpleGroup *group, Gauge *gauge, std::string nameBoson, bool addGhost, const csl::Expr &amp;coupling)</argsstring>
        <name>createGaugedGroup</name>
        <qualifiedname>mty::createGaugedGroup</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1SemiSimpleGroup" kindref="compound">SemiSimpleGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> *</type>
          <declname>gauge</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>nameBoson</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addGhost</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/gaugedGroup.cpp" line="1134" column="12" bodyfile="src/marty/core/gaugedGroup.cpp" bodystart="1134" bodyend="1224" declfile="src/marty/core/gaugedGroup.h" declline="605" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a75dd04a83011a1816493f1dcbf6c3d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1GeneratorParent" kindref="compound">GeneratorParent</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GeneratorParent &gt; mty::generator_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>generator_s</name>
        <qualifiedname>mty::generator_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/generator.h" line="80" column="17" bodyfile="src/marty/core/generator.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae48fb8d6522d2478603237e60b15c2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::generatorelement_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>generatorelement_s</name>
        <qualifiedname>mty::generatorelement_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/generator.h" line="86" column="11" bodyfile="src/marty/core/generator.h" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a61e7a0a98f84421ec8abee304493115c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::ghostboson_s</definition>
        <argsstring>(std::string const &amp;name, std::shared_ptr&lt; VectorBoson &gt; const &amp;t_vectorBoson, bool conjugated=false)</argsstring>
        <name>ghostboson_s</name>
        <qualifiedname>mty::ghostboson_s</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> &gt; const &amp;</type>
          <declname>t_vectorBoson</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>conjugated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a ghost boson. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the Ghost. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_vectorBoson</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated vector boson. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conjugated</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ghost is a conjugated ghost (i.e. a ghost is already defined, such as c+ and c- for W in the SM)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Ghost boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/ghostField.cpp" line="86" column="10" bodyfile="src/marty/core/ghostField.cpp" bodystart="86" bodyend="97" declfile="src/marty/core/ghostField.h" declline="141" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a532f82d84322f412c2bbd7ae86528230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::ghostboson_s</definition>
        <argsstring>(std::shared_ptr&lt; VectorBoson &gt; const &amp;t_vectorBoson, bool conjugated=false)</argsstring>
        <name>ghostboson_s</name>
        <qualifiedname>mty::ghostboson_s</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> &gt; const &amp;</type>
          <declname>t_vectorBoson</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>conjugated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a ghost boson. </para>
        </briefdescription>
        <detaileddescription>
<para>The name is determined automatically by the constructor <ref refid="classmty_1_1GhostBoson_1a2f556c848135acf7310b7ae6ecba4827" kindref="member">GhostBoson::GhostBoson()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_vectorBoson</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated vector boson. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conjugated</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ghost is a conjugated ghost (i.e. a ghost is already defined, such as c+ and c- for W in the SM)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Ghost boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/ghostField.cpp" line="99" column="10" bodyfile="src/marty/core/ghostField.cpp" bodystart="99" bodyend="109" declfile="src/marty/core/ghostField.h" declline="157" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1adf5078b07838dcfcb05676c3589fe47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::ghostboson_s</definition>
        <argsstring>(std::string const &amp;name, Particle const &amp;t_vectorBoson, bool conjugated=false)</argsstring>
        <name>ghostboson_s</name>
        <qualifiedname>mty::ghostboson_s</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>t_vectorBoson</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>conjugated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a ghost boson. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the Ghost. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_vectorBoson</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated vector boson, <bold>must be of type <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref></bold>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conjugated</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ghost is a conjugated ghost (i.e. a ghost is already defined, such as c+ and c- for W in the SM)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Ghost boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/ghostField.cpp" line="111" column="10" bodyfile="src/marty/core/ghostField.cpp" bodystart="111" bodyend="122" declfile="src/marty/core/ghostField.h" declline="170" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8ade5c6f9436527d483160055cc8985a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::ghostboson_s</definition>
        <argsstring>(Particle const &amp;t_vectorBoson, bool conjugated=false)</argsstring>
        <name>ghostboson_s</name>
        <qualifiedname>mty::ghostboson_s</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>t_vectorBoson</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>conjugated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a ghost boson. </para>
        </briefdescription>
        <detaileddescription>
<para>The name is determined automatically by the constructor <ref refid="classmty_1_1GhostBoson_1a2f556c848135acf7310b7ae6ecba4827" kindref="member">GhostBoson::GhostBoson()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_vectorBoson</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated vector boson, <bold>must be of type <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref></bold>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conjugated</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ghost is a conjugated ghost (i.e. a ghost is already defined, such as c+ and c- for W in the SM)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Ghost boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/ghostField.cpp" line="124" column="10" bodyfile="src/marty/core/ghostField.cpp" bodystart="124" bodyend="133" declfile="src/marty/core/ghostField.h" declline="186" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7ebbde6bef8286f320df848552a61d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::goldstoneboson_s</definition>
        <argsstring>(std::string const &amp;name, std::shared_ptr&lt; VectorBoson &gt; const &amp;t_vectorBoson)</argsstring>
        <name>goldstoneboson_s</name>
        <qualifiedname>mty::goldstoneboson_s</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> &gt; const &amp;</type>
          <declname>t_vectorBoson</declname>
        </param>
        <briefdescription>
<para>Creates a goldstone boson. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the Goldstone boson. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_vectorBoson</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated vector boson.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Goldstone boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/goldstoneField.cpp" line="72" column="10" bodyfile="src/marty/core/goldstoneField.cpp" bodystart="72" bodyend="79" declfile="src/marty/core/goldstoneField.h" declline="113" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a97881cc57a03d557b9ad06b5c90f2ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::goldstoneboson_s</definition>
        <argsstring>(std::shared_ptr&lt; VectorBoson &gt; const &amp;t_vectorBoson)</argsstring>
        <name>goldstoneboson_s</name>
        <qualifiedname>mty::goldstoneboson_s</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> &gt; const &amp;</type>
          <declname>t_vectorBoson</declname>
        </param>
        <briefdescription>
<para>Creates a goldstone boson. </para>
        </briefdescription>
        <detaileddescription>
<para>The name is determined automatically by the constructor, see <ref refid="classmty_1_1GoldstoneBoson_1abbdf4890bbe210d038543b006e84719a" kindref="member">GoldstoneBoson::GoldstoneBoson()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_vectorBoson</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated vector boson.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Goldstone boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/goldstoneField.cpp" line="81" column="10" bodyfile="src/marty/core/goldstoneField.cpp" bodystart="81" bodyend="87" declfile="src/marty/core/goldstoneField.h" declline="126" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a722840c25c9475c59a6ecda004dda516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::goldstoneboson_s</definition>
        <argsstring>(std::string const &amp;name, Particle const &amp;t_vectorBoson)</argsstring>
        <name>goldstoneboson_s</name>
        <qualifiedname>mty::goldstoneboson_s</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>t_vectorBoson</declname>
        </param>
        <briefdescription>
<para>Creates a goldstone boson. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the Goldstone boson. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_vectorBoson</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated vector boson, <bold>must be of type <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref></bold>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Goldstone boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/goldstoneField.cpp" line="89" column="10" bodyfile="src/marty/core/goldstoneField.cpp" bodystart="89" bodyend="98" declfile="src/marty/core/goldstoneField.h" declline="137" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae9ffe6518dd89eebdfaa884ac5a8a241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::goldstoneboson_s</definition>
        <argsstring>(Particle const &amp;t_vectorBoson)</argsstring>
        <name>goldstoneboson_s</name>
        <qualifiedname>mty::goldstoneboson_s</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>t_vectorBoson</declname>
        </param>
        <briefdescription>
<para>Creates a goldstone boson. </para>
        </briefdescription>
        <detaileddescription>
<para>The name is determined automatically by the constructor, see <ref refid="classmty_1_1GoldstoneBoson_1abbdf4890bbe210d038543b006e84719a" kindref="member">GoldstoneBoson::GoldstoneBoson()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_vectorBoson</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated vector boson, <bold>must be of type <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref></bold>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created Goldstone boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/goldstoneField.cpp" line="100" column="10" bodyfile="src/marty/core/goldstoneField.cpp" bodystart="100" bodyend="108" declfile="src/marty/core/goldstoneField.h" declline="151" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8cc88aecb2c418a72825db4955c475cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unique_ptr&lt; <ref refid="classmty_1_1SemiSimpleGroup" kindref="compound">SemiSimpleGroup</ref> &gt;</type>
        <definition>std::unique_ptr&lt; mty::SemiSimpleGroup &gt; mty::createGroup</definition>
        <argsstring>(group::Type type, std::string const &amp;name, int dim=-1)</argsstring>
        <name>createGroup</name>
        <qualifiedname>mty::createGroup</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">group::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Dynamically allocates a new group of type <bold>type</bold> and returns a pointer to it (in a std::unique_ptr). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the group (optional for exceptional algebras). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the dynamically allocated Group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.cpp" line="551" column="1" bodyfile="src/marty/core/group.cpp" bodystart="551" bodyend="600" declfile="src/marty/core/group.h" declline="742" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1adc4197744bd940d7fb3e0e6ac7ce3763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unique_ptr&lt; <ref refid="classmty_1_1SemiSimpleGroup" kindref="compound">SemiSimpleGroup</ref> &gt;</type>
        <definition>std::unique_ptr&lt; mty::SemiSimpleGroup &gt; mty::createGroup</definition>
        <argsstring>(group::Type type, int dim=-1)</argsstring>
        <name>createGroup</name>
        <qualifiedname>mty::createGroup</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">group::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Dynamically allocates a new group of type <bold>type</bold> and returns a pointer to it (in a std::unique_ptr). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the group (optional for exceptional algebras). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the dynamically allocated Group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.cpp" line="602" column="12" bodyfile="src/marty/core/group.cpp" bodystart="602" bodyend="636" declfile="src/marty/core/group.h" declline="751" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7351bcbe864b41e96893ea320dbc5562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const AbstractGroup &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1AbstractGroup" kindref="compound">AbstractGroup</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.cpp" line="638" column="1" bodyfile="src/marty/core/group.cpp" bodystart="638" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1984b030e41c958b308a5a94ade0a347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">group::Type</ref></type>
        <definition>group::Type mty::stringToGroupType</definition>
        <argsstring>(string const &amp;name)</argsstring>
        <name>stringToGroupType</name>
        <qualifiedname>mty::stringToGroupType</qualifiedname>
        <param>
          <type>string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.cpp" line="645" column="13" bodyfile="src/marty/core/group.cpp" bodystart="645" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aae861e60f794afdd8a557f6f001ca8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const AbstractGroup &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1AbstractGroup" kindref="compound">AbstractGroup</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Overload of operator&lt;&lt; for <ref refid="classmty_1_1AbstractGroup" kindref="compound">AbstractGroup</ref>. Displays the type of the group and its dimension between brackets. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Group to display. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The modified flux. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.h" line="761" column="1" declfile="src/marty/core/group.h" declline="761" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5ac53db152427479da2d472232c0b3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">group::Type</ref></type>
        <definition>group::Type mty::stringToGroupType</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>stringToGroupType</name>
        <qualifiedname>mty::stringToGroupType</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Converts a string to a group type. Allows to read a <ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">group::Type</ref> in a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding <ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">group::Type</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.h" line="769" column="13" declfile="src/marty/core/group.h" declline="769" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5bf28f2b5847584f4ff85891c4b40f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroSU</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t p)</argsstring>
        <name>isIndexZeroSU</name>
        <qualifiedname>mty::isIndexZeroSU</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="27" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="27" bodyend="32" declfile="src/marty/core/groupIndices.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a253560bcfc54eaad16618e65d001d47a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroEvenSO</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t p)</argsstring>
        <name>isIndexZeroEvenSO</name>
        <qualifiedname>mty::isIndexZeroEvenSO</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="33" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="33" bodyend="42" declfile="src/marty/core/groupIndices.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a712c05d22e20e1fa4abbbf190cf26ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroOddSO</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t p)</argsstring>
        <name>isIndexZeroOddSO</name>
        <qualifiedname>mty::isIndexZeroOddSO</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="43" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="43" bodyend="52" declfile="src/marty/core/groupIndices.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1519d3dbe39ecd043b0a2b9112436ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroSp</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t p)</argsstring>
        <name>isIndexZeroSp</name>
        <qualifiedname>mty::isIndexZeroSp</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="53" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="53" bodyend="62" declfile="src/marty/core/groupIndices.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aee8a564f2a3f271a0af73c1932531f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroE6</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;, size_t p)</argsstring>
        <name>isIndexZeroE6</name>
        <qualifiedname>mty::isIndexZeroE6</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <defname>rep</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="63" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="63" bodyend="69" declfile="src/marty/core/groupIndices.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5b114618820a0c5d0efe0a43abae72fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroE7</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;, size_t p)</argsstring>
        <name>isIndexZeroE7</name>
        <qualifiedname>mty::isIndexZeroE7</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <defname>rep</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="70" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="70" bodyend="75" declfile="src/marty/core/groupIndices.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a37e283e07c844ec5368aa59e328120f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroE8</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;, size_t p)</argsstring>
        <name>isIndexZeroE8</name>
        <qualifiedname>mty::isIndexZeroE8</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <defname>rep</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="76" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="76" bodyend="81" declfile="src/marty/core/groupIndices.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af822f3bba6ce73d57dbb4d3087b19dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroF4</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;, size_t p)</argsstring>
        <name>isIndexZeroF4</name>
        <qualifiedname>mty::isIndexZeroF4</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <defname>rep</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="82" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="82" bodyend="87" declfile="src/marty/core/groupIndices.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ada70e93c81419b651b72e02a6f3b1245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isIndexZeroG2</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;, size_t p)</argsstring>
        <name>isIndexZeroG2</name>
        <qualifiedname>mty::isIndexZeroG2</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <defname>rep</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="88" column="6" bodyfile="src/marty/core/groupIndices.cpp" bodystart="88" bodyend="91" declfile="src/marty/core/groupIndices.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a24fc33b8af0d6ea2a587508bb3a2ec45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getIndexNorm</definition>
        <argsstring>(algebra::Type algebra, std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getIndexNorm</name>
        <qualifiedname>mty::getIndexNorm</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062a" kindref="member">algebra::Type</ref></type>
          <declname>algebra</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="94" column="1" bodyfile="src/marty/core/groupIndices.cpp" bodystart="94" bodyend="153" declfile="src/marty/core/groupIndices.h" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a59e1633cf7c8c2bf8eb382f3a9df574b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getSUIndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getSUIndexNorm</name>
        <qualifiedname>mty::getSUIndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="154" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="154" bodyend="159" declfile="src/marty/core/groupIndices.h" declline="60" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa68f2b366bb056a3e5817c16676354eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getEvenSOIndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getEvenSOIndexNorm</name>
        <qualifiedname>mty::getEvenSOIndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="160" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="160" bodyend="183" declfile="src/marty/core/groupIndices.h" declline="61" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a43c8995cb676ba7328d15d077ff9ee4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getOddSOIndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getOddSOIndexNorm</name>
        <qualifiedname>mty::getOddSOIndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="184" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="184" bodyend="200" declfile="src/marty/core/groupIndices.h" declline="62" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acf5b2669e40bd2a4dc35827f3b05b645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getSpIndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getSpIndexNorm</name>
        <qualifiedname>mty::getSpIndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="201" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="201" bodyend="206" declfile="src/marty/core/groupIndices.h" declline="63" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1abd86776cda8e6f3a62aec2069ed6e82f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getE6IndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getE6IndexNorm</name>
        <qualifiedname>mty::getE6IndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="207" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="207" bodyend="214" declfile="src/marty/core/groupIndices.h" declline="64" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af39acc7f448fcc2d730c9886da977dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getE7IndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getE7IndexNorm</name>
        <qualifiedname>mty::getE7IndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="215" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="215" bodyend="222" declfile="src/marty/core/groupIndices.h" declline="65" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a094133117874dc6ed20d903c69f65159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getE8IndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getE8IndexNorm</name>
        <qualifiedname>mty::getE8IndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="223" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="223" bodyend="230" declfile="src/marty/core/groupIndices.h" declline="66" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5281ec8ff8990844e4238fe53c65e756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getF4IndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getF4IndexNorm</name>
        <qualifiedname>mty::getF4IndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="231" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="231" bodyend="238" declfile="src/marty/core/groupIndices.h" declline="67" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4bf401019566f2076412017cdd535ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getG2IndexNorm</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getG2IndexNorm</name>
        <qualifiedname>mty::getG2IndexNorm</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="239" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="239" bodyend="246" declfile="src/marty/core/groupIndices.h" declline="68" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a78a1bba177b4085ce45daadcb1a38aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getIndex</definition>
        <argsstring>(algebra::Type algebra, std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getIndex</name>
        <qualifiedname>mty::getIndex</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062a" kindref="member">algebra::Type</ref></type>
          <declname>algebra</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="249" column="1" bodyfile="src/marty/core/groupIndices.cpp" bodystart="249" bodyend="279" declfile="src/marty/core/groupIndices.h" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afdc12c76d3983eb7d01c090d638f9e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getFi_A</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;dinkin)</argsstring>
        <name>getFi_A</name>
        <qualifiedname>mty::getFi_A</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>dinkin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="281" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="281" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a649772817c0ef0d291f2f956a5a6eaf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getLi_A</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;f)</argsstring>
        <name>getLi_A</name>
        <qualifiedname>mty::getLi_A</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="304" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="304" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a187029cd6e4f10b2f347023e04dc1fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getLi_A</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;dinkin)</argsstring>
        <name>getLi_A</name>
        <qualifiedname>mty::getLi_A</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>dinkin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="319" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a76a7bcc6ff77f8817f3bce3ea3729f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getSUIndex</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t p)</argsstring>
        <name>getSUIndex</name>
        <qualifiedname>mty::getSUIndex</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="324" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="324" bodyend="347" declfile="src/marty/core/groupIndices.h" declline="72" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ace46514c5b33be67da2d41fcb398701a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getFi_B</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;dinkin)</argsstring>
        <name>getFi_B</name>
        <qualifiedname>mty::getFi_B</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>dinkin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="349" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="349" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a27137cf2ff8d172ce8088c5ee4b724f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getLi_B</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;f)</argsstring>
        <name>getLi_B</name>
        <qualifiedname>mty::getLi_B</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="369" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="369" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac600fe3c015d59cf56631453a70e299b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getLi_B</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;dinkin)</argsstring>
        <name>getLi_B</name>
        <qualifiedname>mty::getLi_B</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>dinkin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="383" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="383" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af573d36642670166a3e2b9bd9873261a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getOddSOIndex</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t p)</argsstring>
        <name>getOddSOIndex</name>
        <qualifiedname>mty::getOddSOIndex</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="388" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="388" bodyend="419" declfile="src/marty/core/groupIndices.h" declline="74" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a99ed6ca52dbbfb706cbda7c698f54044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getFi_D</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;dinkin)</argsstring>
        <name>getFi_D</name>
        <qualifiedname>mty::getFi_D</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>dinkin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="421" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="421" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a51fb3a090fa1e147f60f45ebcc9e5af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getLi_D</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;f)</argsstring>
        <name>getLi_D</name>
        <qualifiedname>mty::getLi_D</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="440" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="440" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad0952066cbc0725bca8ad5d135c57513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getLi_D</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;dinkin)</argsstring>
        <name>getLi_D</name>
        <qualifiedname>mty::getLi_D</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>dinkin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="451" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="451" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac86bfe1e205ccb3be5e8598ec944d4d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getEvenSOIndex</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t p)</argsstring>
        <name>getEvenSOIndex</name>
        <qualifiedname>mty::getEvenSOIndex</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="456" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="456" bodyend="482" declfile="src/marty/core/groupIndices.h" declline="73" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a735b7f82a9d06541037240e7b4c44d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getLastEvenSOIndex</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n, bool normalize)</argsstring>
        <name>getLastEvenSOIndex</name>
        <qualifiedname>mty::getLastEvenSOIndex</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="484" column="1" bodyfile="src/marty/core/groupIndices.cpp" bodystart="484" bodyend="506" declfile="src/marty/core/groupIndices.h" declline="75" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae332a5f0b5c3e820be3f3bbca5b8b831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getFi_C</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;dinkin)</argsstring>
        <name>getFi_C</name>
        <qualifiedname>mty::getFi_C</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>dinkin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="508" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="508" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a24b7ac6d4fe3ac63ff6c9394061200ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getLi_C</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;f)</argsstring>
        <name>getLi_C</name>
        <qualifiedname>mty::getLi_C</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="520" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="520" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0688e82342693c7f7476bdc4ccabe998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::getLi_C</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;dinkin)</argsstring>
        <name>getLi_C</name>
        <qualifiedname>mty::getLi_C</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>dinkin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="531" column="13" bodyfile="src/marty/core/groupIndices.cpp" bodystart="531" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9aeedd5e83badb8c4a806d0baa174b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getSpIndex</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t p)</argsstring>
        <name>getSpIndex</name>
        <qualifiedname>mty::getSpIndex</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="536" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="536" bodyend="561" declfile="src/marty/core/groupIndices.h" declline="78" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a255eab9b633e40298ece78921696de8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>nReps</declname>
            <defname>nReps</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getIntegerIndex</definition>
        <argsstring>(std::array&lt; int, N &gt; const &amp;t_rep, std::array&lt; GIndex_t&lt; N &gt;, nReps &gt; const &amp;data)</argsstring>
        <name>getIntegerIndex</name>
        <qualifiedname>mty::getIntegerIndex</qualifiedname>
        <param>
          <type>std::array&lt; int, N &gt; const &amp;</type>
          <declname>t_rep</declname>
        </param>
        <param>
          <type>std::array&lt; GIndex_t&lt; N &gt;, nReps &gt; const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="564" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="564" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a536f608e251d185c6c847fb10b2e1f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>nReps</declname>
            <defname>nReps</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getRationalIndex</definition>
        <argsstring>(std::array&lt; int, N &gt; const &amp;t_rep, std::array&lt; GIndex_t&lt; N &gt;, nReps &gt; const &amp;data, int denom)</argsstring>
        <name>getRationalIndex</name>
        <qualifiedname>mty::getRationalIndex</qualifiedname>
        <param>
          <type>std::array&lt; int, N &gt; const &amp;</type>
          <declname>t_rep</declname>
        </param>
        <param>
          <type>std::array&lt; GIndex_t&lt; N &gt;, nReps &gt; const &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="574" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="574" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0ca38cac3eab71b8ddad2e64c78f6dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getE6Index</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getE6Index</name>
        <qualifiedname>mty::getE6Index</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="584" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="584" bodyend="602" declfile="src/marty/core/groupIndices.h" declline="79" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa42efde5265639f1f405cc90b03e1931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getE7Index</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getE7Index</name>
        <qualifiedname>mty::getE7Index</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="604" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="604" bodyend="620" declfile="src/marty/core/groupIndices.h" declline="80" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a305cc3bf30dcac712a8a401a1e177dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getE8Index</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getE8Index</name>
        <qualifiedname>mty::getE8Index</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="622" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="622" bodyend="634" declfile="src/marty/core/groupIndices.h" declline="81" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad3001ce4d10a06a52b62cb96f5abd8e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getF4Index</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getF4Index</name>
        <qualifiedname>mty::getF4Index</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="636" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="636" bodyend="650" declfile="src/marty/core/groupIndices.h" declline="82" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad2184b6fa9259c2a7be9b568b56027cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getG2Index</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;rep, size_t n)</argsstring>
        <name>getG2Index</name>
        <qualifiedname>mty::getG2Index</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.cpp" line="652" column="11" bodyfile="src/marty/core/groupIndices.cpp" bodystart="652" bodyend="663" declfile="src/marty/core/groupIndices.h" declline="83" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4b5b465a259768ee1837ca95282531ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; Type, N &gt;</type>
        <definition>std::array&lt; Type, N &gt; mty::toArray</definition>
        <argsstring>(std::vector&lt; Type &gt; const &amp;vec)</argsstring>
        <name>toArray</name>
        <qualifiedname>mty::toArray</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/groupIndices.h" line="35" column="12" bodyfile="src/marty/core/groupIndices.h" bodystart="35" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ace0d30119a2927c7555ec5e97e3dbfb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref></type>
        <definition>Insertion mty::OnShell</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>OnShell</name>
        <qualifiedname>mty::OnShell</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="127" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="127" bodyend="132" declfile="src/marty/core/insertion.h" declline="121" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a00d7185db5973f01f17110843fd2063f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref></type>
        <definition>Insertion mty::OffShell</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>OffShell</name>
        <qualifiedname>mty::OffShell</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="134" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="134" bodyend="139" declfile="src/marty/core/insertion.h" declline="122" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad41783c1fc63907b1a72b5db82e405e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref></type>
        <definition>Insertion mty::Incoming</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>Incoming</name>
        <qualifiedname>mty::Incoming</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="141" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="141" bodyend="146" declfile="src/marty/core/insertion.h" declline="123" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa714036251825be5a94d2c2038f2ffdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref></type>
        <definition>Insertion mty::Outgoing</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>Outgoing</name>
        <qualifiedname>mty::Outgoing</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="148" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="148" bodyend="153" declfile="src/marty/core/insertion.h" declline="124" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a68fa7315546f67d991e2b25a52bdcfe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref></type>
        <definition>Insertion mty::AntiPart</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>AntiPart</name>
        <qualifiedname>mty::AntiPart</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="155" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="155" bodyend="160" declfile="src/marty/core/insertion.h" declline="125" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1c511ddeae319ff1a28c9dd736d7a03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref></type>
        <definition>Insertion mty::Mediator</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>Mediator</name>
        <qualifiedname>mty::Mediator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="162" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="162" bodyend="167" declfile="src/marty/core/insertion.h" declline="126" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1adcd6dfe32af2994f92c6e245267e7cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref></type>
        <definition>Insertion mty::Left</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>Left</name>
        <qualifiedname>mty::Left</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="169" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="169" bodyend="179" declfile="src/marty/core/insertion.h" declline="127" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3e790cebbe3c66d53c8a30cbb8752d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref></type>
        <definition>Insertion mty::Right</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>Right</name>
        <qualifiedname>mty::Right</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="181" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="181" bodyend="191" declfile="src/marty/core/insertion.h" declline="128" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afc16b12c423821d8e75a4d23aef122da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> &gt;</type>
        <definition>std::vector&lt; Insertion &gt; mty::AntiPart</definition>
        <argsstring>(std::vector&lt; Insertion &gt; const &amp;init)</argsstring>
        <name>AntiPart</name>
        <qualifiedname>mty::AntiPart</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="193" column="13" bodyfile="src/marty/core/insertion.cpp" bodystart="193" bodyend="199" declfile="src/marty/core/insertion.h" declline="129" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a54bc57336c3789c4ef9e8c6daf673741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::GetExpression</definition>
        <argsstring>(Insertion const &amp;init)</argsstring>
        <name>GetExpression</name>
        <qualifiedname>mty::GetExpression</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="201" column="11" bodyfile="src/marty/core/insertion.cpp" bodystart="201" bodyend="204" declfile="src/marty/core/insertion.h" declline="130" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7f12258bf6d3a2ce0a9fba5045444be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::GetExpression</definition>
        <argsstring>(std::vector&lt; Insertion &gt; const &amp;insertions)</argsstring>
        <name>GetExpression</name>
        <qualifiedname>mty::GetExpression</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="206" column="13" bodyfile="src/marty/core/insertion.cpp" bodystart="206" bodyend="213" declfile="src/marty/core/insertion.h" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a33f57543b07f10f67284265ef7cbdc89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> &gt;</type>
        <definition>std::vector&lt; Insertion &gt; mty::GetInsertion</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;insertions)</argsstring>
        <name>GetInsertion</name>
        <qualifiedname>mty::GetInsertion</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/insertion.cpp" line="215" column="13" bodyfile="src/marty/core/insertion.cpp" bodystart="215" bodyend="222" declfile="src/marty/core/insertion.h" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aafa7c78a57baba06f415e2e1b2d18603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::abbreviantLINT</definition>
        <argsstring>(csl::Expr &amp;prod)</argsstring>
        <name>abbreviantLINT</name>
        <qualifiedname>mty::abbreviantLINT</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>prod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.cpp" line="76" column="6" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="76" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2083784a9c5e56244ba361e38a618dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;out, InteractionTerm const &amp;term)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.cpp" line="742" column="1" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="742" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6539f6d74ff959ed21517458c592d63d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void mty::removeIndices</definition>
        <argsstring>(std::vector&lt; Type &gt; &amp;data, std::vector&lt; size_t &gt; indices)</argsstring>
        <name>removeIndices</name>
        <qualifiedname>mty::removeIndices</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/kinematics.cpp" line="74" column="13" bodyfile="src/marty/core/kinematics.cpp" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ada4e9a9dab14720c994bf726a32b2dac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::areIdenticalFields</definition>
        <argsstring>(Insertion const &amp;A, Insertion const &amp;B)</argsstring>
        <name>areIdenticalFields</name>
        <qualifiedname>mty::areIdenticalFields</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/kinematics.cpp" line="82" column="13" bodyfile="src/marty/core/kinematics.cpp" bodystart="82" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a48ecd74fc2b3e92573f0c6b161dea183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Kinematics const &amp;kin)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> const &amp;</type>
          <declname>kin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kin</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> object to display.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The modified stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/kinematics.cpp" line="351" column="1" bodyfile="src/marty/core/kinematics.cpp" bodystart="351" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a57db19466e7eb0097249bdce7f5016f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mty::interaction::Type</type>
        <definition>mty::interaction::Type mty::determineTermType</definition>
        <argsstring>(const InteractionTerm &amp;term)</argsstring>
        <name>determineTermType</name>
        <qualifiedname>mty::determineTermType</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lagrangian.cpp" line="32" column="24" bodyfile="src/marty/core/lagrangian.cpp" bodystart="32" bodyend="40" declfile="src/marty/core/lagrangian.h" declline="44" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a57033c8a18ddfb4776d9c5b8b009818c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const Lagrangian &amp;L)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lagrangian.cpp" line="239" column="1" bodyfile="src/marty/core/lagrangian.cpp" bodystart="239" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a23ea59b4fe52efb60fedd564b4246281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::complexToExpr</definition>
        <argsstring>(ltComplexType const &amp;complexNumber)</argsstring>
        <name>complexToExpr</name>
        <qualifiedname>mty::complexToExpr</qualifiedname>
        <param>
          <type>ltComplexType const &amp;</type>
          <declname>complexNumber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="31" column="11" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="31" bodyend="35" declfile="src/marty/core/looptools_extension.h" declline="38" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5b8134ae8cfec14ea675fba43b470862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::exprToComplexType</definition>
        <argsstring>(csl::Expr const &amp;init)</argsstring>
        <name>exprToComplexType</name>
        <qualifiedname>mty::exprToComplexType</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="37" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="37" bodyend="52" declfile="src/marty/core/looptools_extension.h" declline="40" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a77b02b7140454d161ef048c076656244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; ltComplexType &gt;</type>
        <definition>std::vector&lt; ltComplexType &gt; mty::exprToComplexType</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;init)</argsstring>
        <name>exprToComplexType</name>
        <qualifiedname>mty::exprToComplexType</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="55" column="1" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="55" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1abc99f3580a4d994f197153349d9e1d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mty::exprToRealType</definition>
        <argsstring>(csl::Expr const &amp;init)</argsstring>
        <name>exprToRealType</name>
        <qualifiedname>mty::exprToRealType</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="66" column="8" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="66" bodyend="86" declfile="src/marty/core/looptools_extension.h" declline="42" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab6d5c244d4e37db64c06ecef63b68adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; mty::exprToRealType</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;init)</argsstring>
        <name>exprToRealType</name>
        <qualifiedname>mty::exprToRealType</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="88" column="13" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3d1809f559b8c70a75a9c889e69bc402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::vector&lt; ltRealType &gt; &gt;</type>
        <definition>std::optional&lt; std::vector&lt; ltRealType &gt; &gt; mty::isReal</definition>
        <argsstring>(std::vector&lt; ltComplexType &gt; const &amp;init)</argsstring>
        <name>isReal</name>
        <qualifiedname>mty::isReal</qualifiedname>
        <param>
          <type>std::vector&lt; ltComplexType &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="100" column="1" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="100" bodyend="110" declfile="src/marty/core/looptools_extension.h" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad61f584e2747601ba923e6d583d003e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::A0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltRealType &gt; const &amp;arguments)</argsstring>
        <name>A0i_runtime</name>
        <qualifiedname>mty::A0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltRealType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="116" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="116" bodyend="123" declfile="src/marty/core/looptools_extension.h" declline="55" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2be92751d8c9072377c122c9be731235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::B0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltRealType &gt; const &amp;arguments)</argsstring>
        <name>B0i_runtime</name>
        <qualifiedname>mty::B0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltRealType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="125" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="125" bodyend="132" declfile="src/marty/core/looptools_extension.h" declline="57" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a806704c6863093d5949b11a4c36c9392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::C0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltRealType &gt; const &amp;arguments)</argsstring>
        <name>C0i_runtime</name>
        <qualifiedname>mty::C0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltRealType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="134" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="134" bodyend="147" declfile="src/marty/core/looptools_extension.h" declline="59" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a82c8928a7eebff0dba21bb4fb6ee3caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::D0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltRealType &gt; const &amp;arguments)</argsstring>
        <name>D0i_runtime</name>
        <qualifiedname>mty::D0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltRealType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="149" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="149" bodyend="166" declfile="src/marty/core/looptools_extension.h" declline="61" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab12fcc5f0860963af3b2180003d50014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::E0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltRealType &gt; const &amp;arguments)</argsstring>
        <name>E0i_runtime</name>
        <qualifiedname>mty::E0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltRealType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="168" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="168" bodyend="190" declfile="src/marty/core/looptools_extension.h" declline="63" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab4412dfba46698c57fe99d13565d11d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::A0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltComplexType &gt; const &amp;arguments)</argsstring>
        <name>A0i_runtime</name>
        <qualifiedname>mty::A0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltComplexType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="196" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="196" bodyend="205" declfile="src/marty/core/looptools_extension.h" declline="69" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a711240a08f0fcd6bdf964f8c64328305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::B0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltComplexType &gt; const &amp;arguments)</argsstring>
        <name>B0i_runtime</name>
        <qualifiedname>mty::B0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltComplexType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="207" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="207" bodyend="216" declfile="src/marty/core/looptools_extension.h" declline="71" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae179d6da2bf6c025e5ccc15b13099480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::C0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltComplexType &gt; const &amp;arguments)</argsstring>
        <name>C0i_runtime</name>
        <qualifiedname>mty::C0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltComplexType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="218" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="218" bodyend="233" declfile="src/marty/core/looptools_extension.h" declline="73" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a969e7b993d753f7624ddfbd2a16a26b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::D0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltComplexType &gt; const &amp;arguments)</argsstring>
        <name>D0i_runtime</name>
        <qualifiedname>mty::D0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltComplexType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="235" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="235" bodyend="254" declfile="src/marty/core/looptools_extension.h" declline="75" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac650bfc36499dc0166a3915418f8b337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::E0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; ltComplexType &gt; const &amp;arguments)</argsstring>
        <name>E0i_runtime</name>
        <qualifiedname>mty::E0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; ltComplexType &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="256" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="256" bodyend="280" declfile="src/marty/core/looptools_extension.h" declline="77" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a108bdbfaad2ea766fda48d39718c88eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::A0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>A0i_runtime</name>
        <qualifiedname>mty::A0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="286" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a736d8c418d6efe8f3b9ff95606b7a447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::B0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>B0i_runtime</name>
        <qualifiedname>mty::B0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="291" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1376d4aa62ef6b2e34700e3db98e13de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::C0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>C0i_runtime</name>
        <qualifiedname>mty::C0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="296" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac0aa30b68b37d50488b7964981898dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::D0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>D0i_runtime</name>
        <qualifiedname>mty::D0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="301" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a234047dbdf3ee355f3524dd4f8612b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::E0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>E0i_runtime</name>
        <qualifiedname>mty::E0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.cpp" line="306" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a77b02b7140454d161ef048c076656244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; ltComplexType &gt;</type>
        <definition>std::vector&lt; ltComplexType &gt; mty::exprToComplexType</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;init)</argsstring>
        <name>exprToComplexType</name>
        <qualifiedname>mty::exprToComplexType</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="44" column="13" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="55" bodyend="64" declfile="src/marty/core/looptools_extension.h" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab6d5c244d4e37db64c06ecef63b68adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; mty::exprToRealType</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;init)</argsstring>
        <name>exprToRealType</name>
        <qualifiedname>mty::exprToRealType</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="46" column="13" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="88" bodyend="97" declfile="src/marty/core/looptools_extension.h" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a108bdbfaad2ea766fda48d39718c88eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::A0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>A0i_runtime</name>
        <qualifiedname>mty::A0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="83" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="286" bodyend="289" declfile="src/marty/core/looptools_extension.h" declline="83" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a736d8c418d6efe8f3b9ff95606b7a447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::B0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>B0i_runtime</name>
        <qualifiedname>mty::B0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="85" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="291" bodyend="294" declfile="src/marty/core/looptools_extension.h" declline="85" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1376d4aa62ef6b2e34700e3db98e13de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::C0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>C0i_runtime</name>
        <qualifiedname>mty::C0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="87" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="296" bodyend="299" declfile="src/marty/core/looptools_extension.h" declline="87" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac0aa30b68b37d50488b7964981898dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::D0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>D0i_runtime</name>
        <qualifiedname>mty::D0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="89" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="301" bodyend="304" declfile="src/marty/core/looptools_extension.h" declline="89" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a234047dbdf3ee355f3524dd4f8612b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ltComplexType</type>
        <definition>ltComplexType mty::E0i_runtime</definition>
        <argsstring>(int id, std::vector&lt; csl::Expr &gt; const &amp;arguments)</argsstring>
        <name>E0i_runtime</name>
        <qualifiedname>mty::E0i_runtime</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_extension.h" line="91" column="15" bodyfile="src/marty/core/looptools_extension.cpp" bodystart="306" bodyend="309" declfile="src/marty/core/looptools_extension.h" declline="91" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae081063d1e3afbaf48038d94db6ada24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__complex128</type>
        <definition>__complex128 mty::A0iCq</definition>
        <argsstring>(int id, __complex128 const &amp;m1)</argsstring>
        <name>A0iCq</name>
        <qualifiedname>mty::A0iCq</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_quad_extension.h" line="32" column="21" bodyfile="src/marty/core/looptools_quad_extension.h" bodystart="32" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a27b529ddfeaa3abe5821dfe0c57d78b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__complex128</type>
        <definition>__complex128 mty::B0iCq</definition>
        <argsstring>(int id, __complex128 const &amp;p1, __complex128 const &amp;m1, __complex128 const &amp;m2)</argsstring>
        <name>B0iCq</name>
        <qualifiedname>mty::B0iCq</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_quad_extension.h" line="44" column="21" bodyfile="src/marty/core/looptools_quad_extension.h" bodystart="44" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab524278a50dd6b17967a816b98132082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__complex128</type>
        <definition>__complex128 mty::C0iCq</definition>
        <argsstring>(int id, __complex128 const &amp;p1, __complex128 const &amp;p2, __complex128 const &amp;p3, __complex128 const &amp;m1, __complex128 const &amp;m2, __complex128 const &amp;m3)</argsstring>
        <name>C0iCq</name>
        <qualifiedname>mty::C0iCq</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_quad_extension.h" line="60" column="21" bodyfile="src/marty/core/looptools_quad_extension.h" bodystart="60" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0ed066dccca2d1e284d3ac437d52f2c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__complex128</type>
        <definition>__complex128 mty::D0iCq</definition>
        <argsstring>(int id, __complex128 const &amp;p1, __complex128 const &amp;p2, __complex128 const &amp;p3, __complex128 const &amp;p4, __complex128 const &amp;p5, __complex128 const &amp;p6, __complex128 const &amp;m1, __complex128 const &amp;m2, __complex128 const &amp;m3, __complex128 const &amp;m4)</argsstring>
        <name>D0iCq</name>
        <qualifiedname>mty::D0iCq</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p5</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p6</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_quad_extension.h" line="82" column="21" bodyfile="src/marty/core/looptools_quad_extension.h" bodystart="82" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae5967bb6f8bd5a7106f82c7cbbfc2e95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__complex128</type>
        <definition>__complex128 mty::E0iCq</definition>
        <argsstring>(int id, __complex128 const &amp;p1, __complex128 const &amp;p2, __complex128 const &amp;p3, __complex128 const &amp;p4, __complex128 const &amp;p5, __complex128 const &amp;p6, __complex128 const &amp;p7, __complex128 const &amp;p8, __complex128 const &amp;p9, __complex128 const &amp;p10, __complex128 const &amp;m1, __complex128 const &amp;m2, __complex128 const &amp;m3, __complex128 const &amp;m4, __complex128 const &amp;m5)</argsstring>
        <name>E0iCq</name>
        <qualifiedname>mty::E0iCq</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p4</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p5</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p6</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p7</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p8</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p9</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>p10</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>__complex128 const &amp;</type>
          <declname>m5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/looptools_quad_extension.h" line="112" column="21" bodyfile="src/marty/core/looptools_quad_extension.h" bodystart="112" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1773648686d26e1278a6ab85a9f89889" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>static std::vector&lt; csl::Expr &gt; mty::evalForSquare</definition>
        <argsstring>(WilsonSet const &amp;wilsons)</argsstring>
        <name>evalForSquare</name>
        <qualifiedname>mty::evalForSquare</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.cpp" line="234" column="20" bodyfile="src/marty/core/model.cpp" bodystart="234" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a36975601a7d45b97b338e67c9db1b5ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; &gt;</type>
        <definition>static std::vector&lt; std::vector&lt; mty::Insertion &gt; &gt; mty::getIndependentDecays</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; const &amp;insertions)</argsstring>
        <name>getIndependentDecays</name>
        <qualifiedname>mty::getIndependentDecays</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.cpp" line="327" column="1" bodyfile="src/marty/core/model.cpp" bodystart="327" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad2023d0c64d337d2a3ae732253077d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::operatorDegeneracy</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; const &amp;insertions)</argsstring>
        <name>operatorDegeneracy</name>
        <qualifiedname>mty::operatorDegeneracy</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.cpp" line="521" column="5" bodyfile="src/marty/core/model.cpp" bodystart="521" bodyend="540" declfile="src/marty/core/model.h" declline="300" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7006eef403386c211cb9fd63b62df24d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mty::nPermutations</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;fermionOrder)</argsstring>
        <name>nPermutations</name>
        <qualifiedname>mty::nPermutations</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>fermionOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.cpp" line="542" column="12" bodyfile="src/marty/core/model.cpp" bodystart="542" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab89c3eb6ccfd0bc887cd06b29142f833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::matchingFermionSign</definition>
        <argsstring>(std::vector&lt; int &gt; fermionOrder)</argsstring>
        <name>matchingFermionSign</name>
        <qualifiedname>mty::matchingFermionSign</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>fermionOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.cpp" line="553" column="5" bodyfile="src/marty/core/model.cpp" bodystart="553" bodyend="556" declfile="src/marty/core/model.h" declline="302" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5ce485e8af9e08330e43c4e88fb6e043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::fermionSign</definition>
        <argsstring>(std::vector&lt; Insertion &gt; const &amp;model, std::vector&lt; Insertion &gt; order)</argsstring>
        <name>fermionSign</name>
        <qualifiedname>mty::fermionSign</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> &gt; const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> &gt;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.cpp" line="718" column="5" bodyfile="src/marty/core/model.cpp" bodystart="718" bodyend="737" declfile="src/marty/core/model.h" declline="304" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a23b02f4e0c5c81796cc098f8bb68e5ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int mty::linkPosition</definition>
        <argsstring>(Kinematics const &amp;M)</argsstring>
        <name>linkPosition</name>
        <qualifiedname>mty::linkPosition</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> const &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.cpp" line="894" column="12" bodyfile="src/marty/core/model.cpp" bodystart="894" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a41c80d8c9ad858ee8648e1622548cf78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Model const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/model.cpp" line="1122" column="1" bodyfile="src/marty/core/model.cpp" bodystart="1122" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acaab3adbe1a37bf8b81c8e52c2335a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isProjected</definition>
        <argsstring>(csl::Expr const &amp;prod, csl::Expr const &amp;field)</argsstring>
        <name>isProjected</name>
        <qualifiedname>mty::isProjected</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelBuilder.cpp" line="995" column="6" bodyfile="src/marty/core/modelBuilder.cpp" bodystart="995" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a54339f387248e96d12deb90b8c6a9e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::isMassTerm</definition>
        <argsstring>(csl::Expr const &amp;prod, csl::Expr const &amp;field)</argsstring>
        <name>isMassTerm</name>
        <qualifiedname>mty::isMassTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelBuilder.cpp" line="1017" column="6" bodyfile="src/marty/core/modelBuilder.cpp" bodystart="1017" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a52ab74323d92c48cc9808100c0c9e316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto mty::replaceMajorana</definition>
        <argsstring>(csl::Expr &amp;expr, mty::Particle const &amp;xi, mty::Particle Lambda)</argsstring>
        <name>replaceMajorana</name>
        <qualifiedname>mty::replaceMajorana</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>xi</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
          <declname>Lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelBuilder.cpp" line="1033" column="6" bodyfile="src/marty/core/modelBuilder.cpp" bodystart="1033" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1b4d1b62d8531efc2c48e4d3c8d04793" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>static std::vector&lt; csl::Expr &gt; mty::expandBrokenIndices</definition>
        <argsstring>(csl::Expr const &amp;init, csl::Space const *brokenSpace, std::vector&lt; csl::Space const * &gt; const &amp;newSpace)</argsstring>
        <name>expandBrokenIndices</name>
        <qualifiedname>mty::expandBrokenIndices</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
          <declname>brokenSpace</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const * &gt; const &amp;</type>
          <declname>newSpace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelBuilder.cpp" line="1769" column="1" bodyfile="src/marty/core/modelBuilder.cpp" bodystart="1769" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5ab8809a7a7a05e057180ee81b5520a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::abbreviate</definition>
        <argsstring>(csl::Expr &amp;prod)</argsstring>
        <name>abbreviate</name>
        <qualifiedname>mty::abbreviate</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>prod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelBuilder.cpp" line="2316" column="6" bodyfile="src/marty/core/modelBuilder.cpp" bodystart="2316" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2cb1daeb1c9ea718bd5b6abd8a5198e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::hc</definition>
        <argsstring>(csl::Expr const &amp;init)</argsstring>
        <name>hc</name>
        <qualifiedname>mty::hc</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.cpp" line="63" column="11" bodyfile="src/marty/core/modelData.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a952a6eab864822eb1ead5db089009504" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mty::particleNotFound</definition>
        <argsstring>(std::vector&lt; mty::Particle &gt; const &amp;particles, std::string const &amp;name)</argsstring>
        <name>particleNotFound</name>
        <qualifiedname>mty::particleNotFound</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.cpp" line="924" column="13" bodyfile="src/marty/core/modelData.cpp" bodystart="924" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acbb5b73401f5bc6dfeada4b16f52910a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, ModelData const &amp;model)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function prints out the model gauge, the particle content and the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> (kinetic, mass, and interaction terms).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream (default is standard stream std::cout). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.cpp" line="1331" column="1" bodyfile="src/marty/core/modelData.cpp" bodystart="1331" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a216515e6729f9a93a62c8ac41eed8d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::MinkowskiVector</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>MinkowskiVector</name>
        <qualifiedname>mty::MinkowskiVector</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, vector in <ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref> space. </para>
        </briefdescription>
        <detaileddescription>
<para>The vector is by definition a tensor with one index. For example, a Minkowski vector may be created by: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref><sp/>X<sp/>=<sp/><ref refid="namespacemty_1a216515e6729f9a93a62c8ac41eed8d8e" kindref="member">MinkowskiVector</ref>(</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> Then, assuming that &apos;mu&apos; is an object of type <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>, <programlisting><codeline><highlight class="normal">X(mu)</highlight></codeline>
</programlisting> means the tensor with a lowered index <formula id="174">$ X_\mu $</formula>, and <programlisting><codeline><highlight class="normal">X(+mu)</highlight></codeline>
</programlisting> means the tensor with index up <formula id="175">$ X^\mu $</formula>. For more information about tensors and indices see <ref refid="classcsl_1_1TensorElement" kindref="compound">csl::TensorElement</ref> and <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An indicial Minkowski vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="32" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="32" bodyend="35" declfile="src/marty/core/mrtInterface.h" declline="71" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aff87605fd4f025fc9da9682641456cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::MinkowskiIndex</definition>
        <argsstring>(std::string const &amp;name=&quot;&quot;)</argsstring>
        <name>MinkowskiIndex</name>
        <qualifiedname>mty::MinkowskiIndex</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> in csl::Minkowki space. </para>
        </briefdescription>
        <detaileddescription>
<para>If no name is provided, the name will be chosen in the name cycle of <ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref>, i.e. one of  <formula id="176">$ \mu, \nu, \rho, \sigma, \lambda, \tau
$</formula>. For example, a Minkowski index may be created with the following code: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>mu<sp/>=<sp/><ref refid="namespacemty_1aff87605fd4f025fc9da9682641456cfb" kindref="member">mty::MinkowskiIndex</ref>(</highlight><highlight class="stringliteral">&quot;\\mu&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> or with a name automatically determined: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>mu<sp/>=<sp/><ref refid="namespacemty_1aff87605fd4f025fc9da9682641456cfb" kindref="member">mty::MinkowskiIndex</ref>();</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the index (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index living in <ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref> space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="37" column="12" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="37" bodyend="42" declfile="src/marty/core/mrtInterface.h" declline="88" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a32c178cf69c19ebb8048dd34dd87d32b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::DiracIndex</definition>
        <argsstring>(std::string const &amp;name=&quot;&quot;)</argsstring>
        <name>DiracIndex</name>
        <qualifiedname>mty::DiracIndex</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> in the 4-dimensional Dirac space mty::dirac4. </para>
        </briefdescription>
        <detaileddescription>
<para>If no name is provided, the name will be chosen in the name cycle of mty::dirac4, i.e. one of <formula id="177">$ \alpha, \beta, \gamma, \delta, \epsilon $</formula>. For example, a dirac index may be created with the following code: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>alpha<sp/>=<sp/><ref refid="namespacemty_1a32c178cf69c19ebb8048dd34dd87d32b" kindref="member">mty::DiracIndex</ref>(</highlight><highlight class="stringliteral">&quot;\\alpha&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> or with a name automatically determined: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>alpha<sp/>=<sp/><ref refid="namespacemty_1a32c178cf69c19ebb8048dd34dd87d32b" kindref="member">mty::DiracIndex</ref>();</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the index (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index living in mty::dirac4 space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="44" column="12" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="44" bodyend="49" declfile="src/marty/core/mrtInterface.h" declline="136" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a14db20f4e5d85eb182171882113eabab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>std::vector&lt; csl::Index &gt; mty::MinkowskiIndices</definition>
        <argsstring>(size_t n, std::string const &amp;name=&quot;&quot;)</argsstring>
        <name>MinkowskiIndices</name>
        <qualifiedname>mty::MinkowskiIndices</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Returns indices in csl::Minkowki space. </para>
        </briefdescription>
        <detaileddescription>
<para>If no name is provided, the name will be chosen in the name cycle of <ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref>, i.e. one of  <formula id="176">$ \mu, \nu, \rho, \sigma, \lambda, \tau
$</formula>. For example, Minkowski indices may be created with the following code: <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mu<sp/>=<sp/><ref refid="namespacemty_1a14db20f4e5d85eb182171882113eabab" kindref="member">mty::MinkowskiIndices</ref>(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>mu[0],<sp/>mu[1]<sp/>are<sp/>indices<sp/>(csl::Index)<sp/>in<sp/>csl::Minkowski<sp/>space.</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indices to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the index (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>n</bold> indices living in <ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref> space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="51" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="51" bodyend="59" declfile="src/marty/core/mrtInterface.h" declline="118" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1abce0e5f9229fb5f831bcf8003c35e8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>std::vector&lt; csl::Index &gt; mty::DiracIndices</definition>
        <argsstring>(size_t n, std::string const &amp;name=&quot;&quot;)</argsstring>
        <name>DiracIndices</name>
        <qualifiedname>mty::DiracIndices</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Returns indices in the 4-dimensional Dirac space mty::dirac4. </para>
        </briefdescription>
        <detaileddescription>
<para>If no name is provided, the name will be chosen in the name cycle of mty::dirac4, i.e. one of <formula id="177">$ \alpha, \beta, \gamma, \delta, \epsilon $</formula>. For example, a dirac index may be created with the following code: <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/><ref refid="namespacemty_1abce0e5f9229fb5f831bcf8003c35e8a1" kindref="member">mty::DiracIndices</ref>(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>alpha[0],<sp/>alpha[1]<sp/>are<sp/>indices<sp/>(csl::Index)<sp/>in<sp/>Dirac<sp/>space</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indices to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the index (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>n</bold> indices living in mty::dirac4 space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="61" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="61" bodyend="68" declfile="src/marty/core/mrtInterface.h" declline="103" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5466e20c32055b26393c65d343c5326c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::GaugeIndex</definition>
        <argsstring>(std::string const &amp;nameIndex, mty::Model const &amp;model, std::string const &amp;nameGroup, Particle const &amp;particle)</argsstring>
        <name>GaugeIndex</name>
        <qualifiedname>mty::GaugeIndex</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameIndex</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameGroup</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="70" column="12" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0ba8c15bd00e15ff01b7cd4eee5c07c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::GaugeIndex</definition>
        <argsstring>(mty::Model const &amp;model, std::string const &amp;nameGroup, Particle const &amp;particle)</argsstring>
        <name>GaugeIndex</name>
        <qualifiedname>mty::GaugeIndex</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameGroup</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="80" column="12" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="80" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a74852d18e60b99b1d0a0b4f34b7c64a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> *</type>
        <definition>const csl::Space * mty::VectorSpace</definition>
        <argsstring>(mty::Model const &amp;model, std::string const &amp;nameGroup, Particle const &amp;part)</argsstring>
        <name>VectorSpace</name>
        <qualifiedname>mty::VectorSpace</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameGroup</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Returns the vector space corresponding to the representation of a given particle in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows to get the vector space associated to any representation in the model, in particular to generate indices in that space. For example in QCD, a quark q and a gluon g would yield for  <formula id="178">$ SU(3)
$</formula> respectively a 3D and a 8D vector spaces. The code would look like: <programlisting><codeline><highlight class="normal">_3D_space<sp/>=<sp/><ref refid="namespacemty_1a74852d18e60b99b1d0a0b4f34b7c64a5" kindref="member">VectorSpace</ref>(QCD,<sp/></highlight><highlight class="stringliteral">&quot;SU_3&quot;</highlight><highlight class="normal">,<sp/>q);</highlight></codeline>
<codeline><highlight class="normal">_8D_space<sp/>=<sp/><ref refid="namespacemty_1a74852d18e60b99b1d0a0b4f34b7c64a5" kindref="member">VectorSpace</ref>(QCD,<sp/></highlight><highlight class="stringliteral">&quot;SU_3&quot;</highlight><highlight class="normal">,<sp/>g);</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> in which the particle lives. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> from which we take the representation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector space of the representation of <bold>part</bold> in the group named <bold>nameGroup</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="94" column="18" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="94" bodyend="101" declfile="src/marty/core/mrtInterface.h" declline="299" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::GenerateIndex</definition>
        <argsstring>(csl::Space const *space, std::string const &amp;name=&quot;&quot;)</argsstring>
        <name>GenerateIndex</name>
        <qualifiedname>mty::GenerateIndex</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
          <declname>space</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Generates an index in a given space. </para>
        </briefdescription>
        <detaileddescription>
<para>If the name is not given (optional), the name will be taken in the predefined names for the space. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>Space in which we create an index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the index (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index living in <bold>space</bold>. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>, <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>, <ref refid="classcsl_1_1TensorParent" kindref="compound">csl::TensorParent</ref>, <ref refid="classcsl_1_1TensorElement" kindref="compound">csl::TensorElement</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="103" column="12" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="103" bodyend="108" declfile="src/marty/core/mrtInterface.h" declline="312" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac620cb55dd4c435ccf76c908d1c14c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::Delta</definition>
        <argsstring>(const csl::Space *space)</argsstring>
        <name>Delta</name>
        <qualifiedname>mty::Delta</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>Returns the Kronecker delta of a given vector space. </para>
        </briefdescription>
        <detaileddescription>
<para>The delta may be called next with indices of the corresponding space. For example, taking <formula id="179">$ \delta _{ij} $</formula> in a space named E3 would look like: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref><sp/>*E3<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>i<sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(E3,<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>j<sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(E3,<sp/></highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref><sp/>delta<sp/>=<sp/><ref refid="namespacemty_1ac620cb55dd4c435ccf76c908d1c14c18" kindref="member">Delta</ref>(E3);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref><sp/>kronecker<sp/>=<sp/>delta({i,<sp/>j});</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector space from which we want the delta. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Kronecker delta of the space. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>, <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>, <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>, <ref refid="classcsl_1_1TensorParent" kindref="compound">csl::TensorParent</ref>, <ref refid="classcsl_1_1TensorElement" kindref="compound">csl::TensorElement</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="110" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="110" bodyend="113" declfile="src/marty/core/mrtInterface.h" declline="332" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af0fe229bdc4dbea3e900e3ede84243b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::Metric</definition>
        <argsstring>(const csl::Space *space)</argsstring>
        <name>Metric</name>
        <qualifiedname>mty::Metric</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>Returns the metric of a given vector space. </para>
        </briefdescription>
        <detaileddescription>
<para>The metric may be called next with indices of the corresponding space. For example, taking <formula id="180">$ g ^{\mu\nu}g_{\rho\sigma} $</formula> in a (signed) space named Minko would look like: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref><sp/>*Minko<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>mu<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(Minko,<sp/></highlight><highlight class="stringliteral">&quot;\\mu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>nu<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(Minko,<sp/></highlight><highlight class="stringliteral">&quot;\\nu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>rho<sp/><sp/><sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(Minko,<sp/></highlight><highlight class="stringliteral">&quot;\\rho&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>sigma<sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(Minko,<sp/></highlight><highlight class="stringliteral">&quot;\\sigma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref><sp/>g<sp/>=<sp/><ref refid="namespacemty_1af0fe229bdc4dbea3e900e3ede84243b4" kindref="member">Metric</ref>(Minko);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref><sp/>metricTerm<sp/>=<sp/>g({+mu,<sp/>+nu})<sp/>*<sp/>g({rho,<sp/>sigma});</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector space from which we want the metric. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The metric of the space. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>, <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>, <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>, <ref refid="classcsl_1_1TensorParent" kindref="compound">csl::TensorParent</ref>, <ref refid="classcsl_1_1TensorElement" kindref="compound">csl::TensorElement</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="115" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="115" bodyend="118" declfile="src/marty/core/mrtInterface.h" declline="353" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4160885b02c5f34163b16b73dbc3a561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::Epsilon</definition>
        <argsstring>(const csl::Space *space)</argsstring>
        <name>Epsilon</name>
        <qualifiedname>mty::Epsilon</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>Returns the epsilon symbol of a given vector space. </para>
        </briefdescription>
        <detaileddescription>
<para>The epsilon may be called next with indices of the corresponding space. For example, taking <formula id="181">$ \epsilon _{ijk} $</formula> in a space named E3 would look like: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref><sp/>*E3<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>i<sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(E3,<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>j<sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(E3,<sp/></highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>k<sp/>=<sp/><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>(E3,<sp/></highlight><highlight class="stringliteral">&quot;k&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref><sp/>eps<sp/>=<sp/><ref refid="namespacemty_1a4160885b02c5f34163b16b73dbc3a561" kindref="member">Epsilon</ref>(E3);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref><sp/>antiSym<sp/>=<sp/>eps({i,<sp/>j,<sp/>k});</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector space from which we want the epsilon symbol. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The epsilon symbol of the space. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacemty_1a42bda0aaee1bbe8fe54779cbad2adfbf" kindref="member">GenerateIndex</ref>, <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>, <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>, <ref refid="classcsl_1_1TensorParent" kindref="compound">csl::TensorParent</ref>, <ref refid="classcsl_1_1TensorElement" kindref="compound">csl::TensorElement</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="120" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="120" bodyend="123" declfile="src/marty/core/mrtInterface.h" declline="373" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3b4a619b4f801656afb17a4d13b43823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::DiracGamma</definition>
        <argsstring>()</argsstring>
        <name>DiracGamma</name>
        <qualifiedname>mty::DiracGamma</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Dirac tensor <formula id="70">$ \gamma $</formula> in the standard 4-dim Dirac space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="125" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="125" bodyend="128" declfile="src/marty/core/mrtInterface.h" declline="378" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1d043ea3bfa4386273c1933e78ebb67d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::DiracGamma5</definition>
        <argsstring>()</argsstring>
        <name>DiracGamma5</name>
        <qualifiedname>mty::DiracGamma5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Dirac tensor <formula id="182">$ \gamma ^5$</formula> in the standard 4-dim Dirac space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="129" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="129" bodyend="132" declfile="src/marty/core/mrtInterface.h" declline="382" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a61deff38d683d685a6666ff973277f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::DiracSigma</definition>
        <argsstring>()</argsstring>
        <name>DiracSigma</name>
        <qualifiedname>mty::DiracSigma</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Dirac tensor <formula id="183">$ \sigma $</formula> in the standard 4-dim Dirac space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="133" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="133" bodyend="136" declfile="src/marty/core/mrtInterface.h" declline="386" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af6857ab4d32729379b7692b9640dd3ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::DiracPL</definition>
        <argsstring>()</argsstring>
        <name>DiracPL</name>
        <qualifiedname>mty::DiracPL</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Dirac tensor <formula id="184">$ P_L $</formula> in the standard 4-dim Dirac space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="137" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="137" bodyend="140" declfile="src/marty/core/mrtInterface.h" declline="390" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3d63f71b30bbb55395ce41c0b14d7533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::DiracPR</definition>
        <argsstring>()</argsstring>
        <name>DiracPR</name>
        <qualifiedname>mty::DiracPR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Dirac tensor <formula id="185">$ P_R $</formula> in the standard 4-dim Dirac space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="141" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="141" bodyend="144" declfile="src/marty/core/mrtInterface.h" declline="394" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a82396265f090fd7d7c63bc4a6f3b62d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::DiracCMatrix</definition>
        <argsstring>()</argsstring>
        <name>DiracCMatrix</name>
        <qualifiedname>mty::DiracCMatrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="145" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="145" bodyend="148" declfile="src/marty/core/mrtInterface.h" declline="409" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aae2a5338465732363e00f993920b441e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref></type>
        <definition>Amplitude mty::SelfEnergy</definition>
        <argsstring>(mty::Order order, mty::Particle &amp;particle, mty::Model &amp;model)</argsstring>
        <name>SelfEnergy</name>
        <qualifiedname>mty::SelfEnergy</qualifiedname>
        <param>
          <type>mty::Order</type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="157" column="1" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="157" bodyend="162" declfile="src/marty/core/mrtInterface.h" declline="478" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1adbc06a689b86c2c3033b378891c3f0e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref></type>
        <definition>Amplitude mty::SelfEnergy</definition>
        <argsstring>(mty::Particle &amp;particle, mty::Model &amp;model)</argsstring>
        <name>SelfEnergy</name>
        <qualifiedname>mty::SelfEnergy</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="164" column="11" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="164" bodyend="167" declfile="src/marty/core/mrtInterface.h" declline="480" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a428b96dd7cd2b379531975f43a37e8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ComputeSquaredAmplitude</definition>
        <argsstring>(mty::Model &amp;model, Amplitude const &amp;ampl)</argsstring>
        <name>ComputeSquaredAmplitude</name>
        <qualifiedname>mty::ComputeSquaredAmplitude</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref> const &amp;</type>
          <declname>ampl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="169" column="11" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="169" bodyend="172" declfile="src/marty/core/mrtInterface.h" declline="482" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a76338ee9499217b20d27f1dcb32693b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt;</type>
        <definition>std::vector&lt; FeynmanRule &gt; mty::ComputeFeynmanRules</definition>
        <argsstring>(mty::Model &amp;model)</argsstring>
        <name>ComputeFeynmanRules</name>
        <qualifiedname>mty::ComputeFeynmanRules</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="174" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="174" bodyend="177" declfile="src/marty/core/mrtInterface.h" declline="484" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa609c08d696ed4200cee0c9221f1e810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ContractIndices</definition>
        <argsstring>(csl::Expr &amp;init)</argsstring>
        <name>ContractIndices</name>
        <qualifiedname>mty::ContractIndices</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="179" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="179" bodyend="183" declfile="src/marty/core/mrtInterface.h" declline="486" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a11dc7262ae70c7c1ee1b3084e021e73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ContractIndices</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; &amp;init)</argsstring>
        <name>ContractIndices</name>
        <qualifiedname>mty::ContractIndices</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="185" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="185" bodyend="189" declfile="src/marty/core/mrtInterface.h" declline="488" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a608c2fa4ea7f20635828e5ba7f1bdb60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Display</definition>
        <argsstring>(std::vector&lt; FeynmanRule &gt; const &amp;rules, std::ostream &amp;out)</argsstring>
        <name>Display</name>
        <qualifiedname>mty::Display</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt; const &amp;</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="191" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="191" bodyend="200" declfile="src/marty/core/mrtInterface.h" declline="490" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa3cf3843b56de78bc3679b9111fd9246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Display</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;amplitudes, std::ostream &amp;out, bool simplify)</argsstring>
        <name>Display</name>
        <qualifiedname>mty::Display</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>amplitudes</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>simplify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="202" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="202" bodyend="234" declfile="src/marty/core/mrtInterface.h" declline="493" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af80cda9b0d39e13b9eb88d24fcb5d712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Display</definition>
        <argsstring>(mty::Amplitude const &amp;amplitudes, std::ostream &amp;out, bool simplify)</argsstring>
        <name>Display</name>
        <qualifiedname>mty::Display</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Amplitude" kindref="compound">mty::Amplitude</ref> const &amp;</type>
          <declname>amplitudes</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>simplify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="236" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="236" bodyend="241" declfile="src/marty/core/mrtInterface.h" declline="496" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa0fb31aea29a35e7d3dc331a9e573ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Show</definition>
        <argsstring>(std::vector&lt; FeynmanRule &gt; const &amp;rules)</argsstring>
        <name>Show</name>
        <qualifiedname>mty::Show</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt; const &amp;</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="243" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="243" bodyend="249" declfile="src/marty/core/mrtInterface.h" declline="502" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1a54ae77a42ba87ec09038e8c8301cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Show</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; wick::Graph &gt; &gt; const &amp;graphs, bool showMomenta)</argsstring>
        <name>Show</name>
        <qualifiedname>mty::Show</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt; &gt; const &amp;</type>
          <declname>graphs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>showMomenta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="251" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="251" bodyend="255" declfile="src/marty/core/mrtInterface.h" declline="503" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a05bb5c3b50da5aefe33b4c76e47d831e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Show</definition>
        <argsstring>(mty::Amplitude const &amp;ampl)</argsstring>
        <name>Show</name>
        <qualifiedname>mty::Show</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Amplitude" kindref="compound">mty::Amplitude</ref> const &amp;</type>
          <declname>ampl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="257" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="257" bodyend="260" declfile="src/marty/core/mrtInterface.h" declline="505" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a555b1955996a62d06614bb34a1e800df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Show</definition>
        <argsstring>(WilsonSet const &amp;wilsons)</argsstring>
        <name>Show</name>
        <qualifiedname>mty::Show</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="262" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="262" bodyend="265" declfile="src/marty/core/mrtInterface.h" declline="506" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6e5cf98b359637ab5656c76be89ece11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Show</definition>
        <argsstring>(std::vector&lt; FeynmanRule &gt; const &amp;rules, size_t first, size_t last)</argsstring>
        <name>Show</name>
        <qualifiedname>mty::Show</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt; const &amp;</type>
          <declname>rules</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="267" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="267" bodyend="277" declfile="src/marty/core/mrtInterface.h" declline="508" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a96045562c4ecc182d1b458204158cc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Show</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; wick::Graph &gt; &gt; const &amp;diagrams, size_t first, size_t last)</argsstring>
        <name>Show</name>
        <qualifiedname>mty::Show</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt; &gt; const &amp;</type>
          <declname>diagrams</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="278" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="278" bodyend="290" declfile="src/marty/core/mrtInterface.h" declline="509" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a417a70e67f3efd047f1585d6540f2c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Show</definition>
        <argsstring>(mty::Amplitude const &amp;diagrams, size_t first, size_t last)</argsstring>
        <name>Show</name>
        <qualifiedname>mty::Show</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Amplitude" kindref="compound">mty::Amplitude</ref> const &amp;</type>
          <declname>diagrams</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="291" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="291" bodyend="294" declfile="src/marty/core/mrtInterface.h" declline="512" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6c83f58309715de0d122255e4755bac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Show</definition>
        <argsstring>(WilsonSet const &amp;wilsons, size_t first, size_t last)</argsstring>
        <name>Show</name>
        <qualifiedname>mty::Show</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="295" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="295" bodyend="298" declfile="src/marty/core/mrtInterface.h" declline="513" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8a8ba4e405de9e11bf3745615cd05aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SaveDiagrams</definition>
        <argsstring>(std::string const &amp;fileName, std::vector&lt; FeynmanRule &gt; const &amp;rules)</argsstring>
        <name>SaveDiagrams</name>
        <qualifiedname>mty::SaveDiagrams</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt; const &amp;</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="300" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="300" bodyend="307" declfile="src/marty/core/mrtInterface.h" declline="520" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1106da6c8a89a20037c5cd4cd91432eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SaveDiagrams</definition>
        <argsstring>(std::string const &amp;fileName, std::vector&lt; std::shared_ptr&lt; wick::Graph &gt; &gt; const &amp;graphs, bool showMomenta)</argsstring>
        <name>SaveDiagrams</name>
        <qualifiedname>mty::SaveDiagrams</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt; &gt; const &amp;</type>
          <declname>graphs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>showMomenta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="309" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="309" bodyend="314" declfile="src/marty/core/mrtInterface.h" declline="515" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab22ee98e73e0b3a5eeeac116f5fbe147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SaveDiagrams</definition>
        <argsstring>(std::string const &amp;fileName, mty::Amplitude const &amp;ampl)</argsstring>
        <name>SaveDiagrams</name>
        <qualifiedname>mty::SaveDiagrams</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Amplitude" kindref="compound">mty::Amplitude</ref> const &amp;</type>
          <declname>ampl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="316" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="316" bodyend="319" declfile="src/marty/core/mrtInterface.h" declline="518" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aead8e86a8aac7f16efd68b9a1f36af68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Display</definition>
        <argsstring>(WilsonSet const &amp;wilsons, std::ostream &amp;out)</argsstring>
        <name>Display</name>
        <qualifiedname>mty::Display</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="321" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="321" bodyend="328" declfile="src/marty/core/mrtInterface.h" declline="500" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9394ed29c6dd441f945b8e379c1e307b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::DisplayAbbreviations</definition>
        <argsstring>(std::ostream &amp;out)</argsstring>
        <name>DisplayAbbreviations</name>
        <qualifiedname>mty::DisplayAbbreviations</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="330" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="330" bodyend="333" declfile="src/marty/core/mrtInterface.h" declline="529" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af92b80ec79a829bd22c1883cdc78c0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::DisplayAbbreviations</definition>
        <argsstring>(std::string const &amp;name, std::ostream &amp;out)</argsstring>
        <name>DisplayAbbreviations</name>
        <qualifiedname>mty::DisplayAbbreviations</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="335" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="335" bodyend="338" declfile="src/marty/core/mrtInterface.h" declline="530" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a20edf0c1c48ab8e4ba28bca5b54eae3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ExportPDF</definition>
        <argsstring>(std::string const &amp;nameFiles, std::vector&lt; std::shared_ptr&lt; wick::Graph &gt; &gt; const &amp;graphs)</argsstring>
        <name>ExportPDF</name>
        <qualifiedname>mty::ExportPDF</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameFiles</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt; &gt; const &amp;</type>
          <declname>graphs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="340" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="340" bodyend="344" declfile="src/marty/core/mrtInterface.h" declline="533" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac9a31d9a206224037ae764adee8911af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ExportPNG</definition>
        <argsstring>(std::string const &amp;nameFiles, std::vector&lt; std::shared_ptr&lt; wick::Graph &gt; &gt; const &amp;graphs)</argsstring>
        <name>ExportPNG</name>
        <qualifiedname>mty::ExportPNG</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameFiles</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">wick::Graph</ref> &gt; &gt; const &amp;</type>
          <declname>graphs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="346" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="346" bodyend="350" declfile="src/marty/core/mrtInterface.h" declline="539" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2c566acd8bc1b2dc44f96751d6c1aae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ExportPDF</definition>
        <argsstring>(std::string const &amp;nameFiles, std::vector&lt; FeynmanRule &gt; const &amp;rules)</argsstring>
        <name>ExportPDF</name>
        <qualifiedname>mty::ExportPDF</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameFiles</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt; const &amp;</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="352" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="352" bodyend="361" declfile="src/marty/core/mrtInterface.h" declline="536" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7642e9b4ff01fc5eb32dd6eaa3528140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ExportPNG</definition>
        <argsstring>(std::string const &amp;nameFiles, std::vector&lt; FeynmanRule &gt; const &amp;rules)</argsstring>
        <name>ExportPNG</name>
        <qualifiedname>mty::ExportPNG</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameFiles</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt; const &amp;</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="363" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="363" bodyend="372" declfile="src/marty/core/mrtInterface.h" declline="542" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a60b435d55c234e8052f0bace6ff4f658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AddParticle</definition>
        <argsstring>(mty::Model &amp;model, mty::Particle &amp;particle, bool initTerms)</argsstring>
        <name>AddParticle</name>
        <qualifiedname>mty::AddParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initTerms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="380" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="380" bodyend="383" declfile="src/marty/core/mrtInterface.h" declline="563" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9c7a15351f5e8e24052d5e4ac2d7fe1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AddTerm</definition>
        <argsstring>(mty::Model &amp;model, csl::Expr const &amp;term, bool addCC)</argsstring>
        <name>AddTerm</name>
        <qualifiedname>mty::AddTerm</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addCC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="385" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="385" bodyend="388" declfile="src/marty/core/mrtInterface.h" declline="567" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a046879c77440fbacb9f0e1ae5ad5c2cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AddTerm</definition>
        <argsstring>(mty::Model &amp;model, std::vector&lt; csl::Expr &gt; const &amp;terms, bool addCC)</argsstring>
        <name>AddTerm</name>
        <qualifiedname>mty::AddTerm</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>terms</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addCC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="390" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="390" bodyend="396" declfile="src/marty/core/mrtInterface.h" declline="569" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a87ca4ec8f0e13c497a8ab772da186a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::GetParticle</definition>
        <argsstring>(mty::Model const &amp;model, std::string const &amp;name)</argsstring>
        <name>GetParticle</name>
        <qualifiedname>mty::GetParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="398" column="15" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="398" bodyend="401" declfile="src/marty/core/mrtInterface.h" declline="573" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a674e62c6b0598a2884f4844ce16c634e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::GetMass</definition>
        <argsstring>(mty::Particle const &amp;particle)</argsstring>
        <name>GetMass</name>
        <qualifiedname>mty::GetMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="403" column="11" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="403" bodyend="406" declfile="src/marty/core/mrtInterface.h" declline="575" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a21448cb0b74b82d114115b94fd10e7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::GenerateSimilarParticle</definition>
        <argsstring>(std::string const &amp;name, mty::Particle const &amp;particle)</argsstring>
        <name>GenerateSimilarParticle</name>
        <qualifiedname>mty::GenerateSimilarParticle</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="408" column="15" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="408" bodyend="412" declfile="src/marty/core/mrtInterface.h" declline="577" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5598d3c313f12b7813696790e40d7d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::GetFieldStrength</definition>
        <argsstring>(Particle const &amp;particle)</argsstring>
        <name>GetFieldStrength</name>
        <qualifiedname>mty::GetFieldStrength</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="414" column="15" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="414" bodyend="421" declfile="src/marty/core/mrtInterface.h" declline="580" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a226ece91dcbfe5d9ad1642e1efa345a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::PromoteGoldstone</definition>
        <argsstring>(mty::Model &amp;model, mty::Particle &amp;goldstone, mty::Particle &amp;gaugeBoson)</argsstring>
        <name>PromoteGoldstone</name>
        <qualifiedname>mty::PromoteGoldstone</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>goldstone</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>gaugeBoson</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="423" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="423" bodyend="428" declfile="src/marty/core/mrtInterface.h" declline="582" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a408b2aa1a1874b3bcd3679e6f55bdb35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::PromoteGoldstone</definition>
        <argsstring>(mty::Model &amp;model, char const *goldstone, char const *gaugeBoson)</argsstring>
        <name>PromoteGoldstone</name>
        <qualifiedname>mty::PromoteGoldstone</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>goldstone</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>gaugeBoson</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="430" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="430" bodyend="435" declfile="src/marty/core/mrtInterface.h" declline="586" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af71fcb7d4db4b2d3cf304918a634edda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::GetCoupling</definition>
        <argsstring>(mty::Model const &amp;model, std::string const &amp;nameCoupling)</argsstring>
        <name>GetCoupling</name>
        <qualifiedname>mty::GetCoupling</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameCoupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="437" column="11" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="437" bodyend="440" declfile="src/marty/core/mrtInterface.h" declline="590" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1adc803a5a2b80fb4b0db83e9c1124734c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::GetYukawa</definition>
        <argsstring>(mty::Model const &amp;model, std::string const &amp;nameCoupling)</argsstring>
        <name>GetYukawa</name>
        <qualifiedname>mty::GetYukawa</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameCoupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="442" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="442" bodyend="445" declfile="src/marty/core/mrtInterface.h" declline="593" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ada7e6c5f8f2fc6103389e3ac76770c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Rename</definition>
        <argsstring>(mty::Model &amp;model, std::string const &amp;oldName, std::string const &amp;newName)</argsstring>
        <name>Rename</name>
        <qualifiedname>mty::Rename</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>oldName</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="447" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="447" bodyend="452" declfile="src/marty/core/mrtInterface.h" declline="596" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9d02a99c9244afb593c01e1a4d074bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SetSelfConjugate</definition>
        <argsstring>(Particle &amp;part, bool selfConjugate)</argsstring>
        <name>SetSelfConjugate</name>
        <qualifiedname>mty::SetSelfConjugate</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>selfConjugate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="454" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="454" bodyend="457" declfile="src/marty/core/mrtInterface.h" declline="612" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad2cbbd06be669cfd0e5303120554428f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SetGroupRep</definition>
        <argsstring>(mty::Particle &amp;part, std::string const &amp;nameGroup, std::vector&lt; int &gt; const &amp;highestWeight)</argsstring>
        <name>SetGroupRep</name>
        <qualifiedname>mty::SetGroupRep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameGroup</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>highestWeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="459" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="459" bodyend="464" declfile="src/marty/core/mrtInterface.h" declline="614" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a913904bb9359d5e72af24abed5460fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SetGroupRep</definition>
        <argsstring>(mty::Particle &amp;part, std::string const &amp;nameGroup, int charge)</argsstring>
        <name>SetGroupRep</name>
        <qualifiedname>mty::SetGroupRep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameGroup</declname>
        </param>
        <param>
          <type>int</type>
          <declname>charge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="465" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="465" bodyend="468" declfile="src/marty/core/mrtInterface.h" declline="617" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a43f96ae39dc1a3102af71afb94bd5f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SetFlavorRep</definition>
        <argsstring>(mty::Particle &amp;part, std::string const &amp;nameGroup)</argsstring>
        <name>SetFlavorRep</name>
        <qualifiedname>mty::SetFlavorRep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="469" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="469" bodyend="472" declfile="src/marty/core/mrtInterface.h" declline="620" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8d2f7945c6610d447fa4fef9b9946924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Init</definition>
        <argsstring>(mty::Model &amp;model)</argsstring>
        <name>Init</name>
        <qualifiedname>mty::Init</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="474" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="474" bodyend="477" declfile="src/marty/core/mrtInterface.h" declline="622" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afdf437e202608ce3841a21680fb79612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Replaced</definition>
        <argsstring>(mty::Model &amp;model, csl::Expr const &amp;init, csl::Expr const &amp;target)</argsstring>
        <name>Replaced</name>
        <qualifiedname>mty::Replaced</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Replaces an expression in all kinetic / mass / interactions terms of a model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> in which we do the replacement.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression to replace.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>New expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="479" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="479" bodyend="484" declfile="src/marty/core/mrtInterface.h" declline="629" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a527b0cb04b9eb2864c128e4020aa8647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Replaced</definition>
        <argsstring>(mty::Model &amp;model, csl::Tensor &amp;init, csl::Expr const &amp;target)</argsstring>
        <name>Replaced</name>
        <qualifiedname>mty::Replaced</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Replaces an expression in all kinetic / mass / interactions terms of a model. </para>
        </briefdescription>
        <detaileddescription>
<para>The new expression should have a free index structure corresponding to the tensor that is replaced.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> in which we do the replacement.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor to replace.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>New expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="486" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="486" bodyend="489" declfile="src/marty/core/mrtInterface.h" declline="640" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab72fd3e5ad04cb6d002237449ec9eef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Replaced</definition>
        <argsstring>(mty::Model &amp;model, csl::Tensor &amp;init, csl::Tensor &amp;target)</argsstring>
        <name>Replaced</name>
        <qualifiedname>mty::Replaced</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Replaces an expression in all kinetic / mass / interactions terms of a model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> in which we do the replacement.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor to replace.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>New tensor, should have the same structure as the replaced one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="491" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="491" bodyend="494" declfile="src/marty/core/mrtInterface.h" declline="648" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8f1b45966e9a2a4e113c77670af23ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Replaced</definition>
        <argsstring>(mty::Model &amp;model, Particle const &amp;particle, csl::Expr const &amp;newTerm)</argsstring>
        <name>Replaced</name>
        <qualifiedname>mty::Replaced</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>newTerm</declname>
        </param>
        <briefdescription>
<para>Replaces a particle in all kinetic / mass / interactions terms of a model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> in which we do the replacement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newTerm</parametername>
</parameternamelist>
<parameterdescription>
<para>New expression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>The overload of this function with 4 parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="496" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="496" bodyend="501" declfile="src/marty/core/mrtInterface.h" declline="658" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a32c845d2f973b9dd123eb7a27caaba69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Rotate</definition>
        <argsstring>(mty::Model &amp;model, std::vector&lt; mty::Particle &gt; const &amp;fields, std::vector&lt; mty::Particle &gt; const &amp;newFields, std::vector&lt; std::vector&lt; csl::Expr &gt; &gt; const &amp;rotation, bool diagonalizeMasses=false)</argsstring>
        <name>Rotate</name>
        <qualifiedname>mty::Rotate</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>newFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &gt; const &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>diagonalizeMasses</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Rotates a bunch of fields to another using a given matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>A useful feature for model building is field rotation. For example when dealing with non trivial mass matrices, one could want to diagonalize them by rotating fields. For example, in a theory with two real scalar fields <formula id="186">$ \phi _1(X) $</formula> and <formula id="187">$ \phi _2(X) $</formula> with a lagrangian containing    <formula id="188">\[ \mathcal{L} \ni -\frac{1}{2}m^2(\phi _1^2 + 2\phi _1\phi _2 +
\phi _2^2)
    - \frac{\lambda}{3!}\phi _1^3,
\]</formula> one may want to replace  <formula id="189">$ \phi _1 \rightarrow (\phi _1+ \phi _2)/\sqrt{2}
$</formula> massive field, and  <formula id="190">$ \phi _2\rightarrow (\phi _1 - \phi _2)/\sqrt{2}
$</formula> massless field. The corresponding rotation reads           <formula id="191">\[
    \left(\begin{array}{c}
    \phi _1 \\ \phi _2
    \end{array}\right) =  \frac{1}{\sqrt{2}}
    \left(\begin{array}{c c}
    1 &amp; 1 \\ 1 &amp; -1
    \end{array}\right)\cdot
    \left(\begin{array}{c}
    \tilde{\phi} _1 \\ \tilde{\phi}_2
    \end{array}\right).
\]</formula> Applying that rotation in a code would look like (given all fields and the model variables already exist): <programlisting><codeline><highlight class="normal"><ref refid="namespacemty_1a32c845d2f973b9dd123eb7a27caaba69" kindref="member">Rotate</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{phi1,<sp/>phi2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{phi_1_tilde,<sp/>phi_2_tilde},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{1<sp/>/<sp/>csl::sqrt_s(2),<sp/><sp/>1<sp/>/<sp/>csl::sqrt_s(2)},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1<sp/>/<sp/>csl::sqrt_s(2),<sp/>-1<sp/>/<sp/>csl::sqrt_s(2)}}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
</programlisting> The rotation will yield the final lagrangian (getting rid of the tildas):      <formula id="192">\[
     \mathcal{L} \ni -\frac{1}{2}m^2\phi _1^2
     - \frac{\lambda}{12\sqrt{2}}\left(\phi _1^3 + \phi _2^3\right)
     - \frac{\lambda}{6\sqrt{2}}\left(\phi _1\phi _2^2 + \phi _1^2\phi _2
     \right).
\]</formula> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> in which we rotate particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial fields to rotate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newFields</parametername>
</parameternamelist>
<parameterdescription>
<para>New fields after the rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonalizeMasses</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean (optional, default = false). If true, all non diagonal mass term between new fields are suppressed after the rotation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="503" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="503" bodyend="510" declfile="src/marty/core/mrtInterface.h" declline="711" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afcfa416c0573e084103c97efb531db3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Rotate</definition>
        <argsstring>(mty::Model &amp;model, std::vector&lt; std::string &gt; const &amp;fields, std::vector&lt; std::string &gt; const &amp;newFields, std::vector&lt; std::vector&lt; csl::Expr &gt; &gt; const &amp;rotation, bool diagonalizeMasses=false)</argsstring>
        <name>Rotate</name>
        <qualifiedname>mty::Rotate</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>newFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &gt; const &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>diagonalizeMasses</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Rotates a bunch of fields to another using a given matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> in which we rotate particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial names of the fields to rotate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newFields</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of the new fields after the rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonalizeMasses</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean (optional, default = false). If true, all non diagonal mass term between new fields are suppressed after the rotation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>The overload of this function taking <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> as parameter instead of names. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="512" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="512" bodyend="525" declfile="src/marty/core/mrtInterface.h" declline="728" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8b84f94cefa2bfa89ffec0fa10f1ae82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::DiagonalizeMassMatrices</definition>
        <argsstring>(mty::Model &amp;model)</argsstring>
        <name>DiagonalizeMassMatrices</name>
        <qualifiedname>mty::DiagonalizeMassMatrices</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="527" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="527" bodyend="531" declfile="src/marty/core/mrtInterface.h" declline="734" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab1d5c668299709a7d1d78c98a3bdc2cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::BreakGaugeSymmetry</definition>
        <argsstring>(mty::Model &amp;model, std::string const &amp;brokenGroup, std::vector&lt; Particle &gt; const &amp;brokenFields, std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;newNames)</argsstring>
        <name>BreakGaugeSymmetry</name>
        <qualifiedname>mty::BreakGaugeSymmetry</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>brokenGroup</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> &gt; const &amp;</type>
          <declname>brokenFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="533" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="533" bodyend="539" declfile="src/marty/core/mrtInterface.h" declline="736" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8ea4fc2ff24ad2790bea92a0f00296a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::BreakGaugeSymmetry</definition>
        <argsstring>(mty::Model &amp;model, std::string const &amp;brokenGroup, std::initializer_list&lt; std::string &gt; const &amp;brokenFields, std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;newNames)</argsstring>
        <name>BreakGaugeSymmetry</name>
        <qualifiedname>mty::BreakGaugeSymmetry</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>brokenGroup</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; std::string &gt; const &amp;</type>
          <declname>brokenFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="541" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="541" bodyend="550" declfile="src/marty/core/mrtInterface.h" declline="741" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa6b9d3eb5ea8587075a15c6d6dfe30d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::BreakFlavorSymmetry</definition>
        <argsstring>(mty::Model &amp;model, std::string const &amp;brokenFlavor, std::initializer_list&lt; std::string &gt; const &amp;brokenFields, std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;newNames)</argsstring>
        <name>BreakFlavorSymmetry</name>
        <qualifiedname>mty::BreakFlavorSymmetry</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>brokenFlavor</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; std::string &gt; const &amp;</type>
          <declname>brokenFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="552" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="552" bodyend="563" declfile="src/marty/core/mrtInterface.h" declline="746" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae7f1c7e4919e4a16beca456526454806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::BreakFlavorSymmetry</definition>
        <argsstring>(mty::Model &amp;model, std::string const &amp;brokenFlavor, std::vector&lt; mty::Particle &gt; const &amp;brokenFields, std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;newNames)</argsstring>
        <name>BreakFlavorSymmetry</name>
        <qualifiedname>mty::BreakFlavorSymmetry</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>brokenFlavor</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>brokenFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="565" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="565" bodyend="571" declfile="src/marty/core/mrtInterface.h" declline="752" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a878d93c2f3f89bc9b2041c190510b47e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Refreshed</definition>
        <argsstring>(mty::Model &amp;model)</argsstring>
        <name>Refreshed</name>
        <qualifiedname>mty::Refreshed</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="573" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="573" bodyend="576" declfile="src/marty/core/mrtInterface.h" declline="770" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a72268d0a1ddc662750dfcc35daa884ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::IntegrateOutParticle</definition>
        <argsstring>(mty::Particle &amp;particle, bool value)</argsstring>
        <name>IntegrateOutParticle</name>
        <qualifiedname>mty::IntegrateOutParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="578" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="578" bodyend="581" declfile="src/marty/core/mrtInterface.h" declline="772" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7c5ede05834b930937ca58ceea28c787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">mty::SemiSimpleAlgebra</ref> &gt;</type>
        <definition>std::unique_ptr&lt; mty::SemiSimpleAlgebra &gt; mty::CreateAlgebra</definition>
        <argsstring>(algebra::Type type, int l=-1)</argsstring>
        <name>CreateAlgebra</name>
        <qualifiedname>mty::CreateAlgebra</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062a" kindref="member">algebra::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Creates a specilization of <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> of type <bold>type</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para>For a non exceptional algebra, i.e. different of <formula id="119">$ E_6 $</formula>, <formula id="120">$ E_7 $</formula>, <formula id="121">$ E_8 $</formula>, <formula id="112">$ F_4 $</formula>, or <formula id="122">$ G_2 $</formula>; the rank <bold>l</bold> of the algebra must be given to specify the dimension: <formula id="193">$ A_l $</formula> for <formula id="194">$ SU(l+1) $</formula>, <formula id="195">$ B_l $</formula>, <formula id="196">$ C_l $</formula>, <formula id="197">$ D_l $</formula>. For example, <formula id="198">$ A_{N-1} $</formula> being the algebra of <formula id="104">$ SU(N) $</formula>, the code allowing to get <formula id="199">$ SU(5) $</formula> is: <programlisting><codeline><highlight class="comment">//<sp/>std::unique_ptr&lt;mty::SemiSimpleAlgebra&gt;<sp/>may<sp/>be<sp/>replaced<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>auto<sp/>keyword<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::unique_ptr&lt;mty::SemiSimpleAlgebra&gt;<sp/>SU_5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>createAlgebra(<ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062aa7fc56270e7a70fa81a5935b72eacbe29" kindref="member">algebra::Type::A</ref>,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>SU_5<sp/>is<sp/>a<sp/>non-copyable<sp/>pointer<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SU_5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>std::unique_ptr&lt;SemiSimpleAlgebra&gt;:<sp/>use<sp/>-&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SU_5.get();<sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>raw<sp/>pointer<sp/>SemiSimpleAlgebra*<sp/><sp/><sp/><sp/>:<sp/>use<sp/>-&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">*SU_5;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>SemiSimpleAlgebra<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>use<sp/>.</highlight></codeline>
</programlisting> <simplesect kind="note"><para>A std::unique_ptr is not copyable. But the raw pointer inside may be copied. The raw pointer is accessible by u_ptr.get(). See the manual of CSL for more information. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Element of the enum <ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062a" kindref="member">algebra::Type</ref>, specifying the type of the algebra to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer, rank of the algebra for non exceptional algebras. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::unique_ptr to the <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="589" column="17" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="589" bodyend="627" declfile="src/marty/core/mrtInterface.h" declline="809" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aad169f4a25233cd2274f9449b3fe7751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref></type>
        <definition>mty::Irrep mty::GetIrrep</definition>
        <argsstring>(mty::SemiSimpleAlgebra const *algebra, std::vector&lt; int &gt; const &amp;labels)</argsstring>
        <name>GetIrrep</name>
        <qualifiedname>mty::GetIrrep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">mty::SemiSimpleAlgebra</ref> const *</type>
          <declname>algebra</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="629" column="12" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="629" bodyend="633" declfile="src/marty/core/mrtInterface.h" declline="812" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae5182e5b1e84e7c813180caa91214cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref></type>
        <definition>mty::Irrep mty::GetIrrep</definition>
        <argsstring>(std::unique_ptr&lt; mty::SemiSimpleAlgebra &gt; const &amp;algebra, std::vector&lt; int &gt; const &amp;labels)</argsstring>
        <name>GetIrrep</name>
        <qualifiedname>mty::GetIrrep</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">mty::SemiSimpleAlgebra</ref> &gt; const &amp;</type>
          <declname>algebra</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="635" column="12" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="635" bodyend="639" declfile="src/marty/core/mrtInterface.h" declline="815" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af1989ece6436f50c6c9c9a9cd4506937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref></type>
        <definition>mty::Irrep mty::GetConjugateRep</definition>
        <argsstring>(mty::Irrep const &amp;rep)</argsstring>
        <name>GetConjugateRep</name>
        <qualifiedname>mty::GetConjugateRep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="641" column="12" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="641" bodyend="644" declfile="src/marty/core/mrtInterface.h" declline="818" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab1bedc77f63928ac41311fcc507757fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">mty::SemiSimpleAlgebra</ref> const *</type>
        <definition>mty::SemiSimpleAlgebra const  * mty::GetAlgebraOf</definition>
        <argsstring>(mty::Irrep const &amp;rep)</argsstring>
        <name>GetAlgebraOf</name>
        <qualifiedname>mty::GetAlgebraOf</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="646" column="30" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="646" bodyend="649" declfile="src/marty/core/mrtInterface.h" declline="820" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a90eb61ae6ed5f415fd60142a5b8255c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::GetDimension</definition>
        <argsstring>(mty::Irrep const &amp;irrep)</argsstring>
        <name>GetDimension</name>
        <qualifiedname>mty::GetDimension</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="651" column="5" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="651" bodyend="654" declfile="src/marty/core/mrtInterface.h" declline="822" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a399e25d62d5cf416e380356f52a88659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ContainsIrrep</definition>
        <argsstring>(mty::SumIrrep const &amp;decomposition, mty::Irrep const &amp;irrep)</argsstring>
        <name>ContainsIrrep</name>
        <qualifiedname>mty::ContainsIrrep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1SumIrrep" kindref="compound">mty::SumIrrep</ref> const &amp;</type>
          <declname>decomposition</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref> const &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="656" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="656" bodyend="662" declfile="src/marty/core/mrtInterface.h" declline="824" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae2da925d19b95925c7082c1c2ab0e6e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ContainsTrivialrep</definition>
        <argsstring>(mty::SumIrrep const &amp;decomposition)</argsstring>
        <name>ContainsTrivialrep</name>
        <qualifiedname>mty::ContainsTrivialrep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1SumIrrep" kindref="compound">mty::SumIrrep</ref> const &amp;</type>
          <declname>decomposition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="664" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="664" bodyend="670" declfile="src/marty/core/mrtInterface.h" declline="827" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a35812b1150276d8d34e5066074a660df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SetGaugeChoice</definition>
        <argsstring>(mty::Model &amp;model, std::string const &amp;nameParticle, mty::gauge::Type choice)</argsstring>
        <name>SetGaugeChoice</name>
        <qualifiedname>mty::SetGaugeChoice</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameParticle</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1_1gauge_1a8fd05434cb655735bb18cda43a626a9f" kindref="member">mty::gauge::Type</ref></type>
          <declname>choice</declname>
        </param>
        <briefdescription>
<para>This function changes the gauge fixing parameter for the gauge boson of name <bold>nameGroup</bold>. Depending on this choice, the propagator of gauge bosons is modified. </para>
        </briefdescription>
        <detaileddescription>
<para>The propagator of a gauge boson is   <formula id="200">\[
-i\frac{g_{\mu\nu} - (1-\xi)\frac{p_\mu p_\nu}{p^2 - \xi M^2}}{p^2-M^2}
\]</formula>, with <formula id="78">$ M $</formula> the mass of the particle. The Lorentz gauge corresponds to <formula id="80">$ \xi=0$</formula>, the Feynman gauge to <formula id="201">$ \xi=1$</formula>, the Unitary gauge to <formula id="84">$ \xi=\infty$</formula>. Finally the choice NoGauge let <formula id="202">$ \xi$</formula> free, for the so-called <formula id="203">$\mathcal{R}_\xi$</formula> gauge. For more information see <ref refid="namespacemty_1_1gauge_1a8fd05434cb655735bb18cda43a626a9f" kindref="member">gauge::Type</ref>.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> in which the particle is present.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameParticle</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref> to modify.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>choice</parametername>
</parameternamelist>
<parameterdescription>
<para>New gauge fixing choice, element of <ref refid="namespacemty_1_1gauge_1a8fd05434cb655735bb18cda43a626a9f" kindref="member">gauge::Type</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="672" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="672" bodyend="677" declfile="src/marty/core/mrtInterface.h" declline="842" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a06bc88132951ecab850b4a0e15c6b23e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SetGaugeChoice</definition>
        <argsstring>(mty::Particle particle, mty::gauge::Type choice)</argsstring>
        <name>SetGaugeChoice</name>
        <qualifiedname>mty::SetGaugeChoice</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
          <declname>particle</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1_1gauge_1a8fd05434cb655735bb18cda43a626a9f" kindref="member">mty::gauge::Type</ref></type>
          <declname>choice</declname>
        </param>
        <briefdescription>
<para>This function changes the gauge choice in <bold>model</bold> for the gauge boson <bold>particle</bold>. Depending on this choice, the propagator of gauge bosons is modified. </para>
        </briefdescription>
        <detaileddescription>
<para>The propagator of a gauge boson is   <formula id="200">\[
-i\frac{g_{\mu\nu} - (1-\xi)\frac{p_\mu p_\nu}{p^2 - \xi M^2}}{p^2-M^2}
\]</formula>, with <formula id="78">$ M $</formula> the mass of the particle. The Lorentz gauge corresponds to <formula id="80">$ \xi=0$</formula>, the Feynman gauge to <formula id="201">$ \xi=1$</formula>, the Unitary gauge to <formula id="84">$ \xi=\infty$</formula>. Finally the choice NoGauge let <formula id="202">$ \xi$</formula> free, for the so-called <formula id="203">$\mathcal{R}_\xi$</formula> gauge. For more information see <ref refid="namespacemty_1_1gauge_1a8fd05434cb655735bb18cda43a626a9f" kindref="member">gauge::Type</ref>.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> (must be a <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref>) for gauge fixing.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>choice</parametername>
</parameternamelist>
<parameterdescription>
<para>New gauge fixing choice, element of <ref refid="namespacemty_1_1gauge_1a8fd05434cb655735bb18cda43a626a9f" kindref="member">gauge::Type</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="679" column="6" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="679" bodyend="682" declfile="src/marty/core/mrtInterface.h" declline="860" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a97e91fbff0db494f39bfc53c591f5171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mty::FindProcessName</definition>
        <argsstring>(std::string const &amp;initName, std::vector&lt; Insertion &gt; const &amp;insertions)</argsstring>
        <name>FindProcessName</name>
        <qualifiedname>mty::FindProcessName</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>initName</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.cpp" line="684" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="684" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7eaa4d0c3a3e4e841662d4f31c6ad310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::GaugeIndex</definition>
        <argsstring>(std::string const &amp;nameIndex, mty::Model const &amp;model, GroupType &amp;&amp;group, FieldType &amp;&amp;part)</argsstring>
        <name>GaugeIndex</name>
        <qualifiedname>mty::GaugeIndex</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameIndex</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> living in the representation of a certain field in a certain group. </para>
        </briefdescription>
        <detaileddescription>
<para>The model must be given to access the gauge group. The group can be given in the form of a std::string, the name of the group. Finally, the field is given as a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref>. For example, for the standard model &apos;SM&apos; (a <ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> object), the &apos;SU3_c&apos; group, one can get an index with the right name in the octet representation of the gluon &apos;g&apos; with the following code: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>A<sp/>=<sp/>mty::GaugeIndex(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>SM,<sp/></highlight><highlight class="stringliteral">&quot;SU3_c&quot;</highlight><highlight class="normal">,<sp/>g);<sp/></highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function getGroup() </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function getParticle() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Name for the generated index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> that generated the index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index named <bold>nameIndex</bold> living in the vector space (<ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>) of the representation of <bold>part</bold> in the group named <bold>nameGroup</bold>, in the model <bold>model</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="160" column="12" bodyfile="src/marty/core/mrtInterface.h" bodystart="160" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a17c2d65f032e8b47d19c78e8100a40e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::FlavorIndex</definition>
        <argsstring>(mty::Model const &amp;model, GroupType &amp;&amp;group)</argsstring>
        <name>FlavorIndex</name>
        <qualifiedname>mty::FlavorIndex</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> for a given flavor group. </para>
        </briefdescription>
        <detaileddescription>
<para>The model must be given to access the flavor group. The group can be given in the form of a std::string, the name of the group. Finally, the field is given as a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref>* or valid type for the function getGroup() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> that generated the index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index living in the vector space (<ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>) of the fundamental representation of the group named <bold>group</bold>, in the model <bold>model</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="186" column="12" bodyfile="src/marty/core/mrtInterface.h" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8061773a54a3ecb675893304aea36ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>std::vector&lt; csl::Index &gt; mty::FlavorIndices</definition>
        <argsstring>(size_t nIndices, mty::Model const &amp;model, GroupType &amp;&amp;group)</argsstring>
        <name>FlavorIndices</name>
        <qualifiedname>mty::FlavorIndices</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nIndices</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns indices for a given flavor group. </para>
        </briefdescription>
        <detaileddescription>
<para>The model must be given to access the flavor group. The group can be given in the form of a std::string, the name of the group. Finally, the field is given as a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref>* or valid type for the function getGroup() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> that generated the index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Indices living in the vector space (<ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>) of the fundamental representation of the group named <bold>group</bold>, in the model <bold>model</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="207" column="1" bodyfile="src/marty/core/mrtInterface.h" bodystart="207" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a95f239a2af2360fc129b66af65acdac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::GaugeIndex</definition>
        <argsstring>(mty::Model const &amp;model, GroupType &amp;&amp;group, FieldType &amp;&amp;part)</argsstring>
        <name>GaugeIndex</name>
        <qualifiedname>mty::GaugeIndex</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> living in the representation of a certain field in a certain group. </para>
        </briefdescription>
        <detaileddescription>
<para>The model must be given to access the gauge group. The group can be given in the form of a std::string, the name of the group. Finally, the field is given as a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref>. For example, for the standard model &apos;SM&apos; (a <ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> object), the &apos;SU3_c&apos; group, one can get an index with the right name in the octet representation of the gluon &apos;g&apos; with the following code: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>A<sp/>=<sp/>mty::GaugeIndex(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>SM,<sp/></highlight><highlight class="stringliteral">&quot;SU3_c&quot;</highlight><highlight class="normal">,<sp/>g);<sp/></highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function getGroup() </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function getParticle() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> that generated the index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index living in the vector space (<ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>) of the representation of <bold>part</bold> in the group named <bold>nameGroup</bold>, in the model <bold>model</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="239" column="1" bodyfile="src/marty/core/mrtInterface.h" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad7317ee792beaa6b9e42785b4541d021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>std::vector&lt; csl::Index &gt; mty::GaugeIndices</definition>
        <argsstring>(size_t nIndices, mty::Model const &amp;model, GroupType &amp;&amp;group, FieldType &amp;&amp;part)</argsstring>
        <name>GaugeIndices</name>
        <qualifiedname>mty::GaugeIndices</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nIndices</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Returns indices living in the representation of a certain field in a certain group. </para>
        </briefdescription>
        <detaileddescription>
<para>The model must be given to access the gauge group. The group must be given in the form of a std::string, the name of the group. Finally, the field is given as a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref>. For example, for the standard model &apos;SM&apos; (a <ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> object), the &apos;SU3_c&apos; group, one can get an index with the right name in the octet representation of the gluon &apos;g&apos; with the following code: <programlisting><codeline><highlight class="normal"><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref><sp/>A<sp/>=<sp/>mty::GaugeIndex(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>SM,<sp/></highlight><highlight class="stringliteral">&quot;SU3_c&quot;</highlight><highlight class="normal">,<sp/>g);<sp/></highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function getGroup() </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function getParticle() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indices to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> that generated the index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Indices living in the vector space (<ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>) of the representation of <bold>part</bold> in the group named <bold>nameGroup</bold>, in the model <bold>model</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="267" column="13" bodyfile="src/marty/core/mrtInterface.h" bodystart="267" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa9d1deed27425d8c27873a7aa27b42a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::DiracProjector</definition>
        <argsstring>(Chirality chir)</argsstring>
        <name>DiracProjector</name>
        <qualifiedname>mty::DiracProjector</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112" kindref="member">Chirality</ref></type>
          <declname>chir</declname>
        </param>
        <briefdescription>
<para>Returns a projector in Dirac 4-dim space depending on a chirality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chir</parametername>
</parameternamelist>
<parameterdescription>
<para>Chirality</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Left projector <formula id="184">$ P_L $</formula> for left chirality. </para>
</simplesect>
<simplesect kind="return"><para>Right projector <formula id="185">$ P_R $</formula> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="404" column="20" bodyfile="src/marty/core/mrtInterface.h" bodystart="404" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a988ef8926fa88baa2956392f87392cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Generator" kindref="compound">mty::Generator</ref></type>
        <definition>mty::Generator mty::GetGenerator</definition>
        <argsstring>(mty::Model &amp;model, GroupType &amp;&amp;group, FieldType &amp;&amp;field)</argsstring>
        <name>GetGenerator</name>
        <qualifiedname>mty::GetGenerator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns the generator coresponding to the representation of a field in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function getGroup() </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function getParticle() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The generator coresponding to the representation of a field in a given group if it exists. </para>
</simplesect>
<simplesect kind="return"><para>nullptr else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="427" column="1" bodyfile="src/marty/core/mrtInterface.h" bodystart="427" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad7a60f314c859883e9bbfe2a5d0234fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>csl::Space const  * mty::GetVectorSpace</definition>
        <argsstring>(mty::Model &amp;model, GroupType &amp;&amp;group, FieldType &amp;&amp;field)</argsstring>
        <name>GetVectorSpace</name>
        <qualifiedname>mty::GetVectorSpace</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns the vector space corresponding the the representation of a given field in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para>Group* or group name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> or any type (including a name) that the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">ModelData::getParticle()</ref> takes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group in which we search the representation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> from which we take the representation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector space for the representation of <bold>field</bold> in <bold>group</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="449" column="1" bodyfile="src/marty/core/mrtInterface.h" bodystart="449" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3eb80b2a65554796247c1889209465cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>csl::Space const  * mty::GetVectorSpace</definition>
        <argsstring>(mty::Model &amp;model, GroupType &amp;&amp;group)</argsstring>
        <name>GetVectorSpace</name>
        <qualifiedname>mty::GetVectorSpace</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns the vector space corresponding to a flavor group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para>FlavorGroup* or flavor group name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> group in which we search the representation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector space of the <bold>flavor</bold> <bold>group</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="466" column="1" bodyfile="src/marty/core/mrtInterface.h" bodystart="466" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a475dd4feae32c08d1b0e5cd5e5bda512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::Display</definition>
        <argsstring>(T const &amp;printable, std::ostream &amp;out=std::cout)</argsstring>
        <name>Display</name>
        <qualifiedname>mty::Display</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>printable</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="524" column="6" bodyfile="src/marty/core/mrtInterface.h" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7bed2975bac5f8b01c2fa66912aebf84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::AddGaugedGroup</definition>
        <argsstring>(mty::Model &amp;model, Args &amp;&amp;... args)</argsstring>
        <name>AddGaugedGroup</name>
        <qualifiedname>mty::AddGaugedGroup</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="552" column="6" bodyfile="src/marty/core/mrtInterface.h" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7bce1c94db00ff8be361429f2fa94e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::AddFlavorGroup</definition>
        <argsstring>(mty::Model &amp;model, Args &amp;&amp;... args)</argsstring>
        <name>AddFlavorGroup</name>
        <qualifiedname>mty::AddFlavorGroup</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="558" column="6" bodyfile="src/marty/core/mrtInterface.h" bodystart="558" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aeb22846212a8d3e8dc4df3edd1e2d66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::SetMass</definition>
        <argsstring>(Particle &amp;part, Args &amp;&amp;... args)</argsstring>
        <name>SetMass</name>
        <qualifiedname>mty::SetMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="601" column="6" bodyfile="src/marty/core/mrtInterface.h" bodystart="601" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af25bc000f1b6f2880446b4165e41f6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::SetWidth</definition>
        <argsstring>(Particle &amp;part, Args &amp;&amp;... args)</argsstring>
        <name>SetWidth</name>
        <qualifiedname>mty::SetWidth</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="607" column="6" bodyfile="src/marty/core/mrtInterface.h" bodystart="607" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acc4639ab6b023bc575397cd67dcb845b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::BreakGaugeSymmetry</definition>
        <argsstring>(mty::Model &amp;model, Args &amp;&amp;... args)</argsstring>
        <name>BreakGaugeSymmetry</name>
        <qualifiedname>mty::BreakGaugeSymmetry</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="759" column="6" bodyfile="src/marty/core/mrtInterface.h" bodystart="759" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afc93942bf3ce1a698929994ed7339f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::BreakFlavorSymmetry</definition>
        <argsstring>(mty::Model &amp;model, Args &amp;&amp;... args)</argsstring>
        <name>BreakFlavorSymmetry</name>
        <qualifiedname>mty::BreakFlavorSymmetry</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="765" column="6" bodyfile="src/marty/core/mrtInterface.h" bodystart="765" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a66f6c0cb581631e9b9887628d46d5c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mty::FindProcessName</definition>
        <argsstring>(std::string const &amp;initName, std::vector&lt; mty::Insertion &gt; const &amp;insertions)</argsstring>
        <name>FindProcessName</name>
        <qualifiedname>mty::FindProcessName</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>initName</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterface.h" line="862" column="13" bodyfile="src/marty/core/mrtInterface.cpp" bodystart="684" bodyend="707" declfile="src/marty/core/mrtInterface.h" declline="862" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0fd59449d65c281e6fe33b1a1c0c39d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref></type>
        <definition>Amplitude mty::SelfEnergy</definition>
        <argsstring>(mty::Order order, mty::Particle &amp;particle)</argsstring>
        <name>SelfEnergy</name>
        <qualifiedname>mty::SelfEnergy</qualifiedname>
        <param>
          <type>mty::Order</type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="35" column="18" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af0c8578caec529bf1bde74aee9713495" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref></type>
        <definition>Amplitude mty::SelfEnergy</definition>
        <argsstring>(mty::Particle &amp;particle)</argsstring>
        <name>SelfEnergy</name>
        <qualifiedname>mty::SelfEnergy</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="40" column="18" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a65526d1f878fe6c03c4c93c24fd15c6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1FeynmanRule" kindref="compound">FeynmanRule</ref> &gt;</type>
        <definition>std::vector&lt; FeynmanRule &gt; mty::ComputeFeynmanRules</definition>
        <argsstring>()</argsstring>
        <name>ComputeFeynmanRules</name>
        <qualifiedname>mty::ComputeFeynmanRules</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="45" column="20" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a92503840cb0ec96b963039c5d8df9953" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::AddGaugedGroup</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>AddGaugedGroup</name>
        <qualifiedname>mty::AddGaugedGroup</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="57" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a50cb771732808e871363db1cb45a625b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AddParticle</definition>
        <argsstring>(mty::Particle &amp;particle, bool initTerms=true)</argsstring>
        <name>AddParticle</name>
        <qualifiedname>mty::AddParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initTerms</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="62" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a99826daa53919bdc067f309e14eb65dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AddTerm</definition>
        <argsstring>(csl::Expr const &amp;term, bool addCC=false)</argsstring>
        <name>AddTerm</name>
        <qualifiedname>mty::AddTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addCC</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="67" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad0743212cf661b3a8a0f2a2337573df1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AddTerm</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;terms, bool addCC=false)</argsstring>
        <name>AddTerm</name>
        <qualifiedname>mty::AddTerm</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>terms</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addCC</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="72" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9a403c37ca63e9608d52afc0718ad407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::GetParticle</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>GetParticle</name>
        <qualifiedname>mty::GetParticle</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="77" column="22" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae48f4cef9c23adc2f9cc8acc43ab7dfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::PromoteGoldstone</definition>
        <argsstring>(mty::Particle &amp;goldstone, mty::Particle &amp;gaugeBoson)</argsstring>
        <name>PromoteGoldstone</name>
        <qualifiedname>mty::PromoteGoldstone</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>goldstone</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &amp;</type>
          <declname>gaugeBoson</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="82" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a393c58a04b364f52b107bb14f1944534" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::PromoteGoldstone</definition>
        <argsstring>(char const *goldstone, char const *gaugeBoson)</argsstring>
        <name>PromoteGoldstone</name>
        <qualifiedname>mty::PromoteGoldstone</qualifiedname>
        <param>
          <type>char const *</type>
          <declname>goldstone</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>gaugeBoson</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="88" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6259970f80521ff34f3aea5a14ea3bb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::GetCoupling</definition>
        <argsstring>(std::string const &amp;nameCoupling)</argsstring>
        <name>GetCoupling</name>
        <qualifiedname>mty::GetCoupling</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameCoupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="93" column="18" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aeb5288d418c4ef403b4cf553b048bdf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::GetYukawa</definition>
        <argsstring>(std::string const &amp;nameCoupling)</argsstring>
        <name>GetYukawa</name>
        <qualifiedname>mty::GetYukawa</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameCoupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="98" column="20" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3b5dbe29998cd5166d1eaa0f5bd199bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Rename</definition>
        <argsstring>(std::string const &amp;oldName, std::string const &amp;newName)</argsstring>
        <name>Rename</name>
        <qualifiedname>mty::Rename</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>oldName</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="103" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1ff9e3ed4459dcee9c65f8dacf61bb93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Init</definition>
        <argsstring>()</argsstring>
        <name>Init</name>
        <qualifiedname>mty::Init</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="108" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac2b8a2ca5f9af36170b88dbef72cf3c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Replaced</definition>
        <argsstring>(csl::Expr const &amp;init, csl::Expr const &amp;target)</argsstring>
        <name>Replaced</name>
        <qualifiedname>mty::Replaced</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="113" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a538cde0441a93bfabc7644ddfcb98112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Replaced</definition>
        <argsstring>(csl::Tensor &amp;init, csl::Expr const &amp;target)</argsstring>
        <name>Replaced</name>
        <qualifiedname>mty::Replaced</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="118" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ada63e737731a93b8293cf4eec1eced22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Replaced</definition>
        <argsstring>(csl::Tensor &amp;init, csl::Tensor &amp;target)</argsstring>
        <name>Replaced</name>
        <qualifiedname>mty::Replaced</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="123" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ada9d9f325ee1215439d550f14c6d69fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Replaced</definition>
        <argsstring>(Particle const &amp;particle, csl::Expr const &amp;newTerm)</argsstring>
        <name>Replaced</name>
        <qualifiedname>mty::Replaced</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>newTerm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="128" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af8e494e184a7286b373db45c29057efb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Rotate</definition>
        <argsstring>(std::vector&lt; mty::Particle &gt; const &amp;fields, std::vector&lt; mty::Particle &gt; const &amp;newFields, std::vector&lt; std::vector&lt; csl::Expr &gt; &gt; const &amp;rotation, bool diagonalizeMasses=false)</argsstring>
        <name>Rotate</name>
        <qualifiedname>mty::Rotate</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>newFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &gt; const &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>diagonalizeMasses</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="133" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="133" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8be3904fab27b69be9de42b87abdf391" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Rotate</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;fields, std::vector&lt; std::string &gt; const &amp;newFields, std::vector&lt; std::vector&lt; csl::Expr &gt; &gt; const &amp;rotation, bool diagonalizeMasses=false)</argsstring>
        <name>Rotate</name>
        <qualifiedname>mty::Rotate</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>newFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &gt; const &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>diagonalizeMasses</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="142" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="142" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aad8d6ace137651d937a75e7d3cf8698d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::DiagonalizeMassMatrices</definition>
        <argsstring>()</argsstring>
        <name>DiagonalizeMassMatrices</name>
        <qualifiedname>mty::DiagonalizeMassMatrices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="151" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa95ea824ebd9745ef5a5d4dbfdb84ada" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::BreakGaugeSymmetry</definition>
        <argsstring>(std::string const &amp;brokenGroup, std::vector&lt; Particle &gt; const &amp;brokenFields, std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;newNames)</argsstring>
        <name>BreakGaugeSymmetry</name>
        <qualifiedname>mty::BreakGaugeSymmetry</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>brokenGroup</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> &gt; const &amp;</type>
          <declname>brokenFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="157" column="1" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="157" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a5cbd3b6c37cb0f557245d80ac5436ca3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::BreakGaugeSymmetry</definition>
        <argsstring>(std::string const &amp;brokenGroup, std::initializer_list&lt; std::string &gt; const &amp;brokenFields, std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;newNames)</argsstring>
        <name>BreakGaugeSymmetry</name>
        <qualifiedname>mty::BreakGaugeSymmetry</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>brokenGroup</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; std::string &gt; const &amp;</type>
          <declname>brokenFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="166" column="1" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="166" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7b757bacff7588260796b502f2509fb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::BreakFlavorSymmetry</definition>
        <argsstring>(std::string const &amp;brokenFlavor, std::initializer_list&lt; std::string &gt; const &amp;brokenFields, std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;newNames)</argsstring>
        <name>BreakFlavorSymmetry</name>
        <qualifiedname>mty::BreakFlavorSymmetry</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>brokenFlavor</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; std::string &gt; const &amp;</type>
          <declname>brokenFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="175" column="1" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab8d262e4413230d1e87826b33a7f4de5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::BreakFlavorSymmetry</definition>
        <argsstring>(std::string const &amp;brokenFlavor, std::vector&lt; mty::Particle &gt; const &amp;brokenFields, std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;newNames)</argsstring>
        <name>BreakFlavorSymmetry</name>
        <qualifiedname>mty::BreakFlavorSymmetry</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>brokenFlavor</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>brokenFields</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::string &gt; &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="184" column="1" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a587a1b2fabe4eb35176b22619b60b210" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::Refreshed</definition>
        <argsstring>()</argsstring>
        <name>Refreshed</name>
        <qualifiedname>mty::Refreshed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="192" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a73d85b66004fb9fcae7e79271d8cd553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::SetGaugeChoice</definition>
        <argsstring>(std::string const &amp;nameParticle, gauge::Type choice)</argsstring>
        <name>SetGaugeChoice</name>
        <qualifiedname>mty::SetGaugeChoice</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>nameParticle</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1_1gauge_1a8fd05434cb655735bb18cda43a626a9f" kindref="member">gauge::Type</ref></type>
          <declname>choice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtInterfaceCurrent.h" line="203" column="13" bodyfile="src/marty/core/mrtInterfaceCurrent.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a08aa187b76c4ef10e221aaa64d72266a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mty::IsOfType</definition>
        <argsstring>(std::shared_ptr&lt; const U &gt; const &amp;expr)</argsstring>
        <name>IsOfType</name>
        <qualifiedname>mty::IsOfType</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; const U &gt; const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="32" column="6" bodyfile="src/marty/core/mrtUtils.h" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1e931449838c44508b3b5a31608522ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mty::IsOfType</definition>
        <argsstring>(U const *expr)</argsstring>
        <name>IsOfType</name>
        <qualifiedname>mty::IsOfType</qualifiedname>
        <param>
          <type>U const *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="39" column="6" bodyfile="src/marty/core/mrtUtils.h" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1faa671df885f45f57ea4ce717408785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mty::IsOfType</definition>
        <argsstring>(U const &amp;expr)</argsstring>
        <name>IsOfType</name>
        <qualifiedname>mty::IsOfType</qualifiedname>
        <param>
          <type>U const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="46" column="6" bodyfile="src/marty/core/mrtUtils.h" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad29f51bb757be677b7eff6840f503162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; T &gt;</type>
        <definition>std::shared_ptr&lt; T &gt; mty::ConvertToShared</definition>
        <argsstring>(std::shared_ptr&lt; U &gt; const &amp;expr)</argsstring>
        <name>ConvertToShared</name>
        <qualifiedname>mty::ConvertToShared</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="53" column="17" bodyfile="src/marty/core/mrtUtils.h" bodystart="53" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8d52d6083da9ac2793a78d74b8bbaf7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * mty::ConvertToPtr</definition>
        <argsstring>(std::shared_ptr&lt; U &gt; const &amp;expr)</argsstring>
        <name>ConvertToPtr</name>
        <qualifiedname>mty::ConvertToPtr</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="65" column="3" bodyfile="src/marty/core/mrtUtils.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa63fdb91f503ce5633ff0d35b9cdf985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T * mty::ConvertToPtr</definition>
        <argsstring>(const U *expr)</argsstring>
        <name>ConvertToPtr</name>
        <qualifiedname>mty::ConvertToPtr</qualifiedname>
        <param>
          <type>const U *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="71" column="9" bodyfile="src/marty/core/mrtUtils.h" bodystart="71" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a81a02f4a1a9c0e31d375c74b712a931c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T mty::ConvertTo</definition>
        <argsstring>(std::shared_ptr&lt; U &gt; const &amp;expr)</argsstring>
        <name>ConvertTo</name>
        <qualifiedname>mty::ConvertTo</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; U &gt; const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="84" column="3" bodyfile="src/marty/core/mrtUtils.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a209fa529ae40d1c37f987277dc2d9a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; mty::ConvertTo</definition>
        <argsstring>(std::shared_ptr&lt; U &gt; &amp;expr)</argsstring>
        <name>ConvertTo</name>
        <qualifiedname>mty::ConvertTo</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; U &gt; &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="90" column="3" bodyfile="src/marty/core/mrtUtils.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad486d04d770cc8d2b082daff52772a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * mty::ConvertToPtr</definition>
        <argsstring>(U *parent)</argsstring>
        <name>ConvertToPtr</name>
        <qualifiedname>mty::ConvertToPtr</qualifiedname>
        <param>
          <type>U *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/mrtUtils.h" line="96" column="3" bodyfile="src/marty/core/mrtUtils.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afed6224c29e3e08502b0cbc3e48c9be3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mty::insertionError</definition>
        <argsstring>()</argsstring>
        <name>insertionError</name>
        <qualifiedname>mty::insertionError</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="11" column="13" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="11" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0f66356319c8f9cfaccb5c71eb2db8b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::checkInsertionsForPatch</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; const &amp;insertions, bool raiseError)</argsstring>
        <name>checkInsertionsForPatch</name>
        <qualifiedname>mty::checkInsertionsForPatch</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>raiseError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="19" column="1" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="19" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7c34a0eda4ea14af3f0e56956f0415cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>static std::pair&lt; csl::Expr, csl::Expr &gt; mty::getFermions</definition>
        <argsstring>(csl::Expr const &amp;op)</argsstring>
        <name>getFermions</name>
        <qualifiedname>mty::getFermions</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="44" column="18" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="44" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac2a3354e8168f3c22069dc2029754c59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; size_t, size_t &gt;</type>
        <definition>static std::pair&lt; size_t, size_t &gt; mty::checkOperators</definition>
        <argsstring>(std::vector&lt; Wilson &gt; const &amp;wilsons, std::vector&lt; csl::Tensor &gt; const &amp;momenta)</argsstring>
        <name>checkOperators</name>
        <qualifiedname>mty::checkOperators</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; const &amp;</type>
          <declname>momenta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="69" column="1" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="69" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aefe875b32e6bce8d756663091e4aa9d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1PenguinPatchData" kindref="compound">PenguinPatchData</ref></type>
        <definition>static PenguinPatchData mty::getPenguinData</definition>
        <argsstring>(std::vector&lt; mty::Insertion &gt; const &amp;insertions, size_t iConj, size_t iReg)</argsstring>
        <name>getPenguinData</name>
        <qualifiedname>mty::getPenguinData</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Insertion" kindref="compound">mty::Insertion</ref> &gt; const &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iConj</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iReg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="107" column="25" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="107" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a20f0f2cf9213c0de70a36554698c9183" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mty::orderOperators</definition>
        <argsstring>(std::vector&lt; Wilson &gt; &amp;wilsons, csl::Tensor const &amp;p1, csl::Tensor const &amp;p2)</argsstring>
        <name>orderOperators</name>
        <qualifiedname>mty::orderOperators</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="125" column="13" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="125" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2ba8f1b76153803c979ceb7c46448d29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mty::ensureOperator</definition>
        <argsstring>(Wilson const &amp;model, Wilson &amp;target, csl::Tensor const &amp;p)</argsstring>
        <name>ensureOperator</name>
        <qualifiedname>mty::ensureOperator</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="155" column="1" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="155" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac0afc8b0b95f356c77490d8e13b4d6a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mty::ensureOperators</definition>
        <argsstring>(std::vector&lt; Wilson &gt; &amp;wilsons, csl::Tensor const &amp;p1, csl::Tensor const &amp;p2)</argsstring>
        <name>ensureOperators</name>
        <qualifiedname>mty::ensureOperators</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="184" column="13" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="184" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a62eb81aa232dfee51d4d245b5d9c3306" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mty::applyPenguinPatch_implementation</definition>
        <argsstring>(std::vector&lt; Wilson &gt; &amp;wilsons, PenguinPatchData const &amp;data)</argsstring>
        <name>applyPenguinPatch_implementation</name>
        <qualifiedname>mty::applyPenguinPatch_implementation</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1PenguinPatchData" kindref="compound">PenguinPatchData</ref> const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="198" column="13" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="198" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a77cd1b79f392395c423eccd78b0295c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::requiresPenguinPatch</definition>
        <argsstring>(Amplitude const &amp;amplitude)</argsstring>
        <name>requiresPenguinPatch</name>
        <qualifiedname>mty::requiresPenguinPatch</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref> const &amp;</type>
          <declname>amplitude</declname>
        </param>
        <briefdescription>
<para>Tells if a set of wilson coefficients requires the penguin patch implemented in this file. This function must return true for the <ref refid="namespacemty_1aa1bf611d51dd213cbf5d1b4723bfc3a3" kindref="member">applyPenguinPatch()</ref> function to work (otherwise it raises an error). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Amplitude" kindref="compound">Amplitude</ref> of the process.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the patch is required. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="237" column="6" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="237" bodyend="243" declfile="src/marty/core/penguinpatch.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa1bf611d51dd213cbf5d1b4723bfc3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::applyPenguinPatch</definition>
        <argsstring>(std::vector&lt; Wilson &gt; &amp;wilsons, Kinematics const &amp;kinematics)</argsstring>
        <name>applyPenguinPatch</name>
        <qualifiedname>mty::applyPenguinPatch</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Kinematics" kindref="compound">Kinematics</ref> const &amp;</type>
          <declname>kinematics</declname>
        </param>
        <briefdescription>
<para>Applies the patch for the on-shell calculation of penguins with massless vector. </para>
        </briefdescription>
        <detaileddescription>
<para>When the outgoing vector <formula id="13">$ A $</formula> of <formula id="205">$ \psi\to\psi A $</formula> transition is massless, the calculation of <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> coefficients requires the on-shell calculation with the inclusion of counter-terms for the corrections of external fermions. As these counter-terms are not taken care of automatically for now, this function applies gauge invariance to recover the correct result, using the fact that the result is redundant and that all quantities can be derived from the result without counter-terms. For box diagrams or penguins with massive vector boson, the calculation suffers from no issue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wilsons</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> Operator / Coefficients to correct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinematics</parametername>
</parameternamelist>
<parameterdescription>
<para>Kinematica of the process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/penguinpatch.cpp" line="245" column="6" bodyfile="src/marty/core/penguinpatch.cpp" bodystart="245" bodyend="263" declfile="src/marty/core/penguinpatch.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6e99383b0eeea16c8448419786353918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const PolarizationField &amp;pol)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1PolarizationField" kindref="compound">PolarizationField</ref> &amp;</type>
          <declname>pol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/polarization.cpp" line="354" column="1" bodyfile="src/marty/core/polarization.cpp" bodystart="354" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad7aa71394c40b33bbcfffa7ad12c1ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::propagator_s</definition>
        <argsstring>(csl::Expr const &amp;impulsion, csl::Expr const &amp;mass, csl::Expr const &amp;width)</argsstring>
        <name>propagator_s</name>
        <qualifiedname>mty::propagator_s</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>impulsion</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/propagator.cpp" line="186" column="11" bodyfile="src/marty/core/propagator.cpp" bodystart="186" bodyend="192" declfile="src/marty/core/propagator.h" declline="72" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae8ea3574ee82268927199fe53f6f2b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::fermionPropStruct_s</definition>
        <argsstring>(csl::Expr const &amp;impulsion, csl::Expr const &amp;mass, csl::Index const &amp;alpha, csl::Index const &amp;beta)</argsstring>
        <name>fermionPropStruct_s</name>
        <qualifiedname>mty::fermionPropStruct_s</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>impulsion</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/propagator.cpp" line="326" column="11" bodyfile="src/marty/core/propagator.cpp" bodystart="326" bodyend="333" declfile="src/marty/core/propagator.h" declline="126" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0160ad42a45ba270e5b36e99559ece7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112" kindref="member">Chirality</ref></type>
        <definition>Chirality mty::operator!</definition>
        <argsstring>(Chirality init)</argsstring>
        <name>operator!</name>
        <qualifiedname>mty::operator!</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112" kindref="member">Chirality</ref></type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Returns the inverse chirality with respect to init. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial chirality. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a945d5e233cf7d6240f6b783b36a374ff" kindref="member">Chirality::Left</ref></bold> if init is <ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a92b09c7c48c520c3c55e497875da437c" kindref="member">Chirality::Right</ref>. </para>
</simplesect>
<simplesect kind="return"><para><bold><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a92b09c7c48c520c3c55e497875da437c" kindref="member">Chirality::Right</ref></bold> if init is <ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a945d5e233cf7d6240f6b783b36a374ff" kindref="member">Chirality::Left</ref>. </para>
</simplesect>
<simplesect kind="return"><para><bold><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Chirality::None</ref></bold> if init is <ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Chirality::None</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="32" column="11" bodyfile="src/marty/core/quantumField.cpp" bodystart="32" bodyend="43" declfile="src/marty/core/quantumField.h" declline="50" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afbea306f48f4255f25f6bad49b3dca12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> * &gt;</type>
        <definition>vector&lt; const Space * &gt; mty::getSpaceRepresentations</definition>
        <argsstring>(Gauge *gauge, const GaugeIrrep &amp;irrep)</argsstring>
        <name>getSpaceRepresentations</name>
        <qualifiedname>mty::getSpaceRepresentations</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> *</type>
          <declname>gauge</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1GaugeIrrep" kindref="compound">GaugeIrrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="45" column="8" bodyfile="src/marty/core/quantumField.cpp" bodystart="45" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac9670e084cc9dfb7b246fba5cda8d6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, ParticleType type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ParticleType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="61" column="1" bodyfile="src/marty/core/quantumField.cpp" bodystart="61" bodyend="90" declfile="src/marty/core/quantumField.h" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a085ce97c81ca3639b587b86b3c6fcf54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref></type>
        <definition>Index mty::generateIndex</definition>
        <argsstring>(string name, const Space *space)</argsstring>
        <name>generateIndex</name>
        <qualifiedname>mty::generateIndex</qualifiedname>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="187" column="7" bodyfile="src/marty/core/quantumField.cpp" bodystart="187" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac6f3309e000154003cb2cbfd8b230b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::applyDerivative</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Expr const &amp;prop)</argsstring>
        <name>applyDerivative</name>
        <qualifiedname>mty::applyDerivative</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="301" column="11" bodyfile="src/marty/core/quantumField.cpp" bodystart="301" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acf9a3d1fcbe90b500f7959e534fa0ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const QuantumFieldParent &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="916" column="1" bodyfile="src/marty/core/quantumField.cpp" bodystart="916" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a755d00dcb75595e2ee48e1f8cde45e23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AddCustomPropagator</definition>
        <argsstring>(QuantumFieldParent *left, QuantumFieldParent *right, QuantumFieldParent::Propagator_func propagator)</argsstring>
        <name>AddCustomPropagator</name>
        <qualifiedname>mty::AddCustomPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">QuantumFieldParent::Propagator_func</ref></type>
          <declname>propagator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The propagator should of course be consistent, but may be as exotic as possible. See Propagator_func to know the exact structure of what must be given. This function may be useful for example to define the propagator between a left-handed and a right-handed fermion (different particles), or between a vector boson and its field strength...<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Left field in the propagator.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Right field in the propagator.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>New propagator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>In the case of a non symmetric propagator, the user should take into account that in its custom function, the left field will not always be the first argument. The only thing that is ensured is that if there is a complex conjugated field, it will be the second argument. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1aba9df2478df3b7be3621fa5f55c1fe8c" kindref="member">QuantumFieldParent::propagator</ref>, Propagator_func, <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="1592" column="6" bodyfile="src/marty/core/quantumField.cpp" bodystart="1592" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7afd2550bb9628ebcce9701f235db566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::AddCustomPropagator</definition>
        <argsstring>(QuantumFieldParent *autoProp, QuantumFieldParent::Propagator_func propagator)</argsstring>
        <name>AddCustomPropagator</name>
        <qualifiedname>mty::AddCustomPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>autoProp</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">QuantumFieldParent::Propagator_func</ref></type>
          <declname>propagator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The propagator should of course be consistent, but may be as exotic as possible. See Propagator_func to know the exact structure of what must be given. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Field whose propagator is modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>New propagator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1aba9df2478df3b7be3621fa5f55c1fe8c" kindref="member">QuantumFieldParent::propagator</ref>, Propagator_func, <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="1600" column="6" bodyfile="src/marty/core/quantumField.cpp" bodystart="1600" bodyend="1604"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab1473a3975d034685b09ba6785e60315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::projectOnChirality</definition>
        <argsstring>(const QuantumField &amp;field, csl::Expr &amp;expression, csl::Index alpha)</argsstring>
        <name>projectOnChirality</name>
        <qualifiedname>mty::projectOnChirality</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expression</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="1606" column="6" bodyfile="src/marty/core/quantumField.cpp" bodystart="1606" bodyend="1618"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a50d1481d5bdc669f8956b4ef3d8d13de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getMomentumSum</definition>
        <argsstring>(const vector&lt; QuantumField &gt; &amp;insertions, const vector&lt; Tensor &gt; &amp;impulsions, const Index &amp;index)</argsstring>
        <name>getMomentumSum</name>
        <qualifiedname>mty::getMomentumSum</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; &amp;</type>
          <declname>impulsions</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Creates and returns the sum of momentums in a process, taking into account incoming or outgoing particles.std. </para>
        </briefdescription>
        <detaileddescription>
<para>This sum is the one that must be zero if external states are on-shell. In particular, any calculation must yield something like    <formula id="214">\[
     i\mathcal{T} = (2\pi)^4\delta^{(4)}\left(\sum _{i_{in}}p_i
     -\sum _{j_{out}}p_j\right)\cdot i\mathcal{M},
\]</formula> where <formula id="215">$ i\mathcal{M} $</formula> is the physical amplitude of interest, <formula id="58">$ p_i $</formula> represent momentums of incoming particles, <formula id="216">$ p_j $</formula> of outgoing ones. Each component of the momentum sum must vanish. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insertions</parametername>
</parameternamelist>
<parameterdescription>
<para>Field insertions of the process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentum</parametername>
</parameternamelist>
<parameterdescription>
<para>Momentum in the process (must be the same size as <bold>insertions</bold>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for the momentum sum. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression of the momentum sum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="1620" column="11" bodyfile="src/marty/core/quantumField.cpp" bodystart="1620" bodyend="1630"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1f17cec4de2888d10c76a560b7f17c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const mty::QuantumField &amp;field)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.cpp" line="1632" column="1" bodyfile="src/marty/core/quantumField.cpp" bodystart="1632" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af9a64923c218a52b930d45c60bf946a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Chirality chir)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112" kindref="member">Chirality</ref></type>
          <declname>chir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="52" column="8" bodyfile="src/marty/core/quantumField.h" bodystart="52" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afbfe002cdec9f09c75ec185209dd2652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::quantumfield_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>quantumfield_s</name>
        <qualifiedname>mty::quantumfield_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates and returns an expression corresponding to a <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic function parameters, may be anything. Forwarded to csl::make_shared(). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="2135" column="11" bodyfile="src/marty/core/quantumField.h" bodystart="2135" bodyend="2140"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1abf24625d46779e2c356a6ddb4031a7a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getMomentumSum</definition>
        <argsstring>(const std::vector&lt; QuantumField &gt; &amp;insertions, const std::vector&lt; csl::Tensor &gt; &amp;impulsions, const csl::Index &amp;index)</argsstring>
        <name>getMomentumSum</name>
        <qualifiedname>mty::getMomentumSum</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; &amp;</type>
          <declname>insertions</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; &amp;</type>
          <declname>impulsions</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Creates and returns the sum of momentums in a process, taking into account incoming or outgoing particles.std. </para>
        </briefdescription>
        <detaileddescription>
<para>This sum is the one that must be zero if external states are on-shell. In particular, any calculation must yield something like    <formula id="214">\[
     i\mathcal{T} = (2\pi)^4\delta^{(4)}\left(\sum _{i_{in}}p_i
     -\sum _{j_{out}}p_j\right)\cdot i\mathcal{M},
\]</formula> where <formula id="215">$ i\mathcal{M} $</formula> is the physical amplitude of interest, <formula id="58">$ p_i $</formula> represent momentums of incoming particles, <formula id="216">$ p_j $</formula> of outgoing ones. Each component of the momentum sum must vanish. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insertions</parametername>
</parameternamelist>
<parameterdescription>
<para>Field insertions of the process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>momentum</parametername>
</parameternamelist>
<parameterdescription>
<para>Momentum in the process (must be the same size as <bold>insertions</bold>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for the momentum sum. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression of the momentum sum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="2160" column="11" bodyfile="src/marty/core/quantumField.cpp" bodystart="1620" bodyend="1630" declfile="src/marty/core/quantumField.h" declline="2160" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ae4805460e427d04db85adc37e8aaac11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const mty::QuantumField &amp;field)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Overload of operator&lt;&lt; for <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. Calls <ref refid="classcsl_1_1Abstract_1aed56cb85894209a9bbc9b8bdada5e6ab" kindref="member">QuantumField::print()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> to display. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to <bold>fout</bold>. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classcsl_1_1Abstract_1aed56cb85894209a9bbc9b8bdada5e6ab" kindref="member">QuantumField::print()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="2171" column="1" declfile="src/marty/core/quantumField.h" declline="2171" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3a7207a7cec1732aeaf603c118e76967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ScalarKineticTerm</definition>
        <argsstring>(QuantumFieldParent &amp;field, csl::Tensor &amp;X)</argsstring>
        <name>ScalarKineticTerm</name>
        <qualifiedname>mty::ScalarKineticTerm</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="29" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="29" bodyend="52" declfile="src/marty/core/quantumFieldTheory.h" declline="36" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af977c8754b2a703d7fb66c0efa345f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::FermionKineticTerm</definition>
        <argsstring>(QuantumFieldParent &amp;field, csl::Tensor &amp;X)</argsstring>
        <name>FermionKineticTerm</name>
        <qualifiedname>mty::FermionKineticTerm</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="54" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="54" bodyend="83" declfile="src/marty/core/quantumFieldTheory.h" declline="38" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4174e3d15020b36da56bdfc82e6bdabf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::VectorKineticTerm</definition>
        <argsstring>(QuantumFieldParent &amp;field, csl::Tensor &amp;X)</argsstring>
        <name>VectorKineticTerm</name>
        <qualifiedname>mty::VectorKineticTerm</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="85" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="85" bodyend="120" declfile="src/marty/core/quantumFieldTheory.h" declline="40" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8896d7579067644a4d8579d405771a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::GhostKineticTerm</definition>
        <argsstring>(QuantumFieldParent &amp;field, csl::Tensor &amp;X)</argsstring>
        <name>GhostKineticTerm</name>
        <qualifiedname>mty::GhostKineticTerm</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="122" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="122" bodyend="140" declfile="src/marty/core/quantumFieldTheory.h" declline="42" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7029961be5dceddeccc6d4193f2f7644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ExponentialFactor</definition>
        <argsstring>(csl::Tensor &amp;X, csl::Tensor &amp;Y, csl::Tensor &amp;P)</argsstring>
        <name>ExponentialFactor</name>
        <qualifiedname>mty::ExponentialFactor</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="142" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="142" bodyend="146" declfile="src/marty/core/quantumFieldTheory.h" declline="46" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a813fdbdc819b9a73694031fee0daadea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool mty::ReplaceXiGauge_impl</definition>
        <argsstring>(csl::Expr &amp;expr)</argsstring>
        <name>ReplaceXiGauge_impl</name>
        <qualifiedname>mty::ReplaceXiGauge_impl</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="148" column="13" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="148" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2f76602d03a8900023693a680b355206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ReplaceXiGauge</definition>
        <argsstring>(csl::Expr const &amp;init)</argsstring>
        <name>ReplaceXiGauge</name>
        <qualifiedname>mty::ReplaceXiGauge</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="171" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="171" bodyend="179" declfile="src/marty/core/quantumFieldTheory.h" declline="44" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aef73fab7d5038e5c0608556f937e8fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::StandardDenominator</definition>
        <argsstring>(csl::Tensor &amp;P, csl::Expr const &amp;mass, csl::Expr const &amp;width, bool external)</argsstring>
        <name>StandardDenominator</name>
        <qualifiedname>mty::StandardDenominator</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>width</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="181" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="181" bodyend="190" declfile="src/marty/core/quantumFieldTheory.h" declline="48" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a51692373089d2fdeef6b30597379d2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::StandardDenominator</definition>
        <argsstring>(csl::Tensor &amp;P, csl::Expr const &amp;mass, bool external)</argsstring>
        <name>StandardDenominator</name>
        <qualifiedname>mty::StandardDenominator</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="193" column="1" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="193" bodyend="198" declfile="src/marty/core/quantumFieldTheory.h" declline="53" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7c2bd29b6f17cebbab8540a19ce1b25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::NullPropagator</definition>
        <argsstring>(QuantumField const &amp;, QuantumField const &amp;, csl::Tensor &amp;, bool)</argsstring>
        <name>NullPropagator</name>
        <qualifiedname>mty::NullPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <defname>A</defname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <defname>B</defname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <defname>P</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>external</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="201" column="1" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="201" bodyend="204" declfile="src/marty/core/quantumFieldTheory.h" declline="57" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af31ff7605e097a3beba437239a9ccf98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ScalarPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool external)</argsstring>
        <name>ScalarPropagator</name>
        <qualifiedname>mty::ScalarPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="206" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="206" bodyend="231" declfile="src/marty/core/quantumFieldTheory.h" declline="62" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8c5bad5eb6baa625944aec3228370c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::FermionPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool external)</argsstring>
        <name>FermionPropagator</name>
        <qualifiedname>mty::FermionPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="233" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="233" bodyend="317" declfile="src/marty/core/quantumFieldTheory.h" declline="67" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a77a84cec0e47e76b04d2a53918f0af66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::VectorPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool external)</argsstring>
        <name>VectorPropagator</name>
        <qualifiedname>mty::VectorPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="319" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="319" bodyend="357" declfile="src/marty/core/quantumFieldTheory.h" declline="85" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4c387042bf87055aa4da446a0ac1b18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::FieldStrengthPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool external)</argsstring>
        <name>FieldStrengthPropagator</name>
        <qualifiedname>mty::FieldStrengthPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="359" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="359" bodyend="397" declfile="src/marty/core/quantumFieldTheory.h" declline="90" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1a576873208742c602217cc27b4c097b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::FieldStrengthSquaredPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool external)</argsstring>
        <name>FieldStrengthSquaredPropagator</name>
        <qualifiedname>mty::FieldStrengthSquaredPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="399" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="399" bodyend="433" declfile="src/marty/core/quantumFieldTheory.h" declline="95" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8ca64eb94450cdaa329c1085f7ee1834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::IntegratedScalarPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool)</argsstring>
        <name>IntegratedScalarPropagator</name>
        <qualifiedname>mty::IntegratedScalarPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <defname>external</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="435" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="435" bodyend="455" declfile="src/marty/core/quantumFieldTheory.h" declline="100" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a758b77a5b4d4d8f861eed8cbb9cc332d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::IntegratedFermionPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool external)</argsstring>
        <name>IntegratedFermionPropagator</name>
        <qualifiedname>mty::IntegratedFermionPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="457" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="457" bodyend="550" declfile="src/marty/core/quantumFieldTheory.h" declline="105" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4f06061d7bd2d098ad73c2a5b839de63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::IntegratedVectorPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool)</argsstring>
        <name>IntegratedVectorPropagator</name>
        <qualifiedname>mty::IntegratedVectorPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <defname>external</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="552" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="552" bodyend="577" declfile="src/marty/core/quantumFieldTheory.h" declline="110" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1adeea71f1abec6c5441fd3a4364888d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::IntegratedFieldStrengthPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool)</argsstring>
        <name>IntegratedFieldStrengthPropagator</name>
        <qualifiedname>mty::IntegratedFieldStrengthPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <defname>external</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="579" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="579" bodyend="613" declfile="src/marty/core/quantumFieldTheory.h" declline="115" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0aab08613326b1206d45e8c67c8e102b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::IntegratedFieldStrengthSquaredPropagator</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B, csl::Tensor &amp;P, bool)</argsstring>
        <name>IntegratedFieldStrengthSquaredPropagator</name>
        <qualifiedname>mty::IntegratedFieldStrengthSquaredPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <defname>external</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="615" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="615" bodyend="644" declfile="src/marty/core/quantumFieldTheory.h" declline="120" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a36792a1eea04fd76601532a69f279b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ExternalLeg</definition>
        <argsstring>(QuantumField const &amp;field, const csl::Tensor &amp;impulsion, bool ruleMode, bool lock)</argsstring>
        <name>ExternalLeg</name>
        <qualifiedname>mty::ExternalLeg</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>impulsion</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="646" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="646" bodyend="664" declfile="src/marty/core/quantumFieldTheory.h" declline="137" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8586e120cfc2d7eb2e680867ecaba5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ExternalLeg</definition>
        <argsstring>(QuantumFieldParent &amp;field, csl::Tensor P, csl::Tensor X, vector&lt; Index &gt; indices, bool particle, bool incoming, bool onshell, PartnerShip const &amp;partnerShip, bool ruleMode, bool lockConjugation)</argsstring>
        <name>ExternalLeg</name>
        <qualifiedname>mty::ExternalLeg</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>X</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>particle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>incoming</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onshell</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1PartnerShip" kindref="compound">PartnerShip</ref> const &amp;</type>
          <declname>partnerShip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lockConjugation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="666" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="666" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a72c2844736155797b25618fcf45995cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::MajoranaMassTerm</definition>
        <argsstring>(csl::Expr const &amp;mass, QuantumFieldParent *field)</argsstring>
        <name>MajoranaMassTerm</name>
        <qualifiedname>mty::MajoranaMassTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="704" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="704" bodyend="718" declfile="src/marty/core/quantumFieldTheory.h" declline="125" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a33c88e7a875fef104f133d25621545d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::MajoranaMassTerm</definition>
        <argsstring>(csl::Expr const &amp;mass, QuantumFieldParent *fieldL, QuantumFieldParent *fieldR)</argsstring>
        <name>MajoranaMassTerm</name>
        <qualifiedname>mty::MajoranaMassTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>fieldL</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>fieldR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="720" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="720" bodyend="736" declfile="src/marty/core/quantumFieldTheory.h" declline="127" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3bdde690fd53ecc303dd21f2f2941f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::MassTerm</definition>
        <argsstring>(csl::Expr const &amp;mass, QuantumFieldParent *field)</argsstring>
        <name>MassTerm</name>
        <qualifiedname>mty::MassTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="738" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="738" bodyend="750" declfile="src/marty/core/quantumFieldTheory.h" declline="131" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad2be9518d6b07b8b20208fea380aa69a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::MassTerm</definition>
        <argsstring>(csl::Expr const &amp;mass, QuantumFieldParent *fieldL, QuantumFieldParent *fieldR)</argsstring>
        <name>MassTerm</name>
        <qualifiedname>mty::MassTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>fieldL</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>fieldR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.cpp" line="752" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="752" bodyend="790" declfile="src/marty/core/quantumFieldTheory.h" declline="133" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aabd2cea768249a0c9db117b7c080d814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ExternalLeg</definition>
        <argsstring>(QuantumFieldParent &amp;field, csl::Tensor impulsion, csl::Tensor point, std::vector&lt; csl::Index &gt; indices, bool particle, bool incoming, bool onshell, PartnerShip const &amp;partnerShip, bool ruleMode=false, bool lockConjugation=false)</argsstring>
        <name>ExternalLeg</name>
        <qualifiedname>mty::ExternalLeg</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>impulsion</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>point</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>particle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>incoming</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onshell</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1PartnerShip" kindref="compound">PartnerShip</ref> const &amp;</type>
          <declname>partnerShip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>lockConjugation</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumFieldTheory.h" line="142" column="11" bodyfile="src/marty/core/quantumFieldTheory.cpp" bodystart="666" bodyend="702" declfile="src/marty/core/quantumFieldTheory.h" declline="142" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a86f41537dcafe7305939f0996e8e2e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const Irrep &amp;irrep)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.cpp" line="150" column="1" bodyfile="src/marty/core/representation.cpp" bodystart="150" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8ac1c51a98f74ea2f52ea2200cf015e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, const SumIrrep &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1SumIrrep" kindref="compound">SumIrrep</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/representation.cpp" line="275" column="1" bodyfile="src/marty/core/representation.cpp" bodystart="275" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af96db3ed4ec869df734026cfb5b3a79f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::scalarboson_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>scalarboson_s</name>
        <qualifiedname>mty::scalarboson_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Delegates the construction of a Scalar boson and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can take any argument that the constructors <ref refid="classmty_1_1ScalarBoson_1a35fed1b12101a69c792865c0b598655b" kindref="member">ScalarBoson::ScalarBoson()</ref> take to forward them to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter pack</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created scalar boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/scalarField.h" line="197" column="17" bodyfile="src/marty/core/scalarField.h" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a88eed85f23601e61fdfb9875c6cdda27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::getCoxeterNumber</definition>
        <argsstring>(mty::algebra::Type type, int l)</argsstring>
        <name>getCoxeterNumber</name>
        <qualifiedname>mty::getCoxeterNumber</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062a" kindref="member">mty::algebra::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/semiSimpleAlgebra.cpp" line="26" column="5" bodyfile="src/marty/core/semiSimpleAlgebra.cpp" bodystart="26" bodyend="50" declfile="src/marty/core/semiSimpleAlgebra.h" declline="77" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4ce52da19cf8ca2c9e5e1f5815542459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const SemiSimpleAlgebra &amp;algebra)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> &amp;</type>
          <declname>algebra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algebra</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref> to display. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The modified output flux. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/semiSimpleAlgebra.cpp" line="777" column="1" bodyfile="src/marty/core/semiSimpleAlgebra.cpp" bodystart="777" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4925bd4d37c01a83ac2182035dad835c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::pair&lt; csl::Expr, csl::Expr &gt; mty::calculate_C9_C10</definition>
        <argsstring>()</argsstring>
        <name>calculate_C9_C10</name>
        <qualifiedname>mty::calculate_C9_C10</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/simpleWilson.h" line="11" column="11" declfile="src/marty/core/simpleWilson.h" declline="11" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a98172e908cef9704da9aa67af2b74db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, TraceIdentity const &amp;identity)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> const &amp;</type>
          <declname>identity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="142" column="1" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="142" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab2879979275d5f4263ecdf4f3af8cba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, std::vector&lt; PartitionPair &gt; const &amp;partition)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1PartitionPair" kindref="compound">PartitionPair</ref> &gt; const &amp;</type>
          <declname>partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="166" column="1" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="166" bodyend="176" declfile="src/marty/core/traceIdentities.h" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab72d16ddeb44f62764c8e99d56ab6f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="structmty_1_1PartitionPair" kindref="compound">PartitionPair</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; PartitionPair &gt; &gt; mty::evenPartition</definition>
        <argsstring>(size_t n)</argsstring>
        <name>evenPartition</name>
        <qualifiedname>mty::evenPartition</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="178" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="178" bodyend="209" declfile="src/marty/core/traceIdentities.h" declline="93" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3bfb03956ca9e147000b8dc74769a4b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::traceIdentity</definition>
        <argsstring>(algebra::Type type, size_t n)</argsstring>
        <name>traceIdentity</name>
        <qualifiedname>mty::traceIdentity</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062a" kindref="member">algebra::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="211" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="211" bodyend="231" declfile="src/marty/core/traceIdentities.h" declline="95" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ab24484444d3e90013f32dd324d5e59a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::traceIdentity</definition>
        <argsstring>(algebra::Type type, size_t l, size_t n)</argsstring>
        <name>traceIdentity</name>
        <qualifiedname>mty::traceIdentity</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062a" kindref="member">algebra::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="233" column="1" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="233" bodyend="259" declfile="src/marty/core/traceIdentities.h" declline="97" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aae67da5fffa488c4349fad7549949bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::ATraceIdentity</definition>
        <argsstring>(size_t l, size_t n)</argsstring>
        <name>ATraceIdentity</name>
        <qualifiedname>mty::ATraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="261" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="261" bodyend="288" declfile="src/marty/core/traceIdentities.h" declline="99" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1afeb608fa61bf41bd0ea90ea109204c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::BTraceIdentity</definition>
        <argsstring>(size_t l, size_t n)</argsstring>
        <name>BTraceIdentity</name>
        <qualifiedname>mty::BTraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="289" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="289" bodyend="297" declfile="src/marty/core/traceIdentities.h" declline="100" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a80444d6a8f1fee8abd38ffbc4c16c681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::CTraceIdentity</definition>
        <argsstring>(size_t l, size_t n)</argsstring>
        <name>CTraceIdentity</name>
        <qualifiedname>mty::CTraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="298" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="298" bodyend="309" declfile="src/marty/core/traceIdentities.h" declline="101" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6827950f26e1bb7918e95a6333095011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::DTraceIdentity</definition>
        <argsstring>(size_t l, size_t n)</argsstring>
        <name>DTraceIdentity</name>
        <qualifiedname>mty::DTraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="310" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="310" bodyend="318" declfile="src/marty/core/traceIdentities.h" declline="102" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a354172e19411e734d9b44e2030291954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::E6TraceIdentity</definition>
        <argsstring>(size_t n)</argsstring>
        <name>E6TraceIdentity</name>
        <qualifiedname>mty::E6TraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="320" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="320" bodyend="357" declfile="src/marty/core/traceIdentities.h" declline="103" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acc5d0cee625eac665981d9dbca836bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::E7TraceIdentity</definition>
        <argsstring>(size_t n)</argsstring>
        <name>E7TraceIdentity</name>
        <qualifiedname>mty::E7TraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="358" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="358" bodyend="370" declfile="src/marty/core/traceIdentities.h" declline="104" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aaedc6fb7b4adc5eb977a3aa507907d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::E8TraceIdentity</definition>
        <argsstring>(size_t n)</argsstring>
        <name>E8TraceIdentity</name>
        <qualifiedname>mty::E8TraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="371" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="371" bodyend="395" declfile="src/marty/core/traceIdentities.h" declline="105" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3429bb86d31bdca4bae0dfe8877cf397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::F4TraceIdentity</definition>
        <argsstring>(size_t n)</argsstring>
        <name>F4TraceIdentity</name>
        <qualifiedname>mty::F4TraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="396" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="396" bodyend="417" declfile="src/marty/core/traceIdentities.h" declline="106" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7e504085808521e50baa5d7b424fb544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1TraceIdentity" kindref="compound">TraceIdentity</ref> &gt;</type>
        <definition>std::vector&lt; TraceIdentity &gt; mty::G2TraceIdentity</definition>
        <argsstring>(size_t n)</argsstring>
        <name>G2TraceIdentity</name>
        <qualifiedname>mty::G2TraceIdentity</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/traceIdentities.cpp" line="418" column="13" bodyfile="src/marty/core/traceIdentities.cpp" bodystart="418" bodyend="430" declfile="src/marty/core/traceIdentities.h" declline="107" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a89dc23bac8020020669e58ab198bb263" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::vectorboson_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>vectorboson_s</name>
        <qualifiedname>mty::vectorboson_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Delegates the construction of a vector boson and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can take any argument that the constructors <ref refid="classmty_1_1VectorBoson_1a5d0a182c2a6a040c7c7521fbd8a29c3b" kindref="member">VectorBoson::VectorBoson()</ref> take to forward them to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter pack</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created vector boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/vectorField.h" line="433" column="17" bodyfile="src/marty/core/vectorField.h" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a45a8beef51af24931550df3de23f4bbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::gaugeboson_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>gaugeboson_s</name>
        <qualifiedname>mty::gaugeboson_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Delegates the construction of a gauge boson and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can take any argument that the constructors GaugeBoson::GaugeBoson() take to forward them to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter pack</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created gauge boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/vectorField.h" line="450" column="17" bodyfile="src/marty/core/vectorField.h" bodystart="450" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ad09af79fa06fb853c08bc500ec6ee854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::fieldstrength_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>fieldstrength_s</name>
        <qualifiedname>mty::fieldstrength_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Delegates the construction of a field strength and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can take any argument that the constructors <ref refid="classmty_1_1FieldStrength_1af329dccbe63c60fd8db55d654695be46" kindref="member">FieldStrength::FieldStrength()</ref> take to forward them to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter pack</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created field strength. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/vectorField.h" line="468" column="17" bodyfile="src/marty/core/vectorField.h" bodystart="468" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aea877d3a759545a9e20b5d6a8b0c894e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::wick_s</definition>
        <argsstring>(const csl::Expr &amp;expr)</argsstring>
        <name>wick_s</name>
        <qualifiedname>mty::wick_s</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Tries to create a <ref refid="classmty_1_1Wick" kindref="compound">Wick</ref> object with argument <bold>expr</bold>. Applies operator (see Operator::applyOperator()) to eliminate constants (with respect to the <ref refid="classmty_1_1Wick" kindref="compound">Wick</ref> object) and returns and resulting <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial argument of the <ref refid="classmty_1_1Wick" kindref="compound">Wick</ref> operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting expression when the operator rules have been applied. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wick.cpp" line="232" column="11" bodyfile="src/marty/core/wick.cpp" bodystart="232" bodyend="248" declfile="src/marty/core/wick.h" declline="135" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a405b9fed34a8dc2e98e71ce16b1c2ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::parseStructures</definition>
        <argsstring>(csl::Expr &amp;arg, std::vector&lt; csl::Expr &gt; &amp;inOperator, csl::IndexStructure &amp;quantumStructure)</argsstring>
        <name>parseStructures</name>
        <qualifiedname>mty::parseStructures</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>inOperator</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> &amp;</type>
          <declname>quantumStructure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="224" column="6" bodyfile="src/marty/core/wilson.cpp" bodystart="224" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a4af4b3c0bf0684359298f8fee1de7203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt; csl::Expr &gt; mty::parseStructures</definition>
        <argsstring>(csl::Expr &amp;prod)</argsstring>
        <name>parseStructures</name>
        <qualifiedname>mty::parseStructures</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>prod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="248" column="13" bodyfile="src/marty/core/wilson.cpp" bodystart="248" bodyend="289" declfile="src/marty/core/wilson.h" declline="158" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a661375892ae7a5b3562da622f4bc7601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::parseSum</definition>
        <argsstring>(csl::Expr const &amp;sum, csl::Expr const &amp;operatorFactor, bool standardBasis, bool recursive)</argsstring>
        <name>parseSum</name>
        <qualifiedname>mty::parseSum</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>sum</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>operatorFactor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardBasis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="291" column="13" bodyfile="src/marty/core/wilson.cpp" bodystart="291" bodyend="306" declfile="src/marty/core/wilson.h" declline="178" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a82b047d7ec6860d221a7654f8b61005c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>static std::vector&lt; Wilson &gt; mty::applyFactor</definition>
        <argsstring>(std::vector&lt; Wilson &gt; &amp;&amp;wilsons, csl::Expr const &amp;factor)</argsstring>
        <name>applyFactor</name>
        <qualifiedname>mty::applyFactor</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; &amp;&amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="308" column="20" bodyfile="src/marty/core/wilson.cpp" bodystart="308" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a327e39eef00c0f93fae2eae14f62f249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::sglSimplifyForWilson</definition>
        <argsstring>(csl::Expr const &amp;op, csl::Expr const &amp;operatorFactor, Wilson res, bool standardBasis, bool recursive)</argsstring>
        <name>sglSimplifyForWilson</name>
        <qualifiedname>mty::sglSimplifyForWilson</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>operatorFactor</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref></type>
          <declname>res</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardBasis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="316" column="13" bodyfile="src/marty/core/wilson.cpp" bodystart="316" bodyend="353" declfile="src/marty/core/wilson.h" declline="167" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a7194ddd645c045d4605ce7163929387b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::copyWilsons</definition>
        <argsstring>(std::vector&lt; Wilson &gt; const &amp;wilsons)</argsstring>
        <name>copyWilsons</name>
        <qualifiedname>mty::copyWilsons</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="355" column="13" bodyfile="src/marty/core/wilson.cpp" bodystart="355" bodyend="365" declfile="src/marty/core/wilson.h" declline="145" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a061334e29d54d8f58383dce1318c783e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::cachedWilsonCalculation</definition>
        <argsstring>(csl::Expr const &amp;product, csl::Expr const &amp;operatorFactor, Wilson res, csl::Expr op, bool standardBasis, bool recursive)</argsstring>
        <name>cachedWilsonCalculation</name>
        <qualifiedname>mty::cachedWilsonCalculation</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>product</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>operatorFactor</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref></type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardBasis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="367" column="13" bodyfile="src/marty/core/wilson.cpp" bodystart="367" bodyend="388" declfile="src/marty/core/wilson.h" declline="160" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1acbb2476b5b295c6704f6240d5b708492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt;</type>
        <definition>std::vector&lt; Wilson &gt; mty::parseExpression</definition>
        <argsstring>(csl::Expr const &amp;expr, csl::Expr const &amp;operatorFactor, bool standardBasis, bool recursive)</argsstring>
        <name>parseExpression</name>
        <qualifiedname>mty::parseExpression</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>operatorFactor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardBasis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="390" column="13" bodyfile="src/marty/core/wilson.cpp" bodystart="390" bodyend="418" declfile="src/marty/core/wilson.h" declline="173" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a48859d431199048b3b36a3c17eef8329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::addWilson</definition>
        <argsstring>(Wilson const &amp;wil, std::vector&lt; Wilson &gt; &amp;wilsons, bool merge)</argsstring>
        <name>addWilson</name>
        <qualifiedname>mty::addWilson</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> const &amp;</type>
          <declname>wil</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>merge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="420" column="6" bodyfile="src/marty/core/wilson.cpp" bodystart="420" bodyend="439" declfile="src/marty/core/wilson.h" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a2172610d205a4fab667172560da634cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::addSortedWilson</definition>
        <argsstring>(Wilson const &amp;wil, std::vector&lt; Wilson &gt; &amp;wilsons)</argsstring>
        <name>addSortedWilson</name>
        <qualifiedname>mty::addSortedWilson</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> const &amp;</type>
          <declname>wil</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; &amp;</type>
          <declname>wilsons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="441" column="6" bodyfile="src/marty/core/wilson.cpp" bodystart="441" bodyend="467" declfile="src/marty/core/wilson.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a27685ef15f2d34f88f008c15d3cb8718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref></type>
        <definition>WilsonSet mty::match</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; &amp;fullAmplitudes, csl::Expr const &amp;operatorFactor, bool standardBasis, bool squaredAfter)</argsstring>
        <name>match</name>
        <qualifiedname>mty::match</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>fullAmplitudes</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>operatorFactor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardBasis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>squaredAfter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.cpp" line="469" column="11" bodyfile="src/marty/core/wilson.cpp" bodystart="469" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1af1c0d8658037f5bc8ce7030b5c04c7da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmty_1_1Cache" kindref="compound">Cache</ref>&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>Cache&lt; csl::Expr, csl::Expr &gt; mty::cachedWilson</definition>
        <argsstring>([](csl::Expr const &amp;A, csl::Expr const &amp;B) { return(A==B)||csl::hardComparison(A, B);})</argsstring>
        <name>cachedWilson</name>
        <qualifiedname>mty::cachedWilson</qualifiedname>
        <param>
          <attributes>[]</attributes>
          <type>(<ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;A, <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;B) { return(A==B)||csl::hardComparison(A, B);}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.h" line="150" column="5" declfile="src/marty/core/wilson.h" declline="150" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a405b9fed34a8dc2e98e71ce16b1c2ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::parseStructures</definition>
        <argsstring>(csl::Expr &amp;arg, std::vector&lt; csl::Expr &gt; &amp;inOperator, csl::IndexStructure &amp;quantumStructure)</argsstring>
        <name>parseStructures</name>
        <qualifiedname>mty::parseStructures</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>inOperator</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> &amp;</type>
          <declname>quantumStructure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.h" line="154" column="6" bodyfile="src/marty/core/wilson.cpp" bodystart="224" bodyend="246" declfile="src/marty/core/wilson.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aef4fde8aae86296621f0a123d784c3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref></type>
        <definition>WilsonSet mty::match</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; &amp;amplitudes, csl::Expr const &amp;operatorFactor, bool standardBasis=false, bool squaredAfter=false)</argsstring>
        <name>match</name>
        <qualifiedname>mty::match</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>amplitudes</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>operatorFactor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardBasis</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>squaredAfter</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilson.h" line="189" column="11" bodyfile="src/marty/core/wilson.cpp" bodystart="469" bodyend="520" declfile="src/marty/core/wilson.h" declline="189" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a0419ff878655c9d413430630d26d5809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getWilsonCoefficient</definition>
        <argsstring>(WilsonSet const &amp;wilsons, std::vector&lt; Wilson &gt; const &amp;contributions)</argsstring>
        <name>getWilsonCoefficient</name>
        <qualifiedname>mty::getWilsonCoefficient</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> &gt; const &amp;</type>
          <declname>contributions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilsonOperator.cpp" line="21" column="11" bodyfile="src/marty/core/wilsonOperator.cpp" bodystart="21" bodyend="34" declfile="src/marty/core/wilsonOperator.h" declline="33" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a6a9171e3867edd1d979f26218f6ccaff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getWilsonCoefficient</definition>
        <argsstring>(WilsonSet const &amp;wilsons, std::vector&lt; csl::Expr &gt; const &amp;contributions)</argsstring>
        <name>getWilsonCoefficient</name>
        <qualifiedname>mty::getWilsonCoefficient</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>contributions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilsonOperator.cpp" line="36" column="11" bodyfile="src/marty/core/wilsonOperator.cpp" bodystart="36" bodyend="44" declfile="src/marty/core/wilsonOperator.h" declline="36" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a49d077d12393a7fca89aea8c2f34165f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getWilsonCoefficient</definition>
        <argsstring>(WilsonSet const &amp;wilsons, Wilson const &amp;contributions)</argsstring>
        <name>getWilsonCoefficient</name>
        <qualifiedname>mty::getWilsonCoefficient</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref> const &amp;</type>
          <declname>contributions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilsonOperator.cpp" line="46" column="11" bodyfile="src/marty/core/wilsonOperator.cpp" bodystart="46" bodyend="50" declfile="src/marty/core/wilsonOperator.h" declline="39" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1aa92f5e25a4189529ecb9a3936078a59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getWilsonCoefficient</definition>
        <argsstring>(WilsonSet const &amp;wilsons, csl::Expr const &amp;contributions)</argsstring>
        <name>getWilsonCoefficient</name>
        <qualifiedname>mty::getWilsonCoefficient</qualifiedname>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>contributions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilsonOperator.cpp" line="52" column="11" bodyfile="src/marty/core/wilsonOperator.cpp" bodystart="52" bodyend="57" declfile="src/marty/core/wilsonOperator.h" declline="42" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a3ff650f937b8fa1dfa6ad85ef8bd8107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::getWilsonCoefficient</definition>
        <argsstring>(Model const &amp;model, WilsonSet const &amp;wilsons, DiracCoupling coupling)</argsstring>
        <name>getWilsonCoefficient</name>
        <qualifiedname>mty::getWilsonCoefficient</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1WilsonSet" kindref="compound">WilsonSet</ref> const &amp;</type>
          <declname>wilsons</declname>
        </param>
        <param>
          <type>DiracCoupling</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/wilsonOperator.cpp" line="59" column="11" bodyfile="src/marty/core/wilsonOperator.cpp" bodystart="59" bodyend="65" declfile="src/marty/core/wilsonOperator.h" declline="45" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a46e1d918d7df536dddb5ad738918ad88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, MSSM_Model const &amp;model)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1MSSM__Model" kindref="compound">MSSM_Model</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/models/mssm.cpp" line="1333" column="1" bodyfile="src/marty/models/mssm.cpp" bodystart="1333" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a8c3bde4ab7a2593aa6bba9e49a7708c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, NMFV_Model::Mixing mixing)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>NMFV_Model::Mixing</type>
          <declname>mixing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/models/nmfv.cpp" line="174" column="1" bodyfile="src/marty/models/nmfv.cpp" bodystart="174" bodyend="204" declfile="src/marty/models/nmfv.h" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1abec4bb9c8b2cdc879cefa2c51c5a3e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::colorTriplet</definition>
        <argsstring>(Model &amp;QCD, std::string const &amp;name)</argsstring>
        <name>colorTriplet</name>
        <qualifiedname>mty::colorTriplet</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>QCD</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/models/qcd.cpp" line="21" column="10" bodyfile="src/marty/models/qcd.cpp" bodystart="21" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a1ed7d68a826a424536dc29d438914fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::colorSextet</definition>
        <argsstring>(Model &amp;QCD, std::string const &amp;name)</argsstring>
        <name>colorSextet</name>
        <qualifiedname>mty::colorSextet</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>QCD</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/models/qcd.cpp" line="30" column="10" bodyfile="src/marty/models/qcd.cpp" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1ac85f2e833420fd40fb80265c20e71b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::pair&lt; csl::Expr, csl::Expr &gt; mty::Z2_coef</definition>
        <argsstring>(int charge)</argsstring>
        <name>Z2_coef</name>
        <qualifiedname>mty::Z2_coef</qualifiedname>
        <param>
          <type>int</type>
          <declname>charge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/models/thdm.cpp" line="20" column="11" bodyfile="src/marty/models/thdm.cpp" bodystart="20" bodyend="25" declfile="src/marty/models/thdm.h" declline="63" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a9287be01d8032229c55158b9ab4a9c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::Z2_mass_coef</definition>
        <argsstring>(csl::Expr const &amp;v1, csl::Expr const &amp;v2, int charge)</argsstring>
        <name>Z2_mass_coef</name>
        <qualifiedname>mty::Z2_mass_coef</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>charge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/models/thdm.cpp" line="26" column="11" bodyfile="src/marty/models/thdm.cpp" bodystart="26" bodyend="31" declfile="src/marty/models/thdm.h" declline="64" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1a63e26ebbfb8b5d9562702e4ec3acff2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>t_type</declname>
            <defname>t_type</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, THDM_Model&lt; t_type &gt; const &amp;model)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1THDM__Model" kindref="compound">THDM_Model</ref>&lt; t_type &gt; const &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/models/thdm.h" line="477" column="1" bodyfile="src/marty/models/thdm.h" bodystart="477" bodyend="480"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Namespace of MARTY. </para>
    </briefdescription>
    <detaileddescription>
<para>This namespace contains all functions, objects, interfaces of MARTY, or more exactly of the physics part of MARTY. Mathematical objects, for symbolic manipulations, lie in the namespace csl. </para>
    </detaileddescription>
    <location file="src/marty-plugins/boltzmann-solver/libjsondata.cpp" line="5" column="1"/>
  </compounddef>
</doxygen>
