<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="md_src_2marty_2README" kind="page">
    <compoundname>md_src_2marty_2README</compoundname>
    <title>README</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><hruler/>
 <heading level="2">Welcome to the documentation !</heading>
</para>
<para>The documentation is an interactive content, explaining a little bit more in details objects and functions in <emphasis>MARTY</emphasis>. If you are interested by the underlying computer algebra system, <emphasis>CSL</emphasis>, please note that its documentation is separated from the physics part presented here. References to <emphasis>CSL</emphasis> objects are present in <emphasis>MARTY</emphasis>&apos;s documentation and links will automatically bring you to their documentation (in <emphasis>CSL</emphasis>) if needed.</para>
<para>This documentation is probably not complete. It is a work in progress, but it represents a massive amount of work and time constraints prevented me from writing a comprehensive documentation. There is still an important quantity of information you may get here, in particular on important topics about <emphasis>MARTY</emphasis>.</para>
<para>If you have any question that this documentation and the manual do not answer, please feel free to ask the author: <ulink url="mailto:marty.uhlrich@gmail.com">marty.uhlrich@gmail.com</ulink>.</para>
<para>If you want to come back on <emphasis>MARTY</emphasis> main page, you can <ulink url="https://marty.in2p3.fr">click here</ulink> or click on the logo at the top of the page at any time.</para>
<para><hruler/>
 <heading level="2">Get Started with the documentation</heading>
</para>
<para>If you are in the documentation for the first time, you should already have a pretty precise idea of what <emphasis>MARTY</emphasis> is doing without knowing really how. For a code overview, the manual or the initial publication are probably better.</para>
<para>It is still very valuable to learn how to navigate in the documentation, and in particular where to start. Then if you want to use a specific object in your code, the documentation is really the best help you can get as even if not all function are documented, they all appear here.</para>
<para><heading level="3">Data structures</heading>
</para>
<para>To have an idea of what information you can get here, you may be interested in the tab <ulink url="classes.html">Data Structures/Data Structure Index</ulink>. It contains all the classes (object abstractions) in the physics part of <emphasis>MARTY</emphasis>. You may found there what is a <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref>, a high energy physics <ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref>, a <ref refid="classmty_1_1Lagrangian" kindref="compound">mty::Lagrangian</ref>, a <ref refid="classmty_1_1Propagator" kindref="compound">mty::Propagator</ref> and more.</para>
<para><heading level="3">Files</heading>
</para>
<para>Another good starting point is to go in <ulink url="files.html">File/File List</ulink> that shows all the header files in the physics part of <emphasis>MARTY</emphasis>. There exists a good correspondance between files and objects. You may found the <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> in <ref refid="quantumField_8h" kindref="compound">quantumField.h</ref>, the <ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> in <ref refid="model_8h" kindref="compound">model.h</ref>, <ref refid="classmty_1_1Lagrangian" kindref="compound">mty::Lagrangian</ref> in <ref refid="lagrangian_8h" kindref="compound">lagrangian.h</ref> etc.</para>
<para><hruler/>
 <heading level="2">Useful links</heading>
</para>
<para>This part aims to give directly the links to the main features of <emphasis>MARTY</emphasis>, sorted by topic.</para>
<para><heading level="3">User interface</heading>
</para>
<para>Most <emphasis>MARTY</emphasis>&apos;s features are callable from class methods. The file <ref refid="mrtInterface_8h" kindref="compound">mrtInterface.h</ref> contains a number of functions directly callable, without having to know what object owns the method. All features are not reimplemented in this file, but the main ones are, and it is then a good starting point to know what you can do with <emphasis>MARTY</emphasis>.</para>
<para><heading level="3">CSL</heading>
</para>
<para><emphasis>CSL</emphasis> is the computer algebra system integrated in <emphasis>MARTY</emphasis>. You may <ulink url="https://marty.in2p3.fr/doc/csl/html/index.html">click here</ulink> to go to its documentation. <heading level="3">Model Building</heading>
</para>
<para>Model building is a very important topic for a user as it is almost the only part he/she will have to do him/herself. The <ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> class is actually built in three layers, each one containing a different part of the final features:<itemizedlist>
<listitem><para><ref refid="classmty_1_1ModelData" kindref="compound">mty::ModelData</ref> is the first layer, containing all functions allowing to modify the content of the model. Adding a particle, a gauge group, getting the content are features implemented in this class. The lagrangian also belongs to it.</para>
</listitem><listitem><para><ref refid="classmty_1_1ModelBuilder" kindref="compound">mty::ModelBuilder</ref> inherits from <ref refid="classmty_1_1ModelData" kindref="compound">mty::ModelData</ref> and adds all model building utilities that modify the model. Symmetry breaking, replacements, renaming...</para>
</listitem><listitem><para><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> inherits from <ref refid="classmty_1_1ModelBuilder" kindref="compound">mty::ModelBuilder</ref> and adds the final computational features. In this class are implemented the functions allowing to launch different calculations: Feynman rules, amplitudes, squared amplitudes...</para>
</listitem></itemizedlist>
</para>
<para><heading level="3">Lagrangian</heading>
</para>
<para>This part is less important as the Lagrangian is meant to be fully encapsulated by the model classes. If one wants to know how it works inside, the main objects to see are:<itemizedlist>
<listitem><para><ref refid="classmty_1_1InteractionTerm" kindref="compound">mty::InteractionTerm</ref> is the representation of a term in the Lagrangian in the code. It is a little bit more than a mathematical expression, and knows better about what particles are inside etc.</para>
</listitem><listitem><para><ref refid="classmty_1_1Lagrangian" kindref="compound">mty::Lagrangian</ref> is the set of all interaction terms, separated in three parts. Kinetic, mass, and interaction terms.</para>
</listitem></itemizedlist>
</para>
<para><heading level="3">Quantum Field Theory</heading>
</para>
<para>Quantum Field Theory is really what <emphasis>MARTY</emphasis> does. There is of course many different files and objects related to it. Here are the main ones:<itemizedlist>
<listitem><para><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> is the object getting into mathematical expressions, representing a quantum field. In particular it inherits from <ref refid="classcsl_1_1TensorFieldElement" kindref="compound">csl::TensorFieldElement</ref>.</para>
</listitem><listitem><para><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> is the parent object of <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> (inheriting from <ref refid="classcsl_1_1TensorFieldParent" kindref="compound">csl::TensorFieldParent</ref>). It contains all the quantum data about the field. Spin, mass, width, gauge / flavor representation...</para>
</listitem><listitem><para><ref refid="classmty_1_1ScalarBoson" kindref="compound">mty::ScalarBoson</ref>, <ref refid="classmty_1_1WeylFermion" kindref="compound">mty::WeylFermion</ref>, <ref refid="classmty_1_1DiracFermion" kindref="compound">mty::DiracFermion</ref>, <ref refid="classmty_1_1VectorBoson" kindref="compound">mty::VectorBoson</ref>, <ref refid="classmty_1_1GaugeBoson" kindref="compound">mty::GaugeBoson</ref>, <ref refid="classmty_1_1GhostBoson" kindref="compound">mty::GhostBoson</ref> are specializations of <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> that handle more specifically their properties. The Majorana fermion has not its own class as it is simply a Dirac fermion that is its own conjugate.</para>
</listitem><listitem><para><ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref> is a file containing all analytical expressions for propagators, kinetic / mass terms for particles in Lagrangian, and external legs insertions.</para>
</listitem><listitem><para><ref refid="graph_8h" kindref="compound">graph.h</ref> is the file containing the algorithm applying the Wick theorem. The algorithm is a bit complex because optimized to run as fast as possible, avoiding to find the same diagrams many times.</para>
</listitem><listitem><para><ref refid="expander_8h" kindref="compound">expander.h</ref> is the file that expands the lagrangian to a given order to find all possible diagrams, applying the Wick theorem on every possible set of interactions. It is also a well optimized algorithm to avoid any unnecessary computation but may be interesting to look at.</para>
</listitem><listitem><para><ref refid="amplitude_8h" kindref="compound">amplitude.h</ref> contains the <ref refid="classmty_1_1Amplitude" kindref="compound">mty::Amplitude</ref> class that is the container for <emphasis>MARTY</emphasis> amplitudes.</para>
</listitem><listitem><para><ref refid="feynmanDiagram_8h" kindref="compound">feynmanDiagram.h</ref> contains the <ref refid="classmty_1_1FeynmanDiagram" kindref="compound">mty::FeynmanDiagram</ref> class that is the container for <emphasis>MARTY</emphasis> Feynman diagrams, i.e. bits of amplitudes.</para>
</listitem><listitem><para><ref refid="diracology_8h" kindref="compound">diracology.h</ref> contains the Dirac space and all its content. Gamma matrices, trace identities, are contained in this file.</para>
</listitem></itemizedlist>
</para>
<para><heading level="3">Group Theory</heading>
</para>
<para>Group theory is a more deep feature, as a standard user will only be interested in creating gauge groups, feature that is encapsulated in the <ref refid="classmty_1_1ModelBuilder" kindref="compound">mty::ModelBuilder</ref> class. However, if someone wants to get deeper, understand how representations and group algebra are handled, here are the main links:<itemizedlist>
<listitem><para><ref refid="semiSimpleAlgebra_8h" kindref="compound">semiSimpleAlgebra.h</ref> contains the algorithms that allow to store any reprensentation of a semi-simple algebra, and calculate the decomposition of a product of representations. Some group theory weights could also be taken from this machinery. In particlar quadratic Casimirs come from this file.</para>
</listitem><listitem><para><ref refid="group_8h" kindref="compound">group.h</ref> contains a structural link between semi-simple algebras (A, B, C, D etc) and groups (SU, SO, Sp, etc).</para>
</listitem><listitem><para><ref refid="gaugedGroup_8h" kindref="compound">gaugedGroup.h</ref> contains all the machinery for gauged groups in <emphasis>MARTY</emphasis>. In particular, a <ref refid="classmty_1_1GaugedGroup" kindref="compound">mty::GaugedGroup</ref> handles its own coupling constant (mathematical expression Expr), gauge bosons (<ref refid="classmty_1_1GaugeBoson" kindref="compound">mty::GaugeBoson</ref>), ghosts (<ref refid="classmty_1_1GhostBoson" kindref="compound">mty::GhostBoson</ref>), and generators (<ref refid="classmty_1_1Generator" kindref="compound">mty::Generator</ref>). All generator properties (index contraction) are implemented in this file.</para>
</listitem><listitem><para><ref refid="colorSpace_8h" kindref="compound">colorSpace.h</ref> contains the machinery to calculate traces of group generators, using group indices and reference tensors.</para>
</listitem><listitem><para><ref refid="groupIndices_8h" kindref="compound">groupIndices.h</ref> contains all group indices, used in the calculation of traces.</para>
</listitem><listitem><para><ref refid="traceIdentities_8h" kindref="compound">traceIdentities.h</ref> contains the trace identities for all groups. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="src/marty/README.md"/>
  </compounddef>
</doxygen>
