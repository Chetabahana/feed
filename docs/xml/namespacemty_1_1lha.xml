<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="namespacemty_1_1lha" kind="namespace" language="C++">
    <compoundname>mty::lha</compoundname>
    <innerclass refid="structmty_1_1lha_1_1Comparator" prot="public">mty::lha::Comparator</innerclass>
    <innerclass refid="classmty_1_1lha_1_1LHABlock" prot="public">mty::lha::LHABlock</innerclass>
    <innerclass refid="structmty_1_1lha_1_1LHAElement" prot="public">mty::lha::LHAElement</innerclass>
    <innerclass refid="structmty_1_1lha_1_1LHAElementInputData" prot="public">mty::lha::LHAElementInputData</innerclass>
    <innerclass refid="classmty_1_1lha_1_1LHAFileData" prot="public">mty::lha::LHAFileData</innerclass>
    <innerclass refid="structmty_1_1lha_1_1LHAInputData" prot="public">mty::lha::LHAInputData</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1" prot="public" static="no" strong="yes">
        <type></type>
        <name>BlockType</name>
        <qualifiedname>mty::lha::BlockType</qualifiedname>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
<para>Invalid Block. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1ac72ab581241167666daf5f123a0ca702" prot="public">
          <name>SMINPUTS</name>
          <briefdescription>
<para>Standard <ref refid="classmty_1_1Model" kindref="compound">Model</ref> inputs. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1a1e5b0f07bd068ed9a8b600275669fd61" prot="public">
          <name>MINPAR</name>
          <briefdescription>
<para>SUSY breaking input parameters. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1afd613ecc35000d1256821059c79024db" prot="public">
          <name>EXTPAR</name>
          <briefdescription>
<para>Optional input parameters for non-minimal / non-universal models. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1a8bd3f2bd754fb090567ccb526ad169e8" prot="public">
          <name>MSQ2</name>
          <briefdescription>
<para>Soft SUSY breaking left squark mass matrix. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1abc16d3685724c5fe9cc3427a29afa25e" prot="public">
          <name>MSL2</name>
          <briefdescription>
<para>Soft SUSY breaking left slepton mass matrix. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1a1909c28a7acab272c20145ddf429ab66" prot="public">
          <name>MSu2</name>
          <briefdescription>
<para>Soft SUSY breaking right up-squark mass matrix. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1a5f1c6164be4148378068051dcb0a1b6e" prot="public">
          <name>MSd2</name>
          <briefdescription>
<para>Soft SUSY breaking right down-squark mass matrix. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1a7d115e4609e0d32bd228da78489b02e4" prot="public">
          <name>MSe2</name>
          <briefdescription>
<para>Soft SUSY breaking right selectron mass matrix. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1adffc2398e142df4e4222c36c15f7fd19" prot="public">
          <name>TUIN</name>
          <briefdescription>
<para>Trilinear up-type coupling. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1adcbc59a730bcf0766bf6672430bce655" prot="public">
          <name>TDIN</name>
          <briefdescription>
<para>Trilinear down-type coupling. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1ae72c23d1779398d6204823a11aa8b680" prot="public">
          <name>TEIN</name>
          <briefdescription>
<para>Trilinear electron-type coupling. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of possible LHA blocks in MARTY. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaBlocks.h" line="31" column="1" bodyfile="src/marty/lha/lhaBlocks.h" bodystart="31" bodyend="85"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lhaData_8h_1ae7d1f281bbc4f3a4db0f26feef9808bd" prot="public" static="no">
        <type>long double</type>
        <definition>using mty::lha::FloatType =  long double</definition>
        <argsstring></argsstring>
        <name>FloatType</name>
        <qualifiedname>mty::lha::FloatType</qualifiedname>
        <briefdescription>
<para>Floating point type for LHA support. Long double is 64 bits usually. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaData.h" line="57" column="1" bodyfile="src/marty/lha/lhaData.h" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1ac7ab7bfbc715bcc5f16f87ab328d2963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::lha::readFile</definition>
        <argsstring>(std::string const &amp;fileName)</argsstring>
        <name>readFile</name>
        <qualifiedname>mty::lha::readFile</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Load a .lha file for built-in values in MARTY, in particular SM and MSSM inputs. </para>
        </briefdescription>
        <detaileddescription>
<para>Reading this function will automatically set values for all constants appearing in expressions if you are using SM or MSSM (or more generally variables in <ref refid="namespacemty_1_1sm__input" kindref="compound">mty::sm_input</ref> or <ref refid="namespacemty_1_1mssm__input" kindref="compound">mty::mssm_input</ref> namespaces).</para>
<para><simplesect kind="note"><para>This function applies directly the file content on the expressions it knows. If you want to simply get the file data, consider using Reader::readFile() instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Reader, Reader::readFile() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="27" column="6" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="27" bodyend="35" declfile="src/marty/core/lhaBuiltIn.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1a6f0807061f6057d31e03d0f501d825a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::lha::readFile</definition>
        <argsstring>(std::ifstream &amp;file)</argsstring>
        <name>readFile</name>
        <qualifiedname>mty::lha::readFile</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Load a .lha file for built-in values in MARTY, in particular SM and MSSM inputs. </para>
        </briefdescription>
        <detaileddescription>
<para>Reading this function will automatically set values for all constants appearing in expressions if you are using SM or MSSM (or more generally variables in <ref refid="namespacemty_1_1sm__input" kindref="compound">mty::sm_input</ref> or <ref refid="namespacemty_1_1mssm__input" kindref="compound">mty::mssm_input</ref> namespaces).</para>
<para><simplesect kind="note"><para>This function applies directly the file content on the expressions it knows. If you want to simply get the file data, consider using Reader::readFile() instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Input file stream for the .lha file.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Reader, Reader::readFile() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="37" column="6" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="37" bodyend="47" declfile="src/marty/core/lhaBuiltIn.h" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1ad5f3015ab861ec705e1cbc7416a59529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::lha::applyLHA</definition>
        <argsstring>(LHAFileData const &amp;data, std::string_view nameBlock, size_t id, csl::Expr &amp;expr)</argsstring>
        <name>applyLHA</name>
        <qualifiedname>mty::lha::applyLHA</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> const &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>nameBlock</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Applies a lha element on an expression, calling <ref refid="classcsl_1_1Abstract_1aaf7f0692cb84ca861a5b3b641bea518b" kindref="member">csl::Abstract::setValue()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> read from the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the block in which the value appears. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression, should be a literal (a <ref refid="classcsl_1_1Constant" kindref="compound">csl::Constant</ref> typically).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the value of <bold>expr</bold> has been changed. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="49" column="6" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="49" bodyend="63" declfile="src/marty/core/lhaBuiltIn.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1a6ffd0599f6aca2f4f15b19dc88048322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::lha::applyLHA</definition>
        <argsstring>(LHAFileData const &amp;data, std::string_view nameBlock, size_t i, size_t j, csl::Expr &amp;expr)</argsstring>
        <name>applyLHA</name>
        <qualifiedname>mty::lha::applyLHA</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> const &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>nameBlock</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Applies a lha element on an expression, calling <ref refid="classcsl_1_1Abstract_1aaf7f0692cb84ca861a5b3b641bea518b" kindref="member">csl::Abstract::setValue()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> read from the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the block in which the value appears. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Row position (starts from 1) of the matrix element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Column position (starts from 1) of the matrix element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression, should be a literal (a <ref refid="classcsl_1_1Constant" kindref="compound">csl::Constant</ref> typically).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the value of <bold>expr</bold> has been changed. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="65" column="6" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="65" bodyend="80" declfile="src/marty/core/lhaBuiltIn.h" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1a3c0d8e5c3d15c0b6cd67fa25a3ed081d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::lha::applyLHA</definition>
        <argsstring>(LHAFileData const &amp;data, std::string_view nameBlock, csl::Expr &amp;expr)</argsstring>
        <name>applyLHA</name>
        <qualifiedname>mty::lha::applyLHA</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> const &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>nameBlock</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Applies a matrix lha element on an expression, calling <ref refid="classcsl_1_1Abstract_1aaf7f0692cb84ca861a5b3b641bea518b" kindref="member">csl::Abstract::setValue()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> read from the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameBlock</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the block in which the value appears. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression, should be a <ref refid="classcsl_1_1Matrix" kindref="compound">csl::Matrix</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the values in <bold>expr</bold> have been changed. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else.</para>
</simplesect>
<simplesect kind="note"><para>If no value is found for matrix, nothing happens and this function returns false. If at least one value is found, all other values are set to zero by default. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="82" column="6" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="82" bodyend="101" declfile="src/marty/core/lhaBuiltIn.h" declline="122" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1aebb06c9f527f1d0f78177f6d7342379a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::lha::applyLHAOnInputs</definition>
        <argsstring>(LHAFileData const &amp;data, LHAInputData &amp;inputs)</argsstring>
        <name>applyLHAOnInputs</name>
        <qualifiedname>mty::lha::applyLHAOnInputs</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> const &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref> &amp;</type>
          <declname>inputs</declname>
        </param>
        <briefdescription>
<para>Applies LHA data on a <ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref> element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> read from a .lha file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>List of inputs for a given block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="103" column="6" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="103" bodyend="110" declfile="src/marty/core/lhaBuiltIn.h" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1a711c519d382beae33bbabce94be451c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref> &amp;</type>
        <definition>LHAInputData &amp; mty::lha::getSMInput</definition>
        <argsstring>()</argsstring>
        <name>getSMInput</name>
        <qualifiedname>mty::lha::getSMInput</qualifiedname>
        <briefdescription>
<para>Returns all the input data for the SM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref> containing the SMINPUTS block of expressions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="112" column="14" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="112" bodyend="130" declfile="src/marty/core/lhaBuiltIn.h" declline="169" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1a3f1fa110faa3440b3f1ff098e7f7af26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref></type>
        <definition>LHAInputData mty::lha::getMINPARInput</definition>
        <argsstring>(int model)</argsstring>
        <name>getMINPARInput</name>
        <qualifiedname>mty::lha::getMINPARInput</qualifiedname>
        <param>
          <type>int</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Returnrs all the input data for MINPAR block. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> type (Block MODSEL, id = 0)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The input data for MINPAR block in the model <bold>model</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="132" column="14" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="132" bodyend="164" declfile="src/marty/core/lhaBuiltIn.h" declline="178" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1a39d6f8f5acf655bd22aa783fa6914ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref></type>
        <definition>LHAInputData mty::lha::getEXTPARInput</definition>
        <argsstring>()</argsstring>
        <name>getEXTPARInput</name>
        <qualifiedname>mty::lha::getEXTPARInput</qualifiedname>
        <briefdescription>
<para>Returns the input data for the EXTPAR block. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The input data for the EXTPAR block. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="166" column="14" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="166" bodyend="210" declfile="src/marty/core/lhaBuiltIn.h" declline="185" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1a3b253502bf0932b13428b1dcab52513e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref></type>
        <definition>LHAInputData mty::lha::getMatrixInput</definition>
        <argsstring>(csl::Expr &amp;matrix, std::string const &amp;name)</argsstring>
        <name>getMatrixInput</name>
        <qualifiedname>mty::lha::getMatrixInput</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the input data for a matrix input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix associated to the LHA input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the block defining the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The input data of the block named <bold>name</bold>, associated to the matric <bold>matrix</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="212" column="14" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="212" bodyend="218" declfile="src/marty/core/lhaBuiltIn.h" declline="196" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="lhaBuiltIn_8cpp_1abf1fe9f4bf52d34ae592555cc0a4b2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref> &gt; &amp;</type>
        <definition>std::vector&lt; LHAInputData &gt; &amp; mty::lha::getMSSMInput</definition>
        <argsstring>(int model)</argsstring>
        <name>getMSSMInput</name>
        <qualifiedname>mty::lha::getMSSMInput</qualifiedname>
        <param>
          <type>int</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Returns all the input data for the MSSM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> integer corresponding to id 0 on MODSEL block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structmty_1_1lha_1_1LHAInputData" kindref="compound">LHAInputData</ref> containing the various blocks of expressions for MSSM inputs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/lhaBuiltIn.cpp" line="220" column="13" bodyfile="src/marty/core/lhaBuiltIn.cpp" bodystart="220" bodyend="240" declfile="src/marty/core/lhaBuiltIn.h" declline="206" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="lhaData_8cpp_1a5731e9e98c733a42a6594852396c54fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1" kindref="member">BlockType</ref></type>
        <definition>BlockType mty::lha::blockType</definition>
        <argsstring>(std::string_view name)</argsstring>
        <name>blockType</name>
        <qualifiedname>mty::lha::blockType</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the BlockType corresponding to its name. The name must correspond to the enumeration name (see BlockType). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The BlockType corresponding to <bold>name</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaData.cpp" line="30" column="11" bodyfile="src/marty/lha/lhaData.cpp" bodystart="30" bodyend="56" declfile="src/marty/lha/lhaData.h" declline="43" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="lhaData_8cpp_1a0907b2a5b641edc63e65e6638362dd0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::lha::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, BlockType type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::lha::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="lhaBlocks_8h_1ab2b98516ff9520be75f72e27928e62a1" kindref="member">BlockType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Output stream overload for BlockType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>BlockType to display.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to <bold>out</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaData.cpp" line="58" column="1" bodyfile="src/marty/lha/lhaData.cpp" bodystart="58" bodyend="100" declfile="src/marty/lha/lhaData.h" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="lhaData_8cpp_1a61d831680786d05666b4b3f204896c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::lha::nSpace</definition>
        <argsstring>(size_t n)</argsstring>
        <name>nSpace</name>
        <qualifiedname>mty::lha::nSpace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns the number of spaces needed to display correctly an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer to display.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ceil(std::log10(n)) &gt;= 4 ? 10 : 5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaData.cpp" line="253" column="5" bodyfile="src/marty/lha/lhaData.cpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="lhaData_8cpp_1ab916d8036921f94342a6530a763d67e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::lha::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, LHAElement const &amp;element)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::lha::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1lha_1_1LHAElement" kindref="compound">LHAElement</ref> const &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Displays a <ref refid="structmty_1_1lha_1_1LHAElement" kindref="compound">LHAElement</ref> in an output stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmty_1_1lha_1_1LHAElement" kindref="compound">LHAElement</ref> to display.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to <bold>out</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaData.cpp" line="258" column="1" bodyfile="src/marty/lha/lhaData.cpp" bodystart="258" bodyend="269" declfile="src/marty/lha/lhaData.h" declline="390" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="lhaData_8cpp_1aa423b905ef156c8b5413437974150f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::lha::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, LHABlock const &amp;block)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::lha::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1lha_1_1LHABlock" kindref="compound">LHABlock</ref> const &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
<para>Displays a <ref refid="classmty_1_1lha_1_1LHABlock" kindref="compound">LHABlock</ref> in an output stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1lha_1_1LHABlock" kindref="compound">LHABlock</ref> to display.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to <bold>out</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaData.cpp" line="271" column="1" bodyfile="src/marty/lha/lhaData.cpp" bodystart="271" bodyend="278" declfile="src/marty/lha/lhaData.h" declline="400" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="lhaData_8cpp_1a0303beb6fc2ea37ec0a613a2815fad10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::lha::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, LHAFileData const &amp;data)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::lha::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Displays a <ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> in an output stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1lha_1_1LHAFileData" kindref="compound">LHAFileData</ref> to display.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to <bold>out</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaData.cpp" line="280" column="1" bodyfile="src/marty/lha/lhaData.cpp" bodystart="280" bodyend="288" declfile="src/marty/lha/lhaData.h" declline="410" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="lhaData_8cpp_1a71d9941eeed137bec25771521b3c4b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mty::lha::tolower</definition>
        <argsstring>(std::string const &amp;str)</argsstring>
        <name>tolower</name>
        <qualifiedname>mty::lha::tolower</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/lha/lhaData.cpp" line="290" column="13" bodyfile="src/marty/lha/lhaData.cpp" bodystart="290" bodyend="296" declfile="src/marty/lha/lhaData.h" declline="412" declcolumn="13"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/marty/core/lhaBuiltIn.cpp" line="25" column="1"/>
  </compounddef>
</doxygen>
