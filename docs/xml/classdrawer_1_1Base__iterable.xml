<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classdrawer_1_1Base__iterable" kind="class" language="C++" prot="public">
    <compoundname>drawer::Base_iterable</compoundname>
    <templateparamlist>
      <param>
        <type>typename T1</type>
      </param>
      <param>
        <type>typename T2</type>
        <defval>T1</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classdrawer_1_1Base__iterable_1a98f0054c0b8130fa7b3a1b29afbbf942" prot="public" static="no">
        <type>T1</type>
        <definition>typedef T1 drawer::Base_iterable&lt; T1, T2 &gt;::Type =  T1</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <qualifiedname>drawer::Base_iterable::Type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="35" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Base__iterable_1afaccb4d54647710207b262348805b710" prot="public" static="no">
        <type>T2</type>
        <definition>typedef T2 drawer::Base_iterable&lt; T1, T2 &gt;::PType =  T2</definition>
        <argsstring></argsstring>
        <name>PType</name>
        <qualifiedname>drawer::Base_iterable::PType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="36" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Base__iterable_1a5cee560a3ed0dfb9b107cb7d0b302a54" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t drawer::Base_iterable&lt; T1, T2 &gt;::size_type =  size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>drawer::Base_iterable::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="37" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Base__iterable_1ac5c26f9e50cf0e9ecebe69c5e237bd67" prot="public" static="no">
        <type>typename std::vector&lt; Type &gt;::iterator</type>
        <definition>typedef typename std::vector&lt; Type &gt;::iterator drawer::Base_iterable&lt; T1, T2 &gt;::iterator =  typename std::vector&lt;Type&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>drawer::Base_iterable::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="38" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Base__iterable_1accf39b4be1b304f59a490012628fe660" prot="public" static="no">
        <type>typename std::vector&lt; Type &gt;::const_iterator</type>
        <definition>typedef typename std::vector&lt; Type &gt;::const_iterator drawer::Base_iterable&lt; T1, T2 &gt;::const_iterator =  typename std::vector&lt;Type&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>drawer::Base_iterable::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="39" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdrawer_1_1Base__iterable_1af615d2de5e1c7c8cc0a43b40305312d9" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; Type &gt;</type>
        <definition>std::vector&lt; Type &gt; drawer::Base_iterable&lt; T1, T2 &gt;::elements</definition>
        <argsstring></argsstring>
        <name>elements</name>
        <qualifiedname>drawer::Base_iterable::elements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="114" column="17" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="114" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1abea26a8964894cc332f0b2c09bf26ad0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>()</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="41" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1ab291f7e487e1f4b9d6a73983ad84c832" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(size_t N)</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="45" column="14" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a9a2385be6f1d7ffe615f46c0af63a7ff" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(std::vector&lt; Type &gt; const &amp;t_elements)</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; const &amp;</type>
          <declname>t_elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="49" column="14" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a6b6a6cc1d60556b5876368d4d9fdf628" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(std::vector&lt; Type &gt; &amp;&amp;t_elements)</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; &amp;&amp;</type>
          <declname>t_elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="54" column="14" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1aef6170f7bfa3aa7a3a2a6bb5dfd4a15e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual drawer::Base_iterable&lt; T1, T2 &gt;::~Base_iterable</definition>
        <argsstring>()</argsstring>
        <name>~Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::~Base_iterable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="59" column="13" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1abcaf9f547568ddacd1eee92f62db71f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(Base_iterable&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="63" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a35d3e01f3ae8117f4cbb688caf2037b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(Base_iterable&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="64" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a503b6a02769c593e733c19a9910df3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref> &amp;</type>
        <definition>Base_iterable &amp; drawer::Base_iterable&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Base_iterable&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Base_iterable::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="65" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a1e8a0aa97cf31ce23e2d140e428b0d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref> &amp;</type>
        <definition>Base_iterable &amp; drawer::Base_iterable&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Base_iterable&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Base_iterable::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="66" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1aae6aaba5c2e4bd1e56cee74cf83d246c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void drawer::Base_iterable&lt; T1, T2 &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>drawer::Base_iterable::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="68" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1ac867aca6d62b04256703386a238dcfd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool drawer::Base_iterable&lt; T1, T2 &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>drawer::Base_iterable::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="73" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a4954872a8bbe9ccbbaa63f6f67bc2f81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t drawer::Base_iterable&lt; T1, T2 &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>drawer::Base_iterable::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="78" column="12" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1af2dc621564f03d977c20cf75ce7db29c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator drawer::Base_iterable&lt; T1, T2 &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>drawer::Base_iterable::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="83" column="14" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a28c0f974d70b61fc76b9c8fdf0fc479b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator drawer::Base_iterable&lt; T1, T2 &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>drawer::Base_iterable::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="88" column="20" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a0000f8ec576b052444fe8956488f92f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator drawer::Base_iterable&lt; T1, T2 &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>drawer::Base_iterable::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="93" column="14" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a6153fdc3bd1f09460b24855113a08640" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator drawer::Base_iterable&lt; T1, T2 &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>drawer::Base_iterable::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="98" column="20" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a961fe8389c3ce7286d574dbba0956500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; drawer::Base_iterable&lt; T1, T2 &gt;::operator[]</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>operator[]</name>
        <qualifiedname>drawer::Base_iterable::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="103" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a009588b482fa70083ed434e05321d990" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type drawer::Base_iterable&lt; T1, T2 &gt;::operator[]</definition>
        <argsstring>(size_t pos) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>drawer::Base_iterable::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="108" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1abea26a8964894cc332f0b2c09bf26ad0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>()</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="41" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1ab291f7e487e1f4b9d6a73983ad84c832" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(size_t N)</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="45" column="14" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a9a2385be6f1d7ffe615f46c0af63a7ff" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(std::vector&lt; Type &gt; const &amp;t_elements)</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; const &amp;</type>
          <declname>t_elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="49" column="14" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a6b6a6cc1d60556b5876368d4d9fdf628" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(std::vector&lt; Type &gt; &amp;&amp;t_elements)</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; &amp;&amp;</type>
          <declname>t_elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="54" column="14" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1aef6170f7bfa3aa7a3a2a6bb5dfd4a15e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual drawer::Base_iterable&lt; T1, T2 &gt;::~Base_iterable</definition>
        <argsstring>()</argsstring>
        <name>~Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::~Base_iterable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="59" column="13" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1abcaf9f547568ddacd1eee92f62db71f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(Base_iterable&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="63" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a35d3e01f3ae8117f4cbb688caf2037b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Base_iterable&lt; T1, T2 &gt;::Base_iterable</definition>
        <argsstring>(Base_iterable&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>Base_iterable</name>
        <qualifiedname>drawer::Base_iterable::Base_iterable</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="64" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a503b6a02769c593e733c19a9910df3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref> &amp;</type>
        <definition>Base_iterable &amp; drawer::Base_iterable&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Base_iterable&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Base_iterable::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="65" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a1e8a0aa97cf31ce23e2d140e428b0d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref> &amp;</type>
        <definition>Base_iterable &amp; drawer::Base_iterable&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Base_iterable&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Base_iterable::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="66" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1aae6aaba5c2e4bd1e56cee74cf83d246c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void drawer::Base_iterable&lt; T1, T2 &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>drawer::Base_iterable::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="68" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1ac867aca6d62b04256703386a238dcfd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool drawer::Base_iterable&lt; T1, T2 &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>drawer::Base_iterable::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="73" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a4954872a8bbe9ccbbaa63f6f67bc2f81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t drawer::Base_iterable&lt; T1, T2 &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>drawer::Base_iterable::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="78" column="12" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1af2dc621564f03d977c20cf75ce7db29c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator drawer::Base_iterable&lt; T1, T2 &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>drawer::Base_iterable::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="83" column="14" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a28c0f974d70b61fc76b9c8fdf0fc479b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator drawer::Base_iterable&lt; T1, T2 &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>drawer::Base_iterable::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="88" column="20" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a0000f8ec576b052444fe8956488f92f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator drawer::Base_iterable&lt; T1, T2 &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>drawer::Base_iterable::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="93" column="14" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a6153fdc3bd1f09460b24855113a08640" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator drawer::Base_iterable&lt; T1, T2 &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>drawer::Base_iterable::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="98" column="20" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a961fe8389c3ce7286d574dbba0956500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; drawer::Base_iterable&lt; T1, T2 &gt;::operator[]</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>operator[]</name>
        <qualifiedname>drawer::Base_iterable::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="103" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Base__iterable_1a009588b482fa70083ed434e05321d990" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type drawer::Base_iterable&lt; T1, T2 &gt;::operator[]</definition>
        <argsstring>(size_t pos) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>drawer::Base_iterable::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="108" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="108" bodyend="111"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/grafed/core/adjacencyMatrix.h" line="32" column="1" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="32" bodyend="115"/>
    <listofallmembers>
      <member refid="classdrawer_1_1Base__iterable_1abea26a8964894cc332f0b2c09bf26ad0" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ab291f7e487e1f4b9d6a73983ad84c832" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a9a2385be6f1d7ffe615f46c0af63a7ff" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6b6a6cc1d60556b5876368d4d9fdf628" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abcaf9f547568ddacd1eee92f62db71f3" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a35d3e01f3ae8117f4cbb688caf2037b2" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abea26a8964894cc332f0b2c09bf26ad0" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ab291f7e487e1f4b9d6a73983ad84c832" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a9a2385be6f1d7ffe615f46c0af63a7ff" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6b6a6cc1d60556b5876368d4d9fdf628" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abcaf9f547568ddacd1eee92f62db71f3" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a35d3e01f3ae8117f4cbb688caf2037b2" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af2dc621564f03d977c20cf75ce7db29c" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a28c0f974d70b61fc76b9c8fdf0fc479b" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af2dc621564f03d977c20cf75ce7db29c" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a28c0f974d70b61fc76b9c8fdf0fc479b" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aae6aaba5c2e4bd1e56cee74cf83d246c" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>clear</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aae6aaba5c2e4bd1e56cee74cf83d246c" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>clear</name></member>
      <member refid="classdrawer_1_1Base__iterable_1accf39b4be1b304f59a490012628fe660" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>const_iterator</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af615d2de5e1c7c8cc0a43b40305312d9" prot="protected" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>elements</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ac867aca6d62b04256703386a238dcfd6" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>empty</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ac867aca6d62b04256703386a238dcfd6" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>empty</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a0000f8ec576b052444fe8956488f92f5" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6153fdc3bd1f09460b24855113a08640" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a0000f8ec576b052444fe8956488f92f5" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6153fdc3bd1f09460b24855113a08640" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ac5c26f9e50cf0e9ecebe69c5e237bd67" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>iterator</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a503b6a02769c593e733c19a9910df3b7" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a1e8a0aa97cf31ce23e2d140e428b0d73" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a503b6a02769c593e733c19a9910df3b7" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a1e8a0aa97cf31ce23e2d140e428b0d73" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a961fe8389c3ce7286d574dbba0956500" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a009588b482fa70083ed434e05321d990" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a961fe8389c3ce7286d574dbba0956500" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a009588b482fa70083ed434e05321d990" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1afaccb4d54647710207b262348805b710" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>PType</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a4954872a8bbe9ccbbaa63f6f67bc2f81" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>size</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a4954872a8bbe9ccbbaa63f6f67bc2f81" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>size</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a5cee560a3ed0dfb9b107cb7d0b302a54" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>size_type</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a98f0054c0b8130fa7b3a1b29afbbf942" prot="public" virt="non-virtual"><scope>drawer::Base_iterable</scope><name>Type</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aef6170f7bfa3aa7a3a2a6bb5dfd4a15e" prot="public" virt="virtual"><scope>drawer::Base_iterable</scope><name>~Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aef6170f7bfa3aa7a3a2a6bb5dfd4a15e" prot="public" virt="virtual"><scope>drawer::Base_iterable</scope><name>~Base_iterable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
