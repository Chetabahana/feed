<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classdrawer_1_1Vector" kind="class" language="C++" prot="public">
    <compoundname>drawer::Vector</compoundname>
    <basecompoundref refid="classdrawer_1_1Base__iterable" prot="public" virt="non-virtual">drawer::Base_iterable&lt; T1, T1 &gt;</basecompoundref>
    <basecompoundref refid="classdrawer_1_1Base__iterable" prot="public" virt="non-virtual">drawer::Base_iterable&lt; T1, T1 &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename T1</type>
      </param>
      <param>
        <type>typename T2</type>
        <defval>T1</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classdrawer_1_1Vector_1a13e116f4265f22f04cee1de75f3aade2" prot="public" static="no">
        <type>typename <ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt;::Type</type>
        <definition>typedef typename Base_iterable&lt; T1, T2 &gt;::Type drawer::Vector&lt; T1, T2 &gt;::Type =  typename Base_iterable&lt;T1, T2&gt;::Type</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <qualifiedname>drawer::Vector::Type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="121" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Vector_1a21f884b45e6f7953ab8d0c07a7eb3573" prot="public" static="no">
        <type>typename <ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt;::size_type</type>
        <definition>typedef typename Base_iterable&lt; T1, T2 &gt;::size_type drawer::Vector&lt; T1, T2 &gt;::size_type =  typename Base_iterable&lt;T1, T2&gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>drawer::Vector::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="122" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Vector_1a6a4c6eaa8257df3ef834f5a30c122bab" prot="public" static="no">
        <type>typename <ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt;::iterator</type>
        <definition>typedef typename Base_iterable&lt; T1, T2 &gt;::iterator drawer::Vector&lt; T1, T2 &gt;::iterator =  typename Base_iterable&lt;T1, T2&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>drawer::Vector::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="123" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Vector_1ad51217d628fda06a31c06cd00bd561f8" prot="public" static="no">
        <type>typename <ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt;::const_iterator</type>
        <definition>typedef typename Base_iterable&lt; T1, T2 &gt;::const_iterator drawer::Vector&lt; T1, T2 &gt;::const_iterator =  typename Base_iterable&lt;T1, T2&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>drawer::Vector::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="124" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="124" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classdrawer_1_1Vector_1ad3af3207de5c588db8f4cc8a6a02d7ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(size_t N)</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="126" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a004684857236572dda1ce4162d9f2c9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(std::vector&lt; Type &gt; const &amp;t_containor)</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; const &amp;</type>
          <declname>t_containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="130" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a8ab1e757af06b12c13e7e2fd1bff0e10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(std::vector&lt; Type &gt; &amp;&amp;t_containor)</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; &amp;&amp;</type>
          <declname>t_containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="135" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a3b9c7fd38025ab970b0a30394e2c3307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::~Vector</definition>
        <argsstring>()</argsstring>
        <name>~Vector</name>
        <qualifiedname>drawer::Vector::~Vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="140" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a5d31bedba2188202ed5d8e6c1ffae80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(Vector&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="144" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1aaa0efa0385f5a483aa64ca656530714f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(Vector&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="145" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1aa772793e5cae8193dcc523925d7c1f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; drawer::Vector&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Vector&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Vector::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="146" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1ac214ab2d398846e1c792c9dbc1b376f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; drawer::Vector&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Vector&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Vector::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="147" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1aa015452b4459eefb585e3f3e3c1c04b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int drawer::Vector&lt; T1, T2 &gt;::find</definition>
        <argsstring>(T1 const el) const</argsstring>
        <name>find</name>
        <qualifiedname>drawer::Vector::find</qualifiedname>
        <param>
          <type>T1 const</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="149" column="9" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="149" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a7f1a39c5886e313f9e443aef590d5a97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; drawer::Vector&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator()</name>
        <qualifiedname>drawer::Vector::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="159" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1af57ae6f56fbe3d4332f0cec9b6e182d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type drawer::Vector&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator()</name>
        <qualifiedname>drawer::Vector::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="164" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1ad3af3207de5c588db8f4cc8a6a02d7ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(size_t N)</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="126" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a004684857236572dda1ce4162d9f2c9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(std::vector&lt; Type &gt; const &amp;t_containor)</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; const &amp;</type>
          <declname>t_containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="130" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a8ab1e757af06b12c13e7e2fd1bff0e10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(std::vector&lt; Type &gt; &amp;&amp;t_containor)</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; &amp;&amp;</type>
          <declname>t_containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="135" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a3b9c7fd38025ab970b0a30394e2c3307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::~Vector</definition>
        <argsstring>()</argsstring>
        <name>~Vector</name>
        <qualifiedname>drawer::Vector::~Vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="140" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a5d31bedba2188202ed5d8e6c1ffae80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(Vector&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="144" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1aaa0efa0385f5a483aa64ca656530714f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Vector&lt; T1, T2 &gt;::Vector</definition>
        <argsstring>(Vector&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>Vector</name>
        <qualifiedname>drawer::Vector::Vector</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="145" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1aa772793e5cae8193dcc523925d7c1f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; drawer::Vector&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Vector&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Vector::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="146" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1ac214ab2d398846e1c792c9dbc1b376f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; drawer::Vector&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Vector&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Vector::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="147" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1aa015452b4459eefb585e3f3e3c1c04b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int drawer::Vector&lt; T1, T2 &gt;::find</definition>
        <argsstring>(T1 const el) const</argsstring>
        <name>find</name>
        <qualifiedname>drawer::Vector::find</qualifiedname>
        <param>
          <type>T1 const</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="149" column="9" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="149" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1a7f1a39c5886e313f9e443aef590d5a97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; drawer::Vector&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator()</name>
        <qualifiedname>drawer::Vector::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="159" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Vector_1af57ae6f56fbe3d4332f0cec9b6e182d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type drawer::Vector&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator()</name>
        <qualifiedname>drawer::Vector::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="164" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="164" bodyend="167"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classdrawer_1_1Vector_1a9adc5c284be6add5122567f4cee656c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U1</type>
          </param>
          <param>
            <type>class U2</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Vector&lt; U1, U2 &gt; const &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>drawer::Vector::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; U1, U2 &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="170" column="12" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="175" bodyend="183"/>
      </memberdef>
      <memberdef kind="friend" id="classdrawer_1_1Vector_1a9adc5c284be6add5122567f4cee656c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U1</type>
          </param>
          <param>
            <type>class U2</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Vector&lt; U1, U2 &gt; const &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>drawer::Vector::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classdrawer_1_1Vector" kindref="compound">Vector</ref>&lt; U1, U2 &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="170" column="12" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="175" bodyend="183"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>drawer::Base_iterable&lt; T1, T1 &gt;</label>
        <link refid="classdrawer_1_1Base__iterable"/>
      </node>
      <node id="1">
        <label>drawer::Vector&lt; T1, T2 &gt;</label>
        <link refid="classdrawer_1_1Vector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>drawer::Base_iterable&lt; T1, T1 &gt;</label>
        <link refid="classdrawer_1_1Base__iterable"/>
      </node>
      <node id="1">
        <label>drawer::Vector&lt; T1, T2 &gt;</label>
        <link refid="classdrawer_1_1Vector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/grafed/core/adjacencyMatrix.h" line="118" column="1" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="118" bodyend="172"/>
    <listofallmembers>
      <member refid="classdrawer_1_1Base__iterable_1abea26a8964894cc332f0b2c09bf26ad0" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ab291f7e487e1f4b9d6a73983ad84c832" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a9a2385be6f1d7ffe615f46c0af63a7ff" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6b6a6cc1d60556b5876368d4d9fdf628" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abcaf9f547568ddacd1eee92f62db71f3" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a35d3e01f3ae8117f4cbb688caf2037b2" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abea26a8964894cc332f0b2c09bf26ad0" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ab291f7e487e1f4b9d6a73983ad84c832" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a9a2385be6f1d7ffe615f46c0af63a7ff" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6b6a6cc1d60556b5876368d4d9fdf628" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abcaf9f547568ddacd1eee92f62db71f3" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a35d3e01f3ae8117f4cbb688caf2037b2" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af2dc621564f03d977c20cf75ce7db29c" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a28c0f974d70b61fc76b9c8fdf0fc479b" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af2dc621564f03d977c20cf75ce7db29c" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a28c0f974d70b61fc76b9c8fdf0fc479b" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aae6aaba5c2e4bd1e56cee74cf83d246c" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>clear</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aae6aaba5c2e4bd1e56cee74cf83d246c" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>clear</name></member>
      <member refid="classdrawer_1_1Vector_1ad51217d628fda06a31c06cd00bd561f8" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>const_iterator</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af615d2de5e1c7c8cc0a43b40305312d9" prot="protected" virt="non-virtual"><scope>drawer::Vector</scope><name>elements</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ac867aca6d62b04256703386a238dcfd6" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>empty</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ac867aca6d62b04256703386a238dcfd6" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>empty</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a0000f8ec576b052444fe8956488f92f5" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6153fdc3bd1f09460b24855113a08640" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a0000f8ec576b052444fe8956488f92f5" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6153fdc3bd1f09460b24855113a08640" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>end</name></member>
      <member refid="classdrawer_1_1Vector_1aa015452b4459eefb585e3f3e3c1c04b4" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>find</name></member>
      <member refid="classdrawer_1_1Vector_1aa015452b4459eefb585e3f3e3c1c04b4" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>find</name></member>
      <member refid="classdrawer_1_1Vector_1a6a4c6eaa8257df3ef834f5a30c122bab" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>iterator</name></member>
      <member refid="classdrawer_1_1Vector_1a7f1a39c5886e313f9e443aef590d5a97" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator()</name></member>
      <member refid="classdrawer_1_1Vector_1af57ae6f56fbe3d4332f0cec9b6e182d7" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator()</name></member>
      <member refid="classdrawer_1_1Vector_1a7f1a39c5886e313f9e443aef590d5a97" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator()</name></member>
      <member refid="classdrawer_1_1Vector_1af57ae6f56fbe3d4332f0cec9b6e182d7" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator()</name></member>
      <member refid="classdrawer_1_1Vector_1a9adc5c284be6add5122567f4cee656c3" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classdrawer_1_1Vector_1a9adc5c284be6add5122567f4cee656c3" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classdrawer_1_1Vector_1aa772793e5cae8193dcc523925d7c1f0c" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Vector_1ac214ab2d398846e1c792c9dbc1b376f4" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Vector_1aa772793e5cae8193dcc523925d7c1f0c" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Vector_1ac214ab2d398846e1c792c9dbc1b376f4" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a503b6a02769c593e733c19a9910df3b7" prot="public" virt="non-virtual" ambiguityscope="drawer::Base_iterable&lt; T1, T1 &gt;::"><scope>drawer::Vector</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a1e8a0aa97cf31ce23e2d140e428b0d73" prot="public" virt="non-virtual" ambiguityscope="drawer::Base_iterable&lt; T1, T1 &gt;::"><scope>drawer::Vector</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a961fe8389c3ce7286d574dbba0956500" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a009588b482fa70083ed434e05321d990" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a961fe8389c3ce7286d574dbba0956500" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a009588b482fa70083ed434e05321d990" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1afaccb4d54647710207b262348805b710" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>PType</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a4954872a8bbe9ccbbaa63f6f67bc2f81" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>size</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a4954872a8bbe9ccbbaa63f6f67bc2f81" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>size</name></member>
      <member refid="classdrawer_1_1Vector_1a21f884b45e6f7953ab8d0c07a7eb3573" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>size_type</name></member>
      <member refid="classdrawer_1_1Vector_1a13e116f4265f22f04cee1de75f3aade2" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Type</name></member>
      <member refid="classdrawer_1_1Vector_1ad3af3207de5c588db8f4cc8a6a02d7ff" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1a004684857236572dda1ce4162d9f2c9b" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1a8ab1e757af06b12c13e7e2fd1bff0e10" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1a5d31bedba2188202ed5d8e6c1ffae80b" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1aaa0efa0385f5a483aa64ca656530714f" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1ad3af3207de5c588db8f4cc8a6a02d7ff" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1a004684857236572dda1ce4162d9f2c9b" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1a8ab1e757af06b12c13e7e2fd1bff0e10" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1a5d31bedba2188202ed5d8e6c1ffae80b" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Vector_1aaa0efa0385f5a483aa64ca656530714f" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>Vector</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aef6170f7bfa3aa7a3a2a6bb5dfd4a15e" prot="public" virt="virtual"><scope>drawer::Vector</scope><name>~Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aef6170f7bfa3aa7a3a2a6bb5dfd4a15e" prot="public" virt="virtual"><scope>drawer::Vector</scope><name>~Base_iterable</name></member>
      <member refid="classdrawer_1_1Vector_1a3b9c7fd38025ab970b0a30394e2c3307" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>~Vector</name></member>
      <member refid="classdrawer_1_1Vector_1a3b9c7fd38025ab970b0a30394e2c3307" prot="public" virt="non-virtual"><scope>drawer::Vector</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
