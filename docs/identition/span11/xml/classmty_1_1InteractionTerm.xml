<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classmty_1_1InteractionTerm" kind="class" language="C++" prot="public">
    <compoundname>mty::InteractionTerm</compoundname>
    <includes refid="interactionTerm_8h" local="no">interactionTerm.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmty_1_1InteractionTerm_1a1b6c445759c14e08255494dc32ce6f48" prot="public" static="no">
        <type>std::vector&lt; std::pair&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>, <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt; &gt;</type>
        <definition>using mty::InteractionTerm::permutation =  std::vector&lt;std::pair&lt;csl::Index, csl::Index&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>permutation</name>
        <qualifiedname>mty::InteractionTerm::permutation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="52" column="5" bodyfile="src/marty/core/interactionTerm.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmty_1_1InteractionTerm_1aefa29424be23c50944cd4093990596b0" prot="public" static="no">
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> &gt;</type>
        <definition>using mty::InteractionTerm::TermType =  std::shared_ptr&lt;InteractionTerm&gt;</definition>
        <argsstring></argsstring>
        <name>TermType</name>
        <qualifiedname>mty::InteractionTerm::TermType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="54" column="5" bodyfile="src/marty/core/interactionTerm.h" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classmty_1_1InteractionTerm_1a1941aa6e33340d10ec596ade4fa1156c" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::abbreviateFactors</definition>
        <argsstring></argsstring>
        <name>abbreviateFactors</name>
        <qualifiedname>mty::InteractionTerm::abbreviateFactors</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Options telling if factors (constants etc.) must be abbreviated or not. Default is false. </para>
        </briefdescription>
        <detaileddescription>
<para>If enabled, abbreviations will be introduced for all interaction terms. This can save some calculations but will make the lagrangian much less readable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="64" column="24" bodyfile="src/marty/core/interactionTerm.h" bodystart="64" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmty_1_1InteractionTerm_1a7c46df5ca4f89e163eb340d771024d06" prot="private" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::term</definition>
        <argsstring></argsstring>
        <name>term</name>
        <qualifiedname>mty::InteractionTerm::term</qualifiedname>
        <briefdescription>
<para>Initial expression defining the interaction (symbolic <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> term). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="422" column="15" bodyfile="src/marty/core/interactionTerm.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1InteractionTerm_1af24280adc3ef35ccba5456ad67a92bea" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt;</type>
        <definition>std::vector&lt;QuantumField&gt; mty::InteractionTerm::content</definition>
        <argsstring></argsstring>
        <name>content</name>
        <qualifiedname>mty::InteractionTerm::content</qualifiedname>
        <briefdescription>
<para>Quantum fields in the interactions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="427" column="17" bodyfile="src/marty/core/interactionTerm.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1InteractionTerm_1a1b40701025ed1ea1327aee5c34c367cb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::forcedContent</definition>
        <argsstring></argsstring>
        <name>forcedContent</name>
        <qualifiedname>mty::InteractionTerm::forcedContent</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="429" column="10" bodyfile="src/marty/core/interactionTerm.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1InteractionTerm_1a1ce96347eb2976cbcefcf2ba424ac9da" prot="private" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::globalFactor</definition>
        <argsstring></argsstring>
        <name>globalFactor</name>
        <qualifiedname>mty::InteractionTerm::globalFactor</qualifiedname>
        <initializer>= CSL_1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="431" column="15" bodyfile="src/marty/core/interactionTerm.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1InteractionTerm_1acb63db0857c9b22b729aab6d6870063c" prot="private" static="no" mutable="no">
        <type>permutation</type>
        <definition>permutation mty::InteractionTerm::globalPermutation</definition>
        <argsstring></argsstring>
        <name>globalPermutation</name>
        <qualifiedname>mty::InteractionTerm::globalPermutation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="433" column="17" bodyfile="src/marty/core/interactionTerm.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1InteractionTerm_1a165b9975ae5b291349a42b3db0cb9fc4" prot="private" static="no" mutable="no">
        <type>csl::vector_expr</type>
        <definition>csl::vector_expr mty::InteractionTerm::factors</definition>
        <argsstring></argsstring>
        <name>factors</name>
        <qualifiedname>mty::InteractionTerm::factors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="435" column="22" bodyfile="src/marty/core/interactionTerm.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1InteractionTerm_1a23625ccadc487ab8a2a93f7dde0baeb4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; permutation &gt;</type>
        <definition>std::vector&lt;permutation&gt; mty::InteractionTerm::permutations</definition>
        <argsstring></argsstring>
        <name>permutations</name>
        <qualifiedname>mty::InteractionTerm::permutations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="437" column="17" bodyfile="src/marty/core/interactionTerm.h" bodystart="437" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ad449555f7445445af47c72c3e8a6cf3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::InteractionTerm::InteractionTerm</definition>
        <argsstring>(InteractionTerm const &amp;)</argsstring>
        <name>InteractionTerm</name>
        <qualifiedname>mty::InteractionTerm::InteractionTerm</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="67" column="5" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1aceeaf146af45b7bd71235cd23dc9f423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> &amp;</type>
        <definition>InteractionTerm &amp; mty::InteractionTerm::operator=</definition>
        <argsstring>(InteractionTerm const &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>mty::InteractionTerm::operator=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="69" column="21" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a5abd6ec7a55022e900bd8f57ee5b2eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::InteractionTerm::InteractionTerm</definition>
        <argsstring>()=default</argsstring>
        <name>InteractionTerm</name>
        <qualifiedname>mty::InteractionTerm::InteractionTerm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="71" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ae0bf804b4262013781c4fbe247818ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::InteractionTerm::InteractionTerm</definition>
        <argsstring>(InteractionTerm &amp;&amp;)=default</argsstring>
        <name>InteractionTerm</name>
        <qualifiedname>mty::InteractionTerm::InteractionTerm</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="73" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a173b7d83dc0a4c7f4bf6a11763c52e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> &amp;</type>
        <definition>InteractionTerm &amp; mty::InteractionTerm::operator=</definition>
        <argsstring>(InteractionTerm &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>mty::InteractionTerm::operator=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="75" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a53e538c66cc005862817f58abfa4f667" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref></type>
        <definition>InteractionTerm mty::InteractionTerm::copy</definition>
        <argsstring>() const</argsstring>
        <name>copy</name>
        <qualifiedname>mty::InteractionTerm::copy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="77" column="21" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ab43ec31f7215d3978c3ab6894985a799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::InteractionTerm::InteractionTerm</definition>
        <argsstring>(csl::Expr const &amp;term, std::vector&lt; QuantumField &gt; const &amp;t_content)</argsstring>
        <name>InteractionTerm</name>
        <qualifiedname>mty::InteractionTerm::InteractionTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; const &amp;</type>
          <declname>t_content</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="79" column="5" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="45" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ac6149a5331758a419abfc1043b9ca027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::InteractionTerm::InteractionTerm</definition>
        <argsstring>(csl::Expr const &amp;term, bool copy=true)</argsstring>
        <name>InteractionTerm</name>
        <qualifiedname>mty::InteractionTerm::InteractionTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="82" column="5" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="29" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a9f4fd684f26338739e56c2531e0d089a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::hasSameContent</definition>
        <argsstring>(InteractionTerm const &amp;other) const</argsstring>
        <name>hasSameContent</name>
        <qualifiedname>mty::InteractionTerm::hasSameContent</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="91" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1af6472b2d272c487ec9d6b89d72d076b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::hasSameContent</definition>
        <argsstring>(std::vector&lt; mty::QuantumField &gt; const &amp;fields) const</argsstring>
        <name>hasSameContent</name>
        <qualifiedname>mty::InteractionTerm::hasSameContent</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; const &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="93" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ae784d37ea3d966bea64d9ceffe069060" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::InteractionTerm::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>mty::InteractionTerm::size</qualifiedname>
        <briefdescription>
<para>Returns the number of interacting fields. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of interacting fields. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="100" column="12" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a659b8dbe0f4de6a7a30aadbd268d9aba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::InteractionTerm::nTerms</definition>
        <argsstring>() const</argsstring>
        <name>nTerms</name>
        <qualifiedname>mty::InteractionTerm::nTerms</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="102" column="12" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a5976913750699af8aa5941774569d697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::InteractionTerm::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>mty::InteractionTerm::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="104" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="201" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a7e1c608566a82f60ab27e36231bf914c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::getTerm</definition>
        <argsstring>() const</argsstring>
        <name>getTerm</name>
        <qualifiedname>mty::InteractionTerm::getTerm</qualifiedname>
        <briefdescription>
<para>Returns the symbolic expression corresponding to the interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>term </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="111" column="15" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a56d986ed38983dfaedbfaa40f46167fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::getGlobalFactor</definition>
        <argsstring>() const</argsstring>
        <name>getGlobalFactor</name>
        <qualifiedname>mty::InteractionTerm::getGlobalFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="113" column="15" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a2990f94320a7da24e61827ee5ff5f538" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::getTotalFactor</definition>
        <argsstring>() const</argsstring>
        <name>getTotalFactor</name>
        <qualifiedname>mty::InteractionTerm::getTotalFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="115" column="15" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ae4daa3545b1aaf14e646735fa0f67925" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::getMass</definition>
        <argsstring>() const</argsstring>
        <name>getMass</name>
        <qualifiedname>mty::InteractionTerm::getMass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="117" column="15" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="237" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a67462ad4466ae3586bda2546cc34f796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; &amp;</type>
        <definition>vector&lt; QuantumField &gt; &amp; mty::InteractionTerm::getContent</definition>
        <argsstring>()</argsstring>
        <name>getContent</name>
        <qualifiedname>mty::InteractionTerm::getContent</qualifiedname>
        <briefdescription>
<para>Returns a reference to the field content of the interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>content </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="124" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a3043037e4c3508355e2d5bc736da0251" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; const &amp;</type>
        <definition>vector&lt; QuantumField &gt; const  &amp; mty::InteractionTerm::getContent</definition>
        <argsstring>() const</argsstring>
        <name>getContent</name>
        <qualifiedname>mty::InteractionTerm::getContent</qualifiedname>
        <briefdescription>
<para>Returns a const reference to the field content of the interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>content </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="132" column="23" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a3af9b786733d9c440b7340fe3baeba01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> &gt;</type>
        <definition>vector&lt; Particle &gt; mty::InteractionTerm::getParticles</definition>
        <argsstring>() const</argsstring>
        <name>getParticles</name>
        <qualifiedname>mty::InteractionTerm::getParticles</qualifiedname>
        <briefdescription>
<para>Returns the set of different interacting particles. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates the result, looping through the content and isolating different fields. <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> objects are returned, allowing one to then use them with other interface functions.</para>
<para><simplesect kind="return"><para>The set of different interacting particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="143" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="277" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a81ba9ea1ca4881f2721855d6cbfe5025" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> * &gt;</type>
        <definition>vector&lt; QuantumFieldParent * &gt; mty::InteractionTerm::getParticlesInfo</definition>
        <argsstring>() const</argsstring>
        <name>getParticlesInfo</name>
        <qualifiedname>mty::InteractionTerm::getParticlesInfo</qualifiedname>
        <briefdescription>
<para>Returns the set of different interacting particles. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates the result, looping through the content and isolating different fields. Pointers to <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> are returned meaning that this function should be use for read-only operations on the fields. Otherwise use <ref refid="classmty_1_1InteractionTerm_1a3af9b786733d9c440b7340fe3baeba01" kindref="member">getParticles()</ref>.</para>
<para><simplesect kind="return"><para>The set of different interacting particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="155" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="318" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a908eead8e808590c3697e697f4e7c474" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::InteractionTerm::count</definition>
        <argsstring>(QuantumFieldParent *particle) const</argsstring>
        <name>count</name>
        <qualifiedname>mty::InteractionTerm::count</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
<para>Counts, in the content, how many particles are of a given species. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle</parametername>
</parameternamelist>
<parameterdescription>
<para>Species.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of interacting particles having exactly <bold>particle</bold> as parent (species). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="166" column="12" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="288" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a424173f70904d9d998bf64f274301b7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mty::InteractionTerm::getExponent</definition>
        <argsstring>(csl::Expr const &amp;parameter) const</argsstring>
        <name>getExponent</name>
        <qualifiedname>mty::InteractionTerm::getExponent</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Returns the exponent associated to a given coupling in the interaction term. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Coupling to test.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the term does not depend on <bold>param</bold>. </para>
</simplesect>
<simplesect kind="return"><para>n if the term is proportional to <formula id="132">$ param^n $</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="177" column="12" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="298" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a6864a9578d4200403ce8fb8a5a7a5ae9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::getFieldProduct</definition>
        <argsstring>() const</argsstring>
        <name>getFieldProduct</name>
        <qualifiedname>mty::InteractionTerm::getFieldProduct</qualifiedname>
        <briefdescription>
<para>Returns the product of bare fields with only free indices. </para>
        </briefdescription>
        <detaileddescription>
<para>This field product is used for calculations. All factors and index contraction are removed from the term to obtain a very simple and general expression. For example, interaction terms    <formula id="133">\[
     eQ A_\mu\bar{psi}_\alpha \gamma^\mu_{\alpha\beta}\psi{\beta},\\
     -\frac{g^2}{4}f^{EAB}f^{ECD}G_\mu^A G_\nu^B G^{C\mu}G^{D\nu},
\]</formula> have respective field products equal to    <formula id="134">\[
     A_\mu \bar{psi}_{alpha}\psi_{\beta},
     G^{A\mu}G^{B\nu}G^{c\rho}G^{D\sigma}.
\]</formula></para>
<para><simplesect kind="return"><para>The field product of the interaction term.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1InteractionTerm_1a78717f01510538ab06e363ca2909c109" kindref="member">applyFactorAndSymmetriesOn()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="199" column="15" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="401" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1add4fca784e2248eb22803b058d5ea75f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::getFullExpression</definition>
        <argsstring>() const</argsstring>
        <name>getFullExpression</name>
        <qualifiedname>mty::InteractionTerm::getFullExpression</qualifiedname>
        <briefdescription>
<para>Returns the full expression of the interaction term. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be equivalent to the <ref refid="classmty_1_1InteractionTerm_1a7e1c608566a82f60ab27e36231bf914c" kindref="member">getTerm()</ref> function, but does more calculations (this means that one should not use it in general). This function is most of all a way to check that applying symmetries on the bare field product returned by <ref refid="classmty_1_1InteractionTerm_1a6864a9578d4200403ce8fb8a5a7a5ae9" kindref="member">getFieldProduct()</ref> one recovers an expression equivalent to term.</para>
<para><simplesect kind="note"><para>This function is quasi-equivalent to call <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref><sp/>fullExpression<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classmty_1_1InteractionTerm_1a78717f01510538ab06e363ca2909c109" kindref="member">applyFactorAndSymmetriesOn</ref>(<ref refid="classmty_1_1InteractionTerm_1a6864a9578d4200403ce8fb8a5a7a5ae9" kindref="member">getFieldProduct</ref>());<sp/></highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="return"><para>The full expression corresponding to the interaction term. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="217" column="15" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="421" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a78717f01510538ab06e363ca2909c109" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::applyFactorAndSymmetriesOn</definition>
        <argsstring>(csl::Expr const &amp;init) const</argsstring>
        <name>applyFactorAndSymmetriesOn</name>
        <qualifiedname>mty::InteractionTerm::applyFactorAndSymmetriesOn</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Applies all factors and symmetries on a field product to recover the full interaction term properties. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies all factors and symmetries that were removed to obtain the result of <ref refid="classmty_1_1InteractionTerm_1a6864a9578d4200403ce8fb8a5a7a5ae9" kindref="member">getFieldProduct()</ref>. This allows to do the calculation with a simple and general field product, and apply this function on the result to recover couplings, index contractions etc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial expression on which factors and symmetries must be applied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression on which factors and symmetries have been applied.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1InteractionTerm_1a6864a9578d4200403ce8fb8a5a7a5ae9" kindref="member">getFieldProduct()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="237" column="15" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="330" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a94f8315346a94f657a37cdd266051d41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::InteractionTerm::getPoint</definition>
        <argsstring>() const</argsstring>
        <name>getPoint</name>
        <qualifiedname>mty::InteractionTerm::getPoint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="239" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="357" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ad3a69cdc0b4c6faa02373079a8bc59c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::InteractionTerm::setPoint</definition>
        <argsstring>(csl::Tensor const &amp;newPoint)</argsstring>
        <name>setPoint</name>
        <qualifiedname>mty::InteractionTerm::setPoint</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>newPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="241" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="364" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ab22194c45d857b9f8215ab7b3af9b1a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::contains</definition>
        <argsstring>(const QuantumFieldParent *p) const</argsstring>
        <name>contains</name>
        <qualifiedname>mty::InteractionTerm::contains</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Tells if the interaction term contains a given field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for a partial match between fields, and takes into account fields that contain others. For example, a Dirac fermion contains its Weyl fermions and not the contrary. For a Dirac fermion <formula id="135">$ \psi \equiv \psi_L \oplus \psi_R $</formula>, one has that <formula id="136">$ \psi $</formula> contains <formula id="137">$ \psi_L $</formula> but <formula id="137">$ \psi_L $</formula> does not contain <formula id="136">$ \psi $</formula>. Otherwise, this function is equivalent to <ref refid="classmty_1_1InteractionTerm_1a25c63a4469a102be1839bcf1114b345f" kindref="member">containsExactly()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>A const pointer to the parent of the field to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the interaction term contains <bold>p</bold> or a particle of the same species included in <bold>p</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="260" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="373" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a7e2400224f5e840c36b228586ba47b87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::containsWeakly</definition>
        <argsstring>(const QuantumFieldParent *p) const</argsstring>
        <name>containsWeakly</name>
        <qualifiedname>mty::InteractionTerm::containsWeakly</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Tells if the interaction term contains a given field or only a part of it. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for a partial match between fields, and takes into account fields that contain others. For example, a Dirac fermion contains its Weyl fermions and not the contrary. This weak comparison will return true event if the interaction term does not contain the entire field (a Weyl fermion in particular contains in this weak sense its Dirac parent).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>A const pointer to the parent of the field to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the interaction term contains <bold>p</bold> or a particle of the same species. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="279" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="382" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1af300dfb77c3976a2fc18e5535b8a51bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::contains</definition>
        <argsstring>(mty::Particle const &amp;p) const</argsstring>
        <name>contains</name>
        <qualifiedname>mty::InteractionTerm::contains</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Tells if the interaction term contains a given field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for a partial match between fields, and takes into account fields that contain others. For example, a Dirac fermion contains its Weyl fermions and not the contrary. For a Dirac fermion <formula id="135">$ \psi \equiv \psi_L \oplus \psi_R $</formula>, one has that <formula id="136">$ \psi $</formula> contains <formula id="137">$ \psi_L $</formula> but <formula id="137">$ \psi_L $</formula> does not contain <formula id="136">$ \psi $</formula>. Otherwise, this function is equivalent to <ref refid="classmty_1_1InteractionTerm_1a25c63a4469a102be1839bcf1114b345f" kindref="member">containsExactly()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The particle to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the interaction term contains <bold>p</bold> or a particle of the same species included in <bold>p</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="298" column="10" bodyfile="src/marty/core/interactionTerm.h" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ae4e37fce2fd577dbdf4f5ae7e08bcf4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::containsWeakly</definition>
        <argsstring>(mty::Particle const &amp;p) const</argsstring>
        <name>containsWeakly</name>
        <qualifiedname>mty::InteractionTerm::containsWeakly</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Tells if the interaction term contains a given field or only a part of it. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for a partial match between fields, and takes into account fields that contain others. For example, a Dirac fermion contains its Weyl fermions and not the contrary. This weak comparison will return true event if the interaction term does not contain the entire field (a Weyl fermion in particular contains in this weak sense its Dirac parent).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>A const pointer to the parent of the field to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the interaction term contains <bold>p</bold> or a particle of the same species. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="320" column="10" bodyfile="src/marty/core/interactionTerm.h" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a25c63a4469a102be1839bcf1114b345f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::containsExactly</definition>
        <argsstring>(const QuantumFieldParent *p) const</argsstring>
        <name>containsExactly</name>
        <qualifiedname>mty::InteractionTerm::containsExactly</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Tells if the interaction term contains exactly a given field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for an exact match between fields, and does not take into account fields that contain others. For example, this function considers that for a Dirac fermion <formula id="138">$ \psi = \psi_L\oplus\psi_R $</formula>, one has that <formula id="136">$ \psi $</formula> and <formula id="137">$ \psi_L $</formula> are <bold>different</bold> fields (which is strictly true).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>A const pointer to the parent of the field to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the interaction term contains <bold>p</bold> or a particle of the same specied. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="340" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="392" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1ad7de7fa86c0d6f1eaf4db481ccda2faa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::containsExactly</definition>
        <argsstring>(mty::Particle const &amp;p) const</argsstring>
        <name>containsExactly</name>
        <qualifiedname>mty::InteractionTerm::containsExactly</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Tells if the interaction term contains exactly a given field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function searches for an exact match between fields, and does not take into account fields that contain others. For example, this function considers that for a Dirac fermion <formula id="138">$ \psi = \psi_L\oplus\psi_R $</formula>, one has that <formula id="136">$ \psi $</formula> and <formula id="137">$ \psi_L $</formula> are <bold>different</bold> fields (which is strictly true).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The particle to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the interaction term contains <bold>p</bold> or a particle of the same specied. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="357" column="10" bodyfile="src/marty/core/interactionTerm.h" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a1bca020422a937e065ec3f02cd0ae97f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::operator==</definition>
        <argsstring>(const InteractionTerm &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>mty::InteractionTerm::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality operator, compares the symbolic expressions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other interaction term to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two interaction terms have the same term (<ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> comparison is used). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="371" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="433" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a5ce6bd56ec6548df83f9d1c3f9d03cb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::operator==</definition>
        <argsstring>(const csl::Expr &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>mty::InteractionTerm::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality operator with a <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbolic expression to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the symbolic expression for the term (term) is equal (<ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> definition of equality) to <bold>other</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="382" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="440" bodyend="443"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1aef601ff240863f792f8082c3288d7d02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::InteractionTerm::fillContent</definition>
        <argsstring>(csl::Expr const &amp;prod, std::vector&lt; mty::QuantumField &gt; &amp;fields)</argsstring>
        <name>fillContent</name>
        <qualifiedname>mty::InteractionTerm::fillContent</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="85" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="105" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1af2c67e16059d668ee067371af46124c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">TermType</ref> &gt;</type>
        <definition>vector&lt; InteractionTerm::TermType &gt; mty::InteractionTerm::createAndDispatch</definition>
        <argsstring>(csl::Expr const &amp;expression)</argsstring>
        <name>createAndDispatch</name>
        <qualifiedname>mty::InteractionTerm::createAndDispatch</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="89" column="5" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="117" bodyend="185"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classmty_1_1InteractionTerm_1a72223169099cce83c2a1391d18c3f84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, InteractionTerm const &amp;term)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::InteractionTerm::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1InteractionTerm" kindref="compound">InteractionTerm</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="384" column="12"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a25a69960b164ebc5218288f6b59e6e06" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::gatherFieldContent</definition>
        <argsstring>(csl::Expr const &amp;expr, size_t multiplicity, csl::IndexStructure const &amp;derivativeStructure)</argsstring>
        <name>gatherFieldContent</name>
        <qualifiedname>mty::InteractionTerm::gatherFieldContent</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>multiplicity</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> const &amp;</type>
          <declname>derivativeStructure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="388" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="458" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a54841103920b9fcf9fa3ddb355dd243e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::InteractionTerm::gatherFieldContent</definition>
        <argsstring>()</argsstring>
        <name>gatherFieldContent</name>
        <qualifiedname>mty::InteractionTerm::gatherFieldContent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="392" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="449" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a4b65050deb3c53ffaf55c702022d1382" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>, <ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> &gt;</type>
        <definition>pair&lt; csl::Expr, csl::IndexStructure &gt; mty::InteractionTerm::buildContent</definition>
        <argsstring>(QuantumField expr, csl::IndexStructure const &amp;structure)</argsstring>
        <name>buildContent</name>
        <qualifiedname>mty::InteractionTerm::buildContent</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> const &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="397" column="5" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="533" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a9bd5d7c54d29059ec6e3bd13fe9f8bb0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::InteractionTerm::gatherFactorsAndSymmetries</definition>
        <argsstring>()</argsstring>
        <name>gatherFactorsAndSymmetries</name>
        <qualifiedname>mty::InteractionTerm::gatherFactorsAndSymmetries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="403" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="585" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1aa7b32069804a98213da3f32174a2fd56" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::InteractionTerm::gatherSymmetries</definition>
        <argsstring>(csl::Expr const &amp;sum)</argsstring>
        <name>gatherSymmetries</name>
        <qualifiedname>mty::InteractionTerm::gatherSymmetries</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="405" column="10" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="647" bodyend="664"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a1bc27f30b38fb4d2118e401904db6b30" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::containsQuantumField</definition>
        <argsstring>(csl::Expr const &amp;expr)</argsstring>
        <name>containsQuantumField</name>
        <qualifiedname>mty::InteractionTerm::containsQuantumField</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="394" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="517" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a21fb8bf1e7009b5ab4bfe22c58cc57fe" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::InteractionTerm::recallIndices</definition>
        <argsstring>(permutation &amp;perm, csl::IndexStructure const &amp;old, csl::IndexStructure const &amp;structure)</argsstring>
        <name>recallIndices</name>
        <qualifiedname>mty::InteractionTerm::recallIndices</qualifiedname>
        <param>
          <type>permutation &amp;</type>
          <declname>perm</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> const &amp;</type>
          <declname>old</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">csl::IndexStructure</ref> const &amp;</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="399" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="571" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a2ad074d55fe4c4a5a732201bc64103c9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::areSimilarField</definition>
        <argsstring>(QuantumField const &amp;A, QuantumField const &amp;B)</argsstring>
        <name>areSimilarField</name>
        <qualifiedname>mty::InteractionTerm::areSimilarField</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="407" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="666" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1a783e8d4c958dde5533846d836caa4ea3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::InteractionTerm::areSimilarContent</definition>
        <argsstring>(std::vector&lt; QuantumField &gt; const &amp;A, std::vector&lt; QuantumField &gt; const &amp;B)</argsstring>
        <name>areSimilarContent</name>
        <qualifiedname>mty::InteractionTerm::areSimilarContent</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> &gt; const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="409" column="17" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="676" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1InteractionTerm_1abb072158cf68554fe1c7cccd81f116d3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::InteractionTerm::applyPermutation</definition>
        <argsstring>(permutation const &amp;perm, csl::Expr const &amp;init, std::map&lt; csl::Index, csl::Index &gt; &amp;constraints)</argsstring>
        <name>applyPermutation</name>
        <qualifiedname>mty::InteractionTerm::applyPermutation</qualifiedname>
        <param>
          <type>permutation const &amp;</type>
          <declname>perm</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>, <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/interactionTerm.h" line="413" column="5" bodyfile="src/marty/core/interactionTerm.cpp" bodystart="707" bodyend="740"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Interaction term (in the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>) in MARTY. </para>
    </briefdescription>
    <detaileddescription>
<para>This class stores an interaction term and decomposes it in a more abstract representation to lighten calculations of Feynman rules (that is the full quantum calculation of tree-level matrix elements). It is used as the term container in the <ref refid="classmty_1_1Lagrangian" kindref="compound">mty::Lagrangian</ref>.</para>
<para>This class is also used, at the user interface level, in <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> filters (<ref refid="classmty_1_1FeynOptions_1a4b0441b267801313062a3fddcb1ac7db" kindref="member">mty::FeynOptions::LagrangianFilter</ref>), that are predicates taking a <ref refid="classmty_1_1InteractionTerm" kindref="compound">mty::InteractionTerm</ref> (const reference) as parameter. Functions that are relevant to use as filter conditions are documented (other functions may also be documented) i.e. an undocumented function is probably not relevant for filtering anyway. </para>
    </detaileddescription>
    <location file="src/marty/core/interactionTerm.h" line="49" column="1" bodyfile="src/marty/core/interactionTerm.h" bodystart="49" bodyend="438"/>
    <listofallmembers>
      <member refid="classmty_1_1InteractionTerm_1a1941aa6e33340d10ec596ade4fa1156c" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>abbreviateFactors</name></member>
      <member refid="classmty_1_1InteractionTerm_1a78717f01510538ab06e363ca2909c109" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>applyFactorAndSymmetriesOn</name></member>
      <member refid="classmty_1_1InteractionTerm_1abb072158cf68554fe1c7cccd81f116d3" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>applyPermutation</name></member>
      <member refid="classmty_1_1InteractionTerm_1a783e8d4c958dde5533846d836caa4ea3" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>areSimilarContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1a2ad074d55fe4c4a5a732201bc64103c9" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>areSimilarField</name></member>
      <member refid="classmty_1_1InteractionTerm_1a4b65050deb3c53ffaf55c702022d1382" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>buildContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1a5976913750699af8aa5941774569d697" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>clear</name></member>
      <member refid="classmty_1_1InteractionTerm_1ab22194c45d857b9f8215ab7b3af9b1a5" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>contains</name></member>
      <member refid="classmty_1_1InteractionTerm_1af300dfb77c3976a2fc18e5535b8a51bd" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>contains</name></member>
      <member refid="classmty_1_1InteractionTerm_1a25c63a4469a102be1839bcf1114b345f" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>containsExactly</name></member>
      <member refid="classmty_1_1InteractionTerm_1ad7de7fa86c0d6f1eaf4db481ccda2faa" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>containsExactly</name></member>
      <member refid="classmty_1_1InteractionTerm_1a1bc27f30b38fb4d2118e401904db6b30" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>containsQuantumField</name></member>
      <member refid="classmty_1_1InteractionTerm_1a7e2400224f5e840c36b228586ba47b87" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>containsWeakly</name></member>
      <member refid="classmty_1_1InteractionTerm_1ae4e37fce2fd577dbdf4f5ae7e08bcf4d" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>containsWeakly</name></member>
      <member refid="classmty_1_1InteractionTerm_1af24280adc3ef35ccba5456ad67a92bea" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>content</name></member>
      <member refid="classmty_1_1InteractionTerm_1a53e538c66cc005862817f58abfa4f667" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>copy</name></member>
      <member refid="classmty_1_1InteractionTerm_1a908eead8e808590c3697e697f4e7c474" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>count</name></member>
      <member refid="classmty_1_1InteractionTerm_1af2c67e16059d668ee067371af46124c8" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>createAndDispatch</name></member>
      <member refid="classmty_1_1InteractionTerm_1a165b9975ae5b291349a42b3db0cb9fc4" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>factors</name></member>
      <member refid="classmty_1_1InteractionTerm_1aef601ff240863f792f8082c3288d7d02" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>fillContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1a1b40701025ed1ea1327aee5c34c367cb" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>forcedContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1a9bd5d7c54d29059ec6e3bd13fe9f8bb0" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>gatherFactorsAndSymmetries</name></member>
      <member refid="classmty_1_1InteractionTerm_1a25a69960b164ebc5218288f6b59e6e06" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>gatherFieldContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1a54841103920b9fcf9fa3ddb355dd243e" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>gatherFieldContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1aa7b32069804a98213da3f32174a2fd56" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>gatherSymmetries</name></member>
      <member refid="classmty_1_1InteractionTerm_1a67462ad4466ae3586bda2546cc34f796" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1a3043037e4c3508355e2d5bc736da0251" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1a424173f70904d9d998bf64f274301b7f" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getExponent</name></member>
      <member refid="classmty_1_1InteractionTerm_1a6864a9578d4200403ce8fb8a5a7a5ae9" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getFieldProduct</name></member>
      <member refid="classmty_1_1InteractionTerm_1add4fca784e2248eb22803b058d5ea75f" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getFullExpression</name></member>
      <member refid="classmty_1_1InteractionTerm_1a56d986ed38983dfaedbfaa40f46167fc" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getGlobalFactor</name></member>
      <member refid="classmty_1_1InteractionTerm_1ae4daa3545b1aaf14e646735fa0f67925" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getMass</name></member>
      <member refid="classmty_1_1InteractionTerm_1a3af9b786733d9c440b7340fe3baeba01" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getParticles</name></member>
      <member refid="classmty_1_1InteractionTerm_1a81ba9ea1ca4881f2721855d6cbfe5025" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getParticlesInfo</name></member>
      <member refid="classmty_1_1InteractionTerm_1a94f8315346a94f657a37cdd266051d41" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getPoint</name></member>
      <member refid="classmty_1_1InteractionTerm_1a7e1c608566a82f60ab27e36231bf914c" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getTerm</name></member>
      <member refid="classmty_1_1InteractionTerm_1a2990f94320a7da24e61827ee5ff5f538" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>getTotalFactor</name></member>
      <member refid="classmty_1_1InteractionTerm_1a1ce96347eb2976cbcefcf2ba424ac9da" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>globalFactor</name></member>
      <member refid="classmty_1_1InteractionTerm_1acb63db0857c9b22b729aab6d6870063c" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>globalPermutation</name></member>
      <member refid="classmty_1_1InteractionTerm_1a9f4fd684f26338739e56c2531e0d089a" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>hasSameContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1af6472b2d272c487ec9d6b89d72d076b3" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>hasSameContent</name></member>
      <member refid="classmty_1_1InteractionTerm_1ad449555f7445445af47c72c3e8a6cf3a" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>InteractionTerm</name></member>
      <member refid="classmty_1_1InteractionTerm_1a5abd6ec7a55022e900bd8f57ee5b2eee" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>InteractionTerm</name></member>
      <member refid="classmty_1_1InteractionTerm_1ae0bf804b4262013781c4fbe247818ce3" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>InteractionTerm</name></member>
      <member refid="classmty_1_1InteractionTerm_1ab43ec31f7215d3978c3ab6894985a799" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>InteractionTerm</name></member>
      <member refid="classmty_1_1InteractionTerm_1ac6149a5331758a419abfc1043b9ca027" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>InteractionTerm</name></member>
      <member refid="classmty_1_1InteractionTerm_1a659b8dbe0f4de6a7a30aadbd268d9aba" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>nTerms</name></member>
      <member refid="classmty_1_1InteractionTerm_1a72223169099cce83c2a1391d18c3f84a" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmty_1_1InteractionTerm_1aceeaf146af45b7bd71235cd23dc9f423" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>operator=</name></member>
      <member refid="classmty_1_1InteractionTerm_1a173b7d83dc0a4c7f4bf6a11763c52e32" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>operator=</name></member>
      <member refid="classmty_1_1InteractionTerm_1a1bca020422a937e065ec3f02cd0ae97f" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>operator==</name></member>
      <member refid="classmty_1_1InteractionTerm_1a5ce6bd56ec6548df83f9d1c3f9d03cb2" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>operator==</name></member>
      <member refid="classmty_1_1InteractionTerm_1a1b6c445759c14e08255494dc32ce6f48" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>permutation</name></member>
      <member refid="classmty_1_1InteractionTerm_1a23625ccadc487ab8a2a93f7dde0baeb4" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>permutations</name></member>
      <member refid="classmty_1_1InteractionTerm_1a21fb8bf1e7009b5ab4bfe22c58cc57fe" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>recallIndices</name></member>
      <member refid="classmty_1_1InteractionTerm_1ad3a69cdc0b4c6faa02373079a8bc59c5" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>setPoint</name></member>
      <member refid="classmty_1_1InteractionTerm_1ae784d37ea3d966bea64d9ceffe069060" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>size</name></member>
      <member refid="classmty_1_1InteractionTerm_1a7c46df5ca4f89e163eb340d771024d06" prot="private" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>term</name></member>
      <member refid="classmty_1_1InteractionTerm_1aefa29424be23c50944cd4093990596b0" prot="public" virt="non-virtual"><scope>mty::InteractionTerm</scope><name>TermType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
