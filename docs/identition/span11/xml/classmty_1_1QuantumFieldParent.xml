<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classmty_1_1QuantumFieldParent" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>mty::QuantumFieldParent</compoundname>
    <basecompoundref refid="classcsl_1_1TensorFieldParent" prot="public" virt="non-virtual">csl::TensorFieldParent</basecompoundref>
    <derivedcompoundref refid="classmty_1_1BaseVectorBoson" prot="public" virt="non-virtual">mty::BaseVectorBoson</derivedcompoundref>
    <derivedcompoundref refid="classmty_1_1DiracFermion" prot="public" virt="non-virtual">mty::DiracFermion</derivedcompoundref>
    <derivedcompoundref refid="classmty_1_1ScalarBoson" prot="public" virt="non-virtual">mty::ScalarBoson</derivedcompoundref>
    <derivedcompoundref refid="classmty_1_1WeylFermion" prot="public" virt="non-virtual">mty::WeylFermion</derivedcompoundref>
    <includes refid="quantumField_8h" local="no">quantumField.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" prot="public" static="no">
        <type>std::function&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>( <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;, <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;, <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;, bool)&gt;</type>
        <definition>using mty::QuantumFieldParent::Propagator_func =  std::function&lt;csl::Expr(
        QuantumField const &amp;, QuantumField const &amp;, csl::Tensor &amp;, bool)&gt;</definition>
        <argsstring></argsstring>
        <name>Propagator_func</name>
        <qualifiedname>mty::QuantumFieldParent::Propagator_func</qualifiedname>
        <briefdescription>
<para>Type definition. A Propagator_func is a function called to get the propagator result of the contraction of two fields. </para>
        </briefdescription>
        <detaileddescription>
<para>The function is contained in a std::function. Such an object may be instantiated with a c++ lambda function or a standard function defined normally. The function or lambda must take four arguments. The two fields contracted (<ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>), the momentum integrated (<ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>), and a boolean telling if one of the two fields is external. It must return an expression (<ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref>) that is the propagator between the two fields for which the factor <formula id="217">$\frac{d^4p}{(2\pi)^4}$</formula> has been removed. Implementations assure that if the field is complex, the conjugated field is always the second argument. If one of the fields is external, the propagator should be adapted. For example, the propagator of two scalar fields is <formula id="218">\[ \frac{ie^{-ipX}}{p^2-m^2}, \]</formula> whereas if one of the fields is external, the projection on the equations of motion <formula id="219">$ \partial _\mu\partial ^\mu + m^2 $</formula> gives simply  <formula id="220">\[ -ie^{-ipX}.
\]</formula> The Propagator_func must provide the entire expression of the propagator but the integral <formula id="221">$ \int \frac{d^4p}{(2\pi)^4} $</formula> that is automatically added. In <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref> / quantumFieldTheory.cpp all built-in propagators are written in the form of standard c++ functions. Propagators for any particle may be changed by the user. See <ref refid="namespacemty_1a755d00dcb75595e2ee48e1f8cde45e23" kindref="member">mty::AddCustomPropagator()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="176" column="5" bodyfile="src/marty/core/quantumField.h" bodystart="176" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a1f7b26c566813542665ba35ca37cc233" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::bosonic</definition>
        <argsstring></argsstring>
        <name>bosonic</name>
        <qualifiedname>mty::QuantumFieldParent::bosonic</qualifiedname>
        <briefdescription>
<para><bold>True</bold> if the field is bosonic. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="183" column="10" bodyfile="src/marty/core/quantumField.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a8fe31c20d7f8c2820c799a15dc47eba0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::selfConjugate</definition>
        <argsstring></argsstring>
        <name>selfConjugate</name>
        <qualifiedname>mty::QuantumFieldParent::selfConjugate</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para><bold>True</bold> if the field is real (real scalars, gauge bosons , majorana fermions). </para>
        </briefdescription>
        <detaileddescription>
<para>By default, all particles are complex except <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> fields that are set real. This value has an impact in wick contractions. <simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1ae6dc406d641ac0bdb37ac0312062ec67" kindref="member">isSelfConjugate()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a4b93f59ab13b908df2957bec72833601" kindref="member">setSelfConjugate()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="192" column="10" bodyfile="src/marty/core/quantumField.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a785193ff5385fcf276bf45dc21021e29" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::integratedOut</definition>
        <argsstring></argsstring>
        <name>integratedOut</name>
        <qualifiedname>mty::QuantumFieldParent::integratedOut</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Tells if the field is integrated out in the theory. If true, the propagator is modified assuming <formula id="222">$ M \gg p $</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="198" column="10" bodyfile="src/marty/core/quantumField.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a6abc017a0c4778fc0e299f4c4e1dc435" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::physical</definition>
        <argsstring></argsstring>
        <name>physical</name>
        <qualifiedname>mty::QuantumFieldParent::physical</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
<para>Tells if the field is physical. If true, it may appear in external states. Otherwise it is forbidden. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="204" column="10" bodyfile="src/marty/core/quantumField.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a691ece6fc798a1594dd83be483733dd3" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::enabledInDiagrams</definition>
        <argsstring></argsstring>
        <name>enabledInDiagrams</name>
        <qualifiedname>mty::QuantumFieldParent::enabledInDiagrams</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
<para>Tells if the field is enabled in diagrams. If no, it is fully discarded in computations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="210" column="10" bodyfile="src/marty/core/quantumField.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a3ef078e01886b54dee846048b0f70cb3" prot="protected" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::mass</definition>
        <argsstring></argsstring>
        <name>mass</name>
        <qualifiedname>mty::QuantumFieldParent::mass</qualifiedname>
        <initializer>= CSL_0</initializer>
        <briefdescription>
<para>Mass of the particle. Appears in the propagator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="215" column="15" bodyfile="src/marty/core/quantumField.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a9d48ab6fa31c0d612155b36b109cc64f" prot="protected" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <qualifiedname>mty::QuantumFieldParent::width</qualifiedname>
        <initializer>= CSL_0</initializer>
        <briefdescription>
<para>Width of the particle. Appears in the propagator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="220" column="15" bodyfile="src/marty/core/quantumField.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a0d3c8f3219c53a09c3efd03073753c81" prot="protected" static="no" mutable="no">
        <type>drawer::ParticleType</type>
        <definition>drawer::ParticleType mty::QuantumFieldParent::drawType</definition>
        <argsstring></argsstring>
        <name>drawType</name>
        <qualifiedname>mty::QuantumFieldParent::drawType</qualifiedname>
        <initializer>= drawer::ParticleType::None</initializer>
        <briefdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> type in graphical diagrams (straight line, arrow, vector, gluon ...). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="226" column="26" bodyfile="src/marty/core/quantumField.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a8c5722ecb7b175f3f3a4872d970ea249" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">Group</ref> *</type>
        <definition>Group* mty::QuantumFieldParent::stGroup</definition>
        <argsstring></argsstring>
        <name>stGroup</name>
        <qualifiedname>mty::QuantumFieldParent::stGroup</qualifiedname>
        <briefdescription>
<para>Pointer to the space-time group. For know it is the Lorentz group, <formula id="223">$ D_2 $</formula> algebra. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="232" column="11" bodyfile="src/marty/core/quantumField.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a8c2a10dc3e14dfd9aba91a1d62402ac1" prot="protected" static="no" mutable="no">
        <type><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref></type>
        <definition>Irrep mty::QuantumFieldParent::spin</definition>
        <argsstring></argsstring>
        <name>spin</name>
        <qualifiedname>mty::QuantumFieldParent::spin</qualifiedname>
        <briefdescription>
<para>Spin representation in <bold>stGroup</bold>. To have a number corresponding to the spin, see <ref refid="classmty_1_1QuantumFieldParent_1ab381755980173b5e294972ecb80d210d" kindref="member">getSpinDimension()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="238" column="11" bodyfile="src/marty/core/quantumField.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1abec1bed01588f7c87567b6e498976cc2" prot="protected" static="no" mutable="no">
        <type><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> *</type>
        <definition>Gauge* mty::QuantumFieldParent::gauge</definition>
        <argsstring></argsstring>
        <name>gauge</name>
        <qualifiedname>mty::QuantumFieldParent::gauge</qualifiedname>
        <briefdescription>
<para>Pointer to the gauge the particle is a representation of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="243" column="11" bodyfile="src/marty/core/quantumField.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a9fef6afaf0e2d81d25aa51d21e192f74" prot="protected" static="no" mutable="no">
        <type><ref refid="classmty_1_1GaugeIrrep" kindref="compound">GaugeIrrep</ref></type>
        <definition>GaugeIrrep mty::QuantumFieldParent::irrep</definition>
        <argsstring></argsstring>
        <name>irrep</name>
        <qualifiedname>mty::QuantumFieldParent::irrep</qualifiedname>
        <briefdescription>
<para>Representation of the field in the gauge <bold>gauge</bold>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="248" column="16" bodyfile="src/marty/core/quantumField.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a18d08c09430c070b1f37c470e5054db0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::polarizationSumInitialized</definition>
        <argsstring></argsstring>
        <name>polarizationSumInitialized</name>
        <qualifiedname>mty::QuantumFieldParent::polarizationSumInitialized</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Boolean making sure that polarization sum (see <ref refid="classmty_1_1PolarizationField" kindref="compound">PolarizationField</ref>) is initialized only onde. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="254" column="10" bodyfile="src/marty/core/quantumField.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1ad463db6be7ba2c207b42e0bf3bff87b1" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t mty::QuantumFieldParent::firstGaugeIndex</definition>
        <argsstring></argsstring>
        <name>firstGaugeIndex</name>
        <qualifiedname>mty::QuantumFieldParent::firstGaugeIndex</qualifiedname>
        <briefdescription>
<para>Position of the first gauge index, after flavor indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="259" column="12" bodyfile="src/marty/core/quantumField.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1aef7c609ffce6b9668164c47b0eda79b8" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t mty::QuantumFieldParent::firstSpaceIndex</definition>
        <argsstring></argsstring>
        <name>firstSpaceIndex</name>
        <qualifiedname>mty::QuantumFieldParent::firstSpaceIndex</qualifiedname>
        <briefdescription>
<para>Position of the first space index, after flavor and gauge indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="265" column="12" bodyfile="src/marty/core/quantumField.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a4f5d94d560f6f7a4c69437cad05a2b09" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> *</type>
        <definition>const Flavor* mty::QuantumFieldParent::flavor</definition>
        <argsstring></argsstring>
        <name>flavor</name>
        <qualifiedname>mty::QuantumFieldParent::flavor</qualifiedname>
        <briefdescription>
<para>Pointer to the flavor the particle is a representation of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="270" column="18" bodyfile="src/marty/core/quantumField.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a184d9c95b4867b270c5414a6da7be7e9" prot="protected" static="no" mutable="no">
        <type><ref refid="classmty_1_1FlavorIrrep" kindref="compound">FlavorIrrep</ref></type>
        <definition>FlavorIrrep mty::QuantumFieldParent::flavorRep</definition>
        <argsstring></argsstring>
        <name>flavorRep</name>
        <qualifiedname>mty::QuantumFieldParent::flavorRep</qualifiedname>
        <briefdescription>
<para>Representation of the field in the flavor <bold>flavor</bold>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="275" column="17" bodyfile="src/marty/core/quantumField.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1aba9df2478df3b7be3621fa5f55c1fe8c" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> const *, <ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref> &gt;</type>
        <definition>std::map&lt;QuantumFieldParent const *, Propagator_func&gt; mty::QuantumFieldParent::propagator</definition>
        <argsstring></argsstring>
        <name>propagator</name>
        <qualifiedname>mty::QuantumFieldParent::propagator</qualifiedname>
        <briefdescription>
<para>Contains all propagators for the field with other. </para>
        </briefdescription>
        <detaileddescription>
<para>Maps another field to a Propagator_func. For example, a vector boson has two propagators. One with itself, see mty::VectorPropagator in <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>, one with its field strength, see mty::FieldStrengthPropagator in <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>. Propagators may be modified through the function <ref refid="namespacemty_1a755d00dcb75595e2ee48e1f8cde45e23" kindref="member">mty::AddCustomPropagator</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="285" column="14" bodyfile="src/marty/core/quantumField.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1QuantumFieldParent_1a73f01a145d01bb96e01bcf66b192ea99" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::weak_ptr&lt; <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::weak_ptr&lt;mty::QuantumFieldParent&gt; &gt; mty::QuantumFieldParent::relatives</definition>
        <argsstring></argsstring>
        <name>relatives</name>
        <qualifiedname>mty::QuantumFieldParent::relatives</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="287" column="17" bodyfile="src/marty/core/quantumField.h" bodystart="287" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a45dc24afa21d103855c55d8cba010d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::QuantumFieldParent</definition>
        <argsstring>()=default</argsstring>
        <name>QuantumFieldParent</name>
        <qualifiedname>mty::QuantumFieldParent::QuantumFieldParent</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="293" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1af139e37bbc3a5893d48a60c67c9f29b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::QuantumFieldParent</definition>
        <argsstring>(QuantumFieldParent const &amp;other)=default</argsstring>
        <name>QuantumFieldParent</name>
        <qualifiedname>mty::QuantumFieldParent::QuantumFieldParent</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="298" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a2aea7d244a9484d9779f17fff039ee20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::QuantumFieldParent</definition>
        <argsstring>(const std::string &amp;t_name, int t_spin, Gauge *t_gauge)</argsstring>
        <name>QuantumFieldParent</name>
        <qualifiedname>mty::QuantumFieldParent::QuantumFieldParent</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t_spin</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> *</type>
          <declname>t_gauge</declname>
        </param>
        <briefdescription>
<para>Constructor with 3 parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The gauge representation, not given here, is initialized to the trivial representation. The flavor is null and no flavor representation is created. The particle is by default complex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer equal to twice the spin of the particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_gauge</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gauge of the model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="309" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a29d5f92ff773ec8137b60495a9116a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::QuantumFieldParent</definition>
        <argsstring>(const std::string &amp;t_name, int t_spin, const GaugeIrrep &amp;irrep)</argsstring>
        <name>QuantumFieldParent</name>
        <qualifiedname>mty::QuantumFieldParent::QuantumFieldParent</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t_spin</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1GaugeIrrep" kindref="compound">GaugeIrrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
<para>Constructor with 3 parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The gauge reprensentation, is initialized to <bold>irrep</bold>. The flavor is null and no flavor representation is created. The particle is by default complex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer equal to twice the spin of the particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irrep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> representation of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="320" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a9699cab9f1b4b11e92631da3f544228a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::QuantumFieldParent</definition>
        <argsstring>(const std::string &amp;t_name, int t_spin, Gauge *t_gauge, bool t_isSelfConjugate)</argsstring>
        <name>QuantumFieldParent</name>
        <qualifiedname>mty::QuantumFieldParent::QuantumFieldParent</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t_spin</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> *</type>
          <declname>t_gauge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>t_isSelfConjugate</declname>
        </param>
        <briefdescription>
<para>Constructor with 4 parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The gauge representation, not given here, is initialized to the trivial representation. The flavor is null and no flavor representation is created. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer equal to twice the spin of the particle.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_gauge</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the gauge of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_isSelfConjugate</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean that must be true for real fields, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="335" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="107" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ab5fd0b478a5cb4f5750f1da00d2ef549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::QuantumFieldParent</definition>
        <argsstring>(const std::string &amp;t_name, int t_spin, const GaugeIrrep &amp;irrep, bool t_isSelfConjugate)</argsstring>
        <name>QuantumFieldParent</name>
        <qualifiedname>mty::QuantumFieldParent::QuantumFieldParent</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t_spin</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1GaugeIrrep" kindref="compound">GaugeIrrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>t_isSelfConjugate</declname>
        </param>
        <briefdescription>
<para>Constructor with 4 parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The gauge reprensentation, is initialized to <bold>irrep</bold>. The flavor is null and no flavor representation is created. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer equal to twice the spin of the particle.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irrep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> representation of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_isSelfConjugate</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean that must be true for real fields, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="350" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a1ae7141073d947ad4bfd23e6076023ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::QuantumFieldParent</definition>
        <argsstring>(const std::string &amp;t_name, int t_spin, const GaugeIrrep &amp;irrep, const FlavorIrrep &amp;flavorRep)</argsstring>
        <name>QuantumFieldParent</name>
        <qualifiedname>mty::QuantumFieldParent::QuantumFieldParent</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t_spin</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1GaugeIrrep" kindref="compound">GaugeIrrep</ref> &amp;</type>
          <declname>irrep</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1FlavorIrrep" kindref="compound">FlavorIrrep</ref> &amp;</type>
          <declname>flavorRep</declname>
        </param>
        <briefdescription>
<para>Constructor with 4 parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The gauge reprensentation, is initialized to <bold>irrep</bold>. The flavor representation is initialized to <bold>flavorRep</bold>. The particle is by default complex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer equal to twice the spin of the particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irrep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> representation of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flavorRep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> representation of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="365" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="126" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ac80743c85ab76199b6e600bfdf766b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::QuantumFieldParent</definition>
        <argsstring>(const std::string &amp;t_name, const QuantumFieldParent *other)</argsstring>
        <name>QuantumFieldParent</name>
        <qualifiedname>mty::QuantumFieldParent::QuantumFieldParent</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Builds a new particle identical to another, with a different name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the field.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Ohter field to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="375" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1aa8c35778e995351f6e1d8b12e9246890" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>drawer::ParticleType</type>
        <definition>drawer::ParticleType mty::QuantumFieldParent::getDrawType</definition>
        <argsstring>() const</argsstring>
        <name>getDrawType</name>
        <qualifiedname>mty::QuantumFieldParent::getDrawType</qualifiedname>
        <briefdescription>
<para>Returns the drawing type of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a0d3c8f3219c53a09c3efd03073753c81" kindref="member">drawType</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ab1dbb6dc83784bb2ba2e9b47ede98523" kindref="member">setDrawType()</ref>. </para>
</simplesect>
<simplesect kind="return"><para>The drawing type of the particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="383" column="26" bodyfile="src/marty/core/quantumField.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1aa5f4e3e9b9a82fff9b8d95f62ecfcf1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool mty::QuantumFieldParent::contains</definition>
        <argsstring>(QuantumFieldParent const *other) const</argsstring>
        <name>contains</name>
        <qualifiedname>mty::QuantumFieldParent::contains</qualifiedname>
        <reimplementedby refid="classmty_1_1DiracFermion_1a1860c3a64d7e7e0f3e4bdfb4271fa252">contains</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1aaf9dcac1385c74eaa3c9a56c2a65d52a">contains</reimplementedby>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> const *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="385" column="18" bodyfile="src/marty/core/quantumField.h" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a210b8b5a0209f736180cdf932639e6f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool mty::QuantumFieldParent::isSameSpecies</definition>
        <argsstring>(QuantumFieldParent const *other) const</argsstring>
        <name>isSameSpecies</name>
        <qualifiedname>mty::QuantumFieldParent::isSameSpecies</qualifiedname>
        <reimplementedby refid="classmty_1_1DiracFermion_1abd2366d8351230d8e3d344c88aca30b7">isSameSpecies</reimplementedby>
        <reimplementedby refid="classmty_1_1FieldStrength_1a5a364bd3ffd167cc85f224d452e30031">isSameSpecies</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1abfb702c97b8da48dc564e856a908fff7">isSameSpecies</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1a44867dd542183f58bcd87ff7d91418e9">isSameSpecies</reimplementedby>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> const *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="390" column="18" bodyfile="src/marty/core/quantumField.h" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a15a0a38b6509011352b73d41b51b1ee1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ParticleType</type>
        <definition>ParticleType mty::QuantumFieldParent::getParticleType</definition>
        <argsstring>() const</argsstring>
        <name>getParticleType</name>
        <qualifiedname>mty::QuantumFieldParent::getParticleType</qualifiedname>
        <reimplementedby refid="classmty_1_1DiracFermion_1ab9e4cc2fd95f15aa029c2ff4fdbc4043">getParticleType</reimplementedby>
        <reimplementedby refid="classmty_1_1FieldStrength_1a19519885c92fbb91daae90021bfef254">getParticleType</reimplementedby>
        <reimplementedby refid="classmty_1_1GhostBoson_1a8537b99d5e889a92d247ec2da94ad79a">getParticleType</reimplementedby>
        <reimplementedby refid="classmty_1_1GoldstoneBoson_1a893398c05c21394e3e914351ca334651">getParticleType</reimplementedby>
        <reimplementedby refid="classmty_1_1ScalarBoson_1a98000cb21c8aadd60e19688e1a54de3d">getParticleType</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1ae819d965989bb4aebbc3bdac62dd16eb">getParticleType</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1a784e73a3ef02f92442e01101b1fdd89d">getParticleType</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="395" column="26" bodyfile="src/marty/core/quantumField.cpp" bodystart="174" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ab1dbb6dc83784bb2ba2e9b47ede98523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setDrawType</definition>
        <argsstring>(drawer::ParticleType type)</argsstring>
        <name>setDrawType</name>
        <qualifiedname>mty::QuantumFieldParent::setDrawType</qualifiedname>
        <param>
          <type>drawer::ParticleType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Sets the drawing type of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para>The drawing type is how the particle will be drawn on diagrams. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of line for the particle in diagrams. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a0d3c8f3219c53a09c3efd03073753c81" kindref="member">drawType</ref>, <ref refid="classmty_1_1QuantumFieldParent_1aa8c35778e995351f6e1d8b12e9246890" kindref="member">getDrawType()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="403" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a0fbb3e2d84d668387165227c2820d470" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>virtual Particle mty::QuantumFieldParent::generateSimilar</definition>
        <argsstring>(std::string const &amp;t_name) const =0</argsstring>
        <name>generateSimilar</name>
        <qualifiedname>mty::QuantumFieldParent::generateSimilar</qualifiedname>
        <reimplementedby refid="classmty_1_1DiracFermion_1aa9117384d0cba4685b19ac59a1380195">generateSimilar</reimplementedby>
        <reimplementedby refid="classmty_1_1FieldStrength_1a38b7463c1a8efb7b88c9f1bf5bd38c22">generateSimilar</reimplementedby>
        <reimplementedby refid="classmty_1_1GaugeBoson_1a608ae08a0cdf80335e552c78970c91ad">generateSimilar</reimplementedby>
        <reimplementedby refid="classmty_1_1GhostBoson_1ade7a38292b9b98f36694e3c841b568b2">generateSimilar</reimplementedby>
        <reimplementedby refid="classmty_1_1GoldstoneBoson_1a6d806ba126f4a99548fc807102744f23">generateSimilar</reimplementedby>
        <reimplementedby refid="classmty_1_1ScalarBoson_1a4b8906762ee416050588360cc3f487ce">generateSimilar</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1ab4617745c6b482d0fd988944987c8c3c">generateSimilar</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1a8cd5753ab219d2dcef54faa21677ddf3">generateSimilar</reimplementedby>
        <param>
          <type>std::string const &amp;</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Pure virtual function. Generates a partical similar to the current object, changing only the name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the new particle, identical to the current object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new <ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="410" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a397f9c7ea63814716d521be8786f1e57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112" kindref="member">Chirality</ref></type>
        <definition>Chirality mty::QuantumFieldParent::getChirality</definition>
        <argsstring>() const</argsstring>
        <name>getChirality</name>
        <qualifiedname>mty::QuantumFieldParent::getChirality</qualifiedname>
        <reimplementedby refid="classmty_1_1WeylFermion_1ad2245c04546840ed76ca4830346afadb">getChirality</reimplementedby>
        <briefdescription>
<para>Returns the chirality of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref> or boson will return <ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Chirality::None</ref>. <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> will return either <ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a945d5e233cf7d6240f6b783b36a374ff" kindref="member">Chirality::Left</ref> or <ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112a92b09c7c48c520c3c55e497875da437c" kindref="member">Chirality::Right</ref>. <simplesect kind="return"><para>The chirality of the particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="418" column="23" bodyfile="src/marty/core/quantumField.cpp" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a364703981874763aede019317b4a6876" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getEnergyDimension</definition>
        <argsstring>() const =0</argsstring>
        <name>getEnergyDimension</name>
        <qualifiedname>mty::QuantumFieldParent::getEnergyDimension</qualifiedname>
        <reimplementedby refid="classmty_1_1BaseVectorBoson_1aa39e53cabecdae17707745c1240424fc">getEnergyDimension</reimplementedby>
        <reimplementedby refid="classmty_1_1DiracFermion_1a209712e9d5a40c735b31dcad315d11f7">getEnergyDimension</reimplementedby>
        <reimplementedby refid="classmty_1_1FieldStrength_1aa27f15bb95dc7e944d557346d3fc20ea">getEnergyDimension</reimplementedby>
        <reimplementedby refid="classmty_1_1ScalarBoson_1ae61bd2f3f0b6bedd30e8c86f923a132c">getEnergyDimension</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1af0b999fbd533641966486a3ef975e3ea">getEnergyDimension</reimplementedby>
        <briefdescription>
<para>Pure virtual function. Returns the energy dimension of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An expression (numerical) equal to the dimension of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="424" column="23" bodyfile="src/marty/core/quantumField.cpp" bodystart="553" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a36569c719b6b843a8b23fdcddd8b6e65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int mty::QuantumFieldParent::getNDegreesOfFreedom</definition>
        <argsstring>() const =0</argsstring>
        <name>getNDegreesOfFreedom</name>
        <qualifiedname>mty::QuantumFieldParent::getNDegreesOfFreedom</qualifiedname>
        <reimplementedby refid="classmty_1_1BaseVectorBoson_1a3c27f58495d6bf3be941ab81489d0007">getNDegreesOfFreedom</reimplementedby>
        <reimplementedby refid="classmty_1_1DiracFermion_1a189b548e348fcbc9d479b0b491e399c2">getNDegreesOfFreedom</reimplementedby>
        <reimplementedby refid="classmty_1_1GhostBoson_1a207ab8c7338a1301a1bab8bf6c820ed2">getNDegreesOfFreedom</reimplementedby>
        <reimplementedby refid="classmty_1_1GoldstoneBoson_1a5cfe759f3b982ad2c6e41b3c32f5f697">getNDegreesOfFreedom</reimplementedby>
        <reimplementedby refid="classmty_1_1ScalarBoson_1a9031fcd53bf872a8c3ae0a09cf2cf9c4">getNDegreesOfFreedom</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1adcfb18afc9abf174bb24b007b22a0d35">getNDegreesOfFreedom</reimplementedby>
        <briefdescription>
<para>Pure virtual function. Returns the number of degrees of freedom in the particle. It does not count gauge and flavor multiplicity. The result depends on the type of the particle and if it is complex. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An integer, number of degrees of freedom of the particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="432" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ac21a21dbb67350a1d016905e65368b2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::QuantumFieldParent::getNGaugeDegreesOfFreedom</definition>
        <argsstring>() const</argsstring>
        <name>getNGaugeDegreesOfFreedom</name>
        <qualifiedname>mty::QuantumFieldParent::getNGaugeDegreesOfFreedom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="434" column="9" bodyfile="src/marty/core/quantumField.cpp" bodystart="560" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a3e2e33fc0f66f9bbbdac5e739fd02c0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::hasSpecialContractionWith</definition>
        <argsstring>(QuantumField const &amp;other) const</argsstring>
        <name>hasSpecialContractionWith</name>
        <qualifiedname>mty::QuantumFieldParent::hasSpecialContractionWith</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Tells if the field has a special contraction property with <bold>other</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Field with which there may be a contraction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if there is a contraction property. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="443" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="570" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a1807a29c886971807e2d4653eb633c00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isChiral</definition>
        <argsstring>() const</argsstring>
        <name>isChiral</name>
        <qualifiedname>mty::QuantumFieldParent::isChiral</qualifiedname>
        <reimplementedby refid="classmty_1_1WeylFermion_1a7362f0f611241f881888622630b540ab">isChiral</reimplementedby>
        <briefdescription>
<para>Tells if the field is chiral. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the field is a <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref>. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="450" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a31b0551bf9e7385e3d6c7a7e552a84cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getChiralityCounterPart</definition>
        <argsstring>() const</argsstring>
        <name>getChiralityCounterPart</name>
        <qualifiedname>mty::QuantumFieldParent::getChiralityCounterPart</qualifiedname>
        <reimplementedby refid="classmty_1_1WeylFermion_1a253856ada386e6fea8cd5e5503426977">getChiralityCounterPart</reimplementedby>
        <briefdescription>
<para>For a <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> embedded in a <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>, returns the other part of the <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The right <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> for a left <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> embedded in a <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>. </para>
</simplesect>
<simplesect kind="return"><para>The left <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> for a right <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> embedded in a <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>. </para>
</simplesect>
<simplesect kind="return"><para>nullptr otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="461" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="273" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a62ddd65ed57c10250cee9705d9009101" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getWeylFermion</definition>
        <argsstring>(Chirality chirality) const</argsstring>
        <name>getWeylFermion</name>
        <qualifiedname>mty::QuantumFieldParent::getWeylFermion</qualifiedname>
        <reimplementedby refid="classmty_1_1DiracFermion_1a0c5779ab5479c8ac906d94fd80761d92">getWeylFermion</reimplementedby>
        <param>
          <type><ref refid="namespacemty_1a1ad7d9911e71ba89b54481af0a475112" kindref="member">Chirality</ref></type>
          <declname>chirality</declname>
        </param>
        <briefdescription>
<para>For a <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>, returns the chiral <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> it contains of chirality <bold>chirality</bold> if it has one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chirality</parametername>
</parameternamelist>
<parameterdescription>
<para>Chirality of the <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> we want to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> of chirality <bold>chirality</bold> if there is one embedded in the <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>. </para>
</simplesect>
<simplesect kind="return"><para>nullptr otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="471" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1aac4107a07bbd8e8ac4e41043f1307a74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getDiracParent</definition>
        <argsstring>() const</argsstring>
        <name>getDiracParent</name>
        <qualifiedname>mty::QuantumFieldParent::getDiracParent</qualifiedname>
        <reimplementedby refid="classmty_1_1WeylFermion_1adeea72ce0f242bfe90d6f27cb6e648bb">getDiracParent</reimplementedby>
        <briefdescription>
<para>For a <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref> embedded in a <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>, returns the dirac fermion. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A the <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref> embedding the current <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref>. </para>
</simplesect>
<simplesect kind="return"><para>nullptr otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="479" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a502ac6364e531a40def6953c6a5e2f09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getGoldstone</definition>
        <argsstring>() const</argsstring>
        <name>getGoldstone</name>
        <qualifiedname>mty::QuantumFieldParent::getGoldstone</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1a391268fa60f023b139a0672576317851">getGoldstone</reimplementedby>
        <briefdescription>
<para>For a vector boson in a non abelian gauged group, returns the associated Goldstone boson. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Goldstone associated with the vector if there is one. </para>
</simplesect>
<simplesect kind="return"><para>nullptr else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="488" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1af8ff33f78172117b12565f89966dc49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setDiracParent</definition>
        <argsstring>(Particle const &amp;diracFermion)</argsstring>
        <name>setDiracParent</name>
        <qualifiedname>mty::QuantumFieldParent::setDiracParent</qualifiedname>
        <reimplementedby refid="classmty_1_1WeylFermion_1a443fc0b052e691248eea58e57927c32b">setDiracParent</reimplementedby>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>diracFermion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="490" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="295" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a3ddaf2c0d83917607b5cc3e774f3bec7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getPropagator</definition>
        <argsstring>(QuantumField const &amp;self, QuantumField const &amp;other, csl::Tensor &amp;P, bool external) const</argsstring>
        <name>getPropagator</name>
        <qualifiedname>mty::QuantumFieldParent::getPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
<para>Returns the expression of the propagator between two fields. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Left field of the propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Right field of the propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>Momentum integrated in the propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external</parametername>
</parameternamelist>
<parameterdescription>
<para><bold>True</bold> if one of the two fields is an external leg. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression of the propagator without the integral term <formula id="221">$ \int \frac{d^4p}{(2\pi)^4} $</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="502" column="23" bodyfile="src/marty/core/quantumField.cpp" bodystart="322" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a71641abf3402e8b15ca420ee8c00c66e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getInvPropagator</definition>
        <argsstring>(QuantumField const &amp;other, QuantumField const &amp;self, csl::Tensor &amp;P, bool external) const</argsstring>
        <name>getInvPropagator</name>
        <qualifiedname>mty::QuantumFieldParent::getInvPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> const &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <briefdescription>
<para>Returns the expression of the propagator between two fields. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>.</para>
</simplesect>
This function is called when the left field is complex conjugated. When it is the case, in order to ensure that the conjugate is on the right, the order is reverted.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Left field of the propagator.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Right field of the propagator.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>Momentum integrated in the propagator.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>external</parametername>
</parameternamelist>
<parameterdescription>
<para><bold>True</bold> if one of the two fields is an external leg. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression of the propagator without the integral term <formula id="221">$ \int \frac{d^4p}{(2\pi)^4} $</formula>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="518" column="23" bodyfile="src/marty/core/quantumField.cpp" bodystart="338" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ad6fb45a0c9780f8e5f6df19bfec1c2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getKineticTerm</definition>
        <argsstring>(csl::Tensor &amp;X)</argsstring>
        <name>getKineticTerm</name>
        <qualifiedname>mty::QuantumFieldParent::getKineticTerm</qualifiedname>
        <reimplementedby refid="classmty_1_1BaseVectorBoson_1a40bc0dc46e21c0799912d9f98fad8066">getKineticTerm</reimplementedby>
        <reimplementedby refid="classmty_1_1DiracFermion_1ad1ca9812217abd94e170f1a6d65720fc">getKineticTerm</reimplementedby>
        <reimplementedby refid="classmty_1_1GhostBoson_1af76876cc9a4009c9039c5a87e4d5168a">getKineticTerm</reimplementedby>
        <reimplementedby refid="classmty_1_1ScalarBoson_1ae94af79643cd21537770dfad5547bda1">getKineticTerm</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1a84234ce3abb848661ecc86596752eeb2">getKineticTerm</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>Returns the kinetic term in the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> for the field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is overriden in derived classes. Each particle has a specific form for its kinetic term, including covariant derivatives and mass term. An example of kinetic term for a complex scalar field is    <formula id="224">\[
       \mathcal{L} \ni (D_\mu \phi)^\dagger D^\mu\phi - m_\phi^2\phi
       ^\dagger \phi,
  \]</formula> where <formula id="225">$ D_\mu $</formula> stands for the covariant derivative of the field including interactions with gauge vector fields. <simplesect kind="see"><para>mty::gauge::covariantDerivative(). </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>Space-time point for the kinetic term. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mathematical expression in the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> for the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="540" column="23" bodyfile="src/marty/core/quantumField.cpp" bodystart="354" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ae64f76a58e690f825e88bddae58a8c46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isGaugeBoson</definition>
        <argsstring>() const</argsstring>
        <name>isGaugeBoson</name>
        <qualifiedname>mty::QuantumFieldParent::isGaugeBoson</qualifiedname>
        <reimplementedby refid="classmty_1_1GaugeBoson_1a233fe2eb403c24011d4a21361e19b1d9">isGaugeBoson</reimplementedby>
        <briefdescription>
<para>Tells if the particle is a gauge boson. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the particle is a gauge boson (created by a <ref refid="classmty_1_1GaugedGroup" kindref="compound">GaugedGroup</ref>). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="548" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a65d784173a4e77ec4311c7537ae927f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getXiGauge</definition>
        <argsstring>() const</argsstring>
        <name>getXiGauge</name>
        <qualifiedname>mty::QuantumFieldParent::getXiGauge</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1acde351e3a3f20806ecf9c6a54060a0e1">getXiGauge</reimplementedby>
        <briefdescription>
<para>For a <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref>, returns the expression of <formula id="87">$ \xi $</formula> in the current gauge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Gauge::GaugeChoice </para>
</simplesect>
<simplesect kind="return"><para><formula id="87">$ \xi $</formula> in the current gauge of the field if it is a gauge boson. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="557" column="23" bodyfile="src/marty/core/quantumField.cpp" bodystart="365" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a06cd6521c79956221d5c0e22bbcec025" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getVectorBoson</definition>
        <argsstring>() const</argsstring>
        <name>getVectorBoson</name>
        <qualifiedname>mty::QuantumFieldParent::getVectorBoson</qualifiedname>
        <reimplementedby refid="classmty_1_1GhostBoson_1a81ec7867a17917cfe962330a7ca7bdce">getVectorBoson</reimplementedby>
        <reimplementedby refid="classmty_1_1GoldstoneBoson_1abb35a7a3f1e7758e85b0bf94382282ab">getVectorBoson</reimplementedby>
        <briefdescription>
<para>For a ghost or goldstone boson, returns the <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref> associated with it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref> associated with the Golstone or Ghost. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="564" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1adaa7bae27e3f19e3f3acc2068bb6ef12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1GaugedGroup" kindref="compound">GaugedGroup</ref> const *</type>
        <definition>GaugedGroup const  * mty::QuantumFieldParent::getGaugedGroup</definition>
        <argsstring>() const</argsstring>
        <name>getGaugedGroup</name>
        <qualifiedname>mty::QuantumFieldParent::getGaugedGroup</qualifiedname>
        <reimplementedby refid="classmty_1_1GaugeBoson_1adc991c1ab285eea778f096a8e736cefa">getGaugedGroup</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="566" column="31" bodyfile="src/marty/core/quantumField.cpp" bodystart="401" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ac2304e39b32321654ed3bca3b205faee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1GaugedGroup" kindref="compound">GaugedGroup</ref> *</type>
        <definition>GaugedGroup * mty::QuantumFieldParent::getGaugedGroup</definition>
        <argsstring>()</argsstring>
        <name>getGaugedGroup</name>
        <qualifiedname>mty::QuantumFieldParent::getGaugedGroup</qualifiedname>
        <reimplementedby refid="classmty_1_1GaugeBoson_1a5f5b4c0058a764a4e3e2343e0d5fe3b7">getGaugedGroup</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="567" column="31" bodyfile="src/marty/core/quantumField.cpp" bodystart="409" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a74cc2c52165bcd6def544311c3905b4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getGoldstoneBoson</definition>
        <argsstring>() const</argsstring>
        <name>getGoldstoneBoson</name>
        <qualifiedname>mty::QuantumFieldParent::getGoldstoneBoson</qualifiedname>
        <briefdescription>
<para>For a <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref>, returns the associated Golstone boson of there is one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="classmty_1_1GoldstoneBoson" kindref="compound">GoldstoneBoson</ref> associated to the <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref> is it exists. </para>
</simplesect>
<simplesect kind="return"><para>nullptr otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="575" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a88c735215fc23805b642be5b8e01ecb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getGhostBoson</definition>
        <argsstring>() const</argsstring>
        <name>getGhostBoson</name>
        <qualifiedname>mty::QuantumFieldParent::getGhostBoson</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1ad1c8616e5777bbec7bb4a0a479b24f89">getGhostBoson</reimplementedby>
        <briefdescription>
<para>For a <ref refid="classmty_1_1GoldstoneBoson" kindref="compound">GoldstoneBoson</ref>, returns the associated Golstone boson of there is one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="classmty_1_1GoldstoneBoson" kindref="compound">GoldstoneBoson</ref> associated to the <ref refid="classmty_1_1GoldstoneBoson" kindref="compound">GoldstoneBoson</ref> is it exists. </para>
</simplesect>
<simplesect kind="return"><para>nullptr otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="583" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1aef1f73b8595fa36f65d94d1a6faa8ab9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getConjugatedGhostBoson</definition>
        <argsstring>() const</argsstring>
        <name>getConjugatedGhostBoson</name>
        <qualifiedname>mty::QuantumFieldParent::getConjugatedGhostBoson</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1aa22ede3d42f600bdadbcebcc11943721">getConjugatedGhostBoson</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="585" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="427" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a3f2a9746cc5bf74261e44cf31a26cc08" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setGoldstoneBoson</definition>
        <argsstring>(Particle const &amp;goldstone)</argsstring>
        <name>setGoldstoneBoson</name>
        <qualifiedname>mty::QuantumFieldParent::setGoldstoneBoson</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1ab9ebc53cd9b9df546fa9e067d4e67638">setGoldstoneBoson</reimplementedby>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>goldstone</declname>
        </param>
        <briefdescription>
<para>For a <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref>, sets the associated <ref refid="classmty_1_1GoldstoneBoson" kindref="compound">GoldstoneBoson</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>After the call of this function, the link os created and the calling <ref refid="classmty_1_1QuantumFieldParent_1a74cc2c52165bcd6def544311c3905b4a" kindref="member">getGoldstoneBoson()</ref> for the gauge boson or <ref refid="classmty_1_1QuantumFieldParent_1a06cd6521c79956221d5c0e22bbcec025" kindref="member">getVectorBoson()</ref> for the golstone will indeed yield the right particles. The golstone boson must have the exact same representation as the gauge boson except the spin. This function is called automatically when creating a golstone boson from a gauge boson through mty::golstoneboson_s(), or through Model::promoteToGoldstone(). <simplesect kind="see"><para>mty::golstoneboson_s, Model::promoteToGoldstone(), <ref refid="classmty_1_1GoldstoneBoson" kindref="compound">GoldstoneBoson</ref>. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>goldstone</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> that takes the place of a golstone boson for the curent gauge boson. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="600" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="432" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1affebad844493a96607e82edd427d4e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setGhostBoson</definition>
        <argsstring>(Particle const &amp;ghost)</argsstring>
        <name>setGhostBoson</name>
        <qualifiedname>mty::QuantumFieldParent::setGhostBoson</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1ac406bb586026988fe86b60903f06e248">setGhostBoson</reimplementedby>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>ghost</declname>
        </param>
        <briefdescription>
<para>For a <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref>, sets the associated <ref refid="classmty_1_1GhostBoson" kindref="compound">GhostBoson</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>After the call of this function, the link os created and the calling <ref refid="classmty_1_1QuantumFieldParent_1a88c735215fc23805b642be5b8e01ecb0" kindref="member">getGhostBoson()</ref> for the gauge boson or <ref refid="classmty_1_1QuantumFieldParent_1a06cd6521c79956221d5c0e22bbcec025" kindref="member">getVectorBoson()</ref> for the ghost will indeed yield the right particles. The ghost boson must have the exact same representation as the gauge boson except the spin. This function is called automatically when creating a ghost boson from a gauge boson through <ref refid="namespacemty_1a61e7a0a98f84421ec8abee304493115c" kindref="member">mty::ghostboson_s()</ref>. <simplesect kind="see"><para><ref refid="namespacemty_1a61e7a0a98f84421ec8abee304493115c" kindref="member">mty::ghostboson_s</ref>, <ref refid="classmty_1_1GhostBoson" kindref="compound">GhostBoson</ref>. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ghost</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> that takes the place of a ghost boson for the curent gauge boson. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="614" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="439" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a206750ecad1dcde26f986dedea01bd14" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setConjugatedGhostBoson</definition>
        <argsstring>(Particle const &amp;ghost)</argsstring>
        <name>setConjugatedGhostBoson</name>
        <qualifiedname>mty::QuantumFieldParent::setConjugatedGhostBoson</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1aef4e659c45faff4239ff30f983b380e2">setConjugatedGhostBoson</reimplementedby>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>ghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="616" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="446" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ae00d0e2e78ea51a1f5728c15c6e9edf3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::hasFieldStrength</definition>
        <argsstring>() const</argsstring>
        <name>hasFieldStrength</name>
        <qualifiedname>mty::QuantumFieldParent::hasFieldStrength</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1a37965687b64c22cca6ad64bd6abec651">hasFieldStrength</reimplementedby>
        <briefdescription>
<para>Tells if the particle has a <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref> is defined automatically for <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> fields, gauge bosons or not. It is defined as  <formula id="226">\[ F^I_{\mu\nu} \equiv
\partial _\mu A^I_\nu - \partial _\nu A^I_\mu, \]</formula> with <formula id="227">$ A^A_\mu $</formula> a vector boson with a generic index <formula id="228">$ I $</formula> representing all flavor and gauge structures. If the field strength is defined, the kinetic term is expressed as <formula id="229">$ -\frac{1}{4}F^I_{\mu\nu} F^{I\mu\nu} $</formula> and contractions like <formula id="230">$ \langle A^I_\mu F^J_{\nu\rho} \rangle $</formula> or  <formula id="231">$
\langle F^I_{\mu\nu}F^J_{\rho\sigma}\rangle $</formula> are defined by built-in propagators. <simplesect kind="see"><para><ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref>, <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>, <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>. </para>
</simplesect>
<simplesect kind="return"><para><bold>True</bold> if the particle (should be a <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref>) has a <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref> defined. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="632" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a7c2d29867698a6f59a4a69a403657d77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>Particle mty::QuantumFieldParent::getFieldStrength</definition>
        <argsstring>() const</argsstring>
        <name>getFieldStrength</name>
        <qualifiedname>mty::QuantumFieldParent::getFieldStrength</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1ac7f0d138c159c853eaf7c978805bdc89">getFieldStrength</reimplementedby>
        <briefdescription>
<para>For a <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref>, returns the associated <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref> if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1ae00d0e2e78ea51a1f5728c15c6e9edf3" kindref="member">hasFieldStrength()</ref>, <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref>, <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref>. </para>
</simplesect>
<simplesect kind="return"><para>The <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref> of the the <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> if it exists. </para>
</simplesect>
<simplesect kind="return"><para>nullptr otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="641" column="22" bodyfile="src/marty/core/quantumField.cpp" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a05f7b3cce6c5b522e30a225651d4e82f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setFieldStrength</definition>
        <argsstring>(Particle const &amp;fieldStrength)</argsstring>
        <name>setFieldStrength</name>
        <qualifiedname>mty::QuantumFieldParent::setFieldStrength</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1aedd9494eee936fb6abcf97f468eb04cd">setFieldStrength</reimplementedby>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> const &amp;</type>
          <declname>fieldStrength</declname>
        </param>
        <briefdescription>
<para>For a <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref>, sets the associated <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The fieldStrength must of course be consitent with the actual field. <simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1ae00d0e2e78ea51a1f5728c15c6e9edf3" kindref="member">hasFieldStrength()</ref>, <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref>, <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref>. </para>
</simplesect>
<simplesect kind="return"><para>The <ref refid="classmty_1_1FieldStrength" kindref="compound">FieldStrength</ref> of the the <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> if it exists. </para>
</simplesect>
<simplesect kind="return"><para>nullptr otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="651" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="383" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a60555bdb05193f4b1467c45ea137fdca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isContractibleWith</definition>
        <argsstring>(QuantumFieldParent const *other) const</argsstring>
        <name>isContractibleWith</name>
        <qualifiedname>mty::QuantumFieldParent::isContractibleWith</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> const *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Tells if the field may be contracted with another in <ref refid="classmty_1_1Wick" kindref="compound">Wick</ref> contrations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other field to test the contraction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if a propagator exists between the two fields. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1wick_1_1WickCalculator" kindref="compound">wick::WickCalculator</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a04c8454d14b74a84d1ea6f753a2f4036" kindref="member">AddCustomPropagator()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="661" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="390" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1af13d71075337a3f77b6d156c5c09463d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isBosonic</definition>
        <argsstring>() const</argsstring>
        <name>isBosonic</name>
        <qualifiedname>mty::QuantumFieldParent::isBosonic</qualifiedname>
        <briefdescription>
<para>Tells if the field is bosonic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the field is bosonic. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a1f7b26c566813542665ba35ca37cc233" kindref="member">bosonic</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad631001ecde4625d89797f67076b8b4b" kindref="member">isFermionic()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad2fd32f767cedfc9fa9184012b223c86" kindref="member">isAntiCommuting()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="669" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ad631001ecde4625d89797f67076b8b4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isFermionic</definition>
        <argsstring>() const</argsstring>
        <name>isFermionic</name>
        <qualifiedname>mty::QuantumFieldParent::isFermionic</qualifiedname>
        <briefdescription>
<para>Tells if the field is fermionic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the field is fermionic. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a1f7b26c566813542665ba35ca37cc233" kindref="member">bosonic</ref>, <ref refid="classmty_1_1QuantumFieldParent_1af13d71075337a3f77b6d156c5c09463d" kindref="member">isBosonic()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad2fd32f767cedfc9fa9184012b223c86" kindref="member">isAntiCommuting()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="677" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ad2fd32f767cedfc9fa9184012b223c86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isAntiCommuting</definition>
        <argsstring>() const</argsstring>
        <name>isAntiCommuting</name>
        <qualifiedname>mty::QuantumFieldParent::isAntiCommuting</qualifiedname>
        <reimplementedby refid="classmty_1_1GhostBoson_1ac2f0112db1725ed7aff8dc635a5838b1">isAntiCommuting</reimplementedby>
        <briefdescription>
<para>Tells if the field is a grassman field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the field if fermionic or is a ghost. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a1f7b26c566813542665ba35ca37cc233" kindref="member">bosonic</ref>, <ref refid="classmty_1_1QuantumFieldParent_1af13d71075337a3f77b6d156c5c09463d" kindref="member">isBosonic()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad631001ecde4625d89797f67076b8b4b" kindref="member">isFermionic()</ref>, <ref refid="classmty_1_1GhostBoson" kindref="compound">GhostBoson</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="685" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ae6dc406d641ac0bdb37ac0312062ec67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isSelfConjugate</definition>
        <argsstring>() const</argsstring>
        <name>isSelfConjugate</name>
        <qualifiedname>mty::QuantumFieldParent::isSelfConjugate</qualifiedname>
        <briefdescription>
<para>Tells if the field is self-conjugate (real). </para>
        </briefdescription>
        <detaileddescription>
<para>By default, all fields except vector bosons are complex. If the field is self-conjugate, it may contract with itself (not conjugated) in wick contractions. <simplesect kind="return"><para><bold>True</bold> if the field is real. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> if the field is complex. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a8fe31c20d7f8c2820c799a15dc47eba0" kindref="member">selfConjugate</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a4b93f59ab13b908df2957bec72833601" kindref="member">setSelfConjugate()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="696" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a50563a7b7b889385fe82b8385859a1e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isReal</definition>
        <argsstring>() const</argsstring>
        <name>isReal</name>
        <qualifiedname>mty::QuantumFieldParent::isReal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="698" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ad5d2515bd566b8aff18ea30d3353b13a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isPhysical</definition>
        <argsstring>() const</argsstring>
        <name>isPhysical</name>
        <qualifiedname>mty::QuantumFieldParent::isPhysical</qualifiedname>
        <briefdescription>
<para>Tells if the field is physical, i.e. may appear in external legs. </para>
        </briefdescription>
        <detaileddescription>
<para>If the field is not physical, it will be forbidden in external legs. In particular, the function setExternal() will yield an error. For example, ghosts and goldstone bosons are not physical. <simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a6abc017a0c4778fc0e299f4c4e1dc435" kindref="member">physical</ref>, isExternal(), setExternal(), <ref refid="classmty_1_1QuantumFieldParent_1a48db32ebcc3ecbec4c090fa3f03a524c" kindref="member">setPhysical()</ref>, <ref refid="classmty_1_1Insertion" kindref="compound">Insertion</ref>. </para>
</simplesect>
<simplesect kind="return"><para><bold>True</bold> if the field is physical. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="709" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ae937a135c74fb3621758f93088f65331" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isEnabledInDiagrams</definition>
        <argsstring>() const</argsstring>
        <name>isEnabledInDiagrams</name>
        <qualifiedname>mty::QuantumFieldParent::isEnabledInDiagrams</qualifiedname>
        <briefdescription>
<para>Tells if the field is enabled in diagrams. </para>
        </briefdescription>
        <detaileddescription>
<para>If it is not enables, each interaction containing the particle will be discarded in computations. <simplesect kind="return"><para><bold>True</bold> if the field may appear in diagrams. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a691ece6fc798a1594dd83be483733dd3" kindref="member">enabledInDiagrams</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a2cf640364de48c0962402140abd6535c" kindref="member">setEnabledInDiagrams()</ref>, Expander::Options. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="719" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a14f7a210019b8229f8511549e89ad8c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::isIntegratedOut</definition>
        <argsstring>() const</argsstring>
        <name>isIntegratedOut</name>
        <qualifiedname>mty::QuantumFieldParent::isIntegratedOut</qualifiedname>
        <briefdescription>
<para>Tells if the field is integrated out. </para>
        </briefdescription>
        <detaileddescription>
<para>If true, the only thing that changes is that the propagator is replaced by an effective interaction assuming <formula id="232">$M\gg p$</formula>. For example in the case of a massive vector boson, the standard propagator of a <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref> of mass <formula id="78">$ M $</formula> is    <formula id="233">\[
    -ie^{-ipX}\frac{g_{\mu\nu} - (1-\xi)\frac{p_\mu p_\nu}{p^2-\xi M^2}}
    {p^2-M^2},
\]</formula> whereas its integrated propagator becomes   <formula id="234">\[
    ie^{-ipX}\frac{g_{\mu\nu}}{M^2}.
\]</formula> This is possible for any field (fermionic, scalar or vector). <simplesect kind="return"><para><bold>True</bold> if the field is integrated out. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> otherwise. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a785193ff5385fcf276bf45dc21021e29" kindref="member">integratedOut</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a2aae55c74208ec14f43f96db0cf31132" kindref="member">integrateOut()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>, <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>, EffModel, <ref refid="structmty_1_1Wilson" kindref="compound">Wilson</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="742" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ab381755980173b5e294972ecb80d210d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mty::QuantumFieldParent::getSpinDimension</definition>
        <argsstring>() const</argsstring>
        <name>getSpinDimension</name>
        <qualifiedname>mty::QuantumFieldParent::getSpinDimension</qualifiedname>
        <briefdescription>
<para>Returns twice the spin of the particle in an integer. </para>
        </briefdescription>
        <detaileddescription>
<para>For simplicity, this function returns a simple integer. Half spins being not represented, the spin is multiplied by 2 before being returned. Spins of scalars, fermions and vectors are then 0, 1, 2. <simplesect kind="return"><para>Twice the spin of the particle. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a8c2a10dc3e14dfd9aba91a1d62402ac1" kindref="member">spin</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="752" column="9" bodyfile="src/marty/core/quantumField.cpp" bodystart="524" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a0cb6c12ea299cd5411c5b5dd7bcdebb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getMass</definition>
        <argsstring>() const</argsstring>
        <name>getMass</name>
        <qualifiedname>mty::QuantumFieldParent::getMass</qualifiedname>
        <briefdescription>
<para>Returns the expression of the mass of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The mass of the particle. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a3ef078e01886b54dee846048b0f70cb3" kindref="member">mass</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a678d073b9a4c404f40fa3a813624fc32" kindref="member">setMass()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="759" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a5878b682d634b7c7746ffcacf6acc01f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getSquaredMass</definition>
        <argsstring>() const</argsstring>
        <name>getSquaredMass</name>
        <qualifiedname>mty::QuantumFieldParent::getSquaredMass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="761" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="537" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ad65026224bc3b7b92ce6ab3cbfea5b4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getWidth</definition>
        <argsstring>() const</argsstring>
        <name>getWidth</name>
        <qualifiedname>mty::QuantumFieldParent::getWidth</qualifiedname>
        <briefdescription>
<para>Returns the expression of the witdh of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The witdh of the particle. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a9d48ab6fa31c0d612155b36b109cc64f" kindref="member">width</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a803d73584c1eb98be0331c8bc8e73df5" kindref="member">setWidth()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="768" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1af68918da9f3d1c849a5ef1b05b5344c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmty_1_1gauge_1_1Choice" kindref="compound">mty::gauge::Choice</ref></type>
        <definition>mty::gauge::Choice mty::QuantumFieldParent::getGaugeChoice</definition>
        <argsstring>() const</argsstring>
        <name>getGaugeChoice</name>
        <qualifiedname>mty::QuantumFieldParent::getGaugeChoice</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1a274a0b3ea47acb040718e0e625b91383">getGaugeChoice</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="770" column="32" bodyfile="src/marty/core/quantumField.cpp" bodystart="547" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1adb76ad8317af57b10845ba08c8bb6323" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref></type>
        <definition>Irrep mty::QuantumFieldParent::getLorentzRep</definition>
        <argsstring>() const</argsstring>
        <name>getLorentzRep</name>
        <qualifiedname>mty::QuantumFieldParent::getLorentzRep</qualifiedname>
        <briefdescription>
<para>Returns the lorentz representation of the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The spin representation of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a8c2a10dc3e14dfd9aba91a1d62402ac1" kindref="member">spin</ref>, <ref refid="namespacemty_1a581a8ba7494b09ed8f1c049c344846cb" kindref="member">mty::Lorentz</ref>, <ref refid="classmty_1_1algebra_1_1D" kindref="compound">mty::algebra::D</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="777" column="11" bodyfile="src/marty/core/quantumField.cpp" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ae608d0fca0b93d332a5433dfaa33a66e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> *</type>
        <definition>Gauge * mty::QuantumFieldParent::getGauge</definition>
        <argsstring>() const</argsstring>
        <name>getGauge</name>
        <qualifiedname>mty::QuantumFieldParent::getGauge</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the gauge the field is a representation of. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The gauge of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1abec1bed01588f7c87567b6e498976cc2" kindref="member">gauge</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="784" column="11" bodyfile="src/marty/core/quantumField.cpp" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a88d00277d9aad2b2d275286a312e9af2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1GaugeIrrep" kindref="compound">GaugeIrrep</ref></type>
        <definition>GaugeIrrep mty::QuantumFieldParent::getGaugeIrrep</definition>
        <argsstring>() const</argsstring>
        <name>getGaugeIrrep</name>
        <qualifiedname>mty::QuantumFieldParent::getGaugeIrrep</qualifiedname>
        <briefdescription>
<para>Returns the gauge representation containing all individual group representations of the field in the gauge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The gauge representation of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a9fef6afaf0e2d81d25aa51d21e192f74" kindref="member">irrep</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a04fbcf1358eee388cdbf8f07e685a43f" kindref="member">getGroupIrrep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a418513195e15c40050248b6c039d310f" kindref="member">getFlavorIrrep()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="792" column="16" bodyfile="src/marty/core/quantumField.cpp" bodystart="586" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a04fbcf1358eee388cdbf8f07e685a43f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref></type>
        <definition>Irrep mty::QuantumFieldParent::getGroupIrrep</definition>
        <argsstring>(const Group *group) const</argsstring>
        <name>getGroupIrrep</name>
        <qualifiedname>mty::QuantumFieldParent::getGroupIrrep</qualifiedname>
        <param>
          <type>const <ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">Group</ref> *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns the representation of the field in a particle group. </para>
        </briefdescription>
        <detaileddescription>
<para>If the group is not found, an error is raised. This function works also for flavor representations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the group from which we want the representation of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The representation of the field in <bold>group</bold>. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a9fef6afaf0e2d81d25aa51d21e192f74" kindref="member">irrep</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a418513195e15c40050248b6c039d310f" kindref="member">getFlavorIrrep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a88d00277d9aad2b2d275286a312e9af2" kindref="member">getGaugeIrrep()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="803" column="11" bodyfile="src/marty/core/quantumField.cpp" bodystart="591" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ac2a50c1d85bf7e2ac7cd64b999ef86d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> const *</type>
        <definition>Flavor const  * mty::QuantumFieldParent::getFlavor</definition>
        <argsstring>() const</argsstring>
        <name>getFlavor</name>
        <qualifiedname>mty::QuantumFieldParent::getFlavor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="805" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="606" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1aa946ad5758cf8b1ec214bd1b4e3bcc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setFlavor</definition>
        <argsstring>(Flavor const *flavor)</argsstring>
        <name>setFlavor</name>
        <qualifiedname>mty::QuantumFieldParent::setFlavor</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> const *</type>
          <declname>flavor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="807" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="611" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a418513195e15c40050248b6c039d310f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1FlavorIrrep" kindref="compound">FlavorIrrep</ref></type>
        <definition>FlavorIrrep mty::QuantumFieldParent::getFlavorIrrep</definition>
        <argsstring>() const</argsstring>
        <name>getFlavorIrrep</name>
        <qualifiedname>mty::QuantumFieldParent::getFlavorIrrep</qualifiedname>
        <briefdescription>
<para>Returns the flavor representation containing all individual group representations of the field in the flavor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The flavor representation of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a184d9c95b4867b270c5414a6da7be7e9" kindref="member">flavorRep</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a88d00277d9aad2b2d275286a312e9af2" kindref="member">getGaugeIrrep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a04fbcf1358eee388cdbf8f07e685a43f" kindref="member">getGroupIrrep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a418513195e15c40050248b6c039d310f" kindref="member">getFlavorIrrep()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="814" column="17" bodyfile="src/marty/core/quantumField.cpp" bodystart="619" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a2ac9be1c0b08c8d227fb33b8db63a36c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::QuantumFieldParent::getFlavorIrrep</definition>
        <argsstring>(const FlavorGroup *group) const</argsstring>
        <name>getFlavorIrrep</name>
        <qualifiedname>mty::QuantumFieldParent::getFlavorIrrep</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1FlavorGroup" kindref="compound">FlavorGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns the representation of the field in a particle flavor group. </para>
        </briefdescription>
        <detaileddescription>
<para>If the flavor group is not found, an error is raised. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the flavor group from which we want the representation of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The representation of the field in <bold>group</bold>. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a184d9c95b4867b270c5414a6da7be7e9" kindref="member">flavorRep</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a418513195e15c40050248b6c039d310f" kindref="member">getFlavorIrrep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a88d00277d9aad2b2d275286a312e9af2" kindref="member">getGaugeIrrep()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="825" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="624" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a8c90d230a443d29b60c873467365d232" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>vector&lt; Index &gt; mty::QuantumFieldParent::getSpaceIndex</definition>
        <argsstring>(const std::string &amp;nameIndex=&quot;&quot;) const</argsstring>
        <name>getSpaceIndex</name>
        <qualifiedname>mty::QuantumFieldParent::getSpaceIndex</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameIndex</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Returns a set of free space indices corresponding to the field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function in general will return zero or one index. Scalar fields have no space-time index, spin 1/2 and 1 have 1. However, in order to potentially extend this function to higher spins with more space-time indices, this function returns a std::vector. <simplesect kind="return"><para>New indices generated corresponding to the space-time indices of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1ad0013a777c51fe3bef0e76f984baac46" kindref="member">getGaugeIndex()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a73c0d0af5c2881739b4c6cbfec58a788" kindref="member">getFlavorIndex()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a13c637a21b843737df51de092d088f77" kindref="member">getFullSetOfIndices()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="837" column="17" bodyfile="src/marty/core/quantumField.cpp" bodystart="640" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ad0013a777c51fe3bef0e76f984baac46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>vector&lt; Index &gt; mty::QuantumFieldParent::getGaugeIndex</definition>
        <argsstring>(std::vector&lt; std::string &gt; names=std::vector&lt; std::string &gt;()) const</argsstring>
        <name>getGaugeIndex</name>
        <qualifiedname>mty::QuantumFieldParent::getGaugeIndex</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns a set of gauge indices corresponding to the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A set of new indices generated in the gauge representation spaces of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a73c0d0af5c2881739b4c6cbfec58a788" kindref="member">getFlavorIndex()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a8c90d230a443d29b60c873467365d232" kindref="member">getSpaceIndex()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a13c637a21b843737df51de092d088f77" kindref="member">getFullSetOfIndices()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="846" column="17" bodyfile="src/marty/core/quantumField.cpp" bodystart="651" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a73c0d0af5c2881739b4c6cbfec58a788" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>vector&lt; Index &gt; mty::QuantumFieldParent::getFlavorIndex</definition>
        <argsstring>(std::vector&lt; std::string &gt; names=std::vector&lt; std::string &gt;()) const</argsstring>
        <name>getFlavorIndex</name>
        <qualifiedname>mty::QuantumFieldParent::getFlavorIndex</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns a set of flavor indices corresponding to the field. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A set of new indices generated in the flavor representation spaces of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a8c90d230a443d29b60c873467365d232" kindref="member">getSpaceIndex()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad0013a777c51fe3bef0e76f984baac46" kindref="member">getGaugeIndex()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a13c637a21b843737df51de092d088f77" kindref="member">getFullSetOfIndices()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="855" column="17" bodyfile="src/marty/core/quantumField.cpp" bodystart="674" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a13c637a21b843737df51de092d088f77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>vector&lt; Index &gt; mty::QuantumFieldParent::getFullSetOfIndices</definition>
        <argsstring>() const</argsstring>
        <name>getFullSetOfIndices</name>
        <qualifiedname>mty::QuantumFieldParent::getFullSetOfIndices</qualifiedname>
        <briefdescription>
<para>Returns a full set of indices for the field including flavor , gauge, and space-time indices. </para>
        </briefdescription>
        <detaileddescription>
<para>This set is composed of independent and free indices and may be used directly to generate a <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. The indices are first flavor indices, then gauge indices and finally space-time indices. <simplesect kind="return"><para>A full set of new indices generated for the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a8c90d230a443d29b60c873467365d232" kindref="member">getSpaceIndex()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a73c0d0af5c2881739b4c6cbfec58a788" kindref="member">getFlavorIndex()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad0013a777c51fe3bef0e76f984baac46" kindref="member">getGaugeIndex()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="867" column="17" bodyfile="src/marty/core/quantumField.cpp" bodystart="695" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a8bbc1d467ba11fb7b002b78ba31d3887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::getInstance</definition>
        <argsstring>(csl::Tensor point=defaultSpaceTimePoint)</argsstring>
        <name>getInstance</name>
        <qualifiedname>mty::QuantumFieldParent::getInstance</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>point</declname>
          <defval><ref refid="namespacemty_1a6bc726c83cc204caa10b9fdeef8a19f0" kindref="member">defaultSpaceTimePoint</ref></defval>
        </param>
        <briefdescription>
<para>Returns an instance of the quantum field as an expression. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a set of indices through <ref refid="classmty_1_1QuantumFieldParent_1a13c637a21b843737df51de092d088f77" kindref="member">getFullSetOfIndices()</ref>, and uses a space-time point by default or given by the user. It returns an instance of the field like  <formula id="235">$ A^{\mu A}(X)
$</formula> calling operator().<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Sapce-time point at which the field is evaluated (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression of the field instance with free and independent indices. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a13c637a21b843737df51de092d088f77" kindref="member">getFullSetOfIndices()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a362970c0424049bcec378c8d1d229273" kindref="member">operator()()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="879" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="704" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a2aae55c74208ec14f43f96db0cf31132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::integrateOut</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>integrateOut</name>
        <qualifiedname>mty::QuantumFieldParent::integrateOut</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Sets the integrated out property of the field. </para>
        </briefdescription>
        <detaileddescription>
<para>If true, the propagator of the particle is modified, assuming <formula id="236">$ M^2\gg p^2 $</formula>. If false, the propagator is reset to its default. <simplesect kind="warning"><para>(de-)Integrating out a particle, all non default propagators defined through <ref refid="classmty_1_1QuantumFieldParent_1a04c8454d14b74a84d1ea6f753a2f4036" kindref="member">AddCustomPropagator()</ref> will be automatically suppressed. There are indeed in general ill-defined in this case. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean, must be true to integrate out the particle, false else (default = <bold>true</bold>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a2aae55c74208ec14f43f96db0cf31132" kindref="member">integrateOut</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a14f7a210019b8229f8511549e89ad8c6" kindref="member">isIntegratedOut()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a04c8454d14b74a84d1ea6f753a2f4036" kindref="member">AddCustomPropagator()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>, <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="893" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="710" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a678d073b9a4c404f40fa3a813624fc32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setMass</definition>
        <argsstring>(const std::string &amp;t_mass)</argsstring>
        <name>setMass</name>
        <qualifiedname>mty::QuantumFieldParent::setMass</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_mass</declname>
        </param>
        <briefdescription>
<para>Sets the mass of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para>The mass created for the particle is a <ref refid="classcsl_1_1Constant" kindref="compound">csl::Constant</ref> name <bold>t_mass</bold>. If the field is added to a <ref refid="classmty_1_1Model" kindref="compound">Model</ref> through Model::addField() later on, the corresponding mass term is added automatically to the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the constant mass. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a3ef078e01886b54dee846048b0f70cb3" kindref="member">mass</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a0cb6c12ea299cd5411c5b5dd7bcdebb3" kindref="member">getMass()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="903" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="716" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ada8e0cae45e02ac8a733533c1183f3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setMass</definition>
        <argsstring>(const std::string &amp;t_mass, long double value)</argsstring>
        <name>setMass</name>
        <qualifiedname>mty::QuantumFieldParent::setMass</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_mass</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the mass of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para>The mass created for the particle is a <ref refid="classcsl_1_1Constant" kindref="compound">csl::Constant</ref> name <bold>t_mass</bold> with a numerical value of <bold>value</bold>. If the field is added to a <ref refid="classmty_1_1Model" kindref="compound">Model</ref> through Model::addField() later on, the corresponding mass term is added automatically to the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the constant mass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the mass (should be expressed in GeV). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a3ef078e01886b54dee846048b0f70cb3" kindref="member">mass</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a0cb6c12ea299cd5411c5b5dd7bcdebb3" kindref="member">getMass()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="915" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="722" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ad16ca28b841a9df27429979c91b69b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setMass</definition>
        <argsstring>(const csl::Expr &amp;t_mass)</argsstring>
        <name>setMass</name>
        <qualifiedname>mty::QuantumFieldParent::setMass</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>t_mass</declname>
        </param>
        <briefdescription>
<para>Sets the mass of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para>The expression of the mass given by the user may be anything, the only requirements is that it must be scalar (without free index). If the field is added to a <ref refid="classmty_1_1Model" kindref="compound">Model</ref> through Model::addField() later on, the corresponding mass term is added automatically to the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression of the new mass for the particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a3ef078e01886b54dee846048b0f70cb3" kindref="member">mass</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a0cb6c12ea299cd5411c5b5dd7bcdebb3" kindref="member">getMass()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="926" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="728" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a803d73584c1eb98be0331c8bc8e73df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setWidth</definition>
        <argsstring>(const csl::Expr &amp;t_width)</argsstring>
        <name>setWidth</name>
        <qualifiedname>mty::QuantumFieldParent::setWidth</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>t_width</declname>
        </param>
        <briefdescription>
<para>Sets the width of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para>The expression of the width given by the user may be anything, the only requirements is that it must be scalar (without free index). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression of the new width for the particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a9d48ab6fa31c0d612155b36b109cc64f" kindref="member">width</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad65026224bc3b7b92ce6ab3cbfea5b4e" kindref="member">getWidth()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="935" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="734" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a5fb9032a21b76dd8f9ec5d1a1b30cb59" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setGaugeChoice</definition>
        <argsstring>(gauge::Type type)</argsstring>
        <name>setGaugeChoice</name>
        <qualifiedname>mty::QuantumFieldParent::setGaugeChoice</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1a18f5cb238582b89d267965c687c9bab2">setGaugeChoice</reimplementedby>
        <param>
          <type><ref refid="namespacemty_1_1gauge_1a8fd05434cb655735bb18cda43a626a9f" kindref="member">gauge::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="937" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="740" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a4b93f59ab13b908df2957bec72833601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setSelfConjugate</definition>
        <argsstring>(bool t_selfConjugate)</argsstring>
        <name>setSelfConjugate</name>
        <qualifiedname>mty::QuantumFieldParent::setSelfConjugate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_selfConjugate</declname>
        </param>
        <briefdescription>
<para>Sets the complex conjugation property of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para>If <bold>t_selfConjugate</bold> is true, the particle becomes real. Otherwise it becomes complex and <formula id="237">$ \Phi ^* \neq \bar{\Phi} $</formula>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_selfConjugate</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean telling if the field must be real. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a8fe31c20d7f8c2820c799a15dc47eba0" kindref="member">selfConjugate</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ae6dc406d641ac0bdb37ac0312062ec67" kindref="member">isSelfConjugate()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="946" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="745" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a48db32ebcc3ecbec4c090fa3f03a524c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setPhysical</definition>
        <argsstring>(bool t_physical)</argsstring>
        <name>setPhysical</name>
        <qualifiedname>mty::QuantumFieldParent::setPhysical</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_physical</declname>
        </param>
        <briefdescription>
<para>Sets the physical property of the particle. </para>
        </briefdescription>
        <detaileddescription>
<para>If <bold>t_physical</bold> is true, the field is physical and may appear as external legs of diagrams (insertions). Else, the field becomes forbidden in diagrams and setting them external will raise an error. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_physical</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean telling if the field is physical (may appear in external legs). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a6abc017a0c4778fc0e299f4c4e1dc435" kindref="member">physical</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad5d2515bd566b8aff18ea30d3353b13a" kindref="member">isPhysical()</ref>, setExternal(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="956" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="755" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a2cf640364de48c0962402140abd6535c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setEnabledInDiagrams</definition>
        <argsstring>(bool t_enabled)</argsstring>
        <name>setEnabledInDiagrams</name>
        <qualifiedname>mty::QuantumFieldParent::setEnabledInDiagrams</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_enabled</declname>
        </param>
        <briefdescription>
<para>Enables or disables the particle in diagrams. </para>
        </briefdescription>
        <detaileddescription>
<para>If <bold>t_enabled</bold> is false, the field may not appear in any computation and will be automatically discarded. This may be useful in some cases for which we know that the contribution of one or several particles is negligible, and that computing diagrams containing them is irrelevant. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean telling if the field may appear in diagrams. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a691ece6fc798a1594dd83be483733dd3" kindref="member">enabledInDiagrams</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ae937a135c74fb3621758f93088f65331" kindref="member">isEnabledInDiagrams()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="968" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="761" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a13c6a7faa33b3c94f52e87d0924de85f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::adjustFlavorRep</definition>
        <argsstring>(Flavor *t_flavor)</argsstring>
        <name>adjustFlavorRep</name>
        <qualifiedname>mty::QuantumFieldParent::adjustFlavorRep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> *</type>
          <declname>t_flavor</declname>
        </param>
        <briefdescription>
<para>Ajusts the flavor representation of the field to a new flavor group. </para>
        </briefdescription>
        <detaileddescription>
<para>When breaking flavor symmetry, we may sometimes be interested in breaking only partially the symmetry. For example, we may break a 3 flavor-symmetry in one light particle and a 2-flavor symmetry. This function allows to keep a flavor representation but in a different group (here for example <formula id="238">$ SU(3) $</formula> to <formula id="239">$ SU(2) $</formula>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_flavor</parametername>
</parameternamelist>
<parameterdescription>
<para>New <ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> of the particle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a184d9c95b4867b270c5414a6da7be7e9" kindref="member">flavorRep</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a418513195e15c40050248b6c039d310f" kindref="member">getFlavorIrrep()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="981" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="767" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1adf0276529e84e396f8638d1fd6434c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setGaugeIrrep</definition>
        <argsstring>(const GaugeIrrep &amp;newRep)</argsstring>
        <name>setGaugeIrrep</name>
        <qualifiedname>mty::QuantumFieldParent::setGaugeIrrep</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1GaugeIrrep" kindref="compound">GaugeIrrep</ref> &amp;</type>
          <declname>newRep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="983" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="774" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a8f6979a78474e18437ce68fa605f7b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setGroupRep</definition>
        <argsstring>(Group *group, const Irrep &amp;newRep)</argsstring>
        <name>setGroupRep</name>
        <qualifiedname>mty::QuantumFieldParent::setGroupRep</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">Group</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> &amp;</type>
          <declname>newRep</declname>
        </param>
        <briefdescription>
<para>Sets the representation of the field for a given group. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> given as parameter is an already built representation. This function is called during gauge symmetry breaking, when representation are broken. Changing the representation, the indices of the tensor change and may disappear if the new representation is trivial, or appear if the new representation is not while the old one is.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group for which the field representation is changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newRep</parametername>
</parameternamelist>
<parameterdescription>
<para>New representation of the field in <bold>group</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a9fef6afaf0e2d81d25aa51d21e192f74" kindref="member">irrep</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a04fbcf1358eee388cdbf8f07e685a43f" kindref="member">getGroupIrrep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a88d00277d9aad2b2d275286a312e9af2" kindref="member">getGaugeIrrep()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="995" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="811" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1affdd88617bcd4975497549e7dd00646f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setGroupRep</definition>
        <argsstring>(std::string const &amp;group, std::vector&lt; int &gt; const &amp;highestWeight)</argsstring>
        <name>setGroupRep</name>
        <qualifiedname>mty::QuantumFieldParent::setGroupRep</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>highestWeight</declname>
        </param>
        <briefdescription>
<para>Sets the representation of the field for a given group. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> given as parameter is in the form of a std::vector of integers. These integer are the dinkin labels of the representation. This function is called during gauge symmetry breaking, when representation are broken. Changing the representation, the indices of the tensor change and may disappear if the new representation is trivial, or appear if the new representation is not while the old one is.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group for which the field representation is changed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>highestWeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Dinkin labels of the highest weight for the wanted representation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a9fef6afaf0e2d81d25aa51d21e192f74" kindref="member">irrep</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a04fbcf1358eee388cdbf8f07e685a43f" kindref="member">getGroupIrrep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a88d00277d9aad2b2d275286a312e9af2" kindref="member">getGaugeIrrep()</ref>, <ref refid="classmty_1_1SemiSimpleAlgebra" kindref="compound">SemiSimpleAlgebra</ref>, <ref refid="classmty_1_1SemiSimpleAlgebra_1a88a9a01df2e34c751d96a8d7ed448606" kindref="member">SemiSimpleAlgebra::highestWeightRep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a58a48774508d383ebffce688b58508b9" kindref="member">setFlavorRep()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1011" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="784" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a407e6cf9dceeeed1850d0687fe25f5db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setGroupRep</definition>
        <argsstring>(std::string const &amp;group, int charge)</argsstring>
        <name>setGroupRep</name>
        <qualifiedname>mty::QuantumFieldParent::setGroupRep</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>int</type>
          <declname>charge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1014" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="805" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a58a48774508d383ebffce688b58508b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setFlavorRep</definition>
        <argsstring>(const FlavorGroup *group, FlavorFlag newRep)</argsstring>
        <name>setFlavorRep</name>
        <qualifiedname>mty::QuantumFieldParent::setFlavorRep</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1FlavorGroup" kindref="compound">FlavorGroup</ref> *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="structmty_1_1FlavorFlag" kindref="compound">FlavorFlag</ref></type>
          <declname>newRep</declname>
        </param>
        <briefdescription>
<para>Sets the representation of the field for a given flavor group. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classmty_1_1Irrep" kindref="compound">Irrep</ref> given as parameter is an already built representation. This function is called during flavor symmetry breaking, when representation are broken. Changing the representation, the indices of the tensor change and may disappear if the new representation is trivial, or appear if the new representation is not while the old one is.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> group for which the field representation is changed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newRep</parametername>
</parameternamelist>
<parameterdescription>
<para>New representation of the field in <bold>group</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a4f5d94d560f6f7a4c69437cad05a2b09" kindref="member">flavor</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a418513195e15c40050248b6c039d310f" kindref="member">getFlavorIrrep()</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a8f6979a78474e18437ce68fa605f7b3e" kindref="member">setGroupRep()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1027" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="858" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a8838fb09d4edf8a085603f7f92a9079a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setFundamentalFlavorRep</definition>
        <argsstring>(std::string const &amp;flavorGroup)</argsstring>
        <name>setFundamentalFlavorRep</name>
        <qualifiedname>mty::QuantumFieldParent::setFundamentalFlavorRep</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>flavorGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1028" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="844" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1abc3a4d46579a2a60cf841e9591e855eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setBrokenParts</definition>
        <argsstring>(const csl::Space *broken, const std::vector&lt; Particle &gt; &amp;brokenParts)</argsstring>
        <name>setBrokenParts</name>
        <qualifiedname>mty::QuantumFieldParent::setBrokenParts</qualifiedname>
        <reimplementedby refid="classmty_1_1VectorBoson_1a0c5e9bf342d7acf3d843735975c29baf">setBrokenParts</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> *</type>
          <declname>broken</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> &gt; &amp;</type>
          <declname>brokenParts</declname>
        </param>
        <briefdescription>
<para>Sets broken parts (from gauge of flavor symmetry full breaking) containing the new particles. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should not be called directly by the user in general. It overrides a csl function that allows to break a tensor into several parts. In this case the space is fully broken (no subspace left).<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>broken</parametername>
</parameternamelist>
<parameterdescription>
<para>Space that is broken in several parts.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>brokenParts</parametername>
</parameternamelist>
<parameterdescription>
<para>New particles arising from the symmmetry breaking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1039" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="900" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1aec07ce340587116774df43d16418327f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> &gt;</type>
        <definition>std::vector&lt; csl::Parent &gt; mty::QuantumFieldParent::breakSpace</definition>
        <argsstring>(const csl::Space *broken, const std::vector&lt; const csl::Space * &gt; &amp;newSpace, const std::vector&lt; size_t &gt; &amp;pieces) const override</argsstring>
        <name>breakSpace</name>
        <qualifiedname>mty::QuantumFieldParent::breakSpace</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractParent_1a8369702a8c0a3e9838cc90aefcbb2d6f">breakSpace</reimplements>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> *</type>
          <declname>broken</declname>
        </param>
        <param>
          <type>const std::vector&lt; const <ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> * &gt; &amp;</type>
          <declname>newSpace</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>pieces</declname>
        </param>
        <briefdescription>
<para>Returns the set of new tensors after breaking the particle in parts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>broken</parametername>
</parameternamelist>
<parameterdescription>
<para>Space (gauge or flavor) that is broken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>New (non trivial) vector spaces after the symmetry breaking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pieces</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of new spaces. The sum must be equal to the dimension of <bold>broken</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The set of tensors arising after the symmetry breaking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1053" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="909" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a5a5bcfd2ae5557067eae74640a50249d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
        <definition>QuantumFieldParent &amp; mty::QuantumFieldParent::operator=</definition>
        <argsstring>(const QuantumFieldParent &amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>mty::QuantumFieldParent::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator (c++ default). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other field to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current object. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1af139e37bbc3a5893d48a60c67c9f29b4" kindref="member">QuantumFieldParent(QuantumFieldParent const&amp;)</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1063" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a19555df10c3d557726778389d62ae69f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(const csl::Tensor &amp;t_point) override</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <reimplements refid="classcsl_1_1TensorFieldParent_1a1e471f48ef91ab66399e88e9cbd4ef0b">operator()</reimplements>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the field as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions takes no <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>. The field is then for sure a <ref refid="classmty_1_1ScalarBoson" kindref="compound">ScalarBoson</ref> in a trivial <ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> representation. Example: <formula id="240">$\phi(X)$</formula>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Space_time point of the scalar field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1082" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="933" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a8c43948220614b832ce07bd2d65df7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(csl::Index index, const csl::Tensor &amp;t_point) override</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <reimplements refid="classcsl_1_1TensorFieldParent_1a175a7bd5388112e7603d8e08c65f6b46">operator()</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the field as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions takes one <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>. This may be for example a field like <formula id="241">$ A^\mu(X) $</formula>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique index of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Space-time point of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1093" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="939" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a70d76ae9e1f6583ecc1f1102d68aa585" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;indices, const csl::Tensor &amp;t_point) override</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <reimplements refid="classcsl_1_1TensorFieldParent_1ae91a0f9bd37f779aca2138607bb61406">operator()</reimplements>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the field, as integers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Space-time point of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1104" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="947" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1aa36e3e3d247a9948d4de692a00d38403" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(std::vector&lt; csl::Index &gt; indices, const csl::Tensor &amp;t_point) override</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <reimplements refid="classcsl_1_1TensorFieldParent_1af4bf45384924967903815e625a3342a8">operator()</reimplements>
        <reimplementedby refid="classmty_1_1VectorBoson_1a2ca80b0c77738a71b62a741473fe6332">operator()</reimplementedby>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the field as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes multiple indices (may be only one) in a std::vector. This may correspond to a field like <formula id="242">$ A^{\mu I}(X) $</formula> . <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Space-time point of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1116" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="953" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a0d3c1c5fa50f35e662b72cf12d923336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(csl::Index polarization, std::vector&lt; int &gt; const &amp;indices, const csl::Tensor &amp;t_point)</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>polarization</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the <ref refid="classmty_1_1PolarizationField" kindref="compound">PolarizationField</ref> as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polarization</parametername>
</parameternamelist>
<parameterdescription>
<para>Polarization index for the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the field, as integers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Space-time point of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1128" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="962" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a362970c0424049bcec378c8d1d229273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>()</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <briefdescription>
<para>Generates an instance of the field as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions takes no <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>. The field is then for sure a <ref refid="classmty_1_1ScalarBoson" kindref="compound">ScalarBoson</ref> in a trivial <ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> representation. Example: <formula id="240">$\phi(X)$</formula>. The space_time point is taken as default: see defaultSpaceTimePoint. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Space_time point of the scalar field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1141" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="969" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a64f7543217b809e39a686180b2e67754" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(csl::Index index) override</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <reimplements refid="classcsl_1_1TensorParent_1a335867b85b438d48eaf0457cb5c83469">operator()</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the field as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions takes one <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref>. This may be for example a field like <formula id="241">$ A^\mu(X) $</formula>. The space_time point is taken as default: see defaultSpaceTimePoint. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique index of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1152" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="974" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a6d5cf783b576fc3bac49987c41fa6590" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(std::vector&lt; csl::Index &gt; indices) override</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <reimplements refid="classcsl_1_1TensorParent_1a4d65c157315e20d9c6855d0a14b7ba63">operator()</reimplements>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the field as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes multiple indices (may be only one) in a std::vector. This may correspond to a field like <formula id="242">$ A^{\mu I}(X) $</formula> . The space_time point is taken as default: see defaultSpaceTimePoint. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1163" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="979" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ae3e8544f0753ea8db3f73716f654507e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(csl::Index polarization, csl::Index index, const csl::Tensor &amp;momentum)</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>polarization</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>momentum</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the polarization field as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para>The first index must be the spin or polarization of the field. Then follow the rest of the indices, that can be unique or in a std::vector. For example, one may create the polarization tensor of a vector boson <formula id="243">$ \epsilon ^\lambda_{\mu}(p) $</formula> with the following code <programlisting><codeline><highlight class="normal">Index<sp/>lambda<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal">Index<sp/><ref refid="namespacemty_1_1mssm__input_1afe322514383dc8825d2e8fda25d3cda8" kindref="member">mu</ref><sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal">Tensor<sp/>p<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal">Particle<sp/>A<sp/>=<sp/><ref refid="namespacemty_1a89dc23bac8020020669e58ab198bb263" kindref="member">vectorboson_s</ref>(...)</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacecsl" kindref="compound">csl</ref>::Expr<sp/>epsilon<sp/>=<sp/>A(lambda,<sp/>mu,<sp/>p);</highlight></codeline>
</programlisting> <simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1PolarizationField" kindref="compound">PolarizationField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1182" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="984" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1aaf15b2476632091300ed81bfed9af23e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::QuantumFieldParent::operator()</definition>
        <argsstring>(csl::Index polarization, std::vector&lt; csl::Index &gt; indices, const csl::Tensor &amp;momentum)</argsstring>
        <name>operator()</name>
        <qualifiedname>mty::QuantumFieldParent::operator()</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
          <declname>polarization</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &amp;</type>
          <declname>momentum</declname>
        </param>
        <briefdescription>
<para>Generates an instance of the polarization field as a symbolic expression. </para>
        </briefdescription>
        <detaileddescription>
<para>The first index must be the spin or polarization of the field. Then follow the rest of the indices, that can be unique or in a std::vector. For example, one may create the polarization tensor of a vector boson <formula id="244">$ \epsilon ^\lambda_{\mu I}(p) $</formula> with the following code <programlisting><codeline><highlight class="normal"><sp/>Index<sp/>lambda<sp/>=<sp/>...;<sp/>Index<sp/><ref refid="namespacemty_1_1mssm__input_1afe322514383dc8825d2e8fda25d3cda8" kindref="member">mu</ref><sp/>=<sp/>...;<sp/>Index<sp/>I<sp/>=<sp/>...;<sp/>Tensor<sp/>p<sp/>=</highlight></codeline>
<codeline><highlight class="normal">...;<sp/>Particle<sp/>A<sp/>=<sp/><ref refid="namespacemty_1a89dc23bac8020020669e58ab198bb263" kindref="member">vectorboson_s</ref>(...)<sp/><ref refid="namespacecsl" kindref="compound">csl</ref>::Expr<sp/>epsilon<sp/>=<sp/>A(lambda,<sp/>{<ref refid="namespacemty_1_1mssm__input_1afe322514383dc8825d2e8fda25d3cda8" kindref="member">mu</ref>,</highlight></codeline>
<codeline><highlight class="normal">I},<sp/>p);<sp/></highlight></codeline>
</programlisting> <simplesect kind="return"><para>An expression, instance of the field. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1PolarizationField" kindref="compound">PolarizationField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1198" column="15" bodyfile="src/marty/core/quantumField.cpp" bodystart="998" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a594410f380cd8bc2038af02dce06ba81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::QuantumFieldParent::operator csl::Expr</definition>
        <argsstring>()</argsstring>
        <name>operator csl::Expr</name>
        <qualifiedname>mty::QuantumFieldParent::Expr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1202" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="1012" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a58bc9f34729bf55dfe667e3549289def" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::breakParticle</definition>
        <argsstring>(mty::Group *brokenGroup, std::vector&lt; std::string &gt; const &amp;newNames)</argsstring>
        <name>breakParticle</name>
        <qualifiedname>mty::QuantumFieldParent::breakParticle</qualifiedname>
        <reimplementedby refid="classmty_1_1DiracFermion_1abfdd963be5f22730f2a9ac3b6c9e7d22">breakParticle</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1a86576de63b4f7bafbac65f0a01c0bbcd">breakParticle</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1a61397b39b0819f64b9bee422229ac84a">breakParticle</reimplementedby>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> *</type>
          <declname>brokenGroup</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>newNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1204" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="1070" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a98a7dda6e47e5fca59d1bafa298abd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::breakParticle</definition>
        <argsstring>(mty::FlavorGroup *brokenFlavor, std::vector&lt; mty::FlavorGroup * &gt; const &amp;subGroups, std::vector&lt; std::string &gt; const &amp;names)</argsstring>
        <name>breakParticle</name>
        <qualifiedname>mty::QuantumFieldParent::breakParticle</qualifiedname>
        <reimplementedby refid="classmty_1_1DiracFermion_1a48aab67f6291f71059003ad15d7ad4a3">breakParticle</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1a8a9844f13c043f2fb5e15fa4e78efc9f">breakParticle</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1a4b943fe548305a519b0e114b16bea3a0">breakParticle</reimplementedby>
        <param>
          <type><ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref> *</type>
          <declname>brokenFlavor</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref> * &gt; const &amp;</type>
          <declname>subGroups</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1207" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="1092" bodyend="1114"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classmty_1_1QuantumFieldParent_1a9969f90df31743ef674d3d7841571a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const QuantumFieldParent &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::QuantumFieldParent::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Overload of operator&lt;&lt; for <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> to display (basically). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to <bold>fout</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1071" column="12"/>
      </memberdef>
      <memberdef kind="friend" id="classmty_1_1QuantumFieldParent_1a04c8454d14b74a84d1ea6f753a2f4036" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddCustomPropagator</definition>
        <argsstring>(QuantumFieldParent *left, QuantumFieldParent *right, QuantumFieldParent::Propagator_func propagator)</argsstring>
        <name>AddCustomPropagator</name>
        <qualifiedname>mty::QuantumFieldParent::AddCustomPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">QuantumFieldParent::Propagator_func</ref></type>
          <declname>propagator</declname>
        </param>
        <briefdescription>
<para>Changes the propagator of a particle with another. </para>
        </briefdescription>
        <detaileddescription>
<para>The propagator should of course be consistent, but may be as exotic as possible. See Propagator_func to know the exact structure of what must be given. This function may be useful for example to define the propagator between a left-handed and a right-handed fermion (different particles), or between a vector boson and its field strength...<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Left field in the propagator.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Right field in the propagator.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>New propagator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>In the case of a non symmetric propagator, the user should take into account that in its custom function, the left field will not always be the first argument. The only thing that is ensured is that if there is a complex conjugated field, it will be the second argument. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1aba9df2478df3b7be3621fa5f55c1fe8c" kindref="member">QuantumFieldParent::propagator</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>, <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1271" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="1592" bodyend="1598"/>
      </memberdef>
      <memberdef kind="friend" id="classmty_1_1QuantumFieldParent_1a47708a4c96ca6b10bdf51ba5d75dd603" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddCustomPropagator</definition>
        <argsstring>(QuantumFieldParent *field, QuantumFieldParent::Propagator_func propagator)</argsstring>
        <name>AddCustomPropagator</name>
        <qualifiedname>mty::QuantumFieldParent::AddCustomPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> *</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">QuantumFieldParent::Propagator_func</ref></type>
          <declname>propagator</declname>
        </param>
        <briefdescription>
<para>Changes the propagator of a particle with itself. </para>
        </briefdescription>
        <detaileddescription>
<para>The propagator should of course be consistent, but may be as exotic as possible. See Propagator_func to know the exact structure of what must be given. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Field whose propagator is modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>New propagator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1aba9df2478df3b7be3621fa5f55c1fe8c" kindref="member">QuantumFieldParent::propagator</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>, <ref refid="quantumFieldTheory_8h" kindref="compound">quantumFieldTheory.h</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1286" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="1600" bodyend="1604"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1af971c4e93db65d7dbf36773a73c0cd3a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::addRelative</definition>
        <argsstring>(std::weak_ptr&lt; mty::QuantumFieldParent &gt; const &amp;particle)</argsstring>
        <name>addRelative</name>
        <qualifiedname>mty::QuantumFieldParent::addRelative</qualifiedname>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> &gt; const &amp;</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1212" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="1030" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a79481e93600ad51835ab978099f81a04" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::weak_ptr&lt; <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> &gt;</type>
        <definition>std::weak_ptr&lt; mty::QuantumFieldParent &gt; mty::QuantumFieldParent::removeRelative</definition>
        <argsstring>(QuantumFieldParent const *particle)</argsstring>
        <name>removeRelative</name>
        <qualifiedname>mty::QuantumFieldParent::removeRelative</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> const *</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1215" column="5" bodyfile="src/marty/core/quantumField.cpp" bodystart="1044" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a2e55627be19c358eea102a6c6e012aba" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::checkRelatives</definition>
        <argsstring>()</argsstring>
        <name>checkRelatives</name>
        <qualifiedname>mty::QuantumFieldParent::checkRelatives</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1217" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="1060" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a9a9b2742680ba38fe222518c63065cbc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::QuantumFieldParent::applyToRelatives</definition>
        <argsstring>(Func &amp;&amp;func)</argsstring>
        <name>applyToRelatives</name>
        <qualifiedname>mty::QuantumFieldParent::applyToRelatives</qualifiedname>
        <param>
          <type>Func &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1220" column="10" bodyfile="src/marty/core/quantumField.h" bodystart="2114" bodyend="2125"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a970498bd0ff878820f3859f83d38fccf" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::printQuantumDefinition</definition>
        <argsstring>(std::ostream &amp;out, int indentSize) const</argsstring>
        <name>printQuantumDefinition</name>
        <qualifiedname>mty::QuantumFieldParent::printQuantumDefinition</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1222" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="454" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a3879c977fe68ea5c33aa65bb01065c9e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::initPropagator</definition>
        <argsstring>()</argsstring>
        <name>initPropagator</name>
        <qualifiedname>mty::QuantumFieldParent::initPropagator</qualifiedname>
        <reimplementedby refid="classmty_1_1DiracFermion_1a67e637992fde89e9a30e650c236583d5">initPropagator</reimplementedby>
        <reimplementedby refid="classmty_1_1ScalarBoson_1a8796952f241261a8c8774985d3faa9b6">initPropagator</reimplementedby>
        <reimplementedby refid="classmty_1_1VectorBoson_1a21b946dd951365dc06ae99aa41ca3e0c">initPropagator</reimplementedby>
        <reimplementedby refid="classmty_1_1WeylFermion_1a982284ec7d0db94d53566a85a7934951">initPropagator</reimplementedby>
        <briefdescription>
<para>Initializes default propagators for the particle. This function is called automatically in the constructor of derived classes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref>, <ref refid="classmty_1_1ScalarBoson" kindref="compound">ScalarBoson</ref>, <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref>, <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>, <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1229" column="18" bodyfile="src/marty/core/quantumField.cpp" bodystart="497" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1a5e3dc7874472b3408c910d8e0c267368" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::initIndexSpaces</definition>
        <argsstring>()</argsstring>
        <name>initIndexSpaces</name>
        <qualifiedname>mty::QuantumFieldParent::initIndexSpaces</qualifiedname>
        <briefdescription>
<para>Initializes firstGaugeIndex and firstSpaceIndex. Automatically called by the constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1aef7c609ffce6b9668164c47b0eda79b8" kindref="member">firstSpaceIndex</ref>, <ref refid="classmty_1_1QuantumFieldParent_1ad463db6be7ba2c207b42e0bf3bff87b1" kindref="member">firstGaugeIndex</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1236" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="194" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1ae1fd7bab8e6d36cf8f413c5e7e8ed3f4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::initPolarizationSum</definition>
        <argsstring>()</argsstring>
        <name>initPolarizationSum</name>
        <qualifiedname>mty::QuantumFieldParent::initPolarizationSum</qualifiedname>
        <briefdescription>
<para>Initializes the polarization sum for <ref refid="classmty_1_1PolarizationField" kindref="compound">PolarizationField</ref> arising in amplitudes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1a18d08c09430c070b1f37c470e5054db0" kindref="member">polarizationSumInitialized</ref>, <ref refid="classmty_1_1PolarizationField" kindref="compound">PolarizationField</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1243" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="226" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1QuantumFieldParent_1af9680402c392d248b91d5c097aa92267" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::QuantumFieldParent::setPropagator</definition>
        <argsstring>(QuantumFieldParent const *other, Propagator_func prop)</argsstring>
        <name>setPropagator</name>
        <qualifiedname>mty::QuantumFieldParent::setPropagator</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> const *</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" kindref="member">Propagator_func</ref></type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para>Changes the propagator of a particle with another. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not callable by the user. It is called instead by <ref refid="classmty_1_1QuantumFieldParent_1a04c8454d14b74a84d1ea6f753a2f4036" kindref="member">AddCustomPropagator()</ref> to avoid multiple definitions of propagators. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Other field in the propagator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propagator</parametername>
</parameternamelist>
<parameterdescription>
<para>New propagator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1QuantumFieldParent_1aba9df2478df3b7be3621fa5f55c1fe8c" kindref="member">propagator</ref>, <ref refid="classmty_1_1QuantumFieldParent_1a04c8454d14b74a84d1ea6f753a2f4036" kindref="member">AddCustomPropagator()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/quantumField.h" line="1253" column="10" bodyfile="src/marty/core/quantumField.cpp" bodystart="894" bodyend="898"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base class for parents of <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> objects. </para>
    </briefdescription>
    <detaileddescription>
<para>A number of features are implemented in this class. Management of the mass, the width etc. Features specific to each type of field (bosonic, fermionic, ghost ...) are implemented in derived classes. <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> is the abstract (and unique) representation of a particle. As for <ref refid="classcsl_1_1TensorParent" kindref="compound">csl::TensorParent</ref> or <ref refid="classcsl_1_1TensorFieldParent" kindref="compound">csl::TensorFieldParent</ref>, it will not appear in expressions. It contains all intrinsic features of a particle. For example in an equation, <formula id="13">$ A $</formula> would be the abstract photon, the <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> whereas <formula id="206">$ A^{\mu A}(X) $</formula> would be the actual field, with specific information (indices, conjugated or not, space-time point ...). This field is then a <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> object. The <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> is there to generate <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> when giving it indices and (optionnaly) a point <formula id="213">$ X $</formula>. See operator(). The <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref> keeps a pointer to its parent in order to have access to all abstract properties. <simplesect kind="note"><para><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> must not be created statically. The <ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> object must be created instead, a <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr&lt;QuantumFieldParent&gt;</ref>. </para>
</simplesect>
<simplesect kind="note"><para><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref> may not be built directly (pure abstract class). Instead, one must create a specialization. See <ref refid="classmty_1_1ScalarBoson" kindref="compound">ScalarBoson</ref>, <ref refid="classmty_1_1VectorBoson" kindref="compound">VectorBoson</ref>, <ref refid="classmty_1_1GaugeBoson" kindref="compound">GaugeBoson</ref>, <ref refid="classmty_1_1WeylFermion" kindref="compound">WeylFermion</ref>, <ref refid="classmty_1_1DiracFermion" kindref="compound">DiracFermion</ref>, <ref refid="classmty_1_1GoldstoneBoson" kindref="compound">GoldstoneBoson</ref>, or <ref refid="classmty_1_1GhostBoson" kindref="compound">GhostBoson</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>csl::AbstractParent</label>
        <link refid="classcsl_1_1AbstractParent"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::TensorFieldParent</label>
        <link refid="classcsl_1_1TensorFieldParent"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>csl::TensorParent</label>
        <link refid="classcsl_1_1TensorParent"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>mty::BaseVectorBoson</label>
        <link refid="classmty_1_1BaseVectorBoson"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>mty::DiracFermion</label>
        <link refid="classmty_1_1DiracFermion"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>mty::FieldStrength</label>
        <link refid="classmty_1_1FieldStrength"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>mty::GaugeBoson</label>
        <link refid="classmty_1_1GaugeBoson"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>mty::GhostBoson</label>
        <link refid="classmty_1_1GhostBoson"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>mty::GoldstoneBoson</label>
        <link refid="classmty_1_1GoldstoneBoson"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>mty::QuantumFieldParent</label>
        <link refid="classmty_1_1QuantumFieldParent"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>mty::ScalarBoson</label>
        <link refid="classmty_1_1ScalarBoson"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>mty::VectorBoson</label>
        <link refid="classmty_1_1VectorBoson"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>mty::WeylFermion</label>
        <link refid="classmty_1_1WeylFermion"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::enable_shared_from_this&lt; AbstractParent &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>csl::AbstractParent</label>
        <link refid="classcsl_1_1AbstractParent"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>csl::Expr</label>
        <link refid="classcsl_1_1Expr"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>csl::Space</label>
        <link refid="classcsl_1_1Space"/>
        <childnode refid="7" relation="usage">
          <edgelabel>symbolicDim</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>delta</edgelabel>
          <edgelabel>epsilon</edgelabel>
          <edgelabel>inverseMetric</edgelabel>
          <edgelabel>metric</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>csl::Symmetry</label>
        <link refid="classcsl_1_1Symmetry"/>
      </node>
      <node id="10">
        <label>csl::Tensor</label>
        <link refid="classcsl_1_1Tensor"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::TensorFieldParent</label>
        <link refid="classcsl_1_1TensorFieldParent"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>spaceField</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>csl::TensorParent</label>
        <link refid="classcsl_1_1TensorParent"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>symmetry</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>tensor</edgelabel>
          <edgelabel>trace</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>mty::AlgebraState</label>
        <link refid="classmty_1_1AlgebraState"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>mty::Flavor</label>
        <link refid="classmty_1_1Flavor"/>
      </node>
      <node id="19">
        <label>mty::FlavorIrrep</label>
        <link refid="classmty_1_1FlavorIrrep"/>
      </node>
      <node id="16">
        <label>mty::Gauge</label>
        <link refid="classmty_1_1Gauge"/>
      </node>
      <node id="17">
        <label>mty::GaugeIrrep</label>
        <link refid="classmty_1_1GaugeIrrep"/>
        <childnode refid="16" relation="usage">
          <edgelabel>gauge</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>mty::Irrep</label>
        <link refid="classmty_1_1Irrep"/>
        <childnode refid="13" relation="usage">
          <edgelabel>algebra</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>highestWeight</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>mty::QuantumFieldParent</label>
        <link refid="classmty_1_1QuantumFieldParent"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mass</edgelabel>
          <edgelabel>width</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>spin</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>gauge</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>irrep</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>flavor</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>flavorRep</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>mty::SemiSimpleAlgebra</label>
        <link refid="classmty_1_1SemiSimpleAlgebra"/>
        <childnode refid="7" relation="usage">
          <edgelabel>inverseCartan</edgelabel>
          <edgelabel>symbolicCartan</edgelabel>
          <edgelabel>symbolicMetric</edgelabel>
          <edgelabel>symbolicRho</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::enable_shared_from_this&lt; AbstractParent &gt;</label>
      </node>
      <node id="11">
        <label>std::shared_ptr&lt; TensorParent &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
      <node id="8">
        <label>std::shared_ptr&lt; csl::Abstract &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
      <node id="15">
        <label>std::vector&lt; int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/marty/core/quantumField.h" line="149" column="1" bodyfile="src/marty/core/quantumField.h" bodystart="149" bodyend="1288"/>
    <listofallmembers>
      <member refid="classcsl_1_1AbstractParent_1a3a8495f4cc8281410f8aa512c64116cb" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>AbstractParent</name></member>
      <member refid="classcsl_1_1AbstractParent_1a961d277c9a277163931cb5b45906c83f" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>AbstractParent</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad88d1dd79f22b67744640124252dc093" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>AbstractParent</name></member>
      <member refid="classcsl_1_1TensorParent_1abdfaf46f9699cea8ac9cea9b7dcec388" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addAntiSymmetry</name></member>
      <member refid="classcsl_1_1TensorParent_1a4e64e8c6d44452b8457401570e8fdee1" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addComplexProperty</name></member>
      <member refid="classcsl_1_1TensorParent_1aae4c207cf3365ebf833975cb4b4e92f8" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addContractionProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a04c8454d14b74a84d1ea6f753a2f4036" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>AddCustomPropagator</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a47708a4c96ca6b10bdf51ba5d75dd603" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>AddCustomPropagator</name></member>
      <member refid="classcsl_1_1TensorParent_1a464d54dcfae18bb913b4bf6a6629adab" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addHermitianProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1af971c4e93db65d7dbf36773a73c0cd3a" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>addRelative</name></member>
      <member refid="classcsl_1_1TensorParent_1a81eabaf09cb9fe1855a35a91faf3b132" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addSelfContraction</name></member>
      <member refid="classcsl_1_1TensorParent_1a17fb05141415ac442cb8f5b6e88bc329" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addSpace</name></member>
      <member refid="classcsl_1_1TensorParent_1ac9a495db8af3074a6c329d84a1b7cb91" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1TensorParent_1a47f7c70202336b11674b15a6895b16ed" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addTraceLessNess</name></member>
      <member refid="classcsl_1_1TensorParent_1af3fc929cce72fcf95aad56ebe51c8881" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>addTransposedProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a13c6a7faa33b3c94f52e87d0924de85f" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>adjustFlavorRep</name></member>
      <member refid="classcsl_1_1TensorParent_1aef208f53719c900f1b0a4b6f57fb9f48" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>applyProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a9a9b2742680ba38fe222518c63065cbc" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>applyToRelatives</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a1f7b26c566813542665ba35ca37cc233" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>bosonic</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a58bc9f34729bf55dfe667e3549289def" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>breakParticle</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a98a7dda6e47e5fca59d1bafa298abd77" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>breakParticle</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aec07ce340587116774df43d16418327f" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1TensorParent_1ac562be01bc8c902fdd85072f07714b7f" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>brokenParts</name></member>
      <member refid="classcsl_1_1TensorParent_1a7a4851df688d387978d14564ae898b2c" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>chainContraction</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a46e82d473a8988d57b68a5d7de9089ab" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>checkFieldRequest</name></member>
      <member refid="classcsl_1_1TensorParent_1a1785b59dcf8041a7e097b9c4034d666a" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>checkIndexRequest</name></member>
      <member refid="classcsl_1_1TensorParent_1a56c5366a63a06eec34bae9b9cd2fbeaf" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>checkIndexRequest</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a808df30026e554f59f70b0a9b2a3eec7" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>checkIndicialAndFieldRequest</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a8178af277a26bd7d86a6afbf030cb86c" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>checkIndicialAndFieldRequest</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a88b5b7e8e33d62e325d4a0066bc27686" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>checkIndicialAndFieldRequest</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a2e55627be19c358eea102a6c6e012aba" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>checkRelatives</name></member>
      <member refid="classcsl_1_1AbstractParent_1a177e5244cc4d4b6c1e0600a4f77b523f" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>commutable</name></member>
      <member refid="classcsl_1_1AbstractParent_1ab058ceee466fd0997c060e83fc0a4e96" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>complexProp</name></member>
      <member refid="classcsl_1_1TensorParent_1a0bee5fadcbac24cc611318499a6b9243" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>conjugateProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aa5f4e3e9b9a82fff9b8d95f62ecfcf1d" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>contains</name></member>
      <member refid="classcsl_1_1TensorParent_1afdb6b8332cd4a18e3835099e0fab9f32" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>contraction</name></member>
      <member refid="classcsl_1_1TensorParent_1a3657ec01e4768d2f5daf416b83126cc1" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>covariant</name></member>
      <member refid="classcsl_1_1TensorParent_1a86bbf18d3861f4e97c186206f4d43ccb" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>createFixedIndices</name></member>
      <member refid="classcsl_1_1TensorParent_1aaf00e073ad5c8badf90869efcb327239" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>createFixedIndices</name></member>
      <member refid="classcsl_1_1TensorParent_1a14f4bcb3c19fb4e8cb8ccf3a61719f27" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1TensorParent_1a7a0dbe923e3491cc35fa48c175baee43" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad34cb190892a7b0d29cecf844d836e10" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>disableEvaluation</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a0d3c8f3219c53a09c3efd03073753c81" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>drawType</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a691ece6fc798a1594dd83be483733dd3" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>enabledInDiagrams</name></member>
      <member refid="classcsl_1_1AbstractParent_1a0cbecc9ebf1ba07087c4e275cf81a767" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>enableEvaluation</name></member>
      <member refid="classcsl_1_1TensorParent_1adddc8255d23e5816e9cda53f5e8a034e" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>evaluate</name></member>
      <member refid="classcsl_1_1TensorParent_1aa7e656c4430ca22d4ba01c02e21f500e" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>extContraction</name></member>
      <member refid="classcsl_1_1TensorParent_1ab2a7b1370956a56cf793b88beb6ce5f3" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>externalTensors</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ad463db6be7ba2c207b42e0bf3bff87b1" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>firstGaugeIndex</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aef7c609ffce6b9668164c47b0eda79b8" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>firstSpaceIndex</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a4f5d94d560f6f7a4c69437cad05a2b09" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>flavor</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a184d9c95b4867b270c5414a6da7be7e9" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>flavorRep</name></member>
      <member refid="classcsl_1_1TensorParent_1aa0dae8fe45934513b287849169dbba93" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>fullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1TensorParent_1a59e24724c7c0c2ee05617769c78c454e" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>fullySymmetric</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1abec1bed01588f7c87567b6e498976cc2" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>gauge</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a0fbb3e2d84d668387165227c2820d470" prot="public" virt="pure-virtual"><scope>mty::QuantumFieldParent</scope><name>generateSimilar</name></member>
      <member refid="classcsl_1_1AbstractParent_1a9d9f642ad348b33efb70b9f4cf839c1b" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getBaseName</name></member>
      <member refid="classcsl_1_1TensorParent_1acdb63d093ac13e3ec7f4bde54ca86738" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getBrokenParts</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a397f9c7ea63814716d521be8786f1e57" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getChirality</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a31b0551bf9e7385e3d6c7a7e552a84cd" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getChiralityCounterPart</name></member>
      <member refid="classcsl_1_1AbstractParent_1af8ae5696856c551204addb95271333bf" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getCommutable</name></member>
      <member refid="classcsl_1_1AbstractParent_1ad0029cab35d92a9542c5fb21b6672212" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getComplexProp</name></member>
      <member refid="classcsl_1_1TensorParent_1a67f7479000987afe784cf41d139a97a6" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getComplexProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aef1f73b8595fa36f65d94d1a6faa8ab9" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getConjugatedGhostBoson</name></member>
      <member refid="classcsl_1_1TensorParent_1a84c9f98e1531b573a63e67c667f7cba6" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getContractionProperties</name></member>
      <member refid="classcsl_1_1TensorParent_1a5bff2bf79a3985d9020bee392f440990" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getDim</name></member>
      <member refid="classcsl_1_1AbstractParent_1ac45297ef35dab1807a158056ec8dfac3" prot="public" virt="virtual" ambiguityscope="csl::AbstractParent::"><scope>mty::QuantumFieldParent</scope><name>getDim</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aac4107a07bbd8e8ac4e41043f1307a74" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getDiracParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aa8c35778e995351f6e1d8b12e9246890" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getDrawType</name></member>
      <member refid="classcsl_1_1AbstractParent_1af7cf14c2576a5b337f2e75059a5e002c" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getEncapsulated</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a364703981874763aede019317b4a6876" prot="public" virt="pure-virtual"><scope>mty::QuantumFieldParent</scope><name>getEnergyDimension</name></member>
      <member refid="classcsl_1_1AbstractParent_1a38fb1b0329110a3caed8e68397c08c51" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getExactEncapsulated</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a3d8ff09def749260d82187ce11f675b0" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getFieldSpace</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a7c2d29867698a6f59a4a69a403657d77" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getFieldStrength</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ac2a50c1d85bf7e2ac7cd64b999ef86d2" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getFlavor</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a73c0d0af5c2881739b4c6cbfec58a788" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getFlavorIndex</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a418513195e15c40050248b6c039d310f" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getFlavorIrrep</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a2ac9be1c0b08c8d227fb33b8db63a36c" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getFlavorIrrep</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a13c637a21b843737df51de092d088f77" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getFullSetOfIndices</name></member>
      <member refid="classcsl_1_1TensorParent_1a4b974963fac5f42fe6f3ea5ca7ed93b6" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getFullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1TensorParent_1aa4af33bfd789ef86dd5775b7a4558a01" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getFullySymmetric</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ae608d0fca0b93d332a5433dfaa33a66e" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getGauge</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1af68918da9f3d1c849a5ef1b05b5344c6" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getGaugeChoice</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1adaa7bae27e3f19e3f3acc2068bb6ef12" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getGaugedGroup</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ac2304e39b32321654ed3bca3b205faee" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getGaugedGroup</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ad0013a777c51fe3bef0e76f984baac46" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getGaugeIndex</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a88d00277d9aad2b2d275286a312e9af2" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getGaugeIrrep</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a88c735215fc23805b642be5b8e01ecb0" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getGhostBoson</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a502ac6364e531a40def6953c6a5e2f09" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getGoldstone</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a74cc2c52165bcd6def544311c3905b4a" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getGoldstoneBoson</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a04fbcf1358eee388cdbf8f07e685a43f" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getGroupIrrep</name></member>
      <member refid="classcsl_1_1TensorParent_1a36af50ffc43694e38539c9a0f282653b" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getHermitianProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a8bbc1d467ba11fb7b002b78ba31d3887" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getInstance</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a71641abf3402e8b15ca420ee8c00c66e" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getInvPropagator</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ad6fb45a0c9780f8e5f6df19bfec1c2cd" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getKineticTerm</name></member>
      <member refid="classcsl_1_1AbstractParent_1acacd759bca7fa6e750080a68ea970caa" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getLatexName</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1adb76ad8317af57b10845ba08c8bb6323" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getLorentzRep</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a0cb6c12ea299cd5411c5b5dd7bcdebb3" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getMass</name></member>
      <member refid="classcsl_1_1AbstractParent_1ab22f321502a8aa481865be3e58bb241d" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getName</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a36569c719b6b843a8b23fdcddd8b6e65" prot="public" virt="pure-virtual"><scope>mty::QuantumFieldParent</scope><name>getNDegreesOfFreedom</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ac21a21dbb67350a1d016905e65368b2d" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getNGaugeDegreesOfFreedom</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a15a0a38b6509011352b73d41b51b1ee1" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getParticleType</name></member>
      <member refid="classcsl_1_1TensorParent_1a57d5160b0d1a94e376bbbec3d5ab5735" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getPermutation</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1adf100615e12fa1f81d826f0f810e776b" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getPrimaryType</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a3ddaf2c0d83917607b5cc3e774f3bec7" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getPropagator</name></member>
      <member refid="classcsl_1_1TensorParent_1ae501e7e880e885ddcd65d946d69ef53c" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getSpace</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a8c90d230a443d29b60c873467365d232" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getSpaceIndex</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ab381755980173b5e294972ecb80d210d" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getSpinDimension</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a5878b682d634b7c7746ffcacf6acc01f" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getSquaredMass</name></member>
      <member refid="classcsl_1_1TensorParent_1a09a777f09a8e69e177beef0055f0062a" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getSymmetry</name></member>
      <member refid="classcsl_1_1TensorParent_1a889012a413646fa644b39c24366673f1" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getTensor</name></member>
      <member refid="classcsl_1_1TensorParent_1aef2a4af73762e024d8bd5f0fa0e6d359" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getTensor</name></member>
      <member refid="classcsl_1_1TensorParent_1a13f343f42228eecf7986e8a361091627" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getTrace</name></member>
      <member refid="classcsl_1_1TensorParent_1aad0b86fccab27dcef313d5be70edc806" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getTransposedProperty</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1aa21a699e14c7790719ad4ef846f3f584" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getType</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a06cd6521c79956221d5c0e22bbcec025" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getVectorBoson</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a62ddd65ed57c10250cee9705d9009101" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getWeylFermion</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ad65026224bc3b7b92ce6ab3cbfea5b4e" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>getWidth</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a65d784173a4e77ec4311c7537ae927f6" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>getXiGauge</name></member>
      <member refid="classcsl_1_1TensorParent_1a29c887ab51d1dfa876f869fbba3c8479" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>hasChainContractionProperty</name></member>
      <member refid="classcsl_1_1TensorParent_1aee4452e0bd10be255d394ed3463780a3" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>hasContractionProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ae00d0e2e78ea51a1f5728c15c6e9edf3" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>hasFieldStrength</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a3e2e33fc0f66f9bbbdac5e739fd02c0d" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>hasSpecialContractionWith</name></member>
      <member refid="classcsl_1_1TensorParent_1a4bb5b8f6ae27e07622ab74ffdd461486" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>hermitianProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a5e3dc7874472b3408c910d8e0c267368" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>initIndexSpaces</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ae1fd7bab8e6d36cf8f413c5e7e8ed3f4" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>initPolarizationSum</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a3879c977fe68ea5c33aa65bb01065c9e" prot="protected" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>initPropagator</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a785193ff5385fcf276bf45dc21021e29" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>integratedOut</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a2aae55c74208ec14f43f96db0cf31132" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>integrateOut</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a9fef6afaf0e2d81d25aa51d21e192f74" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>irrep</name></member>
      <member refid="classcsl_1_1AbstractParent_1a4e78f62f3624e0e6070f1da4ddd32943" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>isAnAbbreviation</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ad2fd32f767cedfc9fa9184012b223c86" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>isAntiCommuting</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1af13d71075337a3f77b6d156c5c09463d" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>isBosonic</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a1807a29c886971807e2d4653eb633c00" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>isChiral</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a60555bdb05193f4b1467c45ea137fdca" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>isContractibleWith</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ae937a135c74fb3621758f93088f65331" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>isEnabledInDiagrams</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ad631001ecde4625d89797f67076b8b4b" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>isFermionic</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ae64f76a58e690f825e88bddae58a8c46" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>isGaugeBoson</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a14f7a210019b8229f8511549e89ad8c6" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>isIntegratedOut</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ad5d2515bd566b8aff18ea30d3353b13a" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>isPhysical</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a50563a7b7b889385fe82b8385859a1e4" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>isReal</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a210b8b5a0209f736180cdf932639e6f6" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>isSameSpecies</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ae6dc406d641ac0bdb37ac0312062ec67" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>isSelfConjugate</name></member>
      <member refid="classcsl_1_1TensorParent_1a592a243554b0bdeb58c34efe4eedaeee" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>isTraceLessIn</name></member>
      <member refid="classcsl_1_1TensorParent_1a892cd4e2f9ca94f6e9aee17f779b6090" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>isValued</name></member>
      <member refid="classcsl_1_1TensorParent_1ae7ec718cfaa3c9598463723a36f74f17" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>keepBestPermutation</name></member>
      <member refid="classcsl_1_1AbstractParent_1a98c857ebf734c15e7afd0d8a13988ac9" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>latexName</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a3ef078e01886b54dee846048b0f70cb3" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>mass</name></member>
      <member refid="classcsl_1_1AbstractParent_1a2ad6b4cd58d9b051a4d62f343bf48c2e" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>name</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a594410f380cd8bc2038af02dce06ba81" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>operator csl::Expr</name></member>
      <member refid="classcsl_1_1TensorParent_1acb363ae0d9495875816d243352735ccf" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>operator!=</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a19555df10c3d557726778389d62ae69f" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a8c43948220614b832ce07bd2d65df7f2" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a70d76ae9e1f6583ecc1f1102d68aa585" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aa36e3e3d247a9948d4de692a00d38403" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a0d3c1c5fa50f35e662b72cf12d923336" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a362970c0424049bcec378c8d1d229273" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a64f7543217b809e39a686180b2e67754" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a6d5cf783b576fc3bac49987c41fa6590" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ae3e8544f0753ea8db3f73716f654507e" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aaf15b2476632091300ed81bfed9af23e" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classcsl_1_1TensorParent_1a76840bf24d5392c521467ecb662cc15e" prot="public" virt="virtual" ambiguityscope="csl::TensorParent::"><scope>mty::QuantumFieldParent</scope><name>operator()</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a9969f90df31743ef674d3d7841571a9f" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a5a5bcfd2ae5557067eae74640a50249d" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>operator=</name></member>
      <member refid="classcsl_1_1TensorParent_1a18f7711d34c8bcdb3e034b7b82b76e09" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>operator==</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a6abc017a0c4778fc0e299f4c4e1dc435" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>physical</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a18d08c09430c070b1f37c470e5054db0" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>polarizationSumInitialized</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1af368356fb019b19fc2fb318f421a3f49" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>printDefinition</name></member>
      <member refid="classcsl_1_1AbstractParent_1a789915324d1e21a6be70bbd495ada1cc" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>printPropDefinition</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a970498bd0ff878820f3859f83d38fccf" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>printQuantumDefinition</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aba9df2478df3b7be3621fa5f55c1fe8c" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>propagator</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a76460805efae9a013fff076955bc408a" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>Propagator_func</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a45dc24afa21d103855c55d8cba010d64" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>QuantumFieldParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1af139e37bbc3a5893d48a60c67c9f29b4" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>QuantumFieldParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a2aea7d244a9484d9779f17fff039ee20" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>QuantumFieldParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a29d5f92ff773ec8137b60495a9116a45" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>QuantumFieldParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a9699cab9f1b4b11e92631da3f544228a" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>QuantumFieldParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ab5fd0b478a5cb4f5750f1da00d2ef549" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>QuantumFieldParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a1ae7141073d947ad4bfd23e6076023ac" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>QuantumFieldParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ac80743c85ab76199b6e600bfdf766b22" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>QuantumFieldParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a73f01a145d01bb96e01bcf66b192ea99" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>relatives</name></member>
      <member refid="classcsl_1_1TensorParent_1a44c54413e4600c7d5589879671f8d474" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>removeContractionProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a79481e93600ad51835ab978099f81a04" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>removeRelative</name></member>
      <member refid="classcsl_1_1TensorParent_1a8753c5b10ccca6f049cbd5e852fbb21b" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>removeSelfContraction</name></member>
      <member refid="classcsl_1_1TensorParent_1a05b90066cf74b7fc304a474df4e64a05" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>removeTraceLessNess</name></member>
      <member refid="classcsl_1_1AbstractParent_1a831ac782bdbba8d40838c6aeffaa53f6" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>self</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a8fe31c20d7f8c2820c799a15dc47eba0" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>selfConjugate</name></member>
      <member refid="classcsl_1_1TensorParent_1a10cab17d2ba7b927d3b30278201ea9dc" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>selfContraction</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1abc3a4d46579a2a60cf841e9591e855eb" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setBrokenParts</name></member>
      <member refid="classcsl_1_1AbstractParent_1aae1bc83d1df8237e6bf50b6b8f732716" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setCommutable</name></member>
      <member refid="classcsl_1_1TensorParent_1ae441946c9f40502d9330aab7be1c9790" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setComplexProperty</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a206750ecad1dcde26f986dedea01bd14" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setConjugatedGhostBoson</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1af8ff33f78172117b12565f89966dc49e" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setDiracParent</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ab1dbb6dc83784bb2ba2e9b47ede98523" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setDrawType</name></member>
      <member refid="classcsl_1_1TensorParent_1a19c75060fbf2040abeb2ca7c61069aec" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setElementary</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a2cf640364de48c0962402140abd6535c" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setEnabledInDiagrams</name></member>
      <member refid="classcsl_1_1AbstractParent_1a3085594e68b3845f352898e79237ba24" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setEncapsulated</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a447d1ca599ae604ef52dc4ae61988e34" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setFieldSpace</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a05f7b3cce6c5b522e30a225651d4e82f" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setFieldStrength</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1aa946ad5758cf8b1ec214bd1b4e3bcc2e" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setFlavor</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a58a48774508d383ebffce688b58508b9" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setFlavorRep</name></member>
      <member refid="classcsl_1_1TensorParent_1ae0d6d12f0cd4efe83154cbf79978d088" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setFullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1TensorParent_1ac99c17db4d68be67761930e0289ee5e0" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setFullySymmetric</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a8838fb09d4edf8a085603f7f92a9079a" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setFundamentalFlavorRep</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a5fb9032a21b76dd8f9ec5d1a1b30cb59" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setGaugeChoice</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1adf0276529e84e396f8638d1fd6434c08" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setGaugeIrrep</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1affebad844493a96607e82edd427d4e9b" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setGhostBoson</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a3f2a9746cc5bf74261e44cf31a26cc08" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setGoldstoneBoson</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a8f6979a78474e18437ce68fa605f7b3e" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setGroupRep</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1affdd88617bcd4975497549e7dd00646f" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setGroupRep</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a407e6cf9dceeeed1850d0687fe25f5db" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setGroupRep</name></member>
      <member refid="classcsl_1_1TensorParent_1a25ee0fbfeb78f1044dd56691b40c10ca" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setKeepBestPermutation</name></member>
      <member refid="classcsl_1_1AbstractParent_1af9a8cfc57a0bdf8178489c198755565b" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setLatexName</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a678d073b9a4c404f40fa3a813624fc32" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setMass</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ada8e0cae45e02ac8a733533c1183f3f4" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setMass</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1ad16ca28b841a9df27429979c91b69b93" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setMass</name></member>
      <member refid="classcsl_1_1AbstractParent_1a13e6f74e590cbf05dcafb4d9c3df8b9c" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setName</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a48db32ebcc3ecbec4c090fa3f03a524c" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setPhysical</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1af9680402c392d248b91d5c097aa92267" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setPropagator</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a4b93f59ab13b908df2957bec72833601" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setSelfConjugate</name></member>
      <member refid="classcsl_1_1TensorParent_1aa61f52e3ea9ae4beb190442ac0e7aacc" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setSymmetry</name></member>
      <member refid="classcsl_1_1TensorParent_1a4eacd947decb14e003f81a8053d94e11" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setTensor</name></member>
      <member refid="classcsl_1_1TensorParent_1aa5bd4990cfc0d955edf1614a42d0d011" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>setTrace</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a803d73584c1eb98be0331c8bc8e73df5" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>setWidth</name></member>
      <member refid="classcsl_1_1TensorParent_1ae740d077dfcc386a407ca33d3619a5a9" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>space</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1ac2ec87f5b3023c49f39a09944bda4456" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>spaceField</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a8c2a10dc3e14dfd9aba91a1d62402ac1" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>spin</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a8c5722ecb7b175f3f3a4872d970ea249" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>stGroup</name></member>
      <member refid="classcsl_1_1TensorParent_1adc7dcdd4a866af29f99edc06924c2617" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>symmetry</name></member>
      <member refid="classcsl_1_1TensorParent_1a61267f78d93f470771cf63f174322e01" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>tensor</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a79977aa34f121a5a2c68d908561f4753" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorFieldParent</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1ad8311e274003e66b123e7328918c2616" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorFieldParent</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a9910044d9322136c6a150c8cb7696384" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorFieldParent</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a84065683e1e7d62bcaf2c80e8b93a955" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorFieldParent</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1adc3215e1ed8925e628afd038483800bf" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorFieldParent</name></member>
      <member refid="classcsl_1_1TensorParent_1ab4af4e561398f75e81b0ca44c2200d8d" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorParent</name></member>
      <member refid="classcsl_1_1TensorParent_1a04f4e5b6b75716a794e2c275530ae011" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorParent</name></member>
      <member refid="classcsl_1_1TensorParent_1a34fe9aa77d890d2f797890d044d23727" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorParent</name></member>
      <member refid="classcsl_1_1TensorParent_1a3381ecd1d560c4a80b2bf4804ef45b93" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorParent</name></member>
      <member refid="classcsl_1_1TensorParent_1a1dea1d8fe995338d286bf35b48396b7b" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorParent</name></member>
      <member refid="classcsl_1_1TensorParent_1a72bf7b821897d7b35f6ede9448c60e43" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorParent</name></member>
      <member refid="classcsl_1_1TensorParent_1ada2f60750c2e2d3f7fa573d8de73d313" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>TensorParent</name></member>
      <member refid="classcsl_1_1AbstractParent_1a74bbbbc2b43939c166feb7d8e7cc8537" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>toggleEvaluation</name></member>
      <member refid="classcsl_1_1TensorParent_1a5db8129d9af05c907e28f046471650e1" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>trace</name></member>
      <member refid="classcsl_1_1TensorParent_1ab6f004f8a41fff3afb5d62cac078d450" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>traceLessNess</name></member>
      <member refid="classcsl_1_1TensorParent_1a81701d7f66909acf26cbe0f4d257ffdc" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>transposedProperty</name></member>
      <member refid="classcsl_1_1TensorParent_1ac374a59f2a77225b51fd4f01f727f73b" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>valued</name></member>
      <member refid="classmty_1_1QuantumFieldParent_1a9d48ab6fa31c0d612155b36b109cc64f" prot="protected" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>width</name></member>
      <member refid="classcsl_1_1AbstractParent_1a6d13d559a8d68562b5827073b31b3c1a" prot="public" virt="virtual"><scope>mty::QuantumFieldParent</scope><name>~AbstractParent</name></member>
      <member refid="classcsl_1_1TensorFieldParent_1a2f65c66345fd60743ba16ce9568f9e24" prot="public" virt="non-virtual"><scope>mty::QuantumFieldParent</scope><name>~TensorFieldParent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
