<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="structcsl_1_1matcher_1_1Tree" kind="struct" language="C++" prot="public">
    <compoundname>csl::matcher::Tree</compoundname>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structcsl_1_1matcher_1_1Tree_1ad190f5802fa25063560daf330218f11e" prot="public" static="no" mutable="no">
        <type>Node::ExprType</type>
        <definition>Node::ExprType csl::matcher::Tree::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>csl::matcher::Tree::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="146" column="20" bodyfile="src/csl/patternMatch.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcsl_1_1matcher_1_1Tree_1a2e46f66baee98d8bc8c86b7267eb1c7c" prot="public" static="no" mutable="no">
        <type><ref refid="structcsl_1_1matcher_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node* csl::matcher::Tree::root</definition>
        <argsstring></argsstring>
        <name>root</name>
        <qualifiedname>csl::matcher::Tree::root</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="147" column="19" bodyfile="src/csl/patternMatch.h" bodystart="147" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1a3d086e33fe74a2fe11309837afa92bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::matcher::Tree::Tree</definition>
        <argsstring>(Node::ExprType t_type)</argsstring>
        <name>Tree</name>
        <qualifiedname>csl::matcher::Tree::Tree</qualifiedname>
        <param>
          <type>Node::ExprType</type>
          <declname>t_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="128" column="5" bodyfile="src/csl/patternMatch.cpp" bodystart="335" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1a401039832a2c72d00e1046120f4abc7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::matcher::Tree::~Tree</definition>
        <argsstring>()</argsstring>
        <name>~Tree</name>
        <qualifiedname>csl::matcher::Tree::~Tree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="129" column="5" bodyfile="src/csl/patternMatch.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1a36d2079b96c28e06db93f28ec37a3510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="structcsl_1_1matcher_1_1Node" kindref="compound">Node</ref> *, std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;::const_iterator &gt;</type>
        <definition>std::pair&lt; Node *, std::vector&lt; csl::Expr &gt;::const_iterator &gt; csl::matcher::Tree::findBestMatch</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;vec, size_t minElements=2)</argsstring>
        <name>findBestMatch</name>
        <qualifiedname>csl::matcher::Tree::findBestMatch</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>minElements</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="132" column="5" bodyfile="src/csl/patternMatch.cpp" bodystart="345" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1aeecdca2c4bcac2c6d514a08ceb37b63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::matcher::Tree::parse</definition>
        <argsstring>(std::vector&lt; csl::Expr &gt; const &amp;vec)</argsstring>
        <name>parse</name>
        <qualifiedname>csl::matcher::Tree::parse</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="142" column="10" bodyfile="src/csl/patternMatch.cpp" bodystart="427" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1a94053de95650c8d0ad0cbd377ae22093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::matcher::Tree::removeSingle</definition>
        <argsstring>()</argsstring>
        <name>removeSingle</name>
        <qualifiedname>csl::matcher::Tree::removeSingle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="143" column="10" bodyfile="src/csl/patternMatch.cpp" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1aefa625789baf080badaf5114f7765828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::matcher::Tree::print</definition>
        <argsstring>()</argsstring>
        <name>print</name>
        <qualifiedname>csl::matcher::Tree::print</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="144" column="10" bodyfile="src/csl/patternMatch.cpp" bodystart="437" bodyend="440"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1a23e0ef8b457b14fbdf56416573b147f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::optional&lt; csl::Expr &gt; csl::matcher::Tree::getChainAbbreviationFor</definition>
        <argsstring>(csl::Expr const &amp;init, std::vector&lt; Tree * &gt; &amp;trees)</argsstring>
        <name>getChainAbbreviationFor</name>
        <qualifiedname>csl::matcher::Tree::getChainAbbreviationFor</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structcsl_1_1matcher_1_1Tree" kindref="compound">Tree</ref> * &gt; &amp;</type>
          <declname>trees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="135" column="5" bodyfile="src/csl/patternMatch.cpp" bodystart="354" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1a18244302cfe97b18ef190a5395bc5b2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::matcher::Tree::findAllAbbreviations</definition>
        <argsstring>(std::vector&lt; Tree * &gt; &amp;trees)</argsstring>
        <name>findAllAbbreviations</name>
        <qualifiedname>csl::matcher::Tree::findAllAbbreviations</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structcsl_1_1matcher_1_1Tree" kindref="compound">Tree</ref> * &gt; &amp;</type>
          <declname>trees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="137" column="17" bodyfile="src/csl/patternMatch.cpp" bodystart="418" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="structcsl_1_1matcher_1_1Tree_1ad19636bd6ee2eef036aa5c4f7b11efef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::matcher::Tree::findAllAbbreviations</definition>
        <argsstring>(Node *node, Tree *t, std::vector&lt; Tree * &gt; &amp;trees)</argsstring>
        <name>findAllAbbreviations</name>
        <qualifiedname>csl::matcher::Tree::findAllAbbreviations</qualifiedname>
        <param>
          <type><ref refid="structcsl_1_1matcher_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structcsl_1_1matcher_1_1Tree" kindref="compound">Tree</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structcsl_1_1matcher_1_1Tree" kindref="compound">Tree</ref> * &gt; &amp;</type>
          <declname>trees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/patternMatch.h" line="140" column="5" bodyfile="src/csl/patternMatch.cpp" bodystart="406" bodyend="416"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>csl::Expr</label>
        <link refid="classcsl_1_1Expr"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::matcher::Node</label>
        <link refid="structcsl_1_1matcher_1_1Node"/>
        <childnode refid="3" relation="usage">
          <edgelabel>abbreviation</edgelabel>
          <edgelabel>chainAbbreviation</edgelabel>
          <edgelabel>expr</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>csl::matcher::Tree</label>
        <link refid="structcsl_1_1matcher_1_1Tree"/>
        <childnode refid="2" relation="usage">
          <edgelabel>root</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::shared_ptr&lt; csl::Abstract &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
    </collaborationgraph>
    <location file="src/csl/patternMatch.h" line="126" column="1" bodyfile="src/csl/patternMatch.h" bodystart="126" bodyend="148"/>
    <listofallmembers>
      <member refid="structcsl_1_1matcher_1_1Tree_1a18244302cfe97b18ef190a5395bc5b2a" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>findAllAbbreviations</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1ad19636bd6ee2eef036aa5c4f7b11efef" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>findAllAbbreviations</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1a36d2079b96c28e06db93f28ec37a3510" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>findBestMatch</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1a23e0ef8b457b14fbdf56416573b147f2" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>getChainAbbreviationFor</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1aeecdca2c4bcac2c6d514a08ceb37b63f" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>parse</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1aefa625789baf080badaf5114f7765828" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>print</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1a94053de95650c8d0ad0cbd377ae22093" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>removeSingle</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1a2e46f66baee98d8bc8c86b7267eb1c7c" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>root</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1a3d086e33fe74a2fe11309837afa92bbe" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>Tree</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1ad190f5802fa25063560daf330218f11e" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>type</name></member>
      <member refid="structcsl_1_1matcher_1_1Tree_1a401039832a2c72d00e1046120f4abc7f" prot="public" virt="non-virtual"><scope>csl::matcher::Tree</scope><name>~Tree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
