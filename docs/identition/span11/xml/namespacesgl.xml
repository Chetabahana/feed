<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="namespacesgl" kind="namespace" language="C++">
    <compoundname>sgl</compoundname>
    <innerclass refid="classsgl_1_1AbstractCallError" prot="public">sgl::AbstractCallError</innerclass>
    <innerclass refid="classsgl_1_1AbstractGammaSym" prot="public">sgl::AbstractGammaSym</innerclass>
    <innerclass refid="classsgl_1_1AbstractGeneralizedIndex" prot="public">sgl::AbstractGeneralizedIndex</innerclass>
    <innerclass refid="classsgl_1_1AbstractLiteral" prot="public">sgl::AbstractLiteral</innerclass>
    <innerclass refid="classsgl_1_1AbstractMultiFunction" prot="public">sgl::AbstractMultiFunction</innerclass>
    <innerclass refid="structsgl_1_1Commutation" prot="public">sgl::Commutation</innerclass>
    <innerclass refid="classsgl_1_1CSLExpr" prot="public">sgl::CSLExpr</innerclass>
    <innerclass refid="classsgl_1_1DebugLog" prot="public">sgl::DebugLog</innerclass>
    <innerclass refid="classsgl_1_1EpsilonIndex" prot="public">sgl::EpsilonIndex</innerclass>
    <innerclass refid="classsgl_1_1Exception" prot="public">sgl::Exception</innerclass>
    <innerclass refid="classsgl_1_1Field" prot="public">sgl::Field</innerclass>
    <innerclass refid="classsgl_1_1GammaIndex" prot="public">sgl::GammaIndex</innerclass>
    <innerclass refid="classsgl_1_1GExpr" prot="public">sgl::GExpr</innerclass>
    <innerclass refid="classsgl_1_1IndexChain" prot="public">sgl::IndexChain</innerclass>
    <innerclass refid="classsgl_1_1IndexError" prot="public">sgl::IndexError</innerclass>
    <innerclass refid="classsgl_1_1MathError" prot="public">sgl::MathError</innerclass>
    <innerclass refid="classsgl_1_1MetricIndex" prot="public">sgl::MetricIndex</innerclass>
    <innerclass refid="classsgl_1_1MomentumIndex" prot="public">sgl::MomentumIndex</innerclass>
    <innerclass refid="structsgl_1_1PartnerShip" prot="public">sgl::PartnerShip</innerclass>
    <innerclass refid="classsgl_1_1Prod" prot="public">sgl::Prod</innerclass>
    <innerclass refid="structsgl_1_1ScopeLog" prot="public">sgl::ScopeLog</innerclass>
    <innerclass refid="classsgl_1_1Sum" prot="public">sgl::Sum</innerclass>
    <innerclass refid="structsgl_1_1TensorSet" prot="public">sgl::TensorSet</innerclass>
    <innerclass refid="classsgl_1_1TypeError" prot="public">sgl::TypeError</innerclass>
    <innerclass refid="classsgl_1_1ValueError" prot="public">sgl::ValueError</innerclass>
    <innernamespace refid="namespacesgl_1_1option">sgl::option</innernamespace>
    <innernamespace refid="namespacesgl_1_1tracer">sgl::tracer</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="debuglog_8h_1aa8c86ef41739b41467c189a7fc33a928" prot="public" static="no" mutable="no">
        <type><ref refid="classsgl_1_1DebugLog" kindref="compound">DebugLog</ref></type>
        <definition>DebugLog sgl::log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <qualifiedname>sgl::log</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/debuglog.h" line="95" column="17" bodyfile="src/marty/sgl/debuglog.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gammaindex_8h_1ac0a386154157161e4a164d78b6e237e6" prot="public" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const  *</type>
        <definition>csl::Space const* sgl::minkoSpace</definition>
        <argsstring></argsstring>
        <name>minkoSpace</name>
        <qualifiedname>sgl::minkoSpace</qualifiedname>
        <initializer>= &amp;<ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="30" column="33" bodyfile="src/marty/sgl/gammaindex.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gammaindex_8h_1a42b4795e11337819a70efe2af3957ca4" prot="public" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr sgl::DMinko</definition>
        <argsstring></argsstring>
        <name>DMinko</name>
        <qualifiedname>sgl::DMinko</qualifiedname>
        <initializer>= csl::DMinko</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="31" column="34" bodyfile="src/marty/sgl/gammaindex.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gammaindex_8h_1a82d45fb4fc363e655691a7ce209b86b1" prot="public" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const  *</type>
        <definition>csl::Space const* sgl::diracSpace</definition>
        <argsstring></argsstring>
        <name>diracSpace</name>
        <qualifiedname>sgl::diracSpace</qualifiedname>
        <initializer>= &amp;mty::dirac4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="32" column="33" bodyfile="src/marty/sgl/gammaindex.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gammaindex_8h_1afee19449ef89c9677d5b16c3ee007645" prot="public" static="no" mutable="no">
        <type>std::map&lt; int, <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>std::map&lt;int, csl::Index&gt; sgl::m_easyIndex</definition>
        <argsstring></argsstring>
        <name>m_easyIndex</name>
        <qualifiedname>sgl::m_easyIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="33" column="17" bodyfile="src/marty/sgl/gammaindex.h" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="sglconverter_8cpp_1ac13f65f6fbdef0b0e189cc0a83da354a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::csl_simplified</definition>
        <argsstring>(GExpr const &amp;expr, TensorSet const &amp;tensors)</argsstring>
        <name>csl_simplified</name>
        <qualifiedname>sgl::csl_simplified</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="structsgl_1_1TensorSet" kindref="compound">TensorSet</ref> const &amp;</type>
          <declname>tensors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglconverter.cpp" line="35" column="7" bodyfile="src/marty/core/sglconverter.cpp" bodystart="35" bodyend="39" declfile="src/marty/sgl/cslconverter.h" declline="31" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sglconverter_8cpp_1a8ca407e8024816f7d7e137e3df221b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr sgl::sgl_to_csl</definition>
        <argsstring>(GExpr const &amp;expr, TensorSet const &amp;tensors)</argsstring>
        <name>sgl_to_csl</name>
        <qualifiedname>sgl::sgl_to_csl</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="structsgl_1_1TensorSet" kindref="compound">TensorSet</ref> const &amp;</type>
          <declname>tensors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglconverter.cpp" line="41" column="11" bodyfile="src/marty/core/sglconverter.cpp" bodystart="41" bodyend="48" declfile="src/marty/sgl/cslconverter.h" declline="33" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="sglconverter_8cpp_1ae4e671b5297c93d00148b1d38a4c5def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::csl_to_sgl</definition>
        <argsstring>(csl::Expr const &amp;expr, TensorSet const &amp;tensors)</argsstring>
        <name>csl_to_sgl</name>
        <qualifiedname>sgl::csl_to_sgl</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="structsgl_1_1TensorSet" kindref="compound">TensorSet</ref> const &amp;</type>
          <declname>tensors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglconverter.cpp" line="50" column="7" bodyfile="src/marty/core/sglconverter.cpp" bodystart="50" bodyend="154" declfile="src/marty/sgl/cslconverter.h" declline="35" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1a38bc8902cd4068683e9fb557ee5c6d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::SimplifyChain</definition>
        <argsstring>(GExpr &amp;init)</argsstring>
        <name>SimplifyChain</name>
        <qualifiedname>sgl::SimplifyChain</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="30" column="6" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="30" bodyend="52" declfile="src/marty/sgl/simplify.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1a41cf45067c2e9ff2243fc9cdeb067942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::SimplifyMomenta</definition>
        <argsstring>(GExpr &amp;init)</argsstring>
        <name>SimplifyMomenta</name>
        <qualifiedname>sgl::SimplifyMomenta</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="54" column="6" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="54" bodyend="92" declfile="src/marty/sgl/simplify.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1a3eb012933770d2404ae3d053bab91a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::SimplifyTrace</definition>
        <argsstring>(GExpr &amp;init)</argsstring>
        <name>SimplifyTrace</name>
        <qualifiedname>sgl::SimplifyTrace</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="94" column="6" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="94" bodyend="105" declfile="src/marty/sgl/simplify.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1ad7926deb483d62c28d891debda53d311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::OrderChains</definition>
        <argsstring>(GExpr &amp;init)</argsstring>
        <name>OrderChains</name>
        <qualifiedname>sgl::OrderChains</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="107" column="6" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="107" bodyend="130" declfile="src/marty/core/sglsimplify.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1aa5540263b77d88a920e223323e2c2871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::ReorderFermionChains</definition>
        <argsstring>(GExpr &amp;init)</argsstring>
        <name>ReorderFermionChains</name>
        <qualifiedname>sgl::ReorderFermionChains</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="132" column="6" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="132" bodyend="143" declfile="src/marty/sgl/simplify.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1a6cda5a612b59e61178d29c46a991b87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::Simplify</definition>
        <argsstring>(GExpr &amp;init, bool applyFierzTwice)</argsstring>
        <name>Simplify</name>
        <qualifiedname>sgl::Simplify</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>applyFierzTwice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="145" column="6" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="145" bodyend="157" declfile="src/marty/sgl/simplify.h" declline="38" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1a0fca4a7f5eb268a6374daaf2578651fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::Simplified</definition>
        <argsstring>(GExpr const &amp;init, bool applyFierzTwice)</argsstring>
        <name>Simplified</name>
        <qualifiedname>sgl::Simplified</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>applyFierzTwice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="159" column="7" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="159" bodyend="164" declfile="src/marty/sgl/simplify.h" declline="39" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1a2facf4622cadbfe67ac03cd025e41423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::CSLSimplified</definition>
        <argsstring>(GExpr const &amp;init)</argsstring>
        <name>CSLSimplified</name>
        <qualifiedname>sgl::CSLSimplified</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="166" column="7" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="166" bodyend="176" declfile="src/marty/sgl/simplify.h" declline="42" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1a7a06bc2c9531c00782bfa73534e2a55b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::CSLSimplify</definition>
        <argsstring>(GExpr &amp;init)</argsstring>
        <name>CSLSimplify</name>
        <qualifiedname>sgl::CSLSimplify</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="178" column="6" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="178" bodyend="181" declfile="src/marty/sgl/simplify.h" declline="41" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1a08ef5867f97d27d7cf58164a88e42d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr sgl::SGLSimplified</definition>
        <argsstring>(csl::Expr const &amp;init, TensorSet const &amp;t)</argsstring>
        <name>SGLSimplified</name>
        <qualifiedname>sgl::SGLSimplified</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="structsgl_1_1TensorSet" kindref="compound">TensorSet</ref> const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="183" column="11" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="183" bodyend="189" declfile="src/marty/sgl/simplify.h" declline="45" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="sglsimplify_8cpp_1af953956e9127d35099d8432766ba4761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::SGLSimplify</definition>
        <argsstring>(csl::Expr &amp;init, TensorSet const &amp;t)</argsstring>
        <name>SGLSimplify</name>
        <qualifiedname>sgl::SGLSimplify</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="structsgl_1_1TensorSet" kindref="compound">TensorSet</ref> const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/sglsimplify.cpp" line="191" column="6" bodyfile="src/marty/core/sglsimplify.cpp" bodystart="191" bodyend="194" declfile="src/marty/sgl/simplify.h" declline="44" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1ae70f63ce4c4ea00d15a71d40bc818691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator-</definition>
        <argsstring>(GExpr const &amp;A)</argsstring>
        <name>operator-</name>
        <qualifiedname>sgl::operator-</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="81" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="81" bodyend="84" declfile="src/marty/sgl/abstractgammasym.h" declline="130" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a911ae18f09ad4618ae568916784679a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator+</definition>
        <argsstring>(GExpr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator+</name>
        <qualifiedname>sgl::operator+</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="85" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="85" bodyend="89" declfile="src/marty/sgl/abstractgammasym.h" declline="131" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1aaa44290770fda4fb5d6abc77b5d53187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator*</definition>
        <argsstring>(GExpr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator*</name>
        <qualifiedname>sgl::operator*</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="90" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="90" bodyend="94" declfile="src/marty/sgl/abstractgammasym.h" declline="132" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a669ea8fcd7c51a9bbafa7ef20c9ca677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator-</definition>
        <argsstring>(GExpr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator-</name>
        <qualifiedname>sgl::operator-</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="95" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="95" bodyend="99" declfile="src/marty/sgl/abstractgammasym.h" declline="133" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a60e8f69cdfd19e62e21a91b49bdef6ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator/</definition>
        <argsstring>(GExpr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator/</name>
        <qualifiedname>sgl::operator/</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="100" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="100" bodyend="104" declfile="src/marty/sgl/abstractgammasym.h" declline="134" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1ac376cb10f63ebcf9759b74f9220192c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
        <definition>GExpr &amp; sgl::operator+=</definition>
        <argsstring>(GExpr &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator+=</name>
        <qualifiedname>sgl::operator+=</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="106" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="106" bodyend="110" declfile="src/marty/sgl/abstractgammasym.h" declline="136" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a8d14dbe2c1c1e55da59b23098e20dd30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
        <definition>GExpr &amp; sgl::operator*=</definition>
        <argsstring>(GExpr &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator*=</name>
        <qualifiedname>sgl::operator*=</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="112" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="112" bodyend="116" declfile="src/marty/sgl/abstractgammasym.h" declline="137" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a46587a4cb128876586582c5e5dce6594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
        <definition>GExpr &amp; sgl::operator-=</definition>
        <argsstring>(GExpr &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator-=</name>
        <qualifiedname>sgl::operator-=</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="118" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="118" bodyend="122" declfile="src/marty/sgl/abstractgammasym.h" declline="138" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a01faa455488217be6bbba7df31d31f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
        <definition>GExpr &amp; sgl::operator/=</definition>
        <argsstring>(GExpr &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator/=</name>
        <qualifiedname>sgl::operator/=</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="124" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="124" bodyend="134" declfile="src/marty/sgl/abstractgammasym.h" declline="139" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a61d528288a9b1bb693c3d4789fbfca03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator+</definition>
        <argsstring>(csl::Expr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator+</name>
        <qualifiedname>sgl::operator+</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="136" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="136" bodyend="139" declfile="src/marty/sgl/abstractgammasym.h" declline="141" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a4eb60aefbbb6ce8cb8f61da310b2ee04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator*</definition>
        <argsstring>(csl::Expr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator*</name>
        <qualifiedname>sgl::operator*</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="140" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="140" bodyend="143" declfile="src/marty/sgl/abstractgammasym.h" declline="142" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1ae80aab6bab3c13305db91181cba61cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator-</definition>
        <argsstring>(csl::Expr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator-</name>
        <qualifiedname>sgl::operator-</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="144" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="144" bodyend="147" declfile="src/marty/sgl/abstractgammasym.h" declline="143" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a30557c4f2144702070239a84fe8459aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator/</definition>
        <argsstring>(csl::Expr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>operator/</name>
        <qualifiedname>sgl::operator/</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="148" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="148" bodyend="151" declfile="src/marty/sgl/abstractgammasym.h" declline="144" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a260ffc1d258ddb49be051f362ba5c9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator+</definition>
        <argsstring>(GExpr const &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>operator+</name>
        <qualifiedname>sgl::operator+</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="152" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="152" bodyend="155" declfile="src/marty/sgl/abstractgammasym.h" declline="145" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a935f9f46ba6a41b0e99c1baa94b19ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator*</definition>
        <argsstring>(GExpr const &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>operator*</name>
        <qualifiedname>sgl::operator*</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="156" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="156" bodyend="159" declfile="src/marty/sgl/abstractgammasym.h" declline="146" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a65c05d7e3343f9e97fba227bd67cac6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator-</definition>
        <argsstring>(GExpr const &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>operator-</name>
        <qualifiedname>sgl::operator-</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="160" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="160" bodyend="163" declfile="src/marty/sgl/abstractgammasym.h" declline="147" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a7f7b46f290c16d860b7aeb212cee9c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::operator/</definition>
        <argsstring>(GExpr const &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>operator/</name>
        <qualifiedname>sgl::operator/</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="164" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="164" bodyend="167" declfile="src/marty/sgl/abstractgammasym.h" declline="148" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1ab73e43d717affff988ddd1ac306a0acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
        <definition>GExpr &amp; sgl::operator+=</definition>
        <argsstring>(GExpr &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>operator+=</name>
        <qualifiedname>sgl::operator+=</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="169" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="169" bodyend="172" declfile="src/marty/sgl/abstractgammasym.h" declline="150" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a8bda7456e4a9acb406dfbcc02f26e8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
        <definition>GExpr &amp; sgl::operator*=</definition>
        <argsstring>(GExpr &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>operator*=</name>
        <qualifiedname>sgl::operator*=</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="173" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="173" bodyend="176" declfile="src/marty/sgl/abstractgammasym.h" declline="151" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a2e7cc5eb7c226f5b2d7c1f658c8948bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
        <definition>GExpr &amp; sgl::operator-=</definition>
        <argsstring>(GExpr &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>operator-=</name>
        <qualifiedname>sgl::operator-=</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="177" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="177" bodyend="180" declfile="src/marty/sgl/abstractgammasym.h" declline="152" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a3e96910381c903869b3bc846b7018462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
        <definition>GExpr &amp; sgl::operator/=</definition>
        <argsstring>(GExpr &amp;A, csl::Expr const &amp;B)</argsstring>
        <name>operator/=</name>
        <qualifiedname>sgl::operator/=</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="181" column="7" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="181" bodyend="184" declfile="src/marty/sgl/abstractgammasym.h" declline="153" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="abstractgammasym_8cpp_1a2d87e3fdae1c54ebf195e11091951c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; sgl::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, GExpr const &amp;expr)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>sgl::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/abstractgammasym.cpp" line="186" column="1" bodyfile="src/marty/sgl/abstractgammasym.cpp" bodystart="186" bodyend="190" declfile="src/marty/sgl/abstractgammasym.h" declline="155" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a488a1e02bfc1f4fa1fe8160451c26ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::contraction</definition>
        <argsstring>(GammaIndex Mu, GammaIndex Nu, csl::Index const &amp;a, csl::Index const &amp;b)</argsstring>
        <name>contraction</name>
        <qualifiedname>sgl::contraction</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref></type>
          <declname>Mu</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref></type>
          <declname>Nu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="25" column="7" bodyfile="src/marty/sgl/contraction.cpp" bodystart="25" bodyend="95" declfile="src/marty/sgl/contraction.h" declline="31" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a41964b511d909cbef3785fe4bd2fd5dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>static GExpr sgl::g</definition>
        <argsstring>(csl::Index const &amp;mu, csl::Index const &amp;nu)</argsstring>
        <name>g</name>
        <qualifiedname>sgl::g</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="97" column="14" bodyfile="src/marty/sgl/contraction.cpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a82cdbe282bd0d6effd9cef76a2b7bf97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>static GExpr sgl::epsilonCombinatorial</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>epsilonCombinatorial</name>
        <qualifiedname>sgl::epsilonCombinatorial</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="102" column="14" bodyfile="src/marty/sgl/contraction.cpp" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a408430bb056ae5b3cd4abcb95e5705c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>static GExpr sgl::epsilonContraction</definition>
        <argsstring>()</argsstring>
        <name>epsilonContraction</name>
        <qualifiedname>sgl::epsilonContraction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="111" column="14" bodyfile="src/marty/sgl/contraction.cpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a6f3449c1640d0f7de5cd9b9b8d61a051" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>static GExpr sgl::epsilonContraction</definition>
        <argsstring>(csl::Index const &amp;mu, csl::Index const &amp;nu)</argsstring>
        <name>epsilonContraction</name>
        <qualifiedname>sgl::epsilonContraction</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="116" column="14" bodyfile="src/marty/sgl/contraction.cpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a1ec0c679a46a94360a4f60d607539003" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>static GExpr sgl::epsilonContraction</definition>
        <argsstring>(csl::Index const &amp;mu, csl::Index const &amp;nu, csl::Index const &amp;rho, csl::Index const &amp;sigma)</argsstring>
        <name>epsilonContraction</name>
        <qualifiedname>sgl::epsilonContraction</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="121" column="14" bodyfile="src/marty/sgl/contraction.cpp" bodystart="121" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a92f24566aac533b5e9f3877ee143cce5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>static GExpr sgl::epsilonContraction</definition>
        <argsstring>(csl::Index const &amp;mu, csl::Index const &amp;nu, csl::Index const &amp;rho, csl::Index const &amp;sigma, csl::Index const &amp;lambda, csl::Index const &amp;tau)</argsstring>
        <name>epsilonContraction</name>
        <qualifiedname>sgl::epsilonContraction</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>tau</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="130" column="14" bodyfile="src/marty/sgl/contraction.cpp" bodystart="130" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a319fb6712a86613de98b6833486a6091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::epsilonContraction</definition>
        <argsstring>(std::vector&lt; csl::Index &gt; A, std::vector&lt; csl::Index &gt; B)</argsstring>
        <name>epsilonContraction</name>
        <qualifiedname>sgl::epsilonContraction</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="146" column="7" bodyfile="src/marty/sgl/contraction.cpp" bodystart="146" bodyend="206" declfile="src/marty/sgl/contraction.h" declline="36" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="contraction_8cpp_1a8d5b98b0651c42a0f6672ad1d864a7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::momentumGammaContraction</definition>
        <argsstring>(sgl::IndexChain const &amp;init, csl::Tensor p, csl::Index const &amp;mu, csl::Index const &amp;nu, size_t i, size_t j)</argsstring>
        <name>momentumGammaContraction</name>
        <qualifiedname>sgl::momentumGammaContraction</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1IndexChain" kindref="compound">sgl::IndexChain</ref> const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/contraction.cpp" line="208" column="7" bodyfile="src/marty/sgl/contraction.cpp" bodystart="208" bodyend="293" declfile="src/marty/sgl/contraction.h" declline="38" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="cslexpr_8h_1a992465d347c529eb33d73e589f1238ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::cslexpr_s</definition>
        <argsstring>(csl::Expr const &amp;expr)</argsstring>
        <name>cslexpr_s</name>
        <qualifiedname>sgl::cslexpr_s</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/cslexpr.h" line="72" column="14" bodyfile="src/marty/sgl/cslexpr.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="epsilonindex_8cpp_1ab3c11f916034699a6083ab371ee2765d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr sgl::orderIndices</definition>
        <argsstring>(std::vector&lt; csl::Index &gt; &amp;indices)</argsstring>
        <name>orderIndices</name>
        <qualifiedname>sgl::orderIndices</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/epsilonindex.cpp" line="54" column="11" bodyfile="src/marty/sgl/epsilonindex.cpp" bodystart="54" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="epsilonindex_8cpp_1a21452399d8ff6bf5ca9124cc04304332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::epsilonindex_s</definition>
        <argsstring>(csl::Index const &amp;mu, csl::Index const &amp;nu, csl::Index const &amp;rho, csl::Index const &amp;sigma)</argsstring>
        <name>epsilonindex_s</name>
        <qualifiedname>sgl::epsilonindex_s</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/epsilonindex.cpp" line="288" column="7" bodyfile="src/marty/sgl/epsilonindex.cpp" bodystart="288" bodyend="297" declfile="src/marty/sgl/epsilonindex.h" declline="68" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="fierz_8cpp_1a9db49ef2cdd88517a9375b8d5a42ae24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::fixFierz</definition>
        <argsstring>(GExpr &amp;expr)</argsstring>
        <name>fixFierz</name>
        <qualifiedname>sgl::fixFierz</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/fierz.cpp" line="26" column="6" bodyfile="src/marty/sgl/fierz.cpp" bodystart="26" bodyend="33" declfile="src/marty/sgl/fierz.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fierz_8cpp_1ad8a9be978ec84f50ad9ebe04a432e0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::areCanonical</definition>
        <argsstring>(IndexChain const &amp;A, IndexChain const &amp;B)</argsstring>
        <name>areCanonical</name>
        <qualifiedname>sgl::areCanonical</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1IndexChain" kindref="compound">IndexChain</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1IndexChain" kindref="compound">IndexChain</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/fierz.cpp" line="34" column="6" bodyfile="src/marty/sgl/fierz.cpp" bodystart="34" bodyend="64" declfile="src/marty/sgl/fierz.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fierz_8cpp_1adc31ce825a5c92dc08eeed842a64f2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::applyGeneralFierz</definition>
        <argsstring>(GExpr &amp;expr, bool twice)</argsstring>
        <name>applyGeneralFierz</name>
        <qualifiedname>sgl::applyGeneralFierz</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>twice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/fierz.cpp" line="66" column="6" bodyfile="src/marty/sgl/fierz.cpp" bodystart="66" bodyend="103" declfile="src/marty/sgl/fierz.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fierz_8cpp_1a22cfad2d6f8635bd02dc3bb7f49815d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::applyGeneralFierzTwice</definition>
        <argsstring>(GExpr &amp;expr)</argsstring>
        <name>applyGeneralFierzTwice</name>
        <qualifiedname>sgl::applyGeneralFierzTwice</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/fierz.cpp" line="105" column="6" bodyfile="src/marty/sgl/fierz.cpp" bodystart="105" bodyend="108" declfile="src/marty/sgl/fierz.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gammaindex_8cpp_1a190536717470cf490a77619ca813dacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::gammaindex_s</definition>
        <argsstring>()</argsstring>
        <name>gammaindex_s</name>
        <qualifiedname>sgl::gammaindex_s</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.cpp" line="179" column="7" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="179" bodyend="182" declfile="src/marty/sgl/gammaindex.h" declline="105" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="gammaindex_8cpp_1a01b3d79bfcf80cfd062711bf06cde460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::gammaindex_s</definition>
        <argsstring>(csl::Index const &amp;index)</argsstring>
        <name>gammaindex_s</name>
        <qualifiedname>sgl::gammaindex_s</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.cpp" line="183" column="7" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="183" bodyend="186" declfile="src/marty/sgl/gammaindex.h" declline="106" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="gammaindex_8cpp_1a75d9307e7cf2922f7e78665113d53347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::gammaindex_s</definition>
        <argsstring>(std::vector&lt; csl::Index &gt; const &amp;indices)</argsstring>
        <name>gammaindex_s</name>
        <qualifiedname>sgl::gammaindex_s</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.cpp" line="187" column="7" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="187" bodyend="191" declfile="src/marty/sgl/gammaindex.h" declline="107" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="indexchain_8cpp_1a50c93d24332783129ab8e9752fa09a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref>, <ref refid="classsgl_1_1IndexChain" kindref="compound">IndexChain</ref>, <ref refid="classsgl_1_1IndexChain" kindref="compound">IndexChain</ref> &gt;</type>
        <definition>std::tuple&lt; GExpr, IndexChain, IndexChain &gt; sgl::chiralBasisElement</definition>
        <argsstring>(size_t i)</argsstring>
        <name>chiralBasisElement</name>
        <qualifiedname>sgl::chiralBasisElement</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/indexchain.cpp" line="760" column="12" bodyfile="src/marty/sgl/indexchain.cpp" bodystart="760" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="indexchain_8cpp_1adc0293c8138b81b984bdbc2b9428d6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref>, <ref refid="classsgl_1_1IndexChain" kindref="compound">IndexChain</ref>, <ref refid="classsgl_1_1IndexChain" kindref="compound">IndexChain</ref> &gt;</type>
        <definition>std::tuple&lt; GExpr, IndexChain, IndexChain &gt; sgl::standardBasisElement</definition>
        <argsstring>(size_t i)</argsstring>
        <name>standardBasisElement</name>
        <qualifiedname>sgl::standardBasisElement</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/indexchain.cpp" line="793" column="12" bodyfile="src/marty/sgl/indexchain.cpp" bodystart="793" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="indexchain_8cpp_1ab73eaa3d690672b317bea870e0723e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref>, <ref refid="classsgl_1_1IndexChain" kindref="compound">IndexChain</ref>, <ref refid="classsgl_1_1IndexChain" kindref="compound">IndexChain</ref> &gt;</type>
        <definition>std::tuple&lt; GExpr, IndexChain, IndexChain &gt; sgl::basisElement</definition>
        <argsstring>(size_t i, bool chiral)</argsstring>
        <name>basisElement</name>
        <qualifiedname>sgl::basisElement</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>chiral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/indexchain.cpp" line="823" column="12" bodyfile="src/marty/sgl/indexchain.cpp" bodystart="823" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="indexchain_8cpp_1ad0a027ba4344b7a1fa586ed514c79395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::indexchain_s</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>indexchain_s</name>
        <qualifiedname>sgl::indexchain_s</qualifiedname>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/indexchain.cpp" line="1118" column="7" bodyfile="src/marty/sgl/indexchain.cpp" bodystart="1118" bodyend="1121" declfile="src/marty/sgl/indexchain.h" declline="262" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="indexchain_8cpp_1a2a25651665631edd1dcdb4dcc546e15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::indexchain_s</definition>
        <argsstring>(const char mu[], int a, int b)</argsstring>
        <name>indexchain_s</name>
        <qualifiedname>sgl::indexchain_s</qualifiedname>
        <param>
          <type>const char</type>
          <declname>mu</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/indexchain.cpp" line="1123" column="7" bodyfile="src/marty/sgl/indexchain.cpp" bodystart="1123" bodyend="1130" declfile="src/marty/sgl/indexchain.h" declline="264" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="indexchain_8cpp_1a224ddcb40383fba9a466719ad32c67a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::indexchain_s</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;mu, int a, int b)</argsstring>
        <name>indexchain_s</name>
        <qualifiedname>sgl::indexchain_s</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/indexchain.cpp" line="1132" column="7" bodyfile="src/marty/sgl/indexchain.cpp" bodystart="1132" bodyend="1143" declfile="src/marty/sgl/indexchain.h" declline="266" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="indexchain_8h_1aaf083f608647042a0bcc5108ebac54fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::indexchain_s</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>indexchain_s</name>
        <qualifiedname>sgl::indexchain_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/indexchain.h" line="241" column="7" bodyfile="src/marty/sgl/indexchain.h" bodystart="241" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="indexchain_8h_1a240dbd1d4eda5c3350eb4e1017e705a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::indexchain_s</definition>
        <argsstring>(std::initializer_list&lt; GExpr &gt; gammas, Args &amp;&amp;...args)</argsstring>
        <name>indexchain_s</name>
        <qualifiedname>sgl::indexchain_s</qualifiedname>
        <param>
          <type>std::initializer_list&lt; <ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &gt;</type>
          <declname>gammas</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/indexchain.h" line="256" column="7" bodyfile="src/marty/sgl/indexchain.h" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="metricindex_8cpp_1ac8901df59ec3d98b7a003f644e8b3cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::metricindex_s</definition>
        <argsstring>(csl::Index const &amp;a, csl::Index const &amp;b)</argsstring>
        <name>metricindex_s</name>
        <qualifiedname>sgl::metricindex_s</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/metricindex.cpp" line="96" column="7" bodyfile="src/marty/sgl/metricindex.cpp" bodystart="96" bodyend="104" declfile="src/marty/sgl/metricindex.h" declline="50" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="momentumindex_8cpp_1aebd37403f707aa2c151a8b59c32fd3e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::momentumindex_s</definition>
        <argsstring>(csl::Tensor const &amp;p, csl::Index const &amp;mu)</argsstring>
        <name>momentumindex_s</name>
        <qualifiedname>sgl::momentumindex_s</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/momentumindex.cpp" line="131" column="7" bodyfile="src/marty/sgl/momentumindex.cpp" bodystart="131" bodyend="134" declfile="src/marty/sgl/momentumindex.h" declline="73" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="ordering_8cpp_1a23a041184d000e464a8e4737aca3b632" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool sgl::hasCommonIndex</definition>
        <argsstring>(GExpr const &amp;arg, GammaIndex const &amp;mu)</argsstring>
        <name>hasCommonIndex</name>
        <qualifiedname>sgl::hasCommonIndex</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/ordering.cpp" line="28" column="13" bodyfile="src/marty/sgl/ordering.cpp" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="ordering_8cpp_1ae49b9b08fde5d11fdd967b2f373be193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::freeOrder</definition>
        <argsstring>(std::vector&lt; csl::Index &gt; const &amp;mu, std::vector&lt; csl::Index &gt; const &amp;nu)</argsstring>
        <name>freeOrder</name>
        <qualifiedname>sgl::freeOrder</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt; const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt; const &amp;</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/ordering.cpp" line="36" column="6" bodyfile="src/marty/sgl/ordering.cpp" bodystart="36" bodyend="50" declfile="src/marty/sgl/ordering.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ordering_8cpp_1a0ceed144f1bc5bd8e1f8bdec4266d3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::contractedOrder</definition>
        <argsstring>(GExpr const &amp;A, GExpr const &amp;B)</argsstring>
        <name>contractedOrder</name>
        <qualifiedname>sgl::contractedOrder</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/ordering.cpp" line="52" column="6" bodyfile="src/marty/sgl/ordering.cpp" bodystart="52" bodyend="68" declfile="src/marty/sgl/ordering.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ordering_8cpp_1a79f2e61e76a85b5dd39ef416ac3b302f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::isOrdered</definition>
        <argsstring>(GExpr const &amp;prod, GammaIndex const &amp;mu, GammaIndex const &amp;nu)</argsstring>
        <name>isOrdered</name>
        <qualifiedname>sgl::isOrdered</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> const &amp;</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/ordering.cpp" line="70" column="6" bodyfile="src/marty/sgl/ordering.cpp" bodystart="70" bodyend="98" declfile="src/marty/sgl/ordering.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ordering_8cpp_1a5754fc825aede8aa0d953235b1db540b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sgl::simplest</definition>
        <argsstring>(GExpr const &amp;prod, GExpr const &amp;chain, size_t begin)</argsstring>
        <name>simplest</name>
        <qualifiedname>sgl::simplest</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>begin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/ordering.cpp" line="100" column="8" bodyfile="src/marty/sgl/ordering.cpp" bodystart="100" bodyend="111" declfile="src/marty/sgl/ordering.h" declline="38" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="sglalgo_8h_1a8f6046cb483db4bfb8b31671b0fef7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sgl::for_each</definition>
        <argsstring>(GExpr &amp;expr, std::function&lt; void(GExpr &amp;)&gt; f)</argsstring>
        <name>for_each</name>
        <qualifiedname>sgl::for_each</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sglalgo.h" line="31" column="6" bodyfile="src/marty/sgl/sglalgo.h" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="sglalgo_8h_1a80e51153f349b17e73d8ef8f5a068e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool sgl::transform</definition>
        <argsstring>(GExpr &amp;expr, std::function&lt; bool(GExpr &amp;)&gt; f)</argsstring>
        <name>transform</name>
        <qualifiedname>sgl::transform</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>std::function&lt; bool(<ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sglalgo.h" line="41" column="6" bodyfile="src/marty/sgl/sglalgo.h" bodystart="41" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="sglcommutation_8cpp_1a4a9ff3a25c78229e7193f81dc083cce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; sgl::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Commutation const &amp;com)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>sgl::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="structsgl_1_1Commutation" kindref="compound">Commutation</ref> const &amp;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sglcommutation.cpp" line="25" column="1" bodyfile="src/marty/sgl/sglcommutation.cpp" bodystart="25" bodyend="30" declfile="src/marty/sgl/sglcommutation.h" declline="36" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sglcommutation_8cpp_1a6abadb80a59a1d83710c49cea5e57e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsgl_1_1Commutation" kindref="compound">Commutation</ref></type>
        <definition>Commutation sgl::commute</definition>
        <argsstring>(GammaIndex const &amp;mu, GammaIndex const &amp;nu, csl::Index const &amp;a, csl::Index const &amp;b, bool inverseCall)</argsstring>
        <name>commute</name>
        <qualifiedname>sgl::commute</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> const &amp;</type>
          <declname>mu</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> const &amp;</type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inverseCall</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sglcommutation.cpp" line="32" column="13" bodyfile="src/marty/sgl/sglcommutation.cpp" bodystart="32" bodyend="127" declfile="src/marty/sgl/sglcommutation.h" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sglfield_8h_1a1ab4bcb1dca1163bc510e42b9caa6129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classsgl_1_1Field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Field &gt; sgl::field_s</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>field_s</name>
        <qualifiedname>sgl::field_s</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sglfield.h" line="129" column="17" bodyfile="src/marty/sgl/sglfield.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="sglinterface_8cpp_1a37f78bf0acef5a8751d22aee77db5d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::DeepCopy</definition>
        <argsstring>(GExpr const &amp;expr)</argsstring>
        <name>DeepCopy</name>
        <qualifiedname>sgl::DeepCopy</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sglinterface.cpp" line="20" column="7" bodyfile="src/marty/sgl/sglinterface.cpp" bodystart="20" bodyend="27" declfile="src/marty/sgl/sglinterface.h" declline="29" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sglinterface_8cpp_1a44e2303c8ebcbc9a33dc50e95d20770b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::DeepRefreshed</definition>
        <argsstring>(GExpr const &amp;expr)</argsstring>
        <name>DeepRefreshed</name>
        <qualifiedname>sgl::DeepRefreshed</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sglinterface.cpp" line="29" column="7" bodyfile="src/marty/sgl/sglinterface.cpp" bodystart="29" bodyend="36" declfile="src/marty/sgl/sglinterface.h" declline="30" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sgloperations_8cpp_1acc323e30333384b2e7101fab5a5060ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::sum_s</definition>
        <argsstring>(std::vector&lt; GExpr &gt; args)</argsstring>
        <name>sum_s</name>
        <qualifiedname>sgl::sum_s</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sgloperations.cpp" line="261" column="7" bodyfile="src/marty/sgl/sgloperations.cpp" bodystart="261" bodyend="270" declfile="src/marty/sgl/sgloperations.h" declline="72" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="sgloperations_8cpp_1a0ea5eba526dd3cad1317449044449cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::prod_s</definition>
        <argsstring>(std::vector&lt; GExpr &gt; args)</argsstring>
        <name>prod_s</name>
        <qualifiedname>sgl::prod_s</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/sgloperations.cpp" line="272" column="7" bodyfile="src/marty/sgl/sgloperations.cpp" bodystart="272" bodyend="283" declfile="src/marty/sgl/sgloperations.h" declline="73" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="simplify_8cpp_1a5228138d6fdae5882d1aa7a23fe33b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::OrderChainsImpl</definition>
        <argsstring>(GExpr &amp;arg, GExpr const &amp;prod)</argsstring>
        <name>OrderChainsImpl</name>
        <qualifiedname>sgl::OrderChainsImpl</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>prod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/simplify.cpp" line="107" column="6" bodyfile="src/marty/sgl/simplify.cpp" bodystart="107" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="simplify_8cpp_1af209d02157754df0f89e49985de0f18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::OrderChains</definition>
        <argsstring>(GExpr &amp;init, GExpr const &amp;containerProd)</argsstring>
        <name>OrderChains</name>
        <qualifiedname>sgl::OrderChains</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>containerProd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/simplify.cpp" line="125" column="6" bodyfile="src/marty/sgl/simplify.cpp" bodystart="125" bodyend="139" declfile="src/marty/sgl/simplify.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tensorset_8cpp_1a75f461b8fe62610358139feec962a94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsgl_1_1TensorSet" kindref="compound">TensorSet</ref></type>
        <definition>TensorSet sgl::buildTensorSet</definition>
        <argsstring>(csl::Space const *minkoSpace, csl::Space const *diracSpace)</argsstring>
        <name>buildTensorSet</name>
        <qualifiedname>sgl::buildTensorSet</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
          <declname>minkoSpace</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
          <declname>diracSpace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tensorset.cpp" line="20" column="11" bodyfile="src/marty/sgl/tensorset.cpp" bodystart="20" bodyend="40" declfile="src/marty/sgl/tensorset.h" declline="38" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="typecast_8h_1a48ce2537dd05eaf44dcf5090b878cde7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool sgl::IsType</definition>
        <argsstring>(GExpr const &amp;expr)</argsstring>
        <name>IsType</name>
        <qualifiedname>sgl::IsType</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/typecast.h" line="30" column="6" bodyfile="src/marty/sgl/typecast.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="typecast_8h_1a8e1b46fa4765603233539ed8cce80c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; Type &gt;</type>
        <definition>std::shared_ptr&lt; Type &gt; sgl::ConvertTo</definition>
        <argsstring>(GExpr const &amp;expr)</argsstring>
        <name>ConvertTo</name>
        <qualifiedname>sgl::ConvertTo</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/typecast.h" line="36" column="17" bodyfile="src/marty/sgl/typecast.h" bodystart="36" bodyend="39"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/marty/api/gamma.h" line="8" column="1"/>
  </compounddef>
</doxygen>
