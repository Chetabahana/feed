<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classmty_1_1wick_1_1WickCalculator" kind="class" language="C++" prot="public">
    <compoundname>mty::wick::WickCalculator</compoundname>
    <includes refid="graph_8h" local="no">graph.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmty_1_1wick_1_1WickCalculator_1a5f294388435e6b5f3e866e077f7d0d2c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::wick::WickCalculator::diagramsCalculated</definition>
        <argsstring></argsstring>
        <name>diagramsCalculated</name>
        <qualifiedname>mty::wick::WickCalculator::diagramsCalculated</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Boolean that tells if contractions have already been done. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="892" column="10" bodyfile="src/marty/core/graph.h" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1WickCalculator_1ac8d374f039cac4139db89328b5fa67fa" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::wick::WickCalculator::symmetrizeExternalLegs</definition>
        <argsstring></argsstring>
        <name>symmetrizeExternalLegs</name>
        <qualifiedname>mty::wick::WickCalculator::symmetrizeExternalLegs</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="894" column="10" bodyfile="src/marty/core/graph.h" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1WickCalculator_1abf0616d695bbfa7fb95b0647c337b44d" prot="private" static="no" mutable="no">
        <type><ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref></type>
        <definition>Graph mty::wick::WickCalculator::initialDiagram</definition>
        <argsstring></argsstring>
        <name>initialDiagram</name>
        <qualifiedname>mty::wick::WickCalculator::initialDiagram</qualifiedname>
        <briefdescription>
<para>Initial diagram for contractions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="899" column="11" bodyfile="src/marty/core/graph.h" bodystart="899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1wick_1_1WickCalculator_1a685eb1d6a6765bbe0e0c55358475c724" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Graph&gt; &gt; mty::wick::WickCalculator::feynmanDiagram</definition>
        <argsstring></argsstring>
        <name>feynmanDiagram</name>
        <qualifiedname>mty::wick::WickCalculator::feynmanDiagram</qualifiedname>
        <briefdescription>
<para>All possible diagrams once contractions have been done. Result of the function calculateDiagrams()). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="905" column="17" bodyfile="src/marty/core/graph.h" bodystart="905" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a940770ac36113a1e187b2820f7d54dbe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::wick::WickCalculator::applyWickTheoremOnDiagram</definition>
        <argsstring>(const Graph &amp;diagram, std::vector&lt; mty::FeynruleMomentum &gt; &amp;witnessMapping, bool ruleMode=true)</argsstring>
        <name>applyWickTheoremOnDiagram</name>
        <qualifiedname>mty::wick::WickCalculator::applyWickTheoremOnDiagram</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>diagram</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynruleMomentum" kindref="compound">mty::FeynruleMomentum</ref> &gt; &amp;</type>
          <declname>witnessMapping</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="773" column="22" bodyfile="src/marty/core/graph.cpp" bodystart="1558" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a10c23de100b3cb63de6aebc71a8b3fa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>csl::vector_expr</type>
        <definition>csl::vector_expr mty::wick::WickCalculator::applyWickTheoremOnDiagrams</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Graph &gt; &gt; &amp;diagrams, std::vector&lt; mty::FeynruleMomentum &gt; &amp;witnessMapping, bool ruleMode=true)</argsstring>
        <name>applyWickTheoremOnDiagrams</name>
        <qualifiedname>mty::wick::WickCalculator::applyWickTheoremOnDiagrams</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &gt; &gt; &amp;</type>
          <declname>diagrams</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynruleMomentum" kindref="compound">mty::FeynruleMomentum</ref> &gt; &amp;</type>
          <declname>witnessMapping</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="778" column="29" bodyfile="src/marty/core/graph.cpp" bodystart="1579" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1af72177927d71c495572b549c77b01898" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1FeynmanDiagram" kindref="compound">mty::FeynmanDiagram</ref> &gt;</type>
        <definition>static std::vector&lt; mty::FeynmanDiagram &gt; mty::wick::WickCalculator::getDiagrams</definition>
        <argsstring>(mty::Model const *model, FeynOptions const &amp;options, const csl::Expr &amp;initialExpr, std::map&lt; csl::Tensor, size_t &gt; &amp;vertexIds, std::vector&lt; mty::FeynruleMomentum &gt; &amp;witnessMapping, bool symmetriseExternalLegs=false, bool ruleMode=true)</argsstring>
        <name>getDiagrams</name>
        <qualifiedname>mty::wick::WickCalculator::getDiagrams</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynOptions" kindref="compound">FeynOptions</ref> const &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>initialExpr</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, size_t &gt; &amp;</type>
          <declname>vertexIds</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1FeynruleMomentum" kindref="compound">mty::FeynruleMomentum</ref> &gt; &amp;</type>
          <declname>witnessMapping</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>symmetriseExternalLegs</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="784" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a0c4655d73cdee9e64adc7b44dc24a70b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1FeynmanDiagram" kindref="compound">mty::FeynmanDiagram</ref> &gt;</type>
        <definition>static std::vector&lt; mty::FeynmanDiagram &gt; mty::wick::WickCalculator::getDiagrams</definition>
        <argsstring>(mty::Model const *model, FeynOptions const &amp;options, const csl::Expr &amp;initialExpr, std::map&lt; csl::Tensor, size_t &gt; &amp;vertexIds, bool symmetriseExternalLegs=false, bool ruleMode=true)</argsstring>
        <name>getDiagrams</name>
        <qualifiedname>mty::wick::WickCalculator::getDiagrams</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">mty::Model</ref> const *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynOptions" kindref="compound">FeynOptions</ref> const &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &amp;</type>
          <declname>initialExpr</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref>, size_t &gt; &amp;</type>
          <declname>vertexIds</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>symmetriseExternalLegs</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ruleMode</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="793" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1abb32344b052a75fa6f6a6fcf6e8998ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::WickCalculator::isContractionZero</definition>
        <argsstring>(const std::vector&lt; mty::QuantumField &gt; &amp;fields, size_t maxLoops=size_t(-1), size_t nVertices=size_t(-1))</argsstring>
        <name>isContractionZero</name>
        <qualifiedname>mty::wick::WickCalculator::isContractionZero</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxLoops</declname>
          <defval>size_t(-1)</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>nVertices</declname>
          <defval>size_t(-1)</defval>
        </param>
        <briefdescription>
<para>Checks quickly if a set of fields gives a zero contraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>std::vector of <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function will not detect all cases at all. The purpose is to do a quick check to discard the most obvious cases, in order to save time in computations. <simplesect kind="return"><para><bold>True</bold> if the contraction of <bold>fields</bold> is zero in some cases. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="809" column="17" bodyfile="src/marty/core/graph.cpp" bodystart="1655" bodyend="1686"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a4b81dae02374909c01cf80f0d82fa9ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::wick::WickCalculator::isContractionZero</definition>
        <argsstring>(const std::vector&lt; mty::QuantumField const * &gt; &amp;fields, size_t maxLoops=size_t(-1), size_t nVertices=size_t(-1))</argsstring>
        <name>isContractionZero</name>
        <qualifiedname>mty::wick::WickCalculator::isContractionZero</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> const * &gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxLoops</declname>
          <defval>size_t(-1)</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>nVertices</declname>
          <defval>size_t(-1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="814" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1688" bodyend="1720"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1aa3850cd9eb2148abcb0a9944d96f2aaa" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; &gt;</type>
        <definition>vector&lt; vector&lt; QuantumField &gt; &gt; mty::wick::WickCalculator::splitFields</definition>
        <argsstring>(const std::vector&lt; mty::QuantumField &gt; &amp;field)</argsstring>
        <name>splitFields</name>
        <qualifiedname>mty::wick::WickCalculator::splitFields</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Static helper function that splits a std::vector of fields into several, each part being associated with a unique <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref>. Allows to discard quickly diagrams that have one (at least) species that presents an odd number of fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial std::vector of <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> to split in species. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The splitted std::vector into groups of <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> from the same species. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="829" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1723" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1ac6d6923ddb2adabeb433ad576059db37" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> const * &gt; &gt;</type>
        <definition>vector&lt; vector&lt; QuantumField const * &gt; &gt; mty::wick::WickCalculator::splitFields</definition>
        <argsstring>(const std::vector&lt; mty::QuantumField const * &gt; &amp;field)</argsstring>
        <name>splitFields</name>
        <qualifiedname>mty::wick::WickCalculator::splitFields</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> const * &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="832" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1750" bodyend="1774"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a9fe368e4b5a935084aeb70de3a1ab546" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::wick::WickCalculator::WickCalculator</definition>
        <argsstring>()</argsstring>
        <name>WickCalculator</name>
        <qualifiedname>mty::wick::WickCalculator::WickCalculator</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="838" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1460" bodyend="1462"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a9df9a693de319fb29f0f96543b85c636" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::wick::WickCalculator::WickCalculator</definition>
        <argsstring>(const Graph &amp;freeDiagram)</argsstring>
        <name>WickCalculator</name>
        <qualifiedname>mty::wick::WickCalculator::WickCalculator</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>freeDiagram</declname>
        </param>
        <briefdescription>
<para>Constructor with one parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>freeDiagram</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> fully disconnected initializing the algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="844" column="14" bodyfile="src/marty/core/graph.cpp" bodystart="1464" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a71cf867d8bc1ce0c41001d4fe74d78b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::wick::WickCalculator::WickCalculator</definition>
        <argsstring>(const WickCalculator &amp;other)=default</argsstring>
        <name>WickCalculator</name>
        <qualifiedname>mty::wick::WickCalculator::WickCalculator</qualifiedname>
        <param>
          <type>const <ref refid="classmty_1_1wick_1_1WickCalculator" kindref="compound">WickCalculator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor = c++ default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="849" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1ae480fba51bd233ed48861e2b463b794b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mty::wick::WickCalculator::~WickCalculator</definition>
        <argsstring>()</argsstring>
        <name>~WickCalculator</name>
        <qualifiedname>mty::wick::WickCalculator::~WickCalculator</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="854" column="5" bodyfile="src/marty/core/graph.h" bodystart="854" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a14eb36d8637c4c9cefe152e7a493a73a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::WickCalculator::setSymmetrizeExternalLegs</definition>
        <argsstring>(bool t_symmetrize)</argsstring>
        <name>setSymmetrizeExternalLegs</name>
        <qualifiedname>mty::wick::WickCalculator::setSymmetrizeExternalLegs</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_symmetrize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="856" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1469" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1ab5d33f1fd3eba13fd9e4082a8d98c957" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref></type>
        <definition>Graph mty::wick::WickCalculator::getInitialDiagram</definition>
        <argsstring>() const</argsstring>
        <name>getInitialDiagram</name>
        <qualifiedname>mty::wick::WickCalculator::getInitialDiagram</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The initial <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> <bold>initialDiagram</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="861" column="11" bodyfile="src/marty/core/graph.cpp" bodystart="1475" bodyend="1478"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a7070df8f2381795150298b572e0e094b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; Graph &gt; &gt; mty::wick::WickCalculator::getDiagrams</definition>
        <argsstring>(Model const *model, FeynOptions const &amp;options)</argsstring>
        <name>getDiagrams</name>
        <qualifiedname>mty::wick::WickCalculator::getDiagrams</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynOptions" kindref="compound">FeynOptions</ref> const &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Calculates and returns all possible contractions of the initial <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref>. If the different diagrams have already been found, does not recompute them. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The set of possible <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> once contractions have been done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="870" column="5" bodyfile="src/marty/core/graph.cpp" bodystart="1481" bodyend="1489"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1ab2003046be158943d1812ce39db461f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::WickCalculator::eliminateNonPhysicalDiagrams</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; Graph &gt; &gt; &amp;diagrams)</argsstring>
        <name>eliminateNonPhysicalDiagrams</name>
        <qualifiedname>mty::wick::WickCalculator::eliminateNonPhysicalDiagrams</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref>&lt; <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> &gt; &gt; &amp;</type>
          <declname>diagrams</declname>
        </param>
        <briefdescription>
<para>See <ref refid="classmty_1_1wick_1_1Graph_1a9528f33f437578aa1f4fcef6836a1be8" kindref="member">Graph::isPhysical()</ref>. Eliminate <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> that do not fill this condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagrams</parametername>
</parameternamelist>
<parameterdescription>
<para>std::vector of <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> which non physical elements are removed (modified during the run). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="878" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1491" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1wick_1_1WickCalculator_1a27d4b6087121aa032def2cdafa8ff2e4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::wick::WickCalculator::calculateDiagrams</definition>
        <argsstring>(Model const *model, FeynOptions const &amp;options)</argsstring>
        <name>calculateDiagrams</name>
        <qualifiedname>mty::wick::WickCalculator::calculateDiagrams</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Model" kindref="compound">Model</ref> const *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FeynOptions" kindref="compound">FeynOptions</ref> const &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Contraction algorithm. Generates all possible <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> using the method <ref refid="classmty_1_1wick_1_1Graph_1aeb1d7f18e204409752a0a2d728fa09ee" kindref="member">Graph::contractionStep()</ref>, and stores it in the member <bold>feynmanDiagram</bold>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/graph.h" line="886" column="10" bodyfile="src/marty/core/graph.cpp" bodystart="1501" bodyend="1556"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class handling the full application of <ref refid="classmty_1_1Wick" kindref="compound">Wick</ref> theorem. Starts from an initial <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> fully disconnected, delegates contraction steps to the <ref refid="classmty_1_1wick_1_1Graph" kindref="compound">Graph</ref> class and handles the series of resulting Graphs (eliminates non physical ones, iterates the Graph::contractoinStep()...). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/marty/core/graph.h" line="770" column="1" bodyfile="src/marty/core/graph.h" bodystart="770" bodyend="906"/>
    <listofallmembers>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a940770ac36113a1e187b2820f7d54dbe" prot="public" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>applyWickTheoremOnDiagram</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a10c23de100b3cb63de6aebc71a8b3fa1" prot="public" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>applyWickTheoremOnDiagrams</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a27d4b6087121aa032def2cdafa8ff2e4" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>calculateDiagrams</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a5f294388435e6b5f3e866e077f7d0d2c" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>diagramsCalculated</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1ab2003046be158943d1812ce39db461f3" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>eliminateNonPhysicalDiagrams</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a685eb1d6a6765bbe0e0c55358475c724" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>feynmanDiagram</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1af72177927d71c495572b549c77b01898" prot="public" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>getDiagrams</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a0c4655d73cdee9e64adc7b44dc24a70b" prot="public" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>getDiagrams</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a7070df8f2381795150298b572e0e094b" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>getDiagrams</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1ab5d33f1fd3eba13fd9e4082a8d98c957" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>getInitialDiagram</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1abf0616d695bbfa7fb95b0647c337b44d" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>initialDiagram</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1abb32344b052a75fa6f6a6fcf6e8998ed" prot="public" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>isContractionZero</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a4b81dae02374909c01cf80f0d82fa9ed" prot="public" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>isContractionZero</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a14eb36d8637c4c9cefe152e7a493a73a" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>setSymmetrizeExternalLegs</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1aa3850cd9eb2148abcb0a9944d96f2aaa" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>splitFields</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1ac6d6923ddb2adabeb433ad576059db37" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>splitFields</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1ac8d374f039cac4139db89328b5fa67fa" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>symmetrizeExternalLegs</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a9fe368e4b5a935084aeb70de3a1ab546" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>WickCalculator</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a9df9a693de319fb29f0f96543b85c636" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>WickCalculator</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1a71cf867d8bc1ce0c41001d4fe74d78b6" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>WickCalculator</name></member>
      <member refid="classmty_1_1wick_1_1WickCalculator_1ae480fba51bd233ed48861e2b463b794b" prot="private" virt="non-virtual"><scope>mty::wick::WickCalculator</scope><name>~WickCalculator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
