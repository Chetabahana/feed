<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1VectorIntegral" kind="class" language="C++" prot="public">
    <compoundname>csl::VectorIntegral</compoundname>
    <basecompoundref refid="classcsl_1_1AbstractIntegral" prot="public" virt="non-virtual">csl::AbstractIntegral</basecompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classcsl_1_1VectorIntegral_1ae178e75f03298dfde742239e70e15c4f" prot="protected" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor csl::VectorIntegral::variables</definition>
        <argsstring></argsstring>
        <name>variables</name>
        <qualifiedname>csl::VectorIntegral::variables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="309" column="12" bodyfile="src/csl/pseudoIntegral.h" bodystart="309" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1acafe20b8d111e85ae9fa4a6425e16f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::VectorIntegral::VectorIntegral</definition>
        <argsstring>()</argsstring>
        <name>VectorIntegral</name>
        <qualifiedname>csl::VectorIntegral::VectorIntegral</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="230" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="657" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a3352b2cf9fb4f2c00a47f3e96134f2ca" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::VectorIntegral::VectorIntegral</definition>
        <argsstring>(const Tensor &amp;t_variables)</argsstring>
        <name>VectorIntegral</name>
        <qualifiedname>csl::VectorIntegral::VectorIntegral</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="233" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="661" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a95257dd95a89c4df68e66f71c2ba4c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::VectorIntegral::VectorIntegral</definition>
        <argsstring>(const Expr &amp;operand, const Tensor &amp;t_variables)</argsstring>
        <name>VectorIntegral</name>
        <qualifiedname>csl::VectorIntegral::VectorIntegral</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="235" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="666" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a7261bf89a5b48573d6c471c3769e9333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::VectorIntegral::VectorIntegral</definition>
        <argsstring>(const Expr &amp;operand, const Tensor &amp;t_variable, bool t_empty)</argsstring>
        <name>VectorIntegral</name>
        <qualifiedname>csl::VectorIntegral::VectorIntegral</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_variable</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>t_empty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="238" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="671" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a7bba959d5926979a0a772ff5b59f07ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::VectorIntegral::VectorIntegral</definition>
        <argsstring>(const Expr &amp;operand, const Tensor &amp;t_variable, const Expr &amp;t_inf, const Expr &amp;t_sup)</argsstring>
        <name>VectorIntegral</name>
        <qualifiedname>csl::VectorIntegral::VectorIntegral</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_variable</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_inf</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_sup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="242" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="678" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a03b55ab2b1fc67cf2c5f7fb7f0ee858e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::VectorIntegral::VectorIntegral</definition>
        <argsstring>(const Tensor &amp;t_variable, const Expr &amp;t_inf, const Expr &amp;t_sup)</argsstring>
        <name>VectorIntegral</name>
        <qualifiedname>csl::VectorIntegral::VectorIntegral</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_variable</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_inf</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_sup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="247" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="686" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a432e99290a0308db06985e3b05946c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::VectorIntegral::VectorIntegral</definition>
        <argsstring>(const Expr &amp;operand, const Tensor &amp;t_variable, bool t_empty, const Expr &amp;t_inf, const Expr &amp;t_sup)</argsstring>
        <name>VectorIntegral</name>
        <qualifiedname>csl::VectorIntegral::VectorIntegral</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>t_variable</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>t_empty</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_inf</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>t_sup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="251" column="5" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="693" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1af928caed3db0a3e8f5042fdf1a8baf21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::VectorIntegral::~VectorIntegral</definition>
        <argsstring>()</argsstring>
        <name>~VectorIntegral</name>
        <qualifiedname>csl::VectorIntegral::~VectorIntegral</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="260" column="5" bodyfile="src/csl/pseudoIntegral.h" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a514f7d0f5a9cff6c43d786717a030ad7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312" kindref="member">csl::Type</ref></type>
        <definition>csl::Type csl::VectorIntegral::getType</definition>
        <argsstring>() const override</argsstring>
        <name>getType</name>
        <qualifiedname>csl::VectorIntegral::getType</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aa781456c3f801b37ce169c83514c51c1">getType</reimplements>
        <briefdescription>
<para>Gives the <bold>type</bold> of <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In the program this function is very often called. It allows different functions to know what type of expr they are manipulating (cos, product, number, etc) in order to do special treatments or simplifications. <simplesect kind="return"><para>type (a non memorized integer corresponding to the type of abstract) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="262" column="15" bodyfile="src/csl/pseudoIntegral.h" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a0bdc27a5f2a2533af9aaf96f4582ed07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::VectorIntegral::getVariable</definition>
        <argsstring>() const override</argsstring>
        <name>getVariable</name>
        <qualifiedname>csl::VectorIntegral::getVariable</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1ae85f810bbadbc792210c958e8f1b2ffb">getVariable</reimplements>
        <briefdescription>
<para>Accessor to the variable that defines certain types of expressions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>variable</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="266" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="702" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a956aaa1428471ce72c9c273cd5ce4ac8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref></type>
        <definition>Parent csl::VectorIntegral::getParent</definition>
        <argsstring>() const override</argsstring>
        <name>getParent</name>
        <qualifiedname>csl::VectorIntegral::getParent</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1ab150130c9f67daaf6aba52b9f6b90941">getParent</reimplements>
        <briefdescription>
<para>For indicial expressions this function returns a pointer to the parent object of type <ref refid="classcsl_1_1TensorParent" kindref="compound">TensorParent</ref> (not an expression). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>parent</bold> for TensorElement-type expression. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="268" column="12" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="707" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1afc921c41b5d2519cf1aa69be77c3c42a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1AbstractParent" kindref="compound">Parent_info</ref></type>
        <definition>Parent_info csl::VectorIntegral::getParent_info</definition>
        <argsstring>() const override</argsstring>
        <name>getParent_info</name>
        <qualifiedname>csl::VectorIntegral::getParent_info</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a15f775b5add9af8727ead2cfaab78ba2">getParent_info</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="270" column="17" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="712" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1aee6ef6c5969f6a2ff6bd7855fcf8862e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::VectorIntegral::setParent</definition>
        <argsstring>(const Parent &amp;t_variable) override</argsstring>
        <name>setParent</name>
        <qualifiedname>csl::VectorIntegral::setParent</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a3003698af4978e774eeb2e62038f7432">setParent</reimplements>
        <param>
          <type>const <ref refid="classcsl_1_1Parent" kindref="compound">Parent</ref> &amp;</type>
          <declname>t_variable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="272" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="717" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a208b56fddd7449cbcd3bb85ceca972f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::VectorIntegral::print</definition>
        <argsstring>(int mode=0, std::ostream &amp;out=std::cout, LibraryMode libMode=LibraryMode::NoLib) const override</argsstring>
        <name>print</name>
        <qualifiedname>csl::VectorIntegral::print</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aed56cb85894209a9bbc9b8bdada5e6ab">print</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>LibraryMode</type>
          <declname>libMode</declname>
          <defval>LibraryMode::NoLib</defval>
        </param>
        <briefdescription>
<para>Displays the abstract in standard output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Tells if the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> is printed alone (default) or in another expr. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="274" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="727" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1aa3fcad92cad86ec27c18b6ad03453da1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::VectorIntegral::printCode</definition>
        <argsstring>(int mode=0, std::ostream &amp;out=std::cout) const override</argsstring>
        <name>printCode</name>
        <qualifiedname>csl::VectorIntegral::printCode</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a2910dd30d90915c11d48c01cab618dda">printCode</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="278" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="749" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a8d48fe368eea528433f18e5d8eb7c3a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>string csl::VectorIntegral::printLaTeX</definition>
        <argsstring>(int mode=0) const override</argsstring>
        <name>printLaTeX</name>
        <qualifiedname>csl::VectorIntegral::printLaTeX</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aa067d4a97135bfe2052a7e21c28f75be">printLaTeX</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a LaTeX output for the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Tells if the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> is printed alone (default) or in another expr. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the LaTeX output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="283" column="17" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="764" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1af1de791cb43ae4cc093394af35354d75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unique_Expr</type>
        <definition>unique_Expr csl::VectorIntegral::copy_unique</definition>
        <argsstring>() const override</argsstring>
        <name>copy_unique</name>
        <qualifiedname>csl::VectorIntegral::copy_unique</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aaa996819710adc3b7529c74a628be623">copy_unique</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="285" column="17" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="787" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a01142ce87c05709f76c267b3fa7b60d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::VectorIntegral::deepCopy</definition>
        <argsstring>() const override</argsstring>
        <name>deepCopy</name>
        <qualifiedname>csl::VectorIntegral::deepCopy</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a09648782dcf2e81abb5b864f476cc410">deepCopy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="287" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="792" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a343587abafa7b586bc561e4ee006c3dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::VectorIntegral::refresh</definition>
        <argsstring>() const override</argsstring>
        <name>refresh</name>
        <qualifiedname>csl::VectorIntegral::refresh</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aaeab3809e91989adbdf29c3f56d905b6">refresh</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="289" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="801" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a4cdc68d467313a0efb3fe8a581fdbfa5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::VectorIntegral::deepRefresh</definition>
        <argsstring>() const override</argsstring>
        <name>deepRefresh</name>
        <qualifiedname>csl::VectorIntegral::deepRefresh</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a10358c33402ed520dc5888b25bb26af3">deepRefresh</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="291" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="806" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1ab3961d7313002bd6e4d0c342bd2cd9a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::VectorIntegral::isIndexed</definition>
        <argsstring>() const override</argsstring>
        <name>isIndexed</name>
        <qualifiedname>csl::VectorIntegral::isIndexed</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractFunc_1a25e37d9d40927ef216a5b10958fa83ba">isIndexed</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the expression is indexed. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="293" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="815" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a5d205d4d8851e175d20412464a6023fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::VectorIntegral::operatorAppliesOn</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>operatorAppliesOn</name>
        <qualifiedname>csl::VectorIntegral::operatorAppliesOn</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractIntegral_1a582655eaae1d2cae4084fbda6f1c64f7">operatorAppliesOn</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="295" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="820" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a2b23eb2012ae1b985e0e2318f11cf3f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1IndexStructure" kindref="compound">IndexStructure</ref></type>
        <definition>IndexStructure csl::VectorIntegral::getIndexStructure</definition>
        <argsstring>() const override</argsstring>
        <name>getIndexStructure</name>
        <qualifiedname>csl::VectorIntegral::getIndexStructure</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractFunc_1a53ef9c900304f02f54ce6ea1485b4537">getIndexStructure</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index structure of the <bold>Indicial</bold> expression </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="297" column="20" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="825" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a2e912283405785f512234ada336ca5dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::VectorIntegral::operator==</definition>
        <argsstring>(Expr_info other) const override</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::VectorIntegral::operator==</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractFunc_1a7ccf43edff01ef8c6500b5117ac42213">operator==</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para><bold>Compares</bold> the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> with another. </para>
        </briefdescription>
        <detaileddescription>
<para>Here if two Abstracts have the same name, the function will return <bold>true</bold> even if they are <bold>not</bold> <bold>mathematically</bold> <bold>equal</bold>. So beware not to name different things the same way. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two Abstracts are the same (or have the same name). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="299" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="870" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a6a1e720e6db9d81db825d18cea8a334a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::VectorIntegral::compareWithDummy</definition>
        <argsstring>(Expr_info expr, std::map&lt; Index, Index &gt; &amp;constraints, bool keepAllCosntraints=false) const override</argsstring>
        <name>compareWithDummy</name>
        <qualifiedname>csl::VectorIntegral::compareWithDummy</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractFunc_1af16a648041a09ff87602427add048ee0">compareWithDummy</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>, <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepAllCosntraints</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Comparison disregarding name of dummy indices, i.e. the two expressions * are equals even if dummy indices have not the same names in *this and * expr. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression to compare.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>List of existing constraints between indices (it is modified in the function).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if expr == *this taking constraints into account. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="301" column="10" bodyfile="src/csl/pseudoIntegral.cpp" bodystart="832" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1VectorIntegral_1a4da2067e2ba3aff6eb4192ffc193501c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::VectorIntegral::operator&lt;</definition>
        <argsstring>(const Abstract *expr) const override</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>csl::VectorIntegral::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/pseudoIntegral.h" line="305" column="5" bodyfile="src/csl/simplification.cpp" bodystart="951" bodyend="974"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>csl::Abstract</label>
        <link refid="classcsl_1_1Abstract"/>
      </node>
      <node id="4">
        <label>csl::AbstractFunc</label>
        <link refid="classcsl_1_1AbstractFunc"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::AbstractIntegral</label>
        <link refid="classcsl_1_1AbstractIntegral"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>csl::Operator&lt; AbstractFunc &gt;</label>
        <link refid="classcsl_1_1Operator"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>csl::VectorIntegral</label>
        <link refid="classcsl_1_1VectorIntegral"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>csl::Abstract</label>
        <link refid="classcsl_1_1Abstract"/>
      </node>
      <node id="4">
        <label>csl::AbstractFunc</label>
        <link refid="classcsl_1_1AbstractFunc"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>argument</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>csl::AbstractIntegral</label>
        <link refid="classcsl_1_1AbstractIntegral"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>inf</edgelabel>
          <edgelabel>sup</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>csl::Expr</label>
        <link refid="classcsl_1_1Expr"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>csl::Operator&lt; AbstractFunc &gt;</label>
        <link refid="classcsl_1_1Operator"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>csl::Tensor</label>
        <link refid="classcsl_1_1Tensor"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>csl::VectorIntegral</label>
        <link refid="classcsl_1_1VectorIntegral"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>variables</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::shared_ptr&lt; TensorParent &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
      <node id="7">
        <label>std::shared_ptr&lt; csl::Abstract &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
    </collaborationgraph>
    <location file="src/csl/pseudoIntegral.h" line="226" column="1" bodyfile="src/csl/pseudoIntegral.h" bodystart="226" bodyend="310"/>
    <listofallmembers>
      <member refid="classcsl_1_1Abstract_1ad5fee68c1f3dcbda0e936926fed17616" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>Abstract</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a5fdb13c5df0c5d7201378c183acb31fa" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>AbstractFunc</name></member>
      <member refid="classcsl_1_1AbstractFunc_1af7f0cfa8c7fa35fe5cdadb16f4068c80" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>AbstractFunc</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a768cb8883d6026ba7ae1aca27c1de704" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>AbstractIntegral</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1ae4e5cd802c28baad82624873c49c47a6" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>AbstractIntegral</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a438c55ac162ea1bcbb7ba76e9a9d1efa" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>AbstractIntegral</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1afd84b9992342e5afccd2885c8b02acc0" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>AbstractIntegral</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1aefdf13a005cfab6fd6577a68d086072b" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>AbstractIntegral</name></member>
      <member refid="classcsl_1_1Abstract_1a5549ac0c186b3c6febf332245a25a82c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>addAntiSymmetry</name></member>
      <member refid="classcsl_1_1Abstract_1abbab11282e5c6ac46b018642ff129f47" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>addDependency</name></member>
      <member refid="classcsl_1_1Abstract_1a101219973341a39cf15f07e5e1aa388f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>addition_own</name></member>
      <member refid="classcsl_1_1Abstract_1ad431770faa4291116a50175193a11a88" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1Abstract_1acd972aed8326d4c13534594e061ee6da" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>antisymmetrise</name></member>
      <member refid="classcsl_1_1Abstract_1a61d3ab932182226f4670a62bbb22af4e" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>applyDiracDelta</name></member>
      <member refid="classcsl_1_1Operator_1ae9da277be3e179944e647d54acf13eea" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>applyOperator</name></member>
      <member refid="classcsl_1_1Abstract_1a6305ce90c795bfb416d8e958c62f905c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>applySelfStructureOn</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a9ffcf8afbee0a103421280b82cfffe05" prot="protected" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>argument</name></member>
      <member refid="classcsl_1_1Abstract_1a27ad666bf7d533607da9675b0c645ee9" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>askTerm</name></member>
      <member refid="classcsl_1_1Abstract_1aad54ed41b2ce9bad3364fe30ad1a0d71" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>begin</name></member>
      <member refid="classcsl_1_1Abstract_1adff373df9477d4e38581d09cc6d2fee4" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>begin</name></member>
      <member refid="classcsl_1_1Abstract_1aa4cba37520821432f37e212fefbc2534" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1Abstract_1af0f40b77914e45f56bf87839d00211d7" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1Abstract_1afd9d0336808e8adf4ccdccb51587ed8c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>checkIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a1ebd84082bb93418408cc0babe2dffe2" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>checkIndexStructure</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a2b1a66c3b926cd7a95060464a3bb6a62" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>collect</name></member>
      <member refid="classcsl_1_1Operator_1adc9dd8a7ee3c9092e6d94d88d3e9f9fe" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>commutesWith</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a6a1e720e6db9d81db825d18cea8a334a" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Abstract_1a0f16fda9fe72a89c61ece36101a11d95" prot="public" virt="non-virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Abstract_1aed79d20a0821205e6430c80a474117d3" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>contractIndex</name></member>
      <member refid="classcsl_1_1Abstract_1ad874fc858295a737e6ce884530f1109b" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>contraction</name></member>
      <member refid="classcsl_1_1Abstract_1abd35096982e92b669ea55d960c5f44be" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>contraction</name></member>
      <member refid="classcsl_1_1Abstract_1af29c2898c5d3ba96de8018a0838c402c" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>copy</name></member>
      <member refid="classcsl_1_1VectorIntegral_1af1de791cb43ae4cc093394af35354d75" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>copy_unique</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a01142ce87c05709f76c267b3fa7b60d6" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>deepCopy</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a4cdc68d467313a0efb3fe8a581fdbfa5" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>deepRefresh</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1ab675c7672e9523a8fdfaf71f9741bb93" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1AbstractFunc_1aa5181cc8b11edcdb189ca7491cf6ba82" prot="public" virt="virtual" ambiguityscope="csl::Operator&lt; AbstractFunc &gt;::"><scope>csl::VectorIntegral</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a72eadc4f6452f7139be88c9bfe0c8649" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a5a673413acf9af84d86f9f8508d63e94" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1Abstract_1a9d7d8586a0df66ba8da33528d6400e66" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a9570853b5def96e519e54fc81a14f840" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>derive</name></member>
      <member refid="classcsl_1_1Abstract_1aeb08811cf370616477a92075e4a218ee" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>determinant</name></member>
      <member refid="classcsl_1_1Abstract_1a1578c74aee1050b806a67e7a81a67f5c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>division_own</name></member>
      <member refid="classcsl_1_1Abstract_1a4cc7a46deaa3eaa7593909d74e76d4af" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>dot</name></member>
      <member refid="classcsl_1_1Operator_1aaf3e5ccf31c2699000627096abaa9ba8" prot="protected" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>empty</name></member>
      <member refid="classcsl_1_1Abstract_1a0c3c3fe5010f24e8a8765ea06415c003" prot="public" virt="virtual" ambiguityscope="csl::AbstractFunc::"><scope>csl::VectorIntegral</scope><name>empty</name></member>
      <member refid="classcsl_1_1Abstract_1a61e4e80d998a888a1a74d9ea3e10c0f1" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>end</name></member>
      <member refid="classcsl_1_1Abstract_1ae2761d54f13310e13f5076d565edd7ef" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>end</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ab3f59cae46f77a34ecd0965c853e0287" prot="protected" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>evalNumerical</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a03f67aec1f7e9b74fd65383e0fc6600f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>evaluate</name></member>
      <member refid="classcsl_1_1Abstract_1a543d5a4f0432e166b492ad28a860a65f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>evaluateScalar</name></member>
      <member refid="classcsl_1_1Operator_1a7e4ec8aa653557544dd3063af72d816f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>expand</name></member>
      <member refid="classcsl_1_1Operator_1a453d864df2f26dcedca00592cc49ea55" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>expand_if</name></member>
      <member refid="classcsl_1_1Abstract_1aa2696a0feb43766ef54e1e3dd3d6d134" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>exponentiation_own</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ad13204b56adf098d9c4b886ea7b8681f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>factor</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a281d2d19b84b9b5fec66dbf1eb89a27d" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>factor</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a2844b245ea8608c32be1ae2794a12858" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>findSubExpression</name></member>
      <member refid="classcsl_1_1Abstract_1a021946e84d8c1a019908cac578b16fe8" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getAllDependencies</name></member>
      <member refid="classcsl_1_1AbstractFunc_1adf8cb8650883f5ea7729cdabec2aeab0" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1AbstractFunc_1af02355fee3c7cda15993cfcf553d6f92" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a898d6cf2a7f348feacab189447bee1eb" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1aa689fb64eecb86edbde6c745d1ce756b" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1afeb26e1382411448ce3c65d50fefd8bb" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getCanonicalPermutation</name></member>
      <member refid="classcsl_1_1Operator_1aa26c6f1e6a43ab0d529c170466e810b0" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getCommutable</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ae67e2d46dfb78e3278fc2134b7d039e4" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getComplexArgument</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a3a466c8804d5c855dd2b906be2b1be5f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getComplexConjugate</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a83aa54cdff8a16f0a305358d992096f1" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getComplexModulus</name></member>
      <member refid="classcsl_1_1Abstract_1a470d9f1267fba4a82e13af4a39470f81" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getComplexProperty</name></member>
      <member refid="classcsl_1_1Abstract_1af04c0e4426f0bf9df365afe0148d59df" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getContractedPair</name></member>
      <member refid="classcsl_1_1Abstract_1aec707d949f0f98e08ab4642c93dd9eb5" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getContractionProperties</name></member>
      <member refid="classcsl_1_1Abstract_1aa22f0e4c9c91f43b5cd61cbb873869eb" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getDeltaMinus</name></member>
      <member refid="classcsl_1_1Abstract_1a69a657baf1c35ed581e9db2c47a71c99" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getDeltaPlus</name></member>
      <member refid="classcsl_1_1Abstract_1a9531d78d67c82e288c0130da5b1ba80b" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getDenom</name></member>
      <member refid="classcsl_1_1Abstract_1a5856c3d55a6d1406970f3656e61efe8e" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getDim</name></member>
      <member refid="classcsl_1_1Abstract_1a77e067fc57c0c2e70d141079455fdbd7" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getElementary</name></member>
      <member refid="classcsl_1_1Abstract_1ac513c930caa9939c2b9557f36a34ee69" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getExponents</name></member>
      <member refid="classcsl_1_1Abstract_1ac34c9c6f05e692faeed2f030514787ad" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getFactors</name></member>
      <member refid="classcsl_1_1Abstract_1aa4136dc23f1fba4bf897b54c8592ccfc" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getFreeIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1aa5b707a5efdaef7c7945cbd921c3f526" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getHermitianConjugate</name></member>
      <member refid="classcsl_1_1Abstract_1aff5cca2b2c8190e59f6e34cb1e383d36" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getHermitianConjugate</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a24aee4ffda2255a56fd2eb2e04c9baad" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getImaginaryPart</name></member>
      <member refid="classcsl_1_1Abstract_1a3234ce243f6a2e11950be42f10100943" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getIndex</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a2b23eb2012ae1b985e0e2318f11cf3f5" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1ae6a9a9ef3efd6bb83b62c0a353742d25" prot="public" virt="non-virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>getIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1addb848bf4cdea207484a71e9b1006ead" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getIndexStructureView</name></member>
      <member refid="classcsl_1_1Abstract_1a632e28530a68539fadacd7ab7ffc8be1" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getIndexStructureView</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a5e2cb02036b59f4464171827f6ee571c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getInfBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1a9c4a302d1a3cbf4dd9394f5e5880d343" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getLatexName</name></member>
      <member refid="classcsl_1_1Abstract_1a652101e34b2efa43114150e9af3c79d5" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getLibDependency</name></member>
      <member refid="classcsl_1_1Abstract_1af7f5e7466e754984a2c4394a112464f7" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getName</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ae32e5909a9d7616ceac05b22a74b1284" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getNArgs</name></member>
      <member refid="classcsl_1_1Abstract_1a42125e9765a771c47819548d342b0b28" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getNContractedPairs</name></member>
      <member refid="classcsl_1_1Abstract_1a204dbd37b63432cb08932b995f49d3f4" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getNFactor</name></member>
      <member refid="classcsl_1_1Abstract_1add364193f7a78ac28f7001c7f4036453" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getNIndices</name></member>
      <member refid="classcsl_1_1Abstract_1a6aa6bcc7cb8ee1574f29dc6ab6c6f0ed" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getNum</name></member>
      <member refid="classcsl_1_1Abstract_1aad25c117c8dfc4d9718ba41e8d3f33a6" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getNumericalFactor</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a0e22ef62f91cf61f7d3067d7ae4af007" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getOperand</name></member>
      <member refid="classcsl_1_1Abstract_1a9500a21d75d03c695ec0c76493600b38" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getOrder</name></member>
      <member refid="classcsl_1_1Abstract_1ae89eb7b1a9e0259a60154563f3315907" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getOrderOf</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a956aaa1428471ce72c9c273cd5ce4ac8" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getParent</name></member>
      <member refid="classcsl_1_1VectorIntegral_1afc921c41b5d2519cf1aa69be77c3c42a" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getParent_info</name></member>
      <member refid="classcsl_1_1Abstract_1aea8459b3206eb3a2297eeea7688e9520" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getParity</name></member>
      <member refid="classcsl_1_1Abstract_1a946d175d946da102c5f4cc91840703cb" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getPermutations</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a9d3a9a67f2990981805efd146e6fc6fe" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getPoint</name></member>
      <member refid="classcsl_1_1Abstract_1ade540a127da7304f2b7282f4dcaffc7f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getPolynomialTerm</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a18df1a5dbd7c9c75b1704fe958a55a5d" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getPrimaryType</name></member>
      <member refid="classcsl_1_1Abstract_1a07489d0569bc983718796d21c73f34b3" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getProduct</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ab1d0e4f2b4d063838158829972c2160a" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getRealPart</name></member>
      <member refid="classcsl_1_1Abstract_1a5b77f008f4b95030641224877004f06c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getRegularExpression</name></member>
      <member refid="classcsl_1_1Abstract_1a625efe55a17b97a1c0f085bdbf3a962a" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getShape</name></member>
      <member refid="classcsl_1_1Abstract_1aa83df1d9dc202457113e5b38bd694fae" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSign</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a0d3f88b1d12d0900184101720f8e345b" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSubSymbols</name></member>
      <member refid="classcsl_1_1Abstract_1a7dcdc11b64c8c515933882168d0792ef" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a413c50b2663f57d38c1d3ec3cfeaa3ce" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a26a0854bca4c47e84a1da36a3de8c49f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a29261a946b3398b6129237620754a8b9" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a8a067b70756c4eef758aa88076a95162" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1aeaf8154e39ff211b12e6382e675ccaad" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSum</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a47ca4952bec0b1baa08f38560d287adf" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getSupBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1a1d36e7a5acc50766d5cd3f6d59df978d" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getTerm</name></member>
      <member refid="classcsl_1_1Abstract_1a404c5e89a3aad8a8dabcb56d4120c0fe" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getTransposed</name></member>
      <member refid="classcsl_1_1Abstract_1aca3debb143668fd3ab75a27a47dd0c13" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getTransposed</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a514f7d0f5a9cff6c43d786717a030ad7" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getType</name></member>
      <member refid="classcsl_1_1Abstract_1a78f98ba06476e464e3fd2fce0d1f8243" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getValue</name></member>
      <member refid="classcsl_1_1Abstract_1a628563238145f3a9acc331f1a89ce32f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getValued</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a0bdc27a5f2a2533af9aaf96f4582ed07" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getVariable</name></member>
      <member refid="classcsl_1_1Abstract_1ac83c44ae1e5315a38083bdb7acd8f3fa" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getVectorArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a0188b049736016c970a2513ed9f6931f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>getVectorialModulus</name></member>
      <member refid="classcsl_1_1Abstract_1a94bf1455397fdd2df8dbbc3b41c2f3f4" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>hasChainContractionProperty</name></member>
      <member refid="classcsl_1_1Abstract_1aa31e08c251d96b8ea8ec8d385895c1ff" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>hasContractionProperty</name></member>
      <member refid="classcsl_1_1Abstract_1a8c42723e8bc6334c99f00898cc1d59d7" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>hermitian</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1aa80cbef2c0f07ed059ca680a7bf15555" prot="protected" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>inf</name></member>
      <member refid="classcsl_1_1Abstract_1a5437e7f685edf8549e6d3b34572343f8" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>insert</name></member>
      <member refid="classcsl_1_1Abstract_1a1b68943aa7ecf60a63af0f2f368eef8f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>inverseMatrix</name></member>
      <member refid="classcsl_1_1Operator_1a740ec7cf6f100e21ab3e6e1dde93374b" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isAnOperator</name></member>
      <member refid="classcsl_1_1Abstract_1ac09992d147b39388c8936b3bff648930" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isArbitrary</name></member>
      <member refid="classcsl_1_1Abstract_1ad74c068f1da78856321932b6b6ae17dc" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isBuildingBlock</name></member>
      <member refid="classcsl_1_1Abstract_1a22a594845a29429c9b4f19c92bd18cad" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isComplexConjugate</name></member>
      <member refid="classcsl_1_1Operator_1aee71c873c2f3042ea748f1e9e07f7d6c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isEmpty</name></member>
      <member refid="classcsl_1_1Abstract_1af2ce38838e35c5785f92373a1d830668" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isHermitianConjugate</name></member>
      <member refid="classcsl_1_1VectorIntegral_1ab3961d7313002bd6e4d0c342bd2cd9a1" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isIndexed</name></member>
      <member refid="classcsl_1_1Abstract_1a9a014bfd266b5f8471f23580e271979b" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isInteger</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a699c366fc3c292e8a70941e1c4ee5b0c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isPolynomial</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ade1aa692134fee323c2a20824932b506" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isPurelyImaginary</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ae6828f21be014625ca502d5f40981502" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>isReal</name></member>
      <member refid="classcsl_1_1Abstract_1ab79c1d8df9e6b1a3eca66958f7dc489d" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>matchShape</name></member>
      <member refid="classcsl_1_1Abstract_1ac3978c71035bf1cda50f5b9031d631af" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>memoryOverhead</name></member>
      <member refid="classcsl_1_1Abstract_1a4f5ed458ba62f5b4cf61a9e1f8568af1" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>multiplication_own</name></member>
      <member refid="classcsl_1_1Operator_1abeb8555c87e755baed2b7caff64cbb70" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>Operator</name></member>
      <member refid="classcsl_1_1Operator_1ac46d14c2b95625f96bb07d65713ef139" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>Operator</name></member>
      <member refid="classcsl_1_1Abstract_1af5b62a6308638064c42da80e9cc2cb7e" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1af4fd1b57df371dac7ccfd5a909620e49" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a96de5935a58a96d4c5b1e47966488923" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1ac99a619abde7e4c58f39e14d4d20fcf5" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a45206de7c7773b3cb150451ee3eb379e" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a0d3495220202bd417c1b58249c923f39" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a4da2067e2ba3aff6eb4192ffc193501c" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a5c1ba8dce7fbc19eb98807bd15a279c9" prot="public" virt="pure-virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a6e19587260a07dba65cf2a985e05516b" prot="public" virt="non-virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a2a1660498f2638f5e490d6e512eb32f4" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Abstract_1afbcac6df2fd7ac11f336189cf215124b" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Abstract_1a59ff2950fc8ca319f87a730450f14545" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>operator=</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a2e912283405785f512234ada336ca5dd" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a8334e14cd5789168b037d3888ed60edd" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a12d929e34039e817e464abc560bd4a9d" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a1f78f0cce24c93def3050743bc5f2845" prot="public" virt="non-virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1aed43debcac4a19e0da44986774c522bc" prot="public" virt="non-virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a2376f08c0aa5ffe783090381d102d3ae" prot="public" virt="non-virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a485c6f3e10db539a70416cd0766b117d" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Abstract_1ab305bdf49212f03781e7f98024faeb66" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Abstract_1a4c8883df19d7538b68fa96aadac9dfa9" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1Abstract_1a6b931f7b159d57bad26ca9c9ea729aa1" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1AbstractFunc_1af3afc58a715c978290e4860101fb3c27" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ab6a82539b4c61521f13b39bf1b230e68" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a5d205d4d8851e175d20412464a6023fb" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>operatorAppliesOn</name></member>
      <member refid="classcsl_1_1Abstract_1abe9aceabbc0a99642e84c9025dbdc767" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>permut</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a208b56fddd7449cbcd3bb85ceca972f6" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>print</name></member>
      <member refid="classcsl_1_1VectorIntegral_1aa3fcad92cad86ec27c18b6ad03453da1" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>printCode</name></member>
      <member refid="classcsl_1_1Abstract_1a89e45ffc7b65f92e77e592f76f70934c" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>printExplicit</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a8d48fe368eea528433f18e5d8eb7c3a8" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>printLaTeX</name></member>
      <member refid="classcsl_1_1Abstract_1a0645745feacf93470963b55f93cae1c0" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>printProp</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a343587abafa7b586bc561e4ee006c3dd" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>refresh</name></member>
      <member refid="classcsl_1_1Abstract_1a8aab87c41acafaf1b1837b922495560d" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>regularLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1a2fe749450d2e610199801b189dc3d0f8" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>regularLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1aba5ef083016b2f3d9e6271f864b9b063" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>regularName</name></member>
      <member refid="classcsl_1_1Abstract_1a1a8421d402d5ba82257188b545e8d668" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>regularName</name></member>
      <member refid="classcsl_1_1Abstract_1a0e778c682b6cb02642b90e8ec8765441" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>removeDependency</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a0714debb1e4fe6d8b6bf1b915771b30c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>replaceIndex</name></member>
      <member refid="classcsl_1_1Abstract_1a9372ddd521fa661c5d3371e0d8d4dfc3" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>replaceIndexInPlace</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ad1203eab976b86d48100179c93d05178" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>replaceIndices</name></member>
      <member refid="classcsl_1_1Abstract_1af0d95f3edc0562b1d75d60b670119842" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>resetIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a5c796713828ebfb74a7d8787d7802a76" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>self</name></member>
      <member refid="classcsl_1_1Abstract_1aa6a40ceb6eb1aa79711ca126d5bdda02" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setAllDependencies</name></member>
      <member refid="classcsl_1_1AbstractFunc_1a701d14b482a47a85c6cd5266118604cb" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a45c3adb7ba4e2b8442247246a3792b44" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::VectorIntegral</scope><name>setArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a7bb29d316b8f64652cef472a6c23f001" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setCommutable</name></member>
      <member refid="classcsl_1_1Abstract_1ae35385480a1be08f5e7433535b58ac0b" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setComplexProperty</name></member>
      <member refid="classcsl_1_1Abstract_1a37ebc247831d6629d44117a490fca120" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setConjugated</name></member>
      <member refid="classcsl_1_1Abstract_1aa6a04bb56578e7da143b3cd8d8fb7b26" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setElementary</name></member>
      <member refid="classcsl_1_1Operator_1a79761fde19842386022873d3332d2454" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setEmpty</name></member>
      <member refid="classcsl_1_1Abstract_1ac318016372d14b795893fe7e59199084" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setFullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1Abstract_1a4f90ebb7cf7c26782bd36bc2a67fc5d4" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setFullySymmetric</name></member>
      <member refid="classcsl_1_1Abstract_1a70f946f9c59df045ef7416320ade89c7" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setIndexStructure</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a1094c1bb7a0748fa855b8f2c2bb8705f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setInfBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1a867135c96776248add60018f4aa7a578" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setName</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1a65250576bfa5547fe8eb17c37e0d3ed7" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setOperand</name></member>
      <member refid="classcsl_1_1Operator_1a5a4637f0cc00891717e62a6bdfbd212f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setOperandPrivate</name></member>
      <member refid="classcsl_1_1VectorIntegral_1aee6ef6c5969f6a2ff6bd7855fcf8862e" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setParent</name></member>
      <member refid="classcsl_1_1Abstract_1a3c175411df619e7504feb6d888fc82f1" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setPoint</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1ac6597e5d240e330fe823c42ba1a55d5f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setSupBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1aaf7f0692cb84ca861a5b3b641bea518b" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Abstract_1aa49c51bd285830e724f103e9fb61c464" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Abstract_1aa47ddab3aa047e86be34c70358d53548" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setVariable</name></member>
      <member refid="classcsl_1_1Abstract_1a83fee8ed28079bcac107455d58be9d5d" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>setVectorArgument</name></member>
      <member refid="classcsl_1_1AbstractFunc_1ab02f71922f94812d9ef24766ce51aaa2" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>size</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1acd0a379bc3f24fa1f37a812e502d9d0a" prot="protected" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>sup</name></member>
      <member refid="classcsl_1_1Abstract_1a4eeedaeaa39e75facf1060dce7c57a8f" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>suppressExponent</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1ac5fa23e3bd78501937629e10d1938ea5" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>suppressTerm</name></member>
      <member refid="classcsl_1_1Abstract_1a4faf1ffd8cb3b6c721e128980c0303d8" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>symmetrise</name></member>
      <member refid="classcsl_1_1Abstract_1a7b83c6a13716688f45b02e6291d39aba" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>tensordot</name></member>
      <member refid="classcsl_1_1Abstract_1aee4fa41a5e014f067395467542ee8831" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>testDummy</name></member>
      <member refid="classcsl_1_1Abstract_1a9a86d21f5c5f65eb7e524a8f8002c0e7" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>trace</name></member>
      <member refid="classcsl_1_1Abstract_1aacab43e551e9259a39a79378373ce49c" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>trace</name></member>
      <member refid="classcsl_1_1Abstract_1a1e97712696e5c40b28bc1e35987fea94" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>transpose</name></member>
      <member refid="classcsl_1_1VectorIntegral_1ae178e75f03298dfde742239e70e15c4f" prot="protected" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>variables</name></member>
      <member refid="classcsl_1_1VectorIntegral_1acafe20b8d111e85ae9fa4a6425e16f35" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>VectorIntegral</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a3352b2cf9fb4f2c00a47f3e96134f2ca" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>VectorIntegral</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a95257dd95a89c4df68e66f71c2ba4c8b" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>VectorIntegral</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a7261bf89a5b48573d6c471c3769e9333" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>VectorIntegral</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a7bba959d5926979a0a772ff5b59f07ae" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>VectorIntegral</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a03b55ab2b1fc67cf2c5f7fb7f0ee858e" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>VectorIntegral</name></member>
      <member refid="classcsl_1_1VectorIntegral_1a432e99290a0308db06985e3b05946c94" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>VectorIntegral</name></member>
      <member refid="classcsl_1_1Abstract_1a40bdc4c76fdbbf3cbac3af4dce8286ed" prot="public" virt="virtual"><scope>csl::VectorIntegral</scope><name>~Abstract</name></member>
      <member refid="classcsl_1_1AbstractIntegral_1aa3e51512953288ae5f34dff91d067129" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>~AbstractIntegral</name></member>
      <member refid="classcsl_1_1Operator_1ad0d3e7465277ab30bc11413410daea6e" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>~Operator</name></member>
      <member refid="classcsl_1_1VectorIntegral_1af928caed3db0a3e8f5042fdf1a8baf21" prot="public" virt="non-virtual"><scope>csl::VectorIntegral</scope><name>~VectorIntegral</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
