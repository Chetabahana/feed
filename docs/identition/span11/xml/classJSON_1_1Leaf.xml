<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classJSON_1_1Leaf" kind="class" language="C++" prot="public">
    <compoundname>JSON::Leaf</compoundname>
    <basecompoundref refid="classJSON_1_1AbstractLeaf" prot="public" virt="non-virtual">JSON::AbstractLeaf</basecompoundref>
    <basecompoundref refid="classJSON_1_1AbstractLeaf" prot="public" virt="non-virtual">JSON::AbstractLeaf</basecompoundref>
    <includes refid="gui_2jsonObject_8h" local="no">jsonObject.h</includes>
    <templateparamlist>
      <param>
        <type>typename Type</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classJSON_1_1Leaf_1aad2004012c9e93b6211427c7d936935b" prot="private" static="no" mutable="yes">
        <type>Type</type>
        <definition>Type JSON::Leaf&lt; Type &gt;::argument</definition>
        <argsstring></argsstring>
        <name>argument</name>
        <qualifiedname>JSON::Leaf::argument</qualifiedname>
        <briefdescription>
<para>Argument of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref>. Final position on <ref refid="namespaceJSON" kindref="compound">JSON</ref> tree, contains the int, double, string, ..., needed further in the program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="402" column="18" bodyfile="src/grafed/gui/jsonObject.h" bodystart="402" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classJSON_1_1Leaf_1afd167d257bd3d5eb6c4fbae418ec5c85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSON::Leaf&lt; Type &gt;::Leaf</definition>
        <argsstring>(std::string const &amp;specifier, Type t_argument)</argsstring>
        <name>Leaf</name>
        <qualifiedname>JSON::Leaf::Leaf</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>specifier</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>t_argument</declname>
        </param>
        <briefdescription>
<para>Constructor with two paramters. The specifier and the argument of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>specifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref>&apos;s specifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref> (can be an int, a double, a string...). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="361" column="5" bodyfile="src/grafed/gui/jsonObject.h" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Leaf_1aa33003be8a94d34e18c01a510396d63a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string JSON::Leaf&lt; Type &gt;::getArgument</definition>
        <argsstring>() const</argsstring>
        <name>getArgument</name>
        <qualifiedname>JSON::Leaf::getArgument</qualifiedname>
        <reimplements refid="classJSON_1_1AbstractLeaf_1a1c34586e3ac3102b14e051492be424c5">getArgument</reimplements>
        <briefdescription>
<para>Returns a std::string representing the argument of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The std::string corresponding to the argument. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="371" column="17" bodyfile="src/grafed/gui/jsonObject.h" bodystart="371" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Leaf_1ac0f1194a5ee92d40fd011aa3427b3ec9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type JSON::Leaf&lt; Type &gt;::getTypedArgument</definition>
        <argsstring>() const</argsstring>
        <name>getTypedArgument</name>
        <qualifiedname>JSON::Leaf::getTypedArgument</qualifiedname>
        <briefdescription>
<para>Returns the bare argument with its own type, not a string (like the function <ref refid="classJSON_1_1Leaf_1aa33003be8a94d34e18c01a510396d63a" kindref="member">getArgument()</ref> does). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>argument</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="392" column="10" bodyfile="src/grafed/gui/jsonObject.h" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Leaf_1afd167d257bd3d5eb6c4fbae418ec5c85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSON::Leaf&lt; Type &gt;::Leaf</definition>
        <argsstring>(std::string const &amp;specifier, Type t_argument)</argsstring>
        <name>Leaf</name>
        <qualifiedname>JSON::Leaf::Leaf</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>specifier</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>t_argument</declname>
        </param>
        <briefdescription>
<para>Constructor with two paramters. The specifier and the argument of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>specifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref>&apos;s specifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref> (can be an int, a double, a string...). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="361" column="5" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Leaf_1aa33003be8a94d34e18c01a510396d63a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string JSON::Leaf&lt; Type &gt;::getArgument</definition>
        <argsstring>() const</argsstring>
        <name>getArgument</name>
        <qualifiedname>JSON::Leaf::getArgument</qualifiedname>
        <reimplements refid="classJSON_1_1AbstractLeaf_1a1c34586e3ac3102b14e051492be424c5">getArgument</reimplements>
        <briefdescription>
<para>Returns a std::string representing the argument of the <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The std::string corresponding to the argument. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="371" column="17" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="371" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Leaf_1ac0f1194a5ee92d40fd011aa3427b3ec9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type JSON::Leaf&lt; Type &gt;::getTypedArgument</definition>
        <argsstring>() const</argsstring>
        <name>getTypedArgument</name>
        <qualifiedname>JSON::Leaf::getTypedArgument</qualifiedname>
        <briefdescription>
<para>Returns the bare argument with its own type, not a string (like the function <ref refid="classJSON_1_1Leaf_1aa33003be8a94d34e18c01a510396d63a" kindref="member">getArgument()</ref> does). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>argument</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="392" column="10" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="392" bodyend="395"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classJSON_1_1Leaf_1ab95e21245d095a50f8f21bd19c1fa009" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref></type>
        <definition>static Child JSON::Leaf&lt; Type &gt;::make</definition>
        <argsstring>(std::string const &amp;specifier, Type t_argument)</argsstring>
        <name>make</name>
        <qualifiedname>JSON::Leaf::make</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>specifier</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>t_argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="366" column="18" bodyfile="src/grafed/gui/jsonObject.h" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Leaf_1ab95e21245d095a50f8f21bd19c1fa009" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref></type>
        <definition>static Child JSON::Leaf&lt; Type &gt;::make</definition>
        <argsstring>(std::string const &amp;specifier, Type t_argument)</argsstring>
        <name>make</name>
        <qualifiedname>JSON::Leaf::make</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>specifier</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>t_argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="366" column="18" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="366" bodyend="369"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Template class inherited from <ref refid="classJSON_1_1Object" kindref="compound">Object</ref> that stores a parameter of a .json file. This class does not have any child or structure, simply contains final values (double, int, string, ...). </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the parameter read in the .json file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>JSON::AbstractLeaf</label>
        <link refid="classJSON_1_1AbstractLeaf"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>JSON::Leaf&lt; Type &gt;</label>
        <link refid="classJSON_1_1Leaf"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>JSON::Object</label>
        <link refid="classJSON_1_1Object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>JSON::AbstractLeaf</label>
        <link refid="classJSON_1_1AbstractLeaf"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>JSON::Leaf&lt; Type &gt;</label>
        <link refid="classJSON_1_1Leaf"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>JSON::Object</label>
        <link refid="classJSON_1_1Object"/>
      </node>
    </collaborationgraph>
    <location file="src/grafed/gui/jsonObject.h" line="351" column="1" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="351" bodyend="403"/>
    <listofallmembers>
      <member refid="classJSON_1_1AbstractLeaf_1a4f70a0de0369eb37356c075bdd9af1bd" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>AbstractLeaf</name></member>
      <member refid="classJSON_1_1AbstractLeaf_1a4f70a0de0369eb37356c075bdd9af1bd" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>AbstractLeaf</name></member>
      <member refid="classJSON_1_1Leaf_1aad2004012c9e93b6211427c7d936935b" prot="private" virt="non-virtual"><scope>JSON::Leaf</scope><name>argument</name></member>
      <member refid="classJSON_1_1Leaf_1aa33003be8a94d34e18c01a510396d63a" prot="public" virt="virtual"><scope>JSON::Leaf</scope><name>getArgument</name></member>
      <member refid="classJSON_1_1Leaf_1aa33003be8a94d34e18c01a510396d63a" prot="public" virt="virtual"><scope>JSON::Leaf</scope><name>getArgument</name></member>
      <member refid="classJSON_1_1Object_1ae3c04b4483cfe3b2879e9b5a1e79a5e3" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>getSpecifier</name></member>
      <member refid="classJSON_1_1Object_1ae3c04b4483cfe3b2879e9b5a1e79a5e3" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>getSpecifier</name></member>
      <member refid="classJSON_1_1Leaf_1ac0f1194a5ee92d40fd011aa3427b3ec9" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>getTypedArgument</name></member>
      <member refid="classJSON_1_1Leaf_1ac0f1194a5ee92d40fd011aa3427b3ec9" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>getTypedArgument</name></member>
      <member refid="classJSON_1_1Object_1a941a79c1ca10023f8e8e77e60b23e3f8" prot="public" virt="virtual"><scope>JSON::Leaf</scope><name>isNode</name></member>
      <member refid="classJSON_1_1Object_1a941a79c1ca10023f8e8e77e60b23e3f8" prot="public" virt="virtual"><scope>JSON::Leaf</scope><name>isNode</name></member>
      <member refid="classJSON_1_1Leaf_1afd167d257bd3d5eb6c4fbae418ec5c85" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>Leaf</name></member>
      <member refid="classJSON_1_1Leaf_1afd167d257bd3d5eb6c4fbae418ec5c85" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>Leaf</name></member>
      <member refid="classJSON_1_1Leaf_1ab95e21245d095a50f8f21bd19c1fa009" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>make</name></member>
      <member refid="classJSON_1_1Leaf_1ab95e21245d095a50f8f21bd19c1fa009" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>make</name></member>
      <member refid="classJSON_1_1Object_1a534b719c1190ea30c0a9ab9d12f8f619" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>Object</name></member>
      <member refid="classJSON_1_1Object_1a534b719c1190ea30c0a9ab9d12f8f619" prot="public" virt="non-virtual"><scope>JSON::Leaf</scope><name>Object</name></member>
      <member refid="classJSON_1_1Object_1a496b17f83c592bbb92720e5288abd172" prot="protected" virt="non-virtual"><scope>JSON::Leaf</scope><name>specifier</name></member>
      <member refid="classJSON_1_1Object_1a6611414d3cba6dc3028378f88847bb9a" prot="public" virt="virtual"><scope>JSON::Leaf</scope><name>~Object</name></member>
      <member refid="classJSON_1_1Object_1a6611414d3cba6dc3028378f88847bb9a" prot="public" virt="virtual"><scope>JSON::Leaf</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
