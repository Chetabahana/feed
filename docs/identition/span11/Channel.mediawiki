''Diagram Channel'' adalah interface ''[[Route|Diagram Route]]'' yang merupakan pewarisan dari ''[[Grammar|Diagram Grammar]]'', dimana ''Diagram Grammar'' adalah pewarisan dari ''[[Sequence|Diagram Sequence]]''. 
__TOC__

==Struktur==

Sesuai dengan karakternya sebagai [[diagram class|https://en.wikipedia.org/wiki/Class_diagram]] maka berdasarkan ''[[Diagram#polymorphism|Konsep Polymorphism]]'' diagram ini digunakan untuk [[visualisasi hubungan|https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model]] antar ''[[Diagram#class|Class]]'' dari ''[[Pola Kerja|https://github.com/MarketLeader/marketleader.github.io/wiki]]'':   

[[https://user-images.githubusercontent.com/36441664/83415235-031cac00-a449-11ea-82c0-c16f41d63435.jpg]]

Seperti yang sudah dijelaskan pada topik ''[[Diagram#pewarisan|Type Diagram]]'', Diagram Channel adalah [[Grammar#pewarisan|pewarisan]] dari penelusuran ''[[Diagram#abstraction|Pola Abstraction]]'' yang dilakukan pada ''[[Grammar#metode|Diagram Grammar]]''. 

[[<img src=https://user-images.githubusercontent.com/36441664/71197052-5c41ba80-22c3-11ea-9b25-580b0dce33da.png width=600>|https://www.tedinski.com/2018/06/26/variance.html]]  

Pada sesi ini kita akan batasi pembahasan kedalam penggunaan diagram ini saja, mengenai detil [[paketnya|https://github.com/chetabahana/channel]] akan dibahas terpisah dibagian [[dokumentasi repository |https://github.com/chetabahana/channel/wiki]] terkait.

[[<img src=https://user-images.githubusercontent.com/36441664/70093176-74260700-1652-11ea-9201-7a83a10fc39c.png>|https://chetabahana.github.io/channel/samples/minimal.html]]

* Developer: [[Northwoods Software|https://github.com/NorthwoodsSoftware/GoJS]]
* Case Study: [[GitHub Action|https://github.com/chetabahana/channel/actions]] & [[Wiki|https://github.com/chetabahana/channel/wiki]]
* Demo: [[Test Page|https://chetabahana.github.io/channel/samples/entityRelationship.html]] & [[Project Section|https://chetabahana.github.io/#chetabahana-skema?pad=4]]

===Model===
Pewarisan ini akan digunakan sebagai interface dari ''[[Route#metode|Diagram Route]]'' guna penelusuran class dengan ''[[Diagram#inheritance|Pola Inheritance]]''. 

* Secara [[Diagram#etimologi|Etimology]] Diagram Channel mengacu ke ''[[Grammar|Diagram Grammar]]''
* Secara [[Diagram#terminologi|Terminology]] memiliki turunan seperti yang [[Channel#prinsip|didefinisikan]] di bawah ini
* Secara [[Diagram#kaidah-kognitif|Kaidah Kognitif]] mengacu ke [[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki/Implementasi#matriks]] dengan jumlah total: ''[[Channel#identifikasi|28 pewarisan]]''

Untuk memudahkan dalam visualisasi proses yang sudah dilakukan sampai ke tahap Diagram Channel ini maka bentuk skemanya dapat digambarkan seperti ''[[jaring laba-laba|https://en.wikipedia.org/wiki/Spider_silk]]'' berikut ini.  

[[<img src=https://user-images.githubusercontent.com/36441664/70738429-3ce8e180-1d47-11ea-929a-14a05bdc2558.png  width=400 align=center>|https://en.wikipedia.org/wiki/Spinneret]]  

Dengan ''[[Sequence|Diagram Sequence]]'' penelusuran dilakukan sesuai urutan pola, sedangkan ''[[Grammar|Diagram Grammar]]'' penelusuran dilakukan terhadap struktur jaring yang membentuk pola (''Grammar'').  

Struktur ini terdiri dari bagian berupa benang yang ''menghubungkan'' antar setiap struktur saat mengitari pola. Sesuai fungsinya maka kita sebut saja bagian ini sebagai ''Channel'' (lihat gambar).   

Sebelumnya diduga benang ini adalah tunggal, tetapi rupanya lebih ''[[mirip kabel kecil|https://en.wikipedia.org/wiki/Spinneret]]''. Secara individu memang lemah. Namun ketika ''disimpulkan'' dengan [[cara khusus|https://amp.kompas.com/sains/read/2018/11/28/190600723/5-kali-lebih-kuat-dari-besi-apa-rahasia-jaring-laba-laba-ini-]], maka benang laba-laba ini bisa menahan lima kali lebih banyak beban dibanding besi berukuran sama.

Dalam project ini kita analogikan simpulÂ² tersebut sebagai bentuk [[Grammar#delivery|hubungan antar kelas]]. Dengan ''Diagram Channel'' maka kita akan melanjutkan ''[[Programming#faktorisasi|proses penelusuran]]'' terhadap bagian ini.

Untuk mengatur [[Channel#identifikasi|identifikasi]] dari proses penelusuran tersebut maka berdasarkan ''[[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]]'' pada Diagram Channel ini dilakukan [[Channel#konfigurasi|konfigurasi]] terhadap instance dari ''[[Diagram#polymorphism|Pola Polymorphism]]''. 

[[<img src=https://user-images.githubusercontent.com/36441664/69991227-e4ad2500-1579-11ea-8b4a-ff5a5c8aa61f.png width=800>|https://github.com/MarketLeader/Google-Ads-API/wiki]]

[[Diagram#polymorphism|Polimorfism]] merupakan penurunan terhadap objek yang sama namun berbeda kelas tergantung letak objek tersebut pada jenjang ''[[Grammar#pewarisan|pewarisan]]''.

====Limit====
* [[Inheritance is not Subtyping|https://medium.com/@mattia512maldini/inheritance-is-not-subtyping-b84488eca5ea]]
* [[Reveal the magic behind subtype polymorphism|https://www.javaworld.com/article/2075223/reveal-the-magic-behind-subtype-polymorphism.html]]  

Metode ini digunakan untuk memutuskan metode mana yang akan [[Channel#terapan|diterapkan]] ke ''[[Channel#hirarki|hierarki kelas]]'' sehingga memungkinkan ''[[Channel#korelasi|korelasi]]'' guna pemisahan masalah secara [[Channel#terapan|lebih spesifik]].

Jenis polymorphism meliputi:  [[Universal|https://en.wikibooks.org/wiki/Introduction_to_Programming_Languages/Universal_Polymorphism]] dan [[Ad hoc|https://en.wikipedia.org/wiki/Ad_hoc_polymorphism]].  

<br>[[<img src=https://user-images.githubusercontent.com/36441664/70860349-3e86f500-1f53-11ea-800d-0bb207b146bc.png>|https://github.com/chetabahana/chetabahana.github.io/wiki/Diagram#polymorphism]]

Jenis ''Universal'' terbagi menjadi [[Parametric|https://en.wikipedia.org/wiki/Parametric_polymorphism]] dan [[Subtyping|https://en.wikipedia.org/wiki/Subtyping]]. Jenis ''Subtyping'' ini yang akan digunakan guna mendukung ''[[visualisasi|https://en.wikipedia.org/wiki/Unified_Modeling_Language]]'' pada ''[[Konsep Inheritance|https://en.wikipedia.org/wiki/Subtyping#Relationship_with_inheritance]]'' untuk hal berikut:

* Konversi ''[[Grammar#parser|Syntatic parsing]]'' via ''[[treebank|https://en.wikipedia.org/wiki/Treebank]]'' guna ''[[Grammar#code-generation|code generation]]'' dari algoritma ''[[Pola Kerja|https://github.com/MarketLeader/marketleader.github.io/wiki/Pola-Kerja]]''
* Analisa ''[[morpologi|https://id.wikipedia.org/wiki/Morfologi]]'', ''[[metonymy|https://en.wikipedia.org/wiki/Metonymy]]'', dan ''[[semantic|https://en.wikipedia.org/wiki/Semantics]]'' untuk ekstrak ''[[relationships|https://en.wikipedia.org/wiki/Subtyping#Relationship_with_inheritance]]'' dan ''[[coercions|https://en.wikipedia.org/wiki/Subtyping#Coercions]]''.

[[<img src=https://user-images.githubusercontent.com/36441664/71278762-0afcfe00-238b-11ea-8487-7ec7346f90aa.png>|http://roscidus.com/blog/blog/2013/12/20/polymorphism-for-beginners/#subtyping]]

====Range====

[[https://user-images.githubusercontent.com/36441664/83337676-bcfc0700-a2e7-11ea-8e8a-14be0dde789d.gif]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83337686-c5544200-a2e7-11ea-95fa-aebac6e555b9.gif width=400>]]

[[https://user-images.githubusercontent.com/36441664/83337690-c9805f80-a2e7-11ea-8ccd-588e9e07c837.gif]]

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83336072-f2e6be80-a2da-11ea-97e4-de62c867c8d2.png width=600>]]

===Layout===
[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83335819-9cc54b80-a2d9-11ea-914e-a20ddd2aab6a.png width=400>]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83335816-99ca5b00-a2d9-11ea-81d7-d31fa0da3b9c.jpg width=600>]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83335817-9b941e80-a2d9-11ea-97d9-77a78b9f86d0.gif width=800>]]

====Chart====
[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83336052-e1051b80-a2da-11ea-9bf7-5b7fa85d69cf.png width=400>]]

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83336055-e3677580-a2da-11ea-91d8-40a8ed9042b3.gif width=600>]]

====Format====

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83336054-e2364880-a2da-11ea-946d-4f8f23ca1488.jpg width=400>]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83335976-95527200-a2da-11ea-88df-50fe4311d742.png width=600>]]

[[https://user-images.githubusercontent.com/36441664/83335851-bb2b4700-a2d9-11ea-8386-aedf8d58528e.png]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83335838-ae0e5800-a2d9-11ea-88bb-2898d92e037b.png width=400>]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83335838-ae0e5800-a2d9-11ea-88bb-2898d92e037b.png width=600>]]

===Hirarki===

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83336074-f5491880-a2da-11ea-9a29-42f604cc61a8.png width=600>]]

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83336080-fb3ef980-a2da-11ea-848e-3953d29e64e4.png width=800>]]

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83337661-ae155480-a2e7-11ea-94ec-850fa2deed4c.png width=800>]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83336115-17429b00-a2db-11ea-9893-ff32b8d59b4c.jpg width=800>]]

====Formasi====
[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83337731-f3d21d00-a2e7-11ea-8435-c4d59b722cc2.jpg width=800>]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83337728-efa5ff80-a2e7-11ea-8308-89ff2a9c2620.png width=800>]]

====Diagram====

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83337659-ac4b9100-a2e7-11ea-885c-3fc27eac1d4d.jpg width=400>]]

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83335821-9e8f0f00-a2d9-11ea-96cc-b7f05ed89403.jpg width=800>]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83337653-a2299280-a2e7-11ea-84a8-fe2df2f5ac9b.jpg>]]

[[Mapping|<img src=https://user-images.githubusercontent.com/36441664/70738429-3ce8e180-1d47-11ea-929a-14a05bdc2558.png>]]  

==Metode==
Pada bagian ini kita akan masuk ke detil tentang cara penyusunan [[Channel#struktur|struktur]] yang dilakukan untuk menerapkan [[Channel#konsep|konsep]] dan [[Channel#metode|metode]] yang diuraikan di atas ke dalam bahasa pemrograman.

[[<img src=https://user-images.githubusercontent.com/36441664/71648223-7d2ef480-2d34-11ea-9b6b-12c4e44b0376.png>|https://medium.com/swlh/a-complete-guide-build-a-scalable-3-tier-architecture-with-mern-stack-es6-ca129d7df805]]

[[Channel#realisasi|Realisasi]] dari uraian berikut ini dapat dilihat pada file script ''[[Channel.js|https://chetabahana.github.io/skema/js/draw/Channel.js]]''. Output berupa [[visualisasi|https://chetabahana.github.io/#chetabahana-skema?pad=4]] dari [[Channel#model|hubungan antar kelas]].

===Proses===
[[<img src=https://user-images.githubusercontent.com/36441664/71648330-7b196580-2d35-11ea-98a6-aedd5e396a7e.png>|https://www.guru99.com/n-tier-architecture-system-concepts-tips.html]]

[[<img src=https://user-images.githubusercontent.com/36441664/71641287-cc8d0a80-2ccb-11ea-8f42-1e96f2eb7efd.png width=600>|https://howtodoinjava.com/interview-questions/spring-mvc-interview-questions-with-answers/]]  

====Scope====
''Arsitektur three-tier'' adalah pola arsitektur perangkat lunak server klien dimana antarmuka pengguna (presentasi), logika proses fungsional, penyimpanan data komputer, dan akses data dikembangkan dan dipelihara sebagai modul independen pada platform terpisah .

[[<img src=https://user-images.githubusercontent.com/36441664/70099582-cd496700-1661-11ea-8f0d-ea8e1cd7c311.png>|https://chetabahana.github.io/channel/samples/entityRelationship.html]]

====Extend====
[[<img src=https://user-images.githubusercontent.com/36441664/70096389-90797200-1659-11ea-8470-05e2ea6d31f6.png>|https://chetabahana.github.io/channel/samples/entityRelationship.html]]

===Synergy===
* [[PBS 47 of x â ES6 Polymorphism|https://www.bartbusschots.ie/s/2018/01/06/pbs-47-of-x-es6-polymorphism/]]
[[<img src=https://user-images.githubusercontent.com/36441664/71277847-96c15b00-2388-11ea-9cd1-9a44b8fdf724.png width=300>|https://www.bartbusschots.ie/s/2018/01/06/pbs-47-of-x-es6-polymorphism/]]

====Simetri====
[[<img src=https://user-images.githubusercontent.com/36441664/71635873-302b1f80-2c5b-11ea-8d2b-cf586a42a1d4.png width=600>|https://www.researchgate.net/publication/326094953_Fast_Prototyping_of_Web-Based_Information_Systems_Using_a_Restricted_Natural_Language_Specification]]

[[<img src=https://user-images.githubusercontent.com/36441664/71648643-7eaeeb80-2d39-11ea-822b-3ea28729eb04.png width=600>|https://www.semanticscholar.org/paper/Automatic-Source-Code-Generation-for-Web-based-Hoyos-Restrepo-Calle/230e742c0b36d0dbc9bf547bc5a708ce3dbcffb0]]

====Typical====
Dokumentasi [[Custom API|https://chetabahana.github.io/channel/api/index.html]] dapat disimak untuk referensi mendalam tentang properti dan metode semua kelas JavaScript yang dapat digunakan.  

[[<img src=https://user-images.githubusercontent.com/36441664/71659204-50510080-2d79-11ea-8aad-6895b5b436d6.png width=600>|https://www.researchgate.net/figure/Three-tier-topology-with-partition-example_fig2_256090336]]

===Matriks===
* [[Magic Mirror Matrix and Pivotal Number 89|https://www.primesdemystified.com/magicmatrix.html]]

Kita bahas korelasi ''[[Method#korelasi|formasi 1-1-4]]'' dengan ''[[Model|formasi 2-8-5]]''.

<br>[[Programming#implementasi|<img src=https://user-images.githubusercontent.com/36441664/78142988-d1429580-7457-11ea-9054-1cc2ca17eb49.jpeg width=200>]]

Akar digital dari angka kunci ''[[285]]'' adalah sama dengan angka kunci ''[[114]]'' yaitu ''[[6|enam (6)]]''.

Dengan kata lain ''[[Model|formasi 2-8-5]]'' ini prinsipnya sebangun atau berpasangan dengan ''[[Method|formasi 1-1-4]]'' yaitu berupa ''[[matriks|https://www.primesdemystified.com/magicmatrix.html]]'' namun dalam arah yang berlawanan. 

Karena berbentuk ''matriks'' maka formasi angka ''[[114]]'' ke ''[[285]]'' sulit diberikan dalam persamaan tunggal. Namun secara angkaÂ² bisa diilustrasikan seperti ini:

```
1/7 = 0,142857

7 x 2 = 14
14 x 2 = 28
28 x 2 + 1 = 57
114 x 2 + 57 = 285
```

Hal ini bisa ditunjukkan secara sederhana dengan faktorisasi dari angka ''[[28|duapuluhdelapan (28)]]'' yang merupakan bilangan komposit multi arah. 

[[Programming#implementasi|<img src=https://user-images.githubusercontent.com/36441664/75158789-78415c80-5749-11ea-9870-7e93b49367f0.png width=400>]]

Akar digital dari angka ''[[28|duapuluhdelapan (28)]]'' adalah angka ''[[1|satu (1)]]''. Jadi hampir mirip dengan angka batas ''[[19|sembilanbelas (19)]]'' namun orientasinya pada ''[[Model#korelasi|formasi 2-8-5]]'' lebih kepada korelasi antara angka ''[[4|empat (4)]]'' dan ''[[7|tujuh (7)]]''.

[[Model|<img src=https://user-images.githubusercontent.com/36441664/72175410-a9bace80-340e-11ea-9ab1-e714c0c99f2d.jpg width=500>]]

Dalam matematika, ''Matriks'' adalah susunan bilangan, simbol, atau ekspresi, yang disusun dalam baris dan kolom sehingga membentuk suatu bangun persegi. Bangun persegi ini bisa dipakai untuk menjabarkan masing sisi dari bangun tiga dimensi ''[[secara linear|https://id.wikipedia.org/wiki/Aljabar_linear]]''.

[[19#khusus|<img src=https://user-images.githubusercontent.com/36441664/74215243-0261dd80-4cd3-11ea-83f3-280bdc27e407.png>]]

Jadi hal ini identik seperti halnya ''Sistem DNA''. Jika ''[[Method|formasi 1-1-4]]'' dibangun dari ''[[27#Khusus|Sistem 5â-3â]]'' maka ''[[Model|formasi 2-8-5]]'' adalah pasangannya yaitu dibangun dari ''[[29#Khusus|Sistem 3â-5â]]''.

Dengan demikian disini akan terjadi transformasi sistem antara angka ''[[5|lima (5)]]''  dan angka ''[[3|tiga (3)]]'':
''<blockquote><b>The number 3 multiplies itself trough the system as a perfect square.</b>. It bounces from position 3 to 6, to 9, to 12. All multiplies of 3 are found in these positions (Red: illustrated by a [[perfect square|https://en.wikipedia.org/wiki/Quadrilateral]] covering number <b>3</b>).</blockquote>''

Disini formasi angka ''[[3|tiga (3)]]'' menyebar dalam bentuk segiempat dengan korelasi antara formasi angka ''[[4|empat (4)]]'' dan ''[[7|tujuh (7)]]'' yang secara keseluruhan merupakan ''[[Model|formasi 2-8-5]]''.

Sampai disini kita sudah menentukan metoda untuk kunci keempat yaitu '''''[[285]]'''''.

====Layout====
[[<img src=https://user-images.githubusercontent.com/36441664/73960029-c6c6bc80-493c-11ea-9fae-511f6db26c35.png width=400>]]
====Dimensi====

==Interaksi==
* [[Understanding Inheritance and Different Types of Inheritance|https://www.dotnettricks.com/learn/oops/understanding-inheritance-and-different-types-of-inheritance]]

Pada bagian ini kita akan bahas tentang detil [[Channel#pewarisan|pewarisan]] dari Diagram Channel berikut dengan [[Channel#instantiation|instantiation]] dan [[Channel#implementasi|implementasinya]].  

<br>[[<img src=https://user-images.githubusercontent.com/36441664/71577594-59e32a00-2b27-11ea-8e75-9992346cb3b2.png width=500>|https://www.grammatech.com/software-assurance/code-understanding]]

===Internal===
Sesuai [[Channel#metode|metode]] di atas maka Diagram Channel berlaku sebagai interface dari ''[[Diagram#polymorphism|Pola Polymorphism]]''. Pewarisan ke ''[[Route#metode|Diagram Route]]'' dilakukan via [[Channel#identifikasi|identifikasi]] berdasarkan pola ''[[Diagram#inheritance|Pola Inheritance]]'':  

[[<img src=https://user-images.githubusercontent.com/36441664/70760089-1cd31580-1d7b-11ea-912e-37eaaa35ac02.png>|https://github.com/chetabahana/route/wiki/]]

Sebenarnya inheritance sudah dibahas di bab sebelumnya di karakteristik OOP, namun disini saya akan menjelaskan sekaligus memberi contoh jenis warisan dalam proses inheritance.  

Inheritance merupakan sebuah konsep memrograman OOP dimana sebuah Class dapat menurunkan property dan method yang dimilikinya kepada Class lain/Class turunan.  

Hal ini dilakukan untuk menghindari terjadinya duplikasi content atau untuk memanfaatkan satu content/fungsi untuk banyak Class.  

Kita kembali lagi pada analogi object dalam kehidupan sehari hari, saya ambil contoh parent-nya adalah Barang Elekronik, dalam Class Barang Elekronik itu memiliki property (merek, harga, OS).  

Kemudian Child-nya adalah PC dg property (mouse, mother board, keyboard) dan Smartphone dg property (sim card, camera, touchscreen). Nah, Class Barang Elektronik dapat menurunkan property-nya (merek, harga, OS) kepada Class PC dan Smartphone, sehingga Class Child tidak perlu lagi membuat property yang sama secara berulang-ulang.  

====Standar====
Metode OOP mendukung enam jenis warisan seperti digambarkan di bawah ini:

[[<img src=https://user-images.githubusercontent.com/36441664/70811387-16cf4a00-1df8-11ea-83a3-6832a56ce1c6.png>|https://user-images.githubusercontent.com/36441664/70811387-16cf4a00-1df8-11ea-83a3-6832a56ce1c6.png]]

; Single
: Dalam warisan ini, kelas turunan dibuat dari kelas basis tunggal.

: Dalam contoh yang diberikan, Kelas A adalah kelas induk dan Kelas B adalah kelas anak karena Kelas B mewarisi fitur dan perilaku kelas induk A.

: [[<img src=https://user-images.githubusercontent.com/36441664/70811451-2f3f6480-1df8-11ea-963f-3a4fb269e5ea.png>|https://user-images.githubusercontent.com/36441664/70811451-2f3f6480-1df8-11ea-963f-3a4fb269e5ea.png]]

; Multilevel

: Dalam warisan ini, kelas turunan dibuat dari kelas turunan lainnya. Dalam contoh yang diberikan, kelas c mewarisi sifat dan perilaku kelas B dan kelas B mewarisi sifat dan perilaku kelas B.  

: Jadi, di sini A adalah kelas induk B dan kelas B adalah kelas induk C. Jadi, di sini kelas C secara implisit mewarisi sifat-sifat dan perilaku kelas A bersama dengan Kelas B yaitu ada multitingkat warisan.

: [[<img src=https://user-images.githubusercontent.com/36441664/70811470-3bc3bd00-1df8-11ea-86f5-32ae4af5ce7c.png>|https://user-images.githubusercontent.com/36441664/70811470-3bc3bd00-1df8-11ea-86f5-32ae4af5ce7c.png]]

; Multiple
: Dalam [[Multiple|https://en.wikipedia.org/wiki/Multiple_inheritance]] ini, kelas turunan dibuat dari lebih dari satu kelas dasar. Dalam contoh ini kelas c mewarisi sifat dan perilaku kelas B dan kelas A pada tingkat yang sama. Jadi, di sini A dan Kelas B keduanya adalah kelas induk untuk Kelas C.  

: [[<img src=https://user-images.githubusercontent.com/36441664/70811502-47af7f00-1df8-11ea-8eae-06f7f56c2cfd.png>|https://user-images.githubusercontent.com/36441664/70811502-47af7f00-1df8-11ea-8eae-06f7f56c2cfd.png]]

; Multipath
: Dalam warisan ini, kelas turunan dibuat dari kelas turunan lain dan kelas dasar yang sama dari kelas turunan lainnya.

: Dalam contoh yang diberikan, kelas D mewarisi sifat dan perilaku kelas C dan kelas B serta Kelas A. Baik kelas C dan kelas B mewarisi Kelas A. Jadi, Kelas A adalah induk untuk Kelas B dan Kelas C juga. sebagai Kelas D. Jadi membuatnya menjadi warisan Multipath.

: [[<img src=https://user-images.githubusercontent.com/36441664/70811531-54cc6e00-1df8-11ea-8da1-178c3cae689b.png>|https://user-images.githubusercontent.com/36441664/70811531-54cc6e00-1df8-11ea-8da1-178c3cae689b.png]]

; Hierarchical
: Dalam warisan ini, lebih dari satu kelas turunan dibuat dari kelas dasar tunggal dan kelas anak lebih lanjut bertindak sebagai kelas induk untuk lebih dari satu kelas anak.

: Dalam contoh yang diberikan, kelas A memiliki dua anak kelas B dan kelas D. Selanjutnya, kelas B dan kelas C keduanya memiliki dua anak - kelas D dan E; kelas F dan G masing-masing.

: [[<img src=https://user-images.githubusercontent.com/36441664/70811553-5f870300-1df8-11ea-950a-1fd099a7e98f.png>|https://user-images.githubusercontent.com/36441664/70811553-5f870300-1df8-11ea-950a-1fd099a7e98f.png]]

; Hybrid
: Ini adalah kombinasi dari lebih dari satu warisan. Oleh karena itu, itu mungkin merupakan kombinasi dari warisan Multilevel dan Multiple atau warisan Hirarki dan Multilevel atau warisan Hirarki dan Multipath atau warisan Hirarki, Multilevel, dan Multiple.

: [[<img src=https://user-images.githubusercontent.com/36441664/70811573-6f064c00-1df8-11ea-96d1-2c8935ee82f5.png>|https://user-images.githubusercontent.com/36441664/70811573-6f064c00-1df8-11ea-96d1-2c8935ee82f5.png]]

====Proporsi====
* [[Inheritance & Polymorphism - Interface|https://slideplayer.info/slide/3222595/]]
Inheritance  adalah kemampuan untuk menciptakan sebuah kelas baru dari kelas yang ada . Anda dapat menambahkan perangkat tambahan untuk kelas yang ada tanpa memodifikasi kelas yang asli  dengan  menciptakan kelas baru yang mewarisi dari kelas yang ada.
  
[[<img src=https://user-images.githubusercontent.com/36441664/71577817-3bc9f980-2b28-11ea-911e-688121f7e94c.png width=600>|https://www.grammatech.com/software-assurance/code-understanding]]

Kelas yang asli dikenal sebagai kelas dasar, superclass, atau kelas induk. Kelas yang diwarisi disebut subclass, kelas turunan, atau kelas anak. Tentu saja, kelas baru dapat mewarisi dari subclass â subclass yang menjadi superclass.   

Kelas-kelas yang berasal dapat memanggil metode dari kelas dasar dan mengandung metode yang unik untuk kelas turunan. di warisan, biasanya kelas pergi dari umum ke yang lebih spesifik 

===Interface===
[[<img src=https://user-images.githubusercontent.com/36441664/71638159-fd991b00-2c8a-11ea-8126-2def9dc3eb92.png width=400>|https://www.semanticscholar.org/paper/Automatic-Source-Code-Generation-for-Web-based-Hoyos-Restrepo-Calle/230e742c0b36d0dbc9bf547bc5a708ce3dbcffb0]]  

Sesuai [[Channel#metode|Pola Polymorpism]] yang menekankan penurunan terhadap <code>object</code> yang sama namun berbeda <code>class</code>  maka seperti [[Channel#model|model]] yang digambarkan di atas, <code>form1,2,3</code> disetel untuk penurunan dasar (Pola Basic) yaitu: [[Channel#single|Single]], [[Channel#multilevel|Multilevel]] dan [[Channel#multiple|Multiple]].

[[<img src=https://user-images.githubusercontent.com/36441664/71640123-b1fc6680-2cb6-11ea-89ca-fbf6a57ccac9.png>|https://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture]]

====Kategori====
Dengan demikian maka <code>model1,2,3,4</code> dari [[Channel#multipath|Multipath]] akan menjadi basis untuk semua jenis penurunan (termasuk penurunan terhadap <code>object</code> yang berlainan). 

Dimana <code>model4</code> adalah penurunan dari type [[Channel#multiple|Multiple]] yang tidak lain adalah merupakan representasi dari ''Paralel Result'' pada ''[[Flowchart|Diagram Flowchart]]''.

[[Route#identifikasi|<img src=https://user-images.githubusercontent.com/36441664/70702940-afcf6980-1d01-11ea-8e59-520946e2ce2d.png>]]

====Parameter====
Pola penurunan type [[Channel#hierarchical|Hierarchical]] dan [[Channel#hybrid|Hybrid]] disetel sebagai interface untuk mendukung implementasi dari ''[[Channel#subtyping|Metode Subtyping]]'' pada ''[[Channel#pewarisan|Pola Inheritance]]'' terhadap pewarisan dari ''[[Grammar#pewarisan|Diagram Grammar]]''.  

MasingÂ² difokuskan guna membangun interface dari ''Interaksi Input (Query)'' dan ''Interaksi Output (Result)'' berdasarkan pola dari ''[[Flowchart|Diagram Flowchart]]''.

Karena ''Diagram Flowchart'' mempunyai pola dengan menyertakan 10 instance untuk setiap interaksi maka untuk memudahkan identifikasi dari ''[[Grammar#lexer|Lexer]]'' dengan  ''[[Grammar#parser|Parser]]'' dan ''[[Grammar#syntax|Syntax]]'' yang terkait, digunakan basis kelipatan 10 secara bertingkat.

[[<img src=https://user-images.githubusercontent.com/36441664/71641838-addf4180-2cd4-11ea-8037-a3c7c1afaf0a.png width=400>|https://blog.plover.com/prog/haskell/applicative.html]]  

Perhatikan dengan seksama pada baris pertama dari file kelas untuk bentuk :Konsep inheritance ini membuat Class lebih terstruktur. Class yang diturunkan dinamakan Parent Class (induk) sedangkan Class yang menerima turunan disebut Child Class (anak).  

===Eksternal===
[[<img src=https://user-images.githubusercontent.com/36441664/71642058-34495280-2cd8-11ea-914c-d3899b5c0f2d.png width=800>|http://www.tonymarston.co.uk/php-mysql/infrastructure.html]]  

[[<img src=https://user-images.githubusercontent.com/36441664/83334446-c9c13080-a2d0-11ea-944c-990ecdcd5e9b.jpg width=600]]

[[https://user-images.githubusercontent.com/36441664/83814905-63ca1400-a6e9-11ea-93a0-094d2ce163b8.png]]

[[Method|<img src=https://user-images.githubusercontent.com/36441664/83550493-1f941380-a531-11ea-899d-d45c3c5c729f.jpg width=700>]]

[[https://user-images.githubusercontent.com/36441664/83814910-64fb4100-a6e9-11ea-97a0-f5d555491f5b.png]]

====Formulasi====

====Identifikasi====

```json

id: 41

---+-----+-----
 1 | 1   | 8
---+-----+-----
 2 | 9   | 12
---+-----+-----
 3 | 13  | 18
---+-----+-----
 4 | 19  | 29
---+-----+-----
 5 | 30  | 36
---+-----+-----
 6 | 37  | 48
---+-----+-----
 7 | 49  | 54
---+-----+-----
```

Dapat kita lihat bahwasanya formasi ini identik dengan pemetaan secara geometri pada ''[[Flowchart#identifikasi|formasi-139]]'' dan ''[[Sequence#identifikasi|formasi-114]]'' namun sudah melibatkan vektor dan rotasi pada setiap prosesnya. 

Pemetaan ini akan terus [[tree#identifikasi|berlanjut]] sampai ke tahap dimana kita akan tahu metode seperti apa sebenarnya yang harus dipakai untuk mendapatkan solusi [[Collections#mekanika|mekanika]], hal ini kita lakukan untuk menjawab ''dua (2)'' kasus sekaligus yaitu ''[[Kesenjangan Massa|https://github.com/chetabahana/method/wiki]]'' dan ''[[Masalah Turbulensi|https://github.com/chetabahana/model/wiki]]''.<br><br>

[[Mapping#Formulasi|<img src=https://user-images.githubusercontent.com/36441664/70742805-f1d3cc00-1d50-11ea-9ce5-30bec85bee9c.png>]]

Sekian.<br><br>
'''SALAM Sukses!'''<br>
'''Â© [[Chetabahana Project|https://github.com/MarketLeader]]'''<br>
[[<img src=https://stackexchange.com/users/flair/5054985.png>|https://stackoverflow.com/users/4058484/chetabahana?tab=profile]]  

==''Referensi''==
* [[Mediawiki - Cara format|https://m.mediawiki.org/wiki/Help:Formatting]]
* [[Unicode Character Database|https://www.unicode.org/Public/UNIDATA/Scripts.txt]]
* [[A formula for finding a letter's corresponding number|https://www.academia.edu/26817636/MISPAR_GODAL]]