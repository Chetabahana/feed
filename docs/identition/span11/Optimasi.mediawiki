<table>
  <thead>
    <tr>
      <td>[[<img src="https://avatars1.githubusercontent.com/u/36441664?f=1&v=3&s=20" class="avatar">|https://github.com/chetabahana]]</td><td colspan="7">This [[wiki|https://github.com/chetabahana/chetabahana.github.io/wiki]] is courtesy of '''[[Chetabahana Project|https://github.com/MarketLeader]]'''. Find all of them on '''[[Project Map|https://github.com/chetabahana/chetabahana.github.io/wiki/Skema#Implementasi]]'''.</td><td>[[<img src="https://avatars2.githubusercontent.com/u/36441943?v=3&s=20">|https://github.com/MarketLeader]]</td>   
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>[[:arrow_double_up:|https://github.com/chetabahana/chetabahana.github.io/wiki]]</th>
      <th>[[:arrow_up_small:|https://github.com/MarketLeader/marketleader.github.io/wiki]]</th>
      <th>[[Home|:rewind:]] [[Home|Intro]]</th>
      <th>[[:arrow_backward:|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]] [[Prev|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]]</th>
      <th>[[:repeat:|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]] [[Repo|https://github.com/chetabahana/chetabahana.github.io]]</th>
      <th>[[Next|https://github.com/MarketLeader/Google-Sites-API/wiki]] [[:arrow_forward:|https://github.com/MarketLeader/Google-Sites-API/wiki]]</th>
      <th>[[Last|https://github.com/MarketLeader/Google-Content-API/wiki]] [[:fast_forward:|https://github.com/MarketLeader/Google-Content-API/wiki]]</th>
      <th>[[:arrow_down_small:|https://github.com/MarketLeader/Google-AdWords-API/wiki]]</th>
      <th>[[:arrow_double_down:|https://github.com/MarketLeader/Toko-Chetabahana/wiki]]</th>
    </tr>
  </tbody>
</table>

__TOC__

==Konsep==
[[https://user-images.githubusercontent.com/36441664/84674368-0ccc0680-af55-11ea-98b6-17e52f8440f6.jpg]]

[[<img src=https://user-images.githubusercontent.com/36441664/70870922-f5bf5280-1fcb-11ea-88cf-44f7b02a7232.png width=800>|https://github.com/chetabahana/iqro/wiki]]

[[<img src=https://user-images.githubusercontent.com/36441664/89131380-98661a80-d536-11ea-8879-1e1311edba95.png width=700>|https://github.com/chetabahana/chetabahana.github.io/wiki/Skema#Desain]]

===Model===

Dalam istilah pemrograman, objek adalah komponen mandiri yang berisi properti dan metode yang diperlukan untuk membuat tipe data tertentu berguna. 

<br>[[Project Online|<img src=https://user-images.githubusercontent.com/36441664/71184073-bfbfee00-22ab-11ea-9545-8eb1416b76e8.png>]]

Prinsip dasar dari penggunaan diagram dalam projek ini adalah untuk merekonstruksi informasi.

[[Program|<img src=https://user-images.githubusercontent.com/36441664/83940929-7b9cb780-a811-11ea-9c8c-ee51d9ea7a56.jpg>]]

====Track====
Mengacu ke ''[[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]]'' maka kaidah penggunaan dapat dijelaskan seperti bagan berikut:  

<br>[[Implementasi|<img src=https://user-images.githubusercontent.com/36441664/69503601-dba2cf00-0f4d-11ea-81a3-f00213af0b16.png width=500>]]

; Etimologi
[[Etimologi|https://id.wikipedia.org/wiki/Etimologi]] adalah cabang ilmu linguistik yang mempelajari asal-usul suatu kata. Dengan Etimologi, [[akar bahasa|https://en.wikipedia.org/wiki/Cognate]] yang telah diketahui dapat ditelusuri jauh ke belakang.

<br>[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83940909-6889e780-a811-11ea-8a5a-7763e38d79f3.jpg>]]

Bedanya project ini rekonstruksinya diterapkan bukan bahasa linguistik melainkan bahasa pemrograman. 

; Terminologi

[[Terminologi|https://id.wikipedia.org/wiki/Terminologi]] adalah ilmu tentang istilah dan penggunaannya. Kajian terminologi antara lain mencakup pembentukannya serta kaitan istilah dengan suatu budaya. Proses pembentukan istilah dimulai dengan pemadanan atau penerjemahan

<br>[[Trace|<img src=https://user-images.githubusercontent.com/36441664/83940838-1fd22e80-a811-11ea-977f-c80d9cad9042.jpg>]]

Dalam project ini Terminologi diterapkan kedalam pemekaran fungsi ([[produk turunan|https://pintarbahasainggris.com/community/grammar/pengertian-derivative-words-contoh-dan-penggunaannya-pada-kalimat/]]) dari bahasa pemrograman yang sudah tersedia secara umum. 

Dengan menggabungkan kaidah [[Diagram#etimologi|Etimologi]] maka penelusuran dilakukan secara bolak-balik, baik ke belakang maupun kedepan.

; Kaidah Kognitif
Dalam linguistik, kata serumpun adalah kata-kata yang memiliki asal etimologis yang sama ([[Kognitif|https://en.wikipedia.org/wiki/Cognate]]). Kaidah ini sering diwariskan dari bahasa induk bersama, tetapi mereka juga mungkin melibatkan pinjaman dari bahasa lain.  

<br>[[Mapping|<img src=https://user-images.githubusercontent.com/36441664/83940844-2bbdf080-a811-11ea-8caa-38eddb263afa.jpg>]]

Kognitif mungkin telah berevolusi makna yang serupa, berbeda atau bahkan berlawanan, tetapi dalam kebanyakan kasus ada beberapa bunyi atau huruf yang sama dalam kata-kata, dalam beberapa kasus tampaknya berbeda.  

Beberapa kata terdengar mirip, tetapi tidak berasal dari akar yang sama; ini disebut kognitif palsu, sementara beberapa benar-benar serumpun tetapi berbeda maknanya; ini disebut teman palsu.  

<br>[[Directions|<img src=https://user-images.githubusercontent.com/36441664/83940827-1943b700-a811-11ea-874c-61645d3c5f03.jpg>]]

Dalam dunia pemrograman hal ini bisa terjadi dimana suatu fungsi turunan didapatkan hasil yang menyimpang dari akarnya, oleh karenanya design dan struktur yang digunakan perlu ditelusuri secara detil.

Disinilah fungsi dari diagram akan memegang peranan yang sangat penting.

====Batas====
* [[Ontology Vocabulary sample file|https://github.com/tdwg/vocab/blob/master/version-model.md#competency-questionsl]]

Pada bagian ini kita akan bahas mengenai ''[[Diagram#konsep|Konsep]]'' yang diterapkan.

<br>[[https://user-images.githubusercontent.com/36441664/71281110-b27c2f80-238f-11ea-98f3-3b4c4bc180ba.png]]

* Secara [[Diagram#etimologi|Etimology]] Diagram Channel mengacu ke ''[[Grammar|Diagram Grammar]]''
* Secara [[Diagram#terminologi|Terminology]] memiliki turunan seperti yang [[Channel#prinsip|didefinisikan]] di bawah ini
* Secara [[Diagram#kaidah-kognitif|Kaidah Kognitif]] mengacu ke [[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]] dengan jumlah total: ''[[Flowchart#identifikasi|7 pewarisan]]''

[[Diagram#encapsulation|<img src=https://user-images.githubusercontent.com/36441664/71261563-450cd680-2370-11ea-808f-22fdc9c8ef64.png>]]

Seperti dijelaskan pada topik ''[[Diagram#pewarisan|Type Diagram]]'', Diagram Flowchart adalah [[Tree#pewarisan|pewarisan]] dari penelusuran ''[[Diagram#class|Pola Class]]'' pada ''[[Tree#metode|Diagram Tree]]''. Untuk mengatur [[Flowchart#identifikasi|identifikasi]] berdasarkan ''[[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]]'' maka pada Diagram Flowchart ini dilakukan [[Flowchart#konfigurasi|konfigurasi]] terhadap instance dari ''[[Diagram#object|Pola Object]]''. 

[[Diagram#object|<img src=https://user-images.githubusercontent.com/36441664/68235749-5c993580-0036-11ea-8f3b-8da3496c329e.jpg>]]  

Object-oriented programming (OOP) adalah gaya pemrograman yang berfokus pada penggunaan objek untuk merancang dan membangun aplikasi sebagai model konsep, proses, atau hal-hal di dunia nyata yang bermakna bagi aplikasi Anda.  

[[<img src=https://user-images.githubusercontent.com/36441664/71262830-3247d100-2373-11ea-8f50-8d564969ba7e.png width=600>|https://github.com/tdwg/vocab/blob/master/sds/documentation-specification.md#22-standards-components-hierarchy]]

===Histori===
```json
True Prime Pairs:
(5,7), (11,13), (17,19)

layer|  i  |   f
-----+-----+----- 
     |  1  | 5
  1  +-----+
     |  2  | 7
-----+-----+---  } 36
     |  3  | 11
  2  +-----+
     |  4  | 13
-----+-----+------
     |  5  | 17
  3  +-----+     } 36
     |  6  | 19
-----+-----+-----
```

```json
True Prime Pairs:
(5,7), (11,13), (17,19)

layer|  i  |  f  |  5  |  7  | 11  | 13  | 17  | 19  |
-----+-----+-----+-----+-----+-----+-----+-----+-----+
     |  1  |  5  |  -  |  2  |  6  |  8  | 12  | 14  |
  1  +-----+-----+-----+-----+-----+-----+-----+-----+
     |  2  |  7  |  2  |  -  |  4  |  6  | 10  | 12  |
-----+-----+-----+-----+-----+-----+-----+-----+-----+
     |  3  | 11  |  6  |  4  |  -  |  2  |  6  |  8  |
  2  +-----+-----+-----+-----+-----+-----+-----+-----+
     |  4  | 13  |  8  |  6  |  2  |  -  |  4  |  6  |
-----+-----+-----+-----+-----+-----+-----+-----+-----+
     |  5  | 17  | 12  | 10  |  6  |  4  |  -  |  2  |
  3  +-----+-----+-----+-----+-----+-----+-----+-----+
     |  6  | 19  | 14  | 12  |  8  |  6  |  2  |  -  |
-----+-----+-----+-----+-----+-----+-----+-----+-----+
```
====Koleksi====
====Korelasi====
```json
True Prime Pairs:
(5,7), (11,13), (13,19)

---+-----+-----+-----+-----+     ------------------------------------------------
19'|  3  |  4  |  6  | {6} | 19                                             |
   +-----+-----+-----+-----+                                                |
17'|  5  |  3  |  2  | {7} | 17                                         Base Zone
---+-----+-----+-----+-----+                                                |
13'|  6  |  6  | 12 (M dan F) <--- Δ (Input)                                |
   +-----+-----+-----+                                                -----------
11'|  3  |  3  |  5  | 11 <----------- Mid Zone                             |
---+-----+-----+-----+-----+                                                |
   |  4  |  4  |  5  | {6} | 19                                       Mirror Zone
7' +-----+-----+-----+-----+                                                |
   |  5  |  5  | {8} | 18                                                   |
5' +-----+-----+-----+-----+-----+-----+-----+-----+-----+            -----------
   |  3  |  5  |  5  |  5  |  3  |  7  |  5  |  3  | {7} | 43 (C1 dan C2) ---> Δ
---+-----+-----+-----+-----+-----+-----+-----+-----+-----+ ----------------------
   |  1     2     3  |  4     5     6  |  7     8     9  |
```

===Formasi===
Seperti halnya ''[[19|formasi-19]]'' maka pada formasi yang terbentuk dari angka ini juga terjadi '''''rotasi''''' kedalam '''''[[3|tiga (3)]]''''' grup dimana angka ''[[19|sembilan belas (19)]]'' berfungsi sebagai ''[[Programming#pattern|angka batas]]'':

* batas faktor pada grup pertama
* batas index dari faktor sampai grup kedua
* jumlah index pada grup ke kedua dan grup ketiga

```
  Sub    index   
-------+----
 1:1:0 | 1  
-------+----
 1:2:1 | 2  
-------+----
*1:2:2 | 3  
-------+----
*1:3:3 | 4  
-------+----
 1:3:4 | 5  
-------+----
*1:3:5 | 6  
-------+----
*1:4:6 | 7  
-------+----
 1:4:7 | 8  
-------+----
*1:4:8 | 9  
-------+----
*1:4:9 | 10 √ 10th faktor = 19
=======+====
 2:1:0 | 11  -----
-------+----      | 
 2:2:1 | 12       |
-------+----      |
*2:2:2 | 13       |
-------+----      |
*2:3:3 | 14       |
-------+----      |
 2:3:4 | 15       |
-------+----      |
*2:3:5 | 16       |
-------+----      |
*2:4:6 | 17       |
-------+----      |
 2:4:7 | 18       |
-------+----      |
*2:4:8 | 19 √     |
=======+====      | index = 19x √
*2:4:9 | 20       |
-------+----      |
 3:1:0 | 21       |
-------+----      |
 3:2:1 | 22       |
-------+----      |
*3:2:2 | 23       |
-------+----      |
*3:3:3 | 24       |
-------+----      |
 3:3:4 | 25       |
-------+----      |
*3:3:5 | 26       |
-------+----      |
*3:4:6 | 27       |
-------+----      |
 3:4:7 | 28       |
-------+----      |
*3:4:8 | 29 √ ----
-------+---
*3:4:9 | 30 (void) 
```

Karena formasi ini diawali dengan angka dasar ''[[2|dua (2)]]'' dan pembagian dilakukan kedalam ''[[3|tiga (3)]]'' bagian maka kita masukkan sebagai faktor awal, hasilnya akan seperti ini:

```
  Sub    i    f   
-------+----+----
 1:1:0 | 1  | 2   √
-------+----+----
 1:2:1 | 2  | 3   √
-------+----+----
*1:2:2 | 3  |    
-------+----+----
*1:3:3 | 4  |    
-------+----+----
 1:3:4 | 5  |    
-------+----+----
*1:3:5 | 6  |   
-------+----+----
*1:4:6 | 7  |    
-------+----+----
 1:4:7 | 8  |    
-------+----+----
*1:4:8 | 9  |    
-------+----+----
*1:4:9 | 10 | 19 
=======+====+====
 2:1:0 | 11 |    
-------+----+----
 2:2:1 | 12 |    
-------+----+----
*2:2:2 | 13 |    
-------+----+----
*2:3:3 | 14 |    
-------+----+----
 2:3:4 | 15 |    
-------+----+----
*2:3:5 | 16 |    
-------+----+----
*2:4:6 | 17 |    
-------+----+----
 2:4:7 | 18 |   
-------+----+----
*2:4:8 | 19 |    
=======+====+====
*2:4:9 | 20 | 
-------+----+----
 3:1:0 | 21 |   
-------+----+----
 3:2:1 | 22 |    
-------+----+----
*3:2:2 | 23 |    
-------+----+----
*3:3:3 | 24 |    
-------+----+----
 3:3:4 | 25 |    
-------+----+----
*3:3:5 | 26 |    
-------+----+----
*3:4:6 | 27 |    
-------+----+----
 3:4:7 | 28 |   
-------+----+----
*3:4:8 | 29 |    
-------+----+----
*3:4:9 | 30 | -  
```

====Resolusi====
====Interaksi====

==Metoda==
* [[Object Oriented Programming in Python|https://github.com/chetabahana/OOP-in-Python]]
* [[Introduction to Object Oriented Programming|https://www.slideshare.net/haddara1/introduction-to-object-oriented-programming-42639494]]  

[[OOP (Object Oriented Programming)|https://en.wikipedia.org/wiki/Object-oriented_programming]] adalah suatu metode pemrograman yang berorientasi objek.

<br>[[https://user-images.githubusercontent.com/36441664/84686965-16f70080-af67-11ea-9cc5-32aeb5dcea23.jpg]]

Tujuan dari OOP diciptakan adalah untuk mempermudah dalam membangun [[Diagram#konfigurasi|konfigurasi]] dan [[Diagram#pengembangan|pengembangan program]] dengan cara mengikuti model yang telah ada di kehidupan sehari-hari.  

Berdasarkan [[Metode OOPs|https://en.wikipedia.org/wiki/Object-oriented_programming]] maka pola ini dapat disusun sesuai bagan berikut:  

[[<img src=https://user-images.githubusercontent.com/36441664/69957702-c0c7f000-1535-11ea-9472-12725801ae67.png>|https://towardsdatascience.com/how-a-simple-mix-of-object-oriented-programming-can-sharpen-your-deep-learning-prototype-19893bd969bd]]  

Saya ambil contoh Pesawat, Pesawat adalah sebuah objek. Pesawat itu sendiri terbentuk dari beberapa objek yang lebih kecil lagi seperti mesin, roda, baling-baling, kursi, dll.  

Pesawat sebagai objek yang terbentuk dari objek-objek yang lebih kecil saling berhubungan, berinteraksi, berkomunikasi dan saling mengirim pesan kepada objek-objek yang lainnya.  

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/71555889-70c04880-2a63-11ea-85be-41a7dcb2e0d5.png>]]

Begitu juga dengan program, sebuah objek yang besar dibentuk dari beberapa objek yang lebih kecil, objek-objek itu saling berkomunikasi, dan saling berkirim pesan kepada objek yang lain.  

===Atribut===

====Trace====
====Prinsip====
Encapsulation merupakan suatu mekanisme untuk menyembunyikan atau memproteksi suatu proses dari kemungkinan interferensi atau penyalahgunaan dari luar sistem dan sekaligus menyederhanakan penggunaan sistem tersebut.

# Istilah enkapsulasi sebenarnya adalah kombinasi data dan fungsionalitas dalam sebuah unit tunggal sebagai bentuk untuk menyembunyikan detail informasi.
# Proses enkapsulasi memudahkan kita untuk menggunakan sebuah objek dari suatu kelas karena kita tidak perlu mengetahui segala hal secara rinci.
# Enkapsulasi menekankan pada antarmuka suatu kelas, atau dengan kata lain bagaimana menggunakan objek kelas tertentu.    

[[<img src=https://user-images.githubusercontent.com/36441664/70703416-b4485200-1d02-11ea-9db1-41ba6e9fe2a9.png>|https://en.wikipedia.org/wiki/Object-oriented_programming#Encapsulation]]   
Contoh: kelas mobil menyediakan antarmuka fungsi untuk menjalankan mobil tersebut, tanpa kita perlu tahu komposisi bahan bakar, udara dan kalor yang diperlukan untuk proses tersebut.


===Artifact===
====Delivery====
====Realisasi====
===Properti===
====Orientasi====
====Objective====

==Pemetaan==

<br>[[https://user-images.githubusercontent.com/36441664/84674490-2ec58900-af55-11ea-9db5-b3fde2cf3b15.jpg]]

===Model===

====Object====

* [[JavaScript Objects|https://www.w3schools.com/js/js_object_definition.asp]]
* [[JavaScript Object Methods|https://www.w3schools.com/js/js_object_methods.asp]]
* [[JavaScript Object Properties|https://www.w3schools.com/js/js_object_properties.asp]]

Object merupakan perwujudan dari class, setiap object akan mempunyai attribute dan method yang dimiliki oleh class-nya, contohnya: amir, ahmad, yani merupakan object dari class manusia. Setiap object dapat berinteraksi dengan object lainnya meskipun berasal dari class yang berbeda.
[[<img src=https://user-images.githubusercontent.com/36441664/68235749-5c993580-0036-11ea-8f3b-8da3496c329e.jpg>|https://www.slideshare.net/haddara1/introduction-to-object-oriented-programming-42639494]]  

Prosedur dalam pemrograman berorientasi objek dikenal sebagai metode; variabel juga dikenal sebagai bidang, anggota, atribut, atau properti. Ini mengarah pada ketentuan berikut:

# Variabel kelas - milik kelas secara keseluruhan; hanya ada satu salinan dari masing-masing
# Variabel instan atau atribut - data yang dimiliki oleh objek individu; setiap objek memiliki salinannya masing-masing
# Variabel anggota - merujuk pada variabel kelas dan contoh yang ditentukan oleh kelas tertentu
# Metode kelas - milik kelas secara keseluruhan dan hanya memiliki akses ke variabel kelas dan input dari pemanggilan prosedur
# Metode instance - milik objek individual, dan memiliki akses ke variabel instan untuk objek spesifik yang dipanggil, input, dan variabel kelas

====Classes====

* [[JavaScript Classes - Definition|https://www.w3schools.com/js/js_classes.asp]]
Definisi untuk [[class|https://en.wikipedia.org/wiki/Class_(computer_programming)]] adalah format data dan prosedur yang tersedia untuk jenis atau class objek tertentu; mungkin juga berisi data ([[property|https://en.wikipedia.org/wiki/Property_(programming)]]) dan prosedur ([[metode|https://en.wikipedia.org/wiki/Method_(computer_programming)]]).
<br /><br />
Misal class berisi data anggota dan fungsi anggota:

Setiap objek dikatakan sebagai instance dari class tertentu (misalnya, objek dengan bidang namanya diatur ke "Mary" mungkin merupakan instance dari class Karyawan). 

[[<img src=https://user-images.githubusercontent.com/36441664/69990325-04434e00-1578-11ea-9e5a-c86bd88fe706.png>|https://www.slideshare.net/haddara1/introduction-to-object-oriented-programming-42639494]]

Hubungan antara Class, Method dan Attribute (property) bisa dijelaskan sbb:  

# Method atau yang biasa juga disebut behaviour merupakan bagian yang dimiliki oleh sebuah class yang dapat melakukan operasi, bertindak atau mengerjakan sesuatu.
# Attribute atau yang biasa juga disebut state/properties/field merupakan bagian yang dimiliki oleh sebuah class yang tidak melakukan operasi tetapi kepadanya dilakukan operasi sehingga dapat merubah nilai dari attribute tersebut.

===Hirarki===

Dalam setiap penurunan dari ''Metoda OOP'' kita akan mendapatkan turunan² baru. Guna pewarisan dan perekaman interaksi kita perlu menetapkan ''[[identifikasi|https://id.wikipedia.org/wiki/Identifikasi]]'' dari masing² turunan tersebut berdasarkan ''[[Diagram#hirarki|hirarki]]'' dan ''[[Diagram#korelasi|korelasi]]'' nya. 

[[<img src=https://user-images.githubusercontent.com/36441664/71568527-9c424200-2afa-11ea-8212-4f7282a8dc05.png width=600>|https://kottans.org/csharp-slides/presentations/5-oop-pt1/#/]]

[[<img src=https://user-images.githubusercontent.com/36441664/74972349-1ab0c580-5454-11ea-9470-8d73c809b165.png width=600>]]

[[<img src=https://user-images.githubusercontent.com/36441664/75611063-980dc180-5b49-11ea-996b-64eeaba0f2b2.png width=800>]]

====Warisan====

Inheritance merupakan konsep mewariskan attribute dan method yang dimiliki oleh sebuah class kepada class turunannya.  

Dengan konsep ini class yang dibuat cukup mendefinisikan attribute dan method yang spesifik didalamnya, sedangkan attribute dan method yang lebih umum akan didapatkan dari class yang menjadi induknya.

[[<img src=https://user-images.githubusercontent.com/36441664/69991764-e4f9f000-157a-11ea-8062-36419bc7479f.png>|https://en.wikipedia.org/wiki/Object-oriented_programming#Composition,_inheritance,_and_delegation]]

# Kita dapat mendefinisikan suatu kelas baru dengan mewarisi sifat dari kelas lain yang sudah ada.
# Penurunan sifat ini bisa dilakukan secara bertingkat-tingkat, sehingga semakin ke bawah kelas tersebut menjadi semakin spesifik.
# Sub kelas memungkinkan kita untuk melakukan spesifikasi detail dan perilaku khusus dari kelas supernya.
# Dengan konsep pewarisan, seorang programmer dapat menggunakan kode yang telah ditulisnya pada kelas super berulang kali pada kelas-kelas turunannya tanpa harus menulis ulang semua kodekode itu.

====Beragam====

[[Polymorphism|https://en.wikipedia.org/wiki/Polymorphism_(computer_science)]] merupakan konsep yang memungkinkan digunakannya suatu interface yang sama untuk memerintah suatu object agar melakukan suatu tindakan yang mungkin secara prinsip sama tetapi secara proses berbeda.  

# Polymorphism merupakan kemampuan objek yang berbeda kelas namun terkait dalam pewarisan untuk merespon secara berbeda terhadap suatu pesan yang sama.
# Polymorphism juga dapat dikatakan kemampuan sebuah objek untuk memutuskan method mana yang akan diterapkan padanya, tergantung letak objek tersebut pada jenjang pewarisan.  

[[<img src=https://user-images.githubusercontent.com/36441664/69991227-e4ad2500-1579-11ea-8b4a-ff5a5c8aa61f.png>|https://en.wikipedia.org/wiki/Object-oriented_programming#Polymorphism]]

Misalnya, objek bertipe Circle dan Square berasal dari kelas umum yang disebut Shape. Fungsi Draw untuk setiap jenis Shape mengimplementasikan apa yang diperlukan untuk menggambar dirinya sendiri sementara kode panggilan dapat tetap dengan tipe Shape tertentu yang sedang digambar.  

Ini adalah jenis [[abstraksi|https://en.wikipedia.org/wiki/Abstract_type]] lain yang menyederhanakan kode [[Sequence#eksternal|eksternal]] ke hierarki kelas dan memungkinkan pemisahan masalah secara lebih jelas.

===Layout===

Tujuan utama dari penelusuran yang akan dilakukan adalah mendapatkan data turunan yang dapat menunjang data yang sudah ada. Object, class dan metode yang sudah diuraikan di atas adalah hanya merupakan bagian dari perangkat berupa ''[[Diagram#skema|Skema]]'' yang digunakan untuk meraih tujuan ini.

[[<img src=https://user-images.githubusercontent.com/36441664/71278135-51e9f400-2389-11ea-85cc-bb286bab6559.png width=500>|http://java.scjp.jobs4times.com/oops.htm]]

Bahasa berorientasi objek menyediakan kerangka kerja dan motivasi untuk mengeksplorasi interaksi antara ''[[Diagram#diagram|konsep tipe]]'' dengan ''[[Diagram#abstraction|abstraksi data]]'' dan ''[[Diagram#Polymorphism|polimorfism]]'', karena mereka memperluas gagasan tipe ke abstraksi data dan karena ''[[Diagram#pewarisan|pewarisan tipe]]'' merupakan bentuk penting polimorfism. 

[[<img src=https://user-images.githubusercontent.com/36441664/71263455-7c7d8200-2374-11ea-8400-4565ff0641d4.png width=600>]]

====Optimasi====

Abstraction adalah suatu cara untuk melihat suatu object dalam bentuk yang lebih sederhana. Sebagai contoh kita tidak melihat sebuah mobil sebagai ribuan komponen elektronik, sistem mekanik dengan empat buah ban, jok, stir kemudi dan sebagainya.  

[[<img src=https://user-images.githubusercontent.com/36441664/71586759-dd177680-2b4d-11ea-9f6b-164d8f1ef009.png>|https://www.listendata.com/2019/08/python-object-oriented-programming.html]]

Dengan Abstraction, suatu sistem yang kompleks dapat dipandang sebagai kumpulan subsistem-subsistem yang lebih sederhana, seperti halnya mobil merupakan suatu sistem yang terdiri atas berbagai subsistem, seperti subsistem kemudi, subsistem pengereman dan sebagainya.  
[[<img src=https://user-images.githubusercontent.com/36441664/69991542-787ef100-157a-11ea-85d5-20907c99b5d7.png>|https://en.wikipedia.org/wiki/Object-oriented_programming#Open_recursion]]

Dengan pengelompokan ini kita akan masuk ke detil dari masing² kasus di atas sekaligus menelusuri jika terdapat [[Looping#pertalian|kaitan atau korelasi]] antara satu dengan lainnya. .

<br>[[Implementasi#model|<img src=https://user-images.githubusercontent.com/36441664/71659208-5515b480-2d79-11ea-859f-a20dea0cf680.jpg width=800>]]

====Komposisi====

Sampai tahap ini kita sudah bahas tentang angka² kunci yang akan digunakan dalam proses. 

```json

id: 25

---+-----+-----
 1 | 1   | 3
---+-----+-----
 2 | 4   | 34
---+-----+-----
 3 | 35  | 44
---+-----+-----
 4 | 45  | 54
---+-----+-----
 5 | 55  | 62
---+-----+-----
 6 | 63  | 77
---+-----+-----
```

[[#|<img src=https://user-images.githubusercontent.com/36441664/76535461-7c8da980-64ad-11ea-817c-450c5582e725.png width=300>]]

```json
True Prime Pairs:
(5,7), (11,13), (17,19)

           12/6 = 2
              Δ
|----------- {6} -------------|                          ┌─ 12/4 = 3
+----+----+----+----+----+----+----+----+----+----+----+----+
|  5 |  7 | 11 | 13 | 17 | 19 | 17 | 12 |{11}| 19 | 18 | 43 |
+----+----+----+----+----+----+----+----+----+----+----+----+
            3'           |---- {3} -----|----- 3 ------| 4|3|
            Δ                   Δ              Δ         Δ Δ
                             12/3 = 4       12/3 = 4       └── 12/3 = 4
```

# Konfigurasi 39 (75): '''baris ke-3 » dua (2) blok''' dibahas  di ''[[Form]]'',
# Konfigurasi 40 (85): '''baris ke-5 » empat (4) blok''' dibahas  di ''[[Plugin]]'',
# Konfigurasi 41 (54): '''baris ke-2 » empat (4) blok''' dibahas  di ''[[Redirect]]'',
## json
## css
## js
# Konfigurasi 42 (53): '''baris ke-6 » tiga (3) blok''' dibahas  di ''[[Sub Modul]]'',
## html
## xml
## xls
# Konfigurasi 43 (89): '''baris ke-1 » empat (4) blok''' dibahas  di ''[[Situs GitHub]]'',
## assets
## pages
## post
# Konfigurasi 44 (59): '''baris ke-7 » sembilan (9) kolom''' dibahas  di ''[[Jekyll/Liquid]]'',
## category
## section
## tags

[[#|<img src=https://user-images.githubusercontent.com/36441664/76538970-b2815c80-64b2-11ea-80ca-32cd8ce0f861.png width=600>]]

Bisa Anda lihat bahwa semua berhubungan dengan objek dari angka ''[[25#Pola|tujuhpuluh tujuh (77)]]'':

Silahkan ikuti ''[[Form#Arsitektur|bagian selanjutnya]]''.. 

Sekian.


'''SALAM Sukses!'''<br>
'''© [[Chetabahana Project|https://github.com/MarketLeader]]'''<br>
[[<img src=https://stackexchange.com/users/flair/5054985.png>|https://stackoverflow.com/users/4058484/chetabahana?tab=profile]]  

==''Referensi''==
* [[Authenticate users on Jekyll sites|https://wilsonmar.github.io/authentication-on-static-site/]]
* [[GitHub OAuth to serve a protected Jekyll site to your GitHub organization|https://github.com/benbalter/jekyll-auth]]

<table>
  <thead>
    <tr>
      <th>[[:arrow_double_up:|https://github.com/chetabahana/chetabahana.github.io/wiki]]</th>
      <th>[[:arrow_up_small:|https://github.com/MarketLeader/marketleader.github.io/wiki]]</th>
      <th>[[Home|:rewind:]] [[Home|Intro]]</th>
      <th>[[:arrow_backward:|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]] [[Prev|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]]</th>
      <th>[[:repeat:|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]] [[Repo|https://github.com/chetabahana/chetabahana.github.io]]</th>
      <th>[[Next|https://github.com/MarketLeader/Google-Sites-API/wiki]] [[:arrow_forward:|https://github.com/MarketLeader/Google-Sites-API/wiki]]</th>
      <th>[[Last|https://github.com/MarketLeader/Google-Content-API/wiki]] [[:fast_forward:|https://github.com/MarketLeader/Google-Content-API/wiki]]</th>
      <th>[[:arrow_down_small:|https://github.com/MarketLeader/Google-AdWords-API/wiki]]</th>
      <th>[[:arrow_double_down:|https://github.com/MarketLeader/Toko-Chetabahana/wiki]]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[<img src="https://avatars1.githubusercontent.com/u/36441664?v=3&s=20" class="avatar">|https://github.com/chetabahana]]</td><td colspan="7">This [[Optimasi#table-of-contents|wiki]] is courtesy of '''[[Chetabahana Project|https://github.com/MarketLeader]]'''. Find all of them on '''[[Project Map|https://github.com/chetabahana/chetabahana.github.io/wiki/Skema#Implementasi]]'''.</td><td>[[<img src="https://avatars2.githubusercontent.com/u/36441943?v=3&s=20">|https://github.com/MarketLeader]]</td>   
    </tr>
  </tbody>
</table>
