''Diagram Tree'' adalah interface ''[[Flowchart|Diagram Flowchart]]'' yang merupakan pewarisan dari ''[[Route|Diagram Route]]'', dimana ''Diagram Route'' adalah pewarisan dari ''[[Channel|Diagram Channel]]''.

__TOC__

==Struktur==

Pada sesi ini kita akan batasi pembahasan kedalam penggunaan diagram ini saja, mengenai detil [[paketnya|https://github.com/chetabahana/tree]] akan dibahas terpisah dibagian [[dokumentasi repository |https://github.com/chetabahana/tree/wiki]] terkait.

[[<img src=https://github.com/chetabahana/tree/raw/gh-pages/test/fixtures/three.graphql/assets/screenshot.png>|https://github.com/chetabahana/tree/tree/gh-pages/test/fixtures/three.graphql]]

* Developer: [[Joseph Werle|https://github.com/jwerle/three.graphql]]
* Case Study: [[GitHub Action|https://github.com/chetabahana/tree/actions]] & [[Wiki|https://github.com/chetabahana/tree/wiki]]
* Demo: [[Test Page|https://chetabahana.github.io/tree/test/fixtures/three.graphql/index.html]] & [[Project Section|https://chetabahana.github.io/#chetabahana-skema?pad=6]]

===Model===

* [[Getting Started With GraphQL.js|https://graphql.org/graphql-js/]]
* [[GraphQL Schema Language Cheat Sheet|https://wehavefaces.net/graphql-shorthand-notation-cheatsheet-17cd715861b6#.9oztv0a7n]]
* [[A journey through ReactDOM.render|https://dev.to/carlmungazi/a-journey-through-reactdom-render-302c]]

[[<img src=https://user-images.githubusercontent.com/36441664/71418768-cf21ab80-269e-11ea-95bc-bb322420d7ad.png>|https://hackernoon.com/creating-a-structured-hot-reloadable-graphql-api-with-express-js-de62c859643]]

Pada bagian ini kita akan bahas mengenai ''[[Diagram#konsep|Konsep]]'' yang diterapkan.

* Secara [[Diagram#etimologi|Etimology]] Diagram Channel mengacu ke ''[[Route|Diagram Route]]''
* Secara [[Diagram#terminologi|Terminology]] memiliki turunan seperti yang [[Tree#metode|didefinisikan]] di bawah ini
* Secara [[Diagram#kaidah-kognitif|Kaidah Kognitif]] mengacu ke [[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]] dengan jumlah total: ''[[Tree#identifikasi|2 pewarisan]]''

[[<img src=https://user-images.githubusercontent.com/36441664/69990325-04434e00-1578-11ea-9e5a-c86bd88fe706.png width=800|https://github.com/MarketLeader/Toko-Chetabahana/wiki]]

====Limit====

Deklarasi terhadap [[node|https://en.wikipedia.org/wiki/Node_(computer_science)]] pada ''Diagram Tree'' dilakukan via ''[[Tree#query|query]]'' ke dalam bentuk grafik dengan meggunakan [[Three.js|https://github.com/mrdoob/three.js/]] dan [[GraphQL|https://github.com/graphql/graphiql]].  

[[Three.js|https://en.wikipedia.org/wiki/Three.js]] seperti halnya [[Route#node|D3.js]], adalah pustaka JavaScript yang digunakan untuk membuat dan menampilkan grafik komputer 3D animasi menggunakan [[WebGL|https://en.wikipedia.org/wiki/WebGL]]. Sedangkan [[GraphQL|https://en.wikipedia.org/wiki/GraphQL]] adalah bahasa program yang dikembangkan oleh Facebook selama beberapa tahun secara internal.  

Keduanya berorientasi ''[[API|https://en.wikipedia.org/wiki/Application_programming_interface]]''. Intinya, Anda membangun permintaan Anda dengan mendefinisikan sumber daya yang Anda inginkan. Anda mengirim ini melalui POST ke server atau ke sebuah ''[[Tree#instance|instance]]'' yang sudah tersedia dan responsnya cocok dengan format permintaan Anda

[[<img src=https://user-images.githubusercontent.com/36441664/71421300-97b9fb80-26ac-11ea-9561-0e91e58ee922.png>|https://glennas.wordpress.com/2011/03/13/understanding-graph-databases-marko-rodriguez/]]

GraphQL adalah [[tren baru|https://habr.com/en/post/476308/]] dan alternatif terbaik untuk arsitektur berbasis ''[[REST|https://en.wikipedia.org/wiki/Representational_state_transfer]]'' yang menarik semua data yang relevan dari beberapa situs dengan satu permintaan. Hal ini meningkatkan interaksi klien-server dan mengurangi latensi yang membuat aplikasi jauh lebih responsif kepada pengguna.

====Range====
* [[GraphQL vs REST - Caching|https://blog.graphqleditor.com/grapqhl-vs-rest-caching/]]
*[[The Graph Traversal Programming Pattern|https://www.slideshare.net/slidarko/graph-windycitydb2010/28-Dening_a_Graph_Database_A]]  

Pengembangan erangkat lunak tradisional adalah tentang menulis kode yang mengikuti beberapa aturan baku. Tetapi saat ini terjadi perubahan paradigma seiiring dengan kemajuan [[Kecerdasan Buatan|https://en.wikipedia.org/wiki/Artificial_intelligence]], [[Pembelajaran Mesin|https://en.wikipedia.org/wiki/Machine_learning]], dan [[Pembelajaran Jauh Kedalam|https://en.wikipedia.org/wiki/Deep_learning]].  

<br>Dengan integrasi ketiga teknologi ini, pengembang akan dapat membangun solusi perangkat lunak yang mempelajari instruksi dan menambahkan fitur dan pola tambahan dalam data yang diperlukan untuk hasil yang diinginkan. 

Sebelumnya ''[[Neural Network|https://en.wikipedia.org/wiki/Neural_network]]'' sudah dikembangkan untuk tujuan ini. Sekilas GraphQL skemanya mirip namun ada beberapa hal yang khusus. Model konsep berikut menjabarkan semua yang penting:

[[<img src=https://user-images.githubusercontent.com/36441664/71421114-74428100-26ab-11ea-858c-b492a39ee552.png>|http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphQL/GraphQL.html]]

Ada sejumlah konsep yang [[didefinisikan|https://graphql.org/learn/schema/]] dalam konteks GraphQL.
# Ini adalah grafik terarah (dari kategori peta konsep)
# Hubungan dinamai
# Hubungan mungkin:
## Satu-ke-satu (tanpa panah)
## Satu-ke-banyak (panah)
## Many-to-many (panah dua sisi - tidak ditemukan dalam diagram di atas).

Kesimpulannya skema yang dikembangkan lebih ke tujuan percabangan suatu object atau data, jadi seolah seperti dahan dan ranting pohon atau ''[[Tree|https://en.wikipedia.org/wiki/Tree]]'', sesuai dengan nama diagram yang kita bahas.  

[[<img src=https://user-images.githubusercontent.com/36441664/69990325-04434e00-1578-11ea-9e5a-c86bd88fe706.png>|https://github.com/chetabahana/tree/wiki/]]

Diagram Tree adalah [[Route#pewarisan|pewarisan]] dari ''[[Diagram#inheritance|Pola Inheritance]]''  pada ''[[Route#metode|Diagram Route]]'' merupakan interface dari ''[[Flowchart#Metode|Diagram Flowchart]]'' guna penelusuran ''[[Diagram#object|Pola Object]]''. 

===Layout===

* [[GraphQL - Schemas and Types|https://graphql.org/learn/schema/]]

Untuk mengatur [[Tree#identifikasi|identifikasi]]  maka berdasarkan ''[[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]]'' pada Diagram Tree ini dilakukan [[Tree#konfigurasi|konfigurasi]] terhadap instance dari ''[[Diagram#class|Pola Class]]''. 

[[<img src=https://user-images.githubusercontent.com/36441664/71284372-28cf6080-2395-11ea-8088-344c35c1bd4b.png>|https://exploringjs.com/impatient-js/ch_proto-chains-classes.html]]

Kita telah terapkan metode Encapsulation sampai ke Inheritance, maka pada proses pembentukan Class akan ditelusuri akurasinya terhadap kaidah kognitif.

====Chart====

* [[Application of Artificial Intelligence in Modern Healthcare System.pdf|https://github.com/chetabahana/chetabahana.github.io/files/3998650/Application.of.Artificial.Intelligence.in.Modern.Healthcare.System.pdf]]

Objek yang dipakai dari kelas yang sama akan memiliki properti dan metode yang sama. 

<br>[[https://user-images.githubusercontent.com/36441664/82119386-453ac200-97a8-11ea-8dde-3af7628c01ae.gif]]

Jika setiap instance kelas memiliki nilai yang sama untuk properti. Itu tidak akan sangat berguna dalam jangka waktu yang lama. 

[[<img src=https://user-images.githubusercontent.com/36441664/117577013-387a5100-b112-11eb-90e7-ac5feca2c2bf.jpg>|https://github.com/chetabahana/chetabahana.github.io/files/6447720/glspec44.compatibility.pdf]]

Properti yang bervariasi untuk setiap instance disebut properti instance. Metode instance menyediakan fungsionalitas yang berguna untuk setiap instance kelas.

[[<img src=https://user-images.githubusercontent.com/36441664/71284945-87490e80-2396-11ea-8ca3-efb0e8ecb15a.png width=600>|https://graphql.github.io/graphql-spec/June2018/#sec-Objects]]

====Format====
* [[OOPs: Writing a class|https://www.adobe.com/devnet/actionscript/learning/oop-concepts/writing-classes.html]]

Properti instance dan metode diakses dengan menggunakan sintaks dengan nama variabel referensi dan nama properti atau metode.

[[<img src=https://user-images.githubusercontent.com/36441664/71279883-6e3b6000-238c-11ea-94a4-c9822287b20f.png width=600>|https://opendsa-server.cs.vt.edu/ODSA/Exercises/CMP/CMoopMCQload.html]]

Properti dan metode statis milik kelas daripada instance kelas. Properti statis adalah properti yang menggambarkan kelas, bukan hanya contoh spesifik. Dalam versi revisi dari properti ini akan memberi tahu Anda rasa resepnya tanpa harus melalui proses instantiating.

[[<img src=https://user-images.githubusercontent.com/36441664/71416379-b01d1c80-2692-11ea-953e-437f81aef2e1.png>|https://chetabahana.github.io/tree/test/fixtures/three.graphql/index.html]]

===Hirarki===
* [[Cant get variables to work|https://github.com/graphql/graphiql/issues/156]]
* [[Clean up top-level event listeners after unmounting all roots|https://github.com/facebook/react/issues/7128]]

```js
var schema = buildSchema(`
  type Query {
    hello: String
  }
`);

```
Update:
```js
query($channel_id: ID!) {
 channel(id: $channel_id) {
   id
 }
}
```

====Formasi====
* [[When should I use curly braces for ES6 import?|https://stackoverflow.com/a/50736023/4058484]]
* [[How to return list of files in directory using GraphQL query?|https://stackoverflow.com/questions/58781369/how-to-return-list-of-files-in-directory-using-graphql-query]]

```js
var root = {
  hello: () => {
    return 'Hello world!';
  },
};

graphql(schema, '{ hello }', root).then((response) => {
  console.log(response);
});

```

====Diagram====
* [[Clean up top-level event listeners after unmounting all roots|https://github.com/facebook/react/issues/7128]]
```js
{ data: { hello: 'Hello world!' } }
```
[[<img src=https://user-images.githubusercontent.com/36441664/71417992-e65e9a00-269a-11ea-8a4c-698886157761.png>|https://grandstack.io/docs/guide-graphql-schema-design.html#a-single-cypher-database-query-is-generated-for-each-graphql-request]]

==Metode==
[[<img src=https://user-images.githubusercontent.com/36441664/71420584-9f77a100-26a8-11ea-9eae-25a596941bb0.png width=800>|https://dev.to/graphqleditor/how-to-visualize-your-graphql-schema-3hk3]]

[[<img src=https://user-images.githubusercontent.com/36441664/71418137-8288a100-269b-11ea-9ae6-8f8ec127af8b.png width=500>|https://medium.com/open-graphql/graphql-schema-stitching-in-action-with-apollo-eba04f250588]]

[[<img src=https://user-images.githubusercontent.com/36441664/71418867-6686fe80-269f-11ea-81b2-2442291cebc0.png width=500>|https://www.slideshare.net/ValentinBuryakov/graphql-usage]]

===Proses===
[[https://user-images.githubusercontent.com/36441664/83331568-3d5b4180-a2c1-11ea-953f-0177bbc1674b.jpg]]

[[https://user-images.githubusercontent.com/36441664/83331569-3e8c6e80-a2c1-11ea-90cb-bd65e4fb632b.jpg]]

[[https://user-images.githubusercontent.com/36441664/83331570-3f250500-a2c1-11ea-8ce7-b21452633e19.gif]]

[[https://user-images.githubusercontent.com/36441664/83331572-40563200-a2c1-11ea-951a-a626cdbb7443.png]]
====Scope====

[[https://user-images.githubusercontent.com/36441664/83331573-40eec880-a2c1-11ea-8144-63e2e1239404.png]]

[[https://user-images.githubusercontent.com/36441664/83331575-421ff580-a2c1-11ea-8276-de3551f6fd62.png]]

[[https://user-images.githubusercontent.com/36441664/83331577-43512280-a2c1-11ea-84aa-4b32c07d079f.png]]

[[https://user-images.githubusercontent.com/36441664/83331578-44824f80-a2c1-11ea-9494-cb9065cf0479.gif]]

====Extend====

[[https://user-images.githubusercontent.com/36441664/83331596-52d06b80-a2c1-11ea-9de2-8ce179d34db5.png]]

[[https://user-images.githubusercontent.com/36441664/83331588-4ba95d80-a2c1-11ea-9353-4558b901af9c.jpg]]

[[https://user-images.githubusercontent.com/36441664/83331590-4d732100-a2c1-11ea-9e72-2e918d23399b.png]]

[[https://user-images.githubusercontent.com/36441664/83331597-54019880-a2c1-11ea-869b-767a6cda8ae5.jpg]]

[[https://user-images.githubusercontent.com/36441664/83331591-4ea44e00-a2c1-11ea-9efb-094ea2aa7277.png]]

===Synergi===

* [[GraphQL on Cloud Functions for Firebase|https://codeburst.io/graphql-on-cloud-functions-for-firebase-153fe7b02ea5]]  
* [[Google Gets Serious About Managing APIs|https://www.programmableweb.com/news/google-gets-serious-about-managing-apis-hosted-google-cloud-platform/brief/2016/09/06]]

[[<img src=https://user-images.githubusercontent.com/36441664/39117383-03b2a9a4-4711-11e8-9f72-1d1cb7d61634.png width=600>|https://github.com/MarketLeader/Tutorial-Buka-Toko/wiki/Continuous-Delivery#tampilkan-produk-unggulan]]

Saat ini [[GraphQL-API-v4|GitHub API]] sudah beralih dari yang sebelumnya bertumpu ke ''[[REST-API-v3|REST API]]'' ke penggunakan GraphQL. [[Google Cloud Vision API|http://blog.nostratech.com/2017/12/google-cloud-vision-api.html]] juga dapat mendukung penggunaan. 

<br>[[<img src=https://raw.githubusercontent.com/chetabahana/chetabahana.github.io/master/images/google/gcp_cheat_sheet.png width=600>|https://github.com/MarketLeader/Tutorial-Buka-Toko/wiki#kenapa-google-cloud]]

Pada bagian ini kita akan bahas tentang detil [[Tree#pewarisan|pewarisan]] dari Diagram Tree berikut dengan [[Tree#instantiation|instantiation]] dan [[Tree#implementasi|implementasinya]].  

[[<img src=https://user-images.githubusercontent.com/36441664/69289855-8191c900-0c30-11ea-80c0-5c7c8141a027.png>|https://github.com/chetabahana/skema/pull/44]]

====Simetri====

* [[From Taxonomies and Schemas to Knowledge Graphs.pdf|https://github.com/chetabahana/chetabahana.github.io/files/3998649/From.Taxonomies.and.Schemas.to.Knowledge.Graphs.pdf]]
* [[API Mashup: Combining APIs using GraphQL Schema Stitching|https://noti.st/rwessling/RTxqqA/slides]]

Selain menyediakan fungsionalitas aplikasi, metode memastikan bahwa data objek digunakan dengan tepat dengan menjalankan pemeriksaan untuk tipe data tertentu yang digunakan.  

[[<img src=https://user-images.githubusercontent.com/36441664/71555192-d8729580-2a5b-11ea-9300-256fcf1be1fa.png>|http://www.differencebetween.net/technology/difference-between-oop-and-pop/]]

Misalnya, dalam aplikasi manajemen proyek, Anda akan memiliki objek status, objek biaya, dan objek klien. Objek-objek ini akan bekerja bersama (dan dengan banyak objek lain) untuk menyediakan fungsionalitas yang Anda inginkan dari aplikasi manajemen proyek Anda.

[[<img src=https://user-images.githubusercontent.com/36441664/71555062-efb08380-2a59-11ea-8f47-ae29ff315103.png>|http://examradar.com/procedure-oriented-programming-vs-oop/]]

Mereka juga memungkinkan pelaksanaan tugas yang sebenarnya disembunyikan dan untuk operasi tertentu distandarisasi di berbagai jenis objek. Anda akan belajar lebih banyak tentang kapabilitas penting ini dalam konsep berorientasi objek: Enkapsulasi.
 
# Object yang disertakan harus menyertai [[class|https://en.wikipedia.org/wiki/Class_(computer_programming)]] karena dalam [[Sequence#identifikasi|identifikas]] diperlukan [[struktur data|https://en.wikipedia.org/wiki/Data_structure]] yang berisi [[variable|https://en.wikipedia.org/wiki/Variable_(computer_science)]] dan [[metode|https://en.wikipedia.org/wiki/Method_(computer_programming)]] data (lihat gambar di atas).
# Variabel juga dikenal sebagai [[fields|https://en.wikipedia.org/wiki/Field_(computer_science)]], [[member|https://en.wikipedia.org/wiki/Member_variable]], [[atribut|https://en.wikipedia.org/wiki/Attribute_(computing)]], atau berupa [[properti|https://en.wikipedia.org/wiki/Property_(programming)]] dari object seperti terlihat pada bagan berikut:  

Contoh: [[class|https://en.wikipedia.org/wiki/Class_(computer_programming)]] mobil menyediakan antarmuka fungsi untuk menjalankan mobil tersebut, tanpa kita perlu tahu komposisi bahan bakar, udara dan kalor yang diperlukan untuk proses tersebut.

====Typical====

* [[Working with Objects|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects]]
* [[JavaScript Classes - Definition|https://www.w3schools.com/js/js_classes.asp]] 

Dalam pemrograman, [[instantiation|https://en.wiktionary.org/wiki/instantiation]] adalah realisasi [[Tree#instantiate|instantiate]] atau realisasi tertentu dari abstraksi atau dari template seperti kelas objek atau proses komputer.

<br>[[<img src=https://user-images.githubusercontent.com/36441664/70870968-9150c300-1fcc-11ea-9b40-55e3d4731e4f.png width=500>|https://github.com/chetabahana/flowchart/wiki/]]

Berbeda dengan penerapan pada diagram lain yang hanya menggunakan konsep ''[[Tree#struktur|Neural Network]]'' maka instantiation yang akan diterapkan pada Diagram Tree adalah juga menggunakan konsep ''[[Pembelajaran Jauh Kedalam|https://en.wikipedia.org/wiki/Deep_learning]]'' atau ''[[Deep Learning Method|https://www.intechopen.com/online-first/application-of-artificial-intelligence-in-modern-healthcare-system#F4]]''. 

Sesuai dengan tujuan dari [[Tree#metode|metode]] di atas maka Diagram Tree akan berlaku sebagai interface dari ''[[Diagram#class|Pola Class]]''. Pewarisan ke ''[[Flowchart#metode|Diagram Flowchart]]'' dilakukan via [[Tree#identifikasi|identifikasi]] berdasarkan pola ''[[Diagram#class|Pola Object]]'':  

[[<img src=https://user-images.githubusercontent.com/36441664/68235749-5c993580-0036-11ea-8f3b-8da3496c329e.jpg>|https://github.com/chetabahana/flowchart/wiki/]]

===Matriks===

* [[Big Data Analytics and Deep Learning in Bioinformatics With Hadoop|https://www.sciencedirect.com/science/article/pii/B9780128167182000099]]
* [[Deep Learning in the Biomedical Applications:Recent and Future Status|https://github.com/chetabahana/chetabahana.github.io/files/4056673/Deep.Learning.in.the.Biomedical.Applications.pdf]]  

Konsep ini merupakan pengembangan dari ''Neural Network'' dengan menggandakan ''[[Hidden Data|https://www.intechopen.com/online-first/application-of-artificial-intelligence-in-modern-healthcare-system#F4]]'' secara ''[[Multiple Layers|https://en.wikipedia.org/wiki/Deep_learning#Definition]]'' untuk menerapkan tingkat yang lebih tersembunyi agar algoritma dapat menangani data penting dengan struktur yang berbeda:

<br>[[<img src=https://user-images.githubusercontent.com/36441664/71375257-316fa300-25f0-11ea-8177-b7d4066d3b20.png width=500>|https://www.intechopen.com/online-first/application-of-artificial-intelligence-in-modern-healthcare-system]]

Pada dasarnya, teknik ini berfungsi seperti ''check and recheck'' membantu untuk menyelidiki banyak model kritis nonlinier (misakan akibat adanya peningkatan volume data) termasuk juga untuk mengukur tingkat ''[[Diagram#Akurasi|akurasi]]'' output dari ''[[Tree#struktur|Neural Network]]'' terhadap pengaruh ''[[Diagram#kaidah-kognitif|Kaidah Kognitif]]''.

[[https://user-images.githubusercontent.com/36441664/83331599-55cb5c00-a2c1-11ea-833e-b14dd79b5f2d.jpg]]

Penggunaan konsep ini dimungkinkan karena Diagram Tree dapat digunakan bukan hanya menguji output namun juga input dengan cara [[Tree#query|query]] input dari hasil output. Ini akan berguna untuk mengembangkan implementasi dari ''[[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]]'' pada struktur dari <code>class</code> induk. 

[[https://user-images.githubusercontent.com/36441664/83331594-5106a800-a2c1-11ea-8d58-61d93a23d73c.png]]

Contoh konkretnya adalah bilamana ''[[Channel#skema|skema jaring laba laba]]'' juga diterapkan pada ''[[Sequence#identifikasi|Diagram Sequence]]'', dimana jika Anda ingin mendapatkan akurasi dari turunan <code>Object1</code> maka Anda akan perlu terlebih dahulu membangun ''[[Diagram#piramida|piramida data]]'' pada <code>Object2</code> agar dapat difungsikan sebagai ''Hidden Data''.

[[Sequence#identifikasi|<img src=https://user-images.githubusercontent.com/36441664/71309214-f0cd2980-2437-11ea-837f-61ed14e3c213.png>]]

Demikian juga jika Anda ingin mendapatkan akurasi dari turunan <code>Object2</code> maka Anda perlu membangun ''piramida data'' pada <code>Object3</code>, demikian seterusnya. 

====Layout====

* [[Advances in Deep Learning|https://id.scribd.com/document/441513945/M-Arif-Wani-Farooq-Ahmad-Bhat-Saduf-Afzal-Asif-Iqbal-Khan-Advances-in-Deep-Learning-Springer-2020-pdf]]

[[<img src=https://user-images.githubusercontent.com/36441664/71375240-21f05a00-25f0-11ea-8259-ebd81a04bf3f.png width=500>|https://www.intechopen.com/online-first/application-of-artificial-intelligence-in-modern-healthcare-system]]

[[<img src=https://user-images.githubusercontent.com/36441664/71370072-4bed5080-25df-11ea-9502-7a0c5381a8c7.png>|https://www.intechopen.com/online-first/application-of-artificial-intelligence-in-modern-healthcare-system]]

====Dimensi====

==Interaksi==

* [[Object-oriented JavaScript for beginners|https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS]]

Secara default hasil dari ''Diagram Tree'' disetel untuk tidak bergantung kepada akurasi dari output, dengan demikian hasil tetap akan diproses ke ''[[Flowchart#realisasi|Diagram Flowchart]]''.  

Akurasi hanya merupakan indikasi untuk sejauh mana penelusuran yang dilakukan dapat diandalkan. Namun untuk penandaan maka akurasi dapat ditunjukkan via symbol dan warna. 

Karena [[Tree#instantiate|pewarisan instance]] terjadi dari interaksi yang dilakukan pada ''[[Sequence#identifikasi|Diagram Sequence]]''  maka pola identifikasi disetel mengikuti [[Tree#skema|skema pewarisan]] yang terjadi sejak mula pada ''[[Grammar#identifikasi|Diagram Grammar]]'' sampai ke ''[[Route#identifikasi|Diagram Route]]'' yang mana setiap <code>instance</code> akan beralih fungsi menjadi basis ''[[Tree#query|query]]''.  

[[<img src=https://user-images.githubusercontent.com/36441664/71373214-05045880-25e9-11ea-96c4-42c710cfa484.png width=600>|https://schema.org/docs/automotive.html]]

Dengan demikian sesuai karakter ''Paralel Result'' dari interaksi <code>Fix Output</code> pada ''[[Flowchart|Diagram Flowchart]]'' maka ''[[Diagram#Akurasi|akurasi]]'' dari pewarisan hanya dapat diukur bilamana <code>instance</code> ''[[terkoneksi paralel|https://github.com/chetabahana/flowchart#parallel-1]]'' dengan dua ''[[Tree#database|piramida data]]'' <code>class</code> induk yang [[Tree#instantiation|saling berkaitan]] via ''instantiation'' dari ''[[Channel|Diagram Channel]]''.  

===Internal===

* [[Window localStorage Property|https://www.w3schools.com/jsref/prop_win_localstorage.asp]]
* Storing to [[.data()|https://api.jquery.com/data/]] and [[jQuery.data()|https://api.jquery.com/jquery.data/]]
* [[Storing Objects in HTML5 localStorage|https://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage]]

[[<img src=https://user-images.githubusercontent.com/36441664/71575838-01109300-2b21-11ea-8b9f-8a9b4b2fbcb1.png width=600>|https://www.educative.io/blog/javascript-oop-primer]]

[[<img src=https://res.cloudinary.com/indepth-dev/image/upload/f_auto,fl_lossy,q_auto/local_media/2019/07/tmp1.mp4>|https://indepth.dev/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react/]]

[[<img src=https://user-images.githubusercontent.com/36441664/71042741-30a5bf80-215f-11ea-81b1-09389646930b.gif>|https://github.com/graphql/graphiql]]

[[<img src=https://user-images.githubusercontent.com/36441664/70920109-9b1e0900-2054-11ea-9c6b-2cecc8193dc9.gif>|https://github.com/APIs-guru/graphql-voyager]]

Berbeda dengan diagram lainnya maka ''Diagram Tree'' dapat dianggap sebagai pamungkas. Pada diagram ini collections tidak berbasis pada file namun via ''[[Program#interaksi|instantiation]]''.<br><br>

Ini dikarenakan yang diwariskan oleh ''Diagram Tree'' adalah <code>class</code> baru dari [[Tree#instance|<code>instance</code>]] hasil interaksi sebelumnya pada diagram lain sehingga sejatinya siap untuk diproses via [[Tree#query|query]]. 

[[<img src=https://user-images.githubusercontent.com/36441664/71417835-207b6c00-269a-11ea-9a27-d0736d04a92d.png width=800>|https://grandstack.io/docs/guide-graphql-schema-design.html]]  

====Standar====

====Proporsi====

Pada Genetik dari ''Sistem DNA'' jumlah kemungkinan garis ''[[pewarisan kromosom X|https://en.wikipedia.org/wiki/Fibonacci_number#Nature]]'' pada generasi leluhur yang diberikan mengikuti urutan Fibonacci:

[[168|<img src=https://user-images.githubusercontent.com/36441664/74459606-2c2b2800-4ebe-11ea-99fe-586190ab5031.png width=600>]]

===Interface===

Terkait ''[[Artifacts|formasi 2-4-8]]'' berikut ini adalah tabel hubungan (cross) antara angka Fibonacci. Dikenal dengan istilah ''[[Plichta Prime Number Cross|https://www.researchgate.net/figure/Dr-Peter-Plichta-Prime-Number-Cross_fig5_331920651]]'': 

[[<img src=https://user-images.githubusercontent.com/36441664/74587130-56e1c180-5021-11ea-8bb3-a4060cc80eaa.png>|https://perceivebelieve.tumblr.com/post/150675559031/an-analysis-of-the-prime-number-cross-and-its/amp]]

Penempatkan 24 nomor berikutnya dari urutan secara konsentris, ditemukan bahwa bilangan prima jatuh secara diagonal:

[[<img src=https://user-images.githubusercontent.com/36441664/74587061-79bfa600-5020-11ea-920e-90aef70a561c.png>|https://perceivebelieve.tumblr.com/post/150675559031/an-analysis-of-the-prime-number-cross-and-its/amp]]

Terkandung dalam persilangan bilangan dari 1 hingga 144 ada 34 bilangan prima yang dimulai dengan angka ''[[5|lima (5)]]'':

```
5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,
89,97,101,103,107,109,113,127,131,137,139
```
Dengan mod 9 didapat 3 urutan sebagai berikut:
```
1-4-7 2-5-8 3-6-9
```

Yang pada gilirannya  lanjut ke pola satu digit ''3-6-9'':

[[<img src=https://user-images.githubusercontent.com/36441664/74587067-90fe9380-5020-11ea-8969-ecb0d6850ab3.png>|https://perceivebelieve.tumblr.com/post/150675559031/an-analysis-of-the-prime-number-cross-and-its/amp]]

====Kategori====

Ini persis pola yang sama seperti yang telah diketahui sejauh ini dalam 24-kode Fibonacci berulang:

[[<img src=https://user-images.githubusercontent.com/36441664/74212973-8adb8080-4cc9-11ea-8769-5d975d221bfa.png width=400>|https://www.primesdemystified.com/twinprimes.html]]

Bilangan yang mewakili 3 urutan numerik yang berbeda:

```
1  —>  5, 7, 11, 13, 17, 19, 23, 25, 29, 31 … (divisible by 1)
2  —>  4, 8, 10, 14, 16, 20, 22, 26, 28, 32 … (divisible by 2)
3  —>  6, 9, 12, 15, 18, 21, 24, 27, 30, 33 … (divisible by 3)
```

Angka-angka dalam dua kolom (1 dan 2) ditambahkan bersamaan akan membuat urutan berikut:
9,6,3,9,6,3,9,6,3,9.

[[157|<img src=https://user-images.githubusercontent.com/36441664/74556668-28b4a100-4f91-11ea-960f-dfc804f76e8a.png>|]]

Berikutnya kita lihat lagi ''[[12#khusus|peta composite & prime]]''.<br>
Entah kebetulan atau tidak, ada kalimat bahwa angka ''[[6|enam (6)]]'' berupa garis lurus:  

''<blockquote>The number 3 multiplies itself trough the system as a perfect square. It bounces from position 3 to 6, to 9, to 12. All multiplies of 3 are found in these positions.</blockquote>''
''<blockquote>The number 6 multiplies itself trough the system as a straight line. It bounces back and forth between 6 and 12.</blockquote>''

====Parameter====

Dengan demikian secara implisit terbentuk urutan ''[[6|6:Primes(124875)]]'' dari tiga urutan bilangan prima:

```
6:Primes(124875)
12 = 4 + 8 = 7 + 5
```

[[248|<img src=https://user-images.githubusercontent.com/36441664/73895020-ced91a80-48b0-11ea-8f1d-3e1391417ee8.png width=250>]]

Keseimbangan ini dapat dijumpai pada ''Magic Hexagon''. Anda bisa lihat bahwa angka ''[[5|lima (5)]]'' akan selalu berada di tengah, dimana pada lingkaran tengah terdapat putaran angka yang mengapit angka ''[[6|enam]]'': 5-7, 2-4-8, 1-6-8, 1,5-7.

[[168|<img src=https://user-images.githubusercontent.com/36441664/74459087-4c0e1c00-4ebd-11ea-83d5-a8517b1585d8.png width=300>]]

Formasi 1-6-8 dan ''[[Artifacts|formasi 2-4-8]]'' yang sekaligus merepresentasikan angka ''[[Artifacts|168]]'' dan ''[[Sequence|248]]'' sudah kita bahas sebelumnya, tersisa satu putaran lagi yaitu putaran 1,5-7. Dan dia adalah juga satu²nya yang belum terbahas:
```
786 Terms:
└── 7:Primes(142857)
    └── 8:Primes(157248)
        └── 6:Primes(124875)

5-7:Terms » 139
2-4-8:Terms » 786
8-7:Terms » 8/7 = 1.14285... 114 & 285
1-5-7:Terms » ?
```

===Eksternal===

Kedua angka²: [[5|lima (5)]] dan [[7|tujuh (7)]] ini ada pada putaran 1,5-7, jadi seharusnya angka '''''[[Tree|157]]''''' memiliki makna tersendiri. Coba Anda simak persamaan berikut:

```
R = XY + XX
XY = XX + f(X)
R = XX + f(X) + XX

f(X) » (1-5-7) » 157
Formasi (2-4-8) » 786 = XX 
Formasi (1-5-7) » R
```
Sekarang masukkan angkanya kedalam putaran:

<br>[[248|<img src=https://user-images.githubusercontent.com/36441664/73895020-ced91a80-48b0-11ea-8f1d-3e1391417ee8.png width=250>]]

```
3 » (5-7): 139
7 » (8-7): 114 + 285 = 399
13 » (2-4-8): 139 + 248 + 399 = 786
19 » (1-5-7): 786 + 157 + 786 = 1729
```
Jumlahnya persis ''[[Program#bagan|1729]]''..<br>
Sebuah angka kita diskusikan sejak awal..

[[Program#bagan|<img src=https://user-images.githubusercontent.com/36441664/72199762-e8827000-3472-11ea-8185-d8caf6c77af3.jpg>]]

Jadi apa makna dari formasi angka ''[[Tree|157]]'' disini?

Dia mencakup sedikitnya keseluruhan dari fungsi kedua kalimat ini:

''<blockquote>5 is the first prime position. It functions as a star in some respects bouncing back and forth across the system counter clockwise''</blockquote>''
''<blockquote>7 is the second prime position. It mirrors the path of 5 touching each postions exactly opposite criss-crossing 5's path clockwise..</blockquote>''

[[27#khusus|<img src=https://user-images.githubusercontent.com/36441664/75351925-7c9d7f00-58db-11ea-80f5-bf8e6e4138d1.png>]]

====Formulasi====

* [[89, 109 and the Fibonacci Sequence|https://www.goldennumber.net/89-and-109/]]
* [[Magic Mirror Matrix and Pivotal Number 89|https://www.primesdemystified.com/magicmatrix.html]]

Sekarang kita akan bahas korelasi sistem dengan interaksi genetik.

<br>[[Program|<img src=https://user-images.githubusercontent.com/36441664/73923132-f05ff380-48fc-11ea-8b98-a6a3a727f26e.png>]]

Seperti halnya angka ''[[7|tujuh (7)]]'', ''[[13|tigabelas (13)]]'', dan ''[[19|sembilanbelas (19)]]'' yang memiliki siklus periodik maka angka ''[[23|duapuluhtiga (23)]]'' adalah juga ''[[angka siklus|https://en.m.wikipedia.org/wiki/Transposable_integer]]'' bedanya siklus nya adalah ''[[22|duapuluhdua (22)]]'' periodik.

```
1/23 = 0.0434782608695652173913 (22 periodik) 
1/299 » LCM (6,22) = 66
23 = 9th prime
299 = 13 x 23
```

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83151487-d43fc680-a126-11ea-8a2b-1c8729e6f1d0.jpg width=300>]]

[[Bagan|<img src=https://user-images.githubusercontent.com/36441664/83151263-8d51d100-a126-11ea-9593-9c9867f5db13.jpg width=400>]]

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83151459-cbe78b80-a126-11ea-838c-91a28800c44d.jpg width=500>]]

[[Diagram|<img src=https://user-images.githubusercontent.com/36441664/83151452-ca1dc800-a126-11ea-96f8-f3aeb865ba8b.jpg width=600>]]

[[Mapping|<img src=https://user-images.githubusercontent.com/36441664/83189816-b476c580-a15b-11ea-99bb-e5c3de82fd18.jpg width=600>]]

[[Mapping|<img src=https://user-images.githubusercontent.com/36441664/83148692-7958a000-a123-11ea-8506-2065f883027c.jpg width=700>]]

[[Mapping|<img src=https://user-images.githubusercontent.com/36441664/83148536-4adac500-a123-11ea-830e-b6358211c5a0.jpg width=800>]]

====Identifikasi====
```json
id: 46

---+-----+-----
 1 | 1   | 3
---+-----+-----
 2 | 4   | 6
---+-----+-----
 3 | 7   | 11
---+-----+-----
 4 | 12  | 14
---+-----+-----
 5 | 15  | 20
---+-----+-----
 6 | 21  | 26
---+-----+-----
 7 | 27  | 28
---+-----+-----
 8 | 29  | 32
---+-----+-----
 9 | 33  | 34
---+-----+-----
10 | 35  | 35
---+-----+-----
```

[[Program#pattern|<img src=https://user-images.githubusercontent.com/36441664/81168158-a8667080-8fc0-11ea-9206-fb290b21726e.png>]]

Dengan sifat pada ''[[Program#pattern|angka batas]]'' ini maka terjadi permutasi pada angka² turunan utama dari ''[[Program#bagan|formasi-1729]]'' sehingga berulang terus menerus secara sistemik pada ''[[1#manuscript|turunan² berikutnya]]'':

Dengan demikian ''[[Program#bagan|formasi-1729]]'' ini adalah sebuah '''''formasi cyclic''''' yang dapat meregenerasi formasi persis seperti dirinya sendiri pada setiap unit cabang atau node nya. 

Sifat ini tidak hanya terjadi pada angka² turunan dari ''[[Program#bagan|formasi-1729]]'' namun juga terjadi pada angka dari penjumlahan dari angka turunan ''{1234567}'' yaitu ''[[28|duapuluh delapan (28)]]'':

; ∑(1234567): 28 › 139

Demikian juga setelah batas yg kedua yaitu pada urutan ke 6 dan 7:

; 139 = 19 + 17 + 12 + 11 + 19 + 18 + 43

```
18 43
1, 6 18, 7
7 8 43 6009 
18 1072, 43 6009
1 7 139, 6 18, 7 43
9 + 43 + 6009 = 6061
1 7 139 10143, 18 1072, 43 6009
```

Dengan ''formasi cyclic'' ini kita akan terus terapkan pada ''[[Directions#penyambungan|tunas pohon]]'' dari turunan² yang didapat pada sesi ''[[Home|SKEMA KERJA]]'' sebagaimana halnya pada pemetaan ([[mapping]]) dari [[bagan]] dan [[diagram]] struktur project:

* akun [[personal|user]] bergerak mulai dari ''[[dunia internet]]'' dan ''[[situs online]]'' sampai ke ''[[programming]]''
* akun [[organisasi]] mulai dari ''[[project online]]'' sampai ke setiap repository yang terkait.

[[Mapping#Internal|<img src=https://user-images.githubusercontent.com/36441664/72426022-85b70e80-37bb-11ea-806c-7d1730658ead.gif>]]

Pemetaan ini akan terus [[sequence#identifikasi|berlanjut]] sampai ke tahap dimana kita akan tahu metode seperti apa sebenarnya yang harus dipakai untuk mendapatkan solusi [[Collections#algoritma|algoritma]], hal ini kita lakukan untuk menjawab ''dua (2)'' kasus sekaligus yaitu ''[[Hipotesa Riemann|https://github.com/chetabahana/trace/wiki]]'' dan ''[[Masalah P vs NP|https://github.com/chetabahana/track/wiki]]''.<br><br>

Sekian.<br><br>
'''SALAM Sukses!'''<br>
'''© [[Chetabahana Project|https://github.com/MarketLeader]]'''<br>
[[<img src=https://stackexchange.com/users/flair/5054985.png>|https://stackoverflow.com/users/4058484/chetabahana?tab=profile]]  

==''Referensi''==
