<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1Prod" kind="class" language="C++" prot="public">
    <compoundname>csl::Prod</compoundname>
    <basecompoundref refid="classcsl_1_1AbstractMultiFunc" prot="public" virt="non-virtual">csl::AbstractMultiFunc</basecompoundref>
    <derivedcompoundref refid="classcsl_1_1IProd" prot="public" virt="non-virtual">csl::IProd</derivedcompoundref>
    <includes refid="operations_8h" local="no">operations.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1Prod_1ab942e9b327bb3b766a647126faf0937f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::Prod::Prod</definition>
        <argsstring>()</argsstring>
        <name>Prod</name>
        <qualifiedname>csl::Prod::Prod</qualifiedname>
        <briefdescription>
<para>Default constructor. Initializes <bold>argument</bold> to an empty std::vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="293" column="5" bodyfile="src/csl/operations.h" bodystart="837" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1ae6bb0fe561daa5930fb62e2dc0fc9c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Prod::Prod</definition>
        <argsstring>(const csl::vector_expr &amp;t_argument, bool explicitProd=0)</argsstring>
        <name>Prod</name>
        <qualifiedname>csl::Prod::Prod</qualifiedname>
        <param>
          <type>const csl::vector_expr &amp;</type>
          <declname>t_argument</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>explicitProd</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Initializes <bold>argument</bold> to <emphasis>operands</emphasis> (copy each element) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operands</parametername>
</parameternamelist>
<parameterdescription>
<para>Operands of the product, copied in the object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>explicitProd</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be true if no modification of the vector <bold>argument</bold> is needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="300" column="5" bodyfile="src/csl/operations.cpp" bodystart="1035" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1aadee4caca89f50c6ed7ad9dce7c69003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Prod::Prod</definition>
        <argsstring>(const Expr &amp;leftOperand, const Expr &amp;rightOperand, bool explicitProd=0)</argsstring>
        <name>Prod</name>
        <qualifiedname>csl::Prod::Prod</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>leftOperand</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>rightOperand</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>explicitProd</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates the product of &amp; leftOperand and <emphasis>rightOperand</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>leftOperand</parametername>
</parameternamelist>
<parameterdescription>
<para>Left operand. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rightOperand</parametername>
</parameternamelist>
<parameterdescription>
<para>Right operand. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>explicitProd</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be true if no modification of the vector <bold>argument</bold> is needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="308" column="5" bodyfile="src/csl/operations.cpp" bodystart="1049" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1af0bd5312033ca6006d54e117503cc52b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312" kindref="member">csl::Type</ref></type>
        <definition>csl::Type csl::Prod::getType</definition>
        <argsstring>() const override</argsstring>
        <name>getType</name>
        <qualifiedname>csl::Prod::getType</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1a77d642a8a42845ad66da5faa78cb3c27">getType</reimplements>
        <briefdescription>
<para>Gives the <bold>type</bold> of a <ref refid="classcsl_1_1Prod" kindref="compound">Prod</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="322" column="15" bodyfile="src/csl/operations.h" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1acb1ea1810e83874623d07f370efde5c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool csl::Prod::isIndexed</definition>
        <argsstring>() const override</argsstring>
        <name>isIndexed</name>
        <qualifiedname>csl::Prod::isIndexed</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1aee96fe96e6cf30e1022ee8f489884aa5">isIndexed</reimplements>
        <reimplementedby refid="classcsl_1_1IProd_1a046bd2f7ea7fb90fdf1dadad1a69af64">isIndexed</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the expression is indexed. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="327" column="18" bodyfile="src/csl/operations.h" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1abbd390d2c92c1b3187355c77ad3404c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int csl::Prod::getOrderOf</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>getOrderOf</name>
        <qualifiedname>csl::Prod::getOrderOf</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1ae89eb7b1a9e0259a60154563f3315907">getOrderOf</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="332" column="9" bodyfile="src/csl/operations.cpp" bodystart="1233" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1ae0608fd2fa4b22da81d692483f01b9fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::Prod::isReal</definition>
        <argsstring>() const override</argsstring>
        <name>isReal</name>
        <qualifiedname>csl::Prod::isReal</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1ae240dfbf5dec5abdcd3006e69b40563c">isReal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="338" column="10" bodyfile="src/csl/operations.cpp" bodystart="1241" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a1ae03daccbb1d0ff134d51f8b2a64fb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::Prod::isPurelyImaginary</definition>
        <argsstring>() const override</argsstring>
        <name>isPurelyImaginary</name>
        <qualifiedname>csl::Prod::isPurelyImaginary</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1a7ba1daf07d310140f4c417e23d37e6eb">isPurelyImaginary</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="340" column="10" bodyfile="src/csl/operations.cpp" bodystart="1260" bodyend="1277"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a74b08ed837b9be3299e99b5b355cb4d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::getRealPart</definition>
        <argsstring>() const override</argsstring>
        <name>getRealPart</name>
        <qualifiedname>csl::Prod::getRealPart</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1a4740c75c01e1d8aeb7db075fc5377789">getRealPart</reimplements>
        <briefdescription>
<para><bold>Evaluates</bold> the <bold>real part</bold> of the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The real part of the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="342" column="19" bodyfile="src/csl/operations.cpp" bodystart="1279" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1add2e178b9370eba2bd70d3ed17512a0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::Prod::getImaginaryPart</definition>
        <argsstring>() const override</argsstring>
        <name>getImaginaryPart</name>
        <qualifiedname>csl::Prod::getImaginaryPart</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1a232e9782e303c525a18f436e5e5f97b9">getImaginaryPart</reimplements>
        <briefdescription>
<para><bold>Evaluates</bold> the <bold>imaginary part</bold> of the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The imaginary part of the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="344" column="10" bodyfile="src/csl/operations.cpp" bodystart="1299" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1af42fef880d91a3705f0a86065f53560d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::getComplexModulus</definition>
        <argsstring>() const override</argsstring>
        <name>getComplexModulus</name>
        <qualifiedname>csl::Prod::getComplexModulus</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1ac1bea898b7169caabc409badff44c710">getComplexModulus</reimplements>
        <briefdescription>
<para><bold>Evaluates</bold> the <bold>modulus in the complex plane</bold> of the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The modulus part of the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="346" column="19" bodyfile="src/csl/operations.cpp" bodystart="1318" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1aad33ce50bdda177231353749abb24b71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::getComplexArgument</definition>
        <argsstring>() const override</argsstring>
        <name>getComplexArgument</name>
        <qualifiedname>csl::Prod::getComplexArgument</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1a46c3300eb0f87234002c476d3c7c9a14">getComplexArgument</reimplements>
        <briefdescription>
<para><bold>Evaluates</bold> the <bold>argument in the complex plane</bold> of the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The argument part of the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="348" column="19" bodyfile="src/csl/operations.cpp" bodystart="1325" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a71e5bf0f4ece0fec6e4aa0eb7a70f7be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::getHermitianConjugate</definition>
        <argsstring>(const Space *space) const override</argsstring>
        <name>getHermitianConjugate</name>
        <qualifiedname>csl::Prod::getHermitianConjugate</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aa5b707a5efdaef7c7945cbd921c3f526">getHermitianConjugate</reimplements>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="351" column="5" bodyfile="src/csl/operations.cpp" bodystart="1332" bodyend="1335"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a52f6516bb7bbea2ad5a4fe7754acc0a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::getHermitianConjugate</definition>
        <argsstring>(const std::vector&lt; const Space * &gt; &amp;spaces) const override</argsstring>
        <name>getHermitianConjugate</name>
        <qualifiedname>csl::Prod::getHermitianConjugate</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aff5cca2b2c8190e59f6e34cb1e383d36">getHermitianConjugate</reimplements>
        <param>
          <type>const std::vector&lt; const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> * &gt; &amp;</type>
          <declname>spaces</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="353" column="19" bodyfile="src/csl/operations.cpp" bodystart="1338" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a6658c74878dc31902a45b75994baef85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::findSubExpression</definition>
        <argsstring>(Expr_info subExpression, const Expr &amp;newExpression) const override</argsstring>
        <name>findSubExpression</name>
        <qualifiedname>csl::Prod::findSubExpression</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1acb17ac601dd6fb6c98a6de6983d41009">findSubExpression</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>subExpression</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>newExpression</declname>
        </param>
        <briefdescription>
<para>Searches a sub-expression and replaces it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>subExpression</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression to search. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newExpression</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression that replaces <bold>subExpression</bold> if it is found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression with the replacement done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="357" column="5" bodyfile="src/csl/operations.cpp" bodystart="1353" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a31991415ad6e7e8e5e9b703f9128af39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::Prod::getNumericalFactor</definition>
        <argsstring>() const override</argsstring>
        <name>getNumericalFactor</name>
        <qualifiedname>csl::Prod::getNumericalFactor</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aad25c117c8dfc4d9718ba41e8d3f33a6">getNumericalFactor</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The numerical factor of the product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="362" column="10" bodyfile="src/csl/operations.cpp" bodystart="1103" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a428ffb91c3529b4835d6bfa6289765d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::getTerm</definition>
        <argsstring>() const override</argsstring>
        <name>getTerm</name>
        <qualifiedname>csl::Prod::getTerm</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a1d36e7a5acc50766d5cd3f6d59df978d">getTerm</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The product of all the terms but the nunmerical factor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="366" column="19" bodyfile="src/csl/operations.cpp" bodystart="1111" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a065a0b483082e58a478016d0821427ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int csl::Prod::getNFactor</definition>
        <argsstring>() const override</argsstring>
        <name>getNFactor</name>
        <qualifiedname>csl::Prod::getNFactor</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a204dbd37b63432cb08932b995f49d3f4">getNFactor</reimplements>
        <briefdescription>
<para>Returns the number of possible factors in the expr. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>nArgs</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="371" column="9" bodyfile="src/csl/operations.cpp" bodystart="1129" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1aaa4dca91f1ce4fc9d6f04d528e07db90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>csl::vector_expr</type>
        <definition>csl::vector_expr csl::Prod::getFactors</definition>
        <argsstring>() const override</argsstring>
        <name>getFactors</name>
        <qualifiedname>csl::Prod::getFactors</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1ac34c9c6f05e692faeed2f030514787ad">getFactors</reimplements>
        <briefdescription>
<para>Returns all the possible factors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The concatenation of all possible factors for the arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="376" column="22" bodyfile="src/csl/operations.cpp" bodystart="1138" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a1b3dfc8deb0baece750b925ef1a95402" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::Prod::getExponents</definition>
        <argsstring>(std::vector&lt; Expr &gt; const &amp;factors, std::vector&lt; Expr &gt; &amp;exponents) const override</argsstring>
        <name>getExponents</name>
        <qualifiedname>csl::Prod::getExponents</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1ac513c930caa9939c2b9557f36a34ee69">getExponents</reimplements>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt; const &amp;</type>
          <declname>factors</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt; &amp;</type>
          <declname>exponents</declname>
        </param>
        <briefdescription>
<para>Fills in a vector the exponents corresponding to some factors for the expression. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, an expression like <formula id="0">$ 2ax^2\cos y $</formula> will have exponents <formula id="1">$ (1, 2, 0) $</formula> for the set of factors <formula id="2">$ (a, x, y). $</formula> <bold>factors</bold> and <bold>exponents</bold> must of course be of the same size. Otherwise the behaviour is undefined.</para>
<para><simplesect kind="note"><para>This function assumes that the expression is canonical, in particular that no terms like <formula id="3">$ x\cdot x^2 $</formula> can appear.</para>
</simplesect>
<simplesect kind="note"><para>This function does not take into account factors in sums like <formula id="4">$ (1 + x) $</formula> (this will return a factor 0 for <formula id="5">$ x $</formula>).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>factors</parametername>
</parameternamelist>
<parameterdescription>
<para>Factors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponents</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponents (out variable, modified during the run). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="378" column="10" bodyfile="src/csl/operations.cpp" bodystart="1150" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1adb2f82801fb73fb0baaaa18079e6cfa5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::Prod::askTerm</definition>
        <argsstring>(Expr_info expr, bool exact=false) const override</argsstring>
        <name>askTerm</name>
        <qualifiedname>csl::Prod::askTerm</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a27ad666bf7d533607da9675b0c645ee9">askTerm</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exact</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Tells if the factor <emphasis>expr</emphasis> appear in the product. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor to test. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if expr can factor the product. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="386" column="10" bodyfile="src/csl/operations.cpp" bodystart="1157" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1ad278cc42d80c2429fc3f6cd2abe38b33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::Prod::suppressTerm</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>suppressTerm</name>
        <qualifiedname>csl::Prod::suppressTerm</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a43520e1d6d5fdad9b50f77c6e027f928">suppressTerm</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Suppresses the term expr in the product. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function supposes that the function <ref refid="classcsl_1_1Prod_1adb2f82801fb73fb0baaaa18079e6cfa5" kindref="member">askTerm()</ref> has been called precedently and does not warn the user if the factor expr is not present.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor to suppress in the product. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>The</bold> product amputated of <bold>expr</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="394" column="10" bodyfile="src/csl/operations.cpp" bodystart="1171" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a3b491384c2717ae8b618d91dd8db39f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>std::optional&lt; Expr &gt; csl::Prod::suppressExponent</definition>
        <argsstring>(Expr const &amp;factor, Expr const &amp;exponent) const override</argsstring>
        <name>suppressExponent</name>
        <qualifiedname>csl::Prod::suppressExponent</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a4eeedaeaa39e75facf1060dce7c57a8f">suppressExponent</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> const &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> const &amp;</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
<para>Returns the expression where the factor <bold>factor^exponent</bold> has been suppressed. </para>
        </briefdescription>
        <detaileddescription>
<para>This function works the same manner as <ref refid="classcsl_1_1Prod_1a1b3dfc8deb0baece750b925ef1a95402" kindref="member">getExponents()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor to suppress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent of the factor to suppress.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The modified expression if the factor has been found. </para>
</simplesect>
<simplesect kind="return"><para>std::nullopt else.</para>
</simplesect>
<simplesect kind="note"><para>This function may replace in the future the functions <ref refid="classcsl_1_1Prod_1adb2f82801fb73fb0baaaa18079e6cfa5" kindref="member">askTerm()</ref> and <ref refid="classcsl_1_1Prod_1ad278cc42d80c2429fc3f6cd2abe38b33" kindref="member">suppressTerm()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="396" column="19" bodyfile="src/csl/operations.cpp" bodystart="1212" bodyend="1231"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1ae065e3860edfd408a1cdef2bfb259b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::Prod::insert</definition>
        <argsstring>(const Expr &amp;expr, bool side=1) override</argsstring>
        <name>insert</name>
        <qualifiedname>csl::Prod::insert</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a5437e7f685edf8549e6d3b34572343f8">insert</reimplements>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>side</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Inserts an expression in a sum or a product. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows to insert an element in a sum or product without comparing all existing terms. This saves time when inserting element by element. The <bold>side</bold> parameter allows to insert to the left (side = 0) or to the right (side = 1) in products (useful when considering non commutating expressions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>side</parametername>
</parameternamelist>
<parameterdescription>
<para>Side of insertion for <ref refid="classcsl_1_1Prod" kindref="compound">Prod</ref> expressions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="399" column="18" bodyfile="src/csl/operations.cpp" bodystart="1520" bodyend="1573"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a25c92e6737d3ca9f449535f90d97d3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::Prod::leftInsert</definition>
        <argsstring>(const Expr &amp;expr)</argsstring>
        <name>leftInsert</name>
        <qualifiedname>csl::Prod::leftInsert</qualifiedname>
        <reimplementedby refid="classcsl_1_1IProd_1a5931b2beabc59ad1724b9704d5cc934f">leftInsert</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="400" column="18" bodyfile="src/csl/operations.cpp" bodystart="1574" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1af7f0a0b4fb87b06466360b81094469a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::Prod::rightInsert</definition>
        <argsstring>(const Expr &amp;expr)</argsstring>
        <name>rightInsert</name>
        <qualifiedname>csl::Prod::rightInsert</qualifiedname>
        <reimplementedby refid="classcsl_1_1IProd_1a5c240d3e6eeea0de1c95ab49b2891063">rightInsert</reimplementedby>
        <param>
          <type>const <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="401" column="18" bodyfile="src/csl/operations.cpp" bodystart="1621" bodyend="1679"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a6f7a134346d64c86bbc3bf855321a568" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::Prod::print</definition>
        <argsstring>(int mode=0, std::ostream &amp;out=std::cout, LibraryMode libMode=LibraryMode::NoLib) const override</argsstring>
        <name>print</name>
        <qualifiedname>csl::Prod::print</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aed56cb85894209a9bbc9b8bdada5e6ab">print</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>LibraryMode</type>
          <declname>libMode</declname>
          <defval>LibraryMode::NoLib</defval>
        </param>
        <briefdescription>
<para>Displays the abstract in standard output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Tells if the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> is printed alone (default) or in another expr. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="403" column="10" bodyfile="src/csl/operations.cpp" bodystart="1381" bodyend="1435"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a6e232ef31360d821242f56794a558c15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::Prod::printCode</definition>
        <argsstring>(int mode=0, std::ostream &amp;out=std::cout) const override</argsstring>
        <name>printCode</name>
        <qualifiedname>csl::Prod::printCode</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a2910dd30d90915c11d48c01cab618dda">printCode</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="407" column="10" bodyfile="src/csl/operations.cpp" bodystart="1437" bodyend="1446"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a3bcfa6d3a4b9a8d1ab4255f01fe7edfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>string csl::Prod::printLaTeX</definition>
        <argsstring>(int mode=0) const override</argsstring>
        <name>printLaTeX</name>
        <qualifiedname>csl::Prod::printLaTeX</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aa067d4a97135bfe2052a7e21c28f75be">printLaTeX</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a LaTeX output for the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Tells if the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> is printed alone (default) or in another expr. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the LaTeX output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="409" column="17" bodyfile="src/csl/operations.cpp" bodystart="1448" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a3bfdd94f06244aa5af7027901d9e00dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>long double</type>
        <definition>long double csl::Prod::evaluateScalar</definition>
        <argsstring>() const override</argsstring>
        <name>evaluateScalar</name>
        <qualifiedname>csl::Prod::evaluateScalar</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a543d5a4f0432e166b492ad28a860a65f">evaluateScalar</reimplements>
        <briefdescription>
<para>Return the <bold>product</bold> of all the arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The product of the scalar evaluation of all the arguments. </para>
</simplesect>
<simplesect kind="note"><para>For this function to be justified, all the arguments must be <bold>scalar</bold> and <bold>real</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="416" column="17" bodyfile="src/csl/operations.cpp" bodystart="1681" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1abd8408064c53f614ef5e2bdff399c6d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::evaluate</definition>
        <argsstring>(csl::eval::mode user_mode=csl::eval::base) const override</argsstring>
        <name>evaluate</name>
        <qualifiedname>csl::Prod::evaluate</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aa3a4cb7f30e2a422fe27a513e03d6600">evaluate</reimplements>
        <param>
          <type>csl::eval::mode</type>
          <declname>user_mode</declname>
          <defval>csl::eval::base</defval>
        </param>
        <briefdescription>
<para><bold>Evaluates</bold> the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Replaces all variables by their value and evaluating. This function must be used instead of <ref refid="classcsl_1_1Prod_1a3bfdd94f06244aa5af7027901d9e00dd" kindref="member">evaluateScalar()</ref> when treating not only real scalars.* In particular (x=2, y=3) x+iy evaluates to 3+ 3i whereas <ref refid="classcsl_1_1Prod_1a3bfdd94f06244aa5af7027901d9e00dd" kindref="member">evaluateScalar()</ref> would return 3. <simplesect kind="return"><para>The abstract result of the evaluation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="418" column="19" bodyfile="src/csl/operations.cpp" bodystart="1692" bodyend="1713"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a6432de87c86ccfa67a36f0f8e0b351a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unique_Expr</type>
        <definition>unique_Expr csl::Prod::copy_unique</definition>
        <argsstring>() const override</argsstring>
        <name>copy_unique</name>
        <qualifiedname>csl::Prod::copy_unique</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aaa996819710adc3b7529c74a628be623">copy_unique</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="421" column="17" bodyfile="src/csl/operations.cpp" bodystart="1715" bodyend="1721"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a6c78b513ad84145b6429d067e637e51d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::Prod::deepCopy</definition>
        <argsstring>() const override</argsstring>
        <name>deepCopy</name>
        <qualifiedname>csl::Prod::deepCopy</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a09648782dcf2e81abb5b864f476cc410">deepCopy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="423" column="10" bodyfile="src/csl/operations.cpp" bodystart="1723" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a77738ecfdfe91ca3ca95c95b725be576" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::Prod::refresh</definition>
        <argsstring>() const override</argsstring>
        <name>refresh</name>
        <qualifiedname>csl::Prod::refresh</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aaeab3809e91989adbdf29c3f56d905b6">refresh</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="425" column="10" bodyfile="src/csl/operations.cpp" bodystart="1736" bodyend="1739"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a864b6337e4d97c072b8276bca9b4b0f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref></type>
        <definition>Expr csl::Prod::deepRefresh</definition>
        <argsstring>() const override</argsstring>
        <name>deepRefresh</name>
        <qualifiedname>csl::Prod::deepRefresh</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a10358c33402ed520dc5888b25bb26af3">deepRefresh</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="427" column="10" bodyfile="src/csl/operations.cpp" bodystart="1741" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a39c0e506ddcbe6912bfb37b0ea55144f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Prod::mergeNumericals</definition>
        <argsstring>()</argsstring>
        <name>mergeNumericals</name>
        <qualifiedname>csl::Prod::mergeNumericals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="429" column="10" bodyfile="src/csl/operations.cpp" bodystart="1751" bodyend="1801"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a6f78613f8125446c9128906ab490c18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Prod::mergeProducts</definition>
        <argsstring>()</argsstring>
        <name>mergeProducts</name>
        <qualifiedname>csl::Prod::mergeProducts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="431" column="10" bodyfile="src/csl/operations.cpp" bodystart="1082" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a6fd5885a37a7e6492ec7777121e23944" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::Prod::mergeTerms</definition>
        <argsstring>()</argsstring>
        <name>mergeTerms</name>
        <qualifiedname>csl::Prod::mergeTerms</qualifiedname>
        <reimplementedby refid="classcsl_1_1IProd_1a0ceb2414cba9609088bc2b0461ba2191">mergeTerms</reimplementedby>
        <briefdescription>
<para>Merge identical terms. </para>
        </briefdescription>
        <detaileddescription>
<para>When identical terms (identical to a numerical factor) appear this function merge them in the same term. Example: x*y*x^2 -&gt; x^3+y. <simplesect kind="return"><para><bold>True</bold> if terms have been merged. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="439" column="18" bodyfile="src/csl/operations.cpp" bodystart="1803" bodyend="1888"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a1620a57a9851d95851d7f099d5b56d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Prod::orderTerms</definition>
        <argsstring>()</argsstring>
        <name>orderTerms</name>
        <qualifiedname>csl::Prod::orderTerms</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="441" column="10" bodyfile="src/csl/operations.cpp" bodystart="1890" bodyend="1961"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a3830459faf91d3cf17c7fa401fb00557" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::derive</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>derive</name>
        <qualifiedname>csl::Prod::derive</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aecab8c872023a2d0771e7e4f83bb05f8">derive</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Derives the product. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument of the derivation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The derivative following the formula ... </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="447" column="19" bodyfile="src/csl/operations.cpp" bodystart="1963" bodyend="1982"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a2c508afc1d4a74cd1ca69b1f900993d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::expand</definition>
        <argsstring>(bool full=false, bool inPlace=false) const override</argsstring>
        <name>expand</name>
        <qualifiedname>csl::Prod::expand</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1aa7b240760c1c7d930053fbd38c812196">expand</reimplements>
        <param>
          <type>bool</type>
          <declname>full</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para><bold>Develops</bold> the product by expanding the sums inside. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>full</parametername>
</parameternamelist>
<parameterdescription>
<para>If true the expandment is <bold>recursive</bold> through all the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expanded product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="453" column="19" bodyfile="src/csl/operations.cpp" bodystart="1984" bodyend="1987"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1aa6bb716b3dea854dd7e897976cf08788" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::expand_if</definition>
        <argsstring>(std::function&lt; bool(Expr const &amp;)&gt; const &amp;f, bool full=false, bool inPlace=false) const override</argsstring>
        <name>expand_if</name>
        <qualifiedname>csl::Prod::expand_if</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1af09641d4d997d869626ff660ca4d3f8b">expand_if</reimplements>
        <param>
          <type>std::function&lt; bool(<ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> const &amp;)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>full</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para><bold>Develops</bold> the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function concerns only products (and exponents) that will be flatten to give at the end a sum of independant terms.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Functions that returns a boolean that determines which arguments must be expanded in products.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>full</parametername>
</parameternamelist>
<parameterdescription>
<para>If true the expandment is <bold>recursive</bold> through all the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expand <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="464" column="5" bodyfile="src/csl/operations.cpp" bodystart="1989" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1ad52e8f95508d38377324e9ef8fb4c28d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int csl::Prod::isPolynomial</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>isPolynomial</name>
        <qualifiedname>csl::Prod::isPolynomial</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractMultiFunc_1a8014e107c584b6450d3cc1ce78e154ca">isPolynomial</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Determines if the expression is a mononomial term in <bold>expr</bold>, i.e. a term of the form C*expr^n with C independent of expr, n integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Variable" kindref="compound">Variable</ref> of the supposed mononomial. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The order of the exponent if there is one (n in the example). </para>
</simplesect>
<simplesect kind="return"><para>-1 else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="468" column="9" bodyfile="src/csl/operations.cpp" bodystart="2077" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1ab552c778033130c31c476b2e1939e84e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Prod::getPolynomialTerm</definition>
        <argsstring>(Expr_info t_variable, int order) const override</argsstring>
        <name>getPolynomialTerm</name>
        <qualifiedname>csl::Prod::getPolynomialTerm</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1ade540a127da7304f2b7282f4dcaffc7f">getPolynomialTerm</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>t_variable</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Calculates and returns the polynomial term corresponding to <bold>*this</bold> with the variable <bold>t_variable</bold> at order <bold>order</bold>. In particular, this function assumes that the checks have already been made with the function <ref refid="classcsl_1_1Prod_1ad52e8f95508d38377324e9ef8fb4c28d" kindref="member">isPolynomial()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_variable</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Variable" kindref="compound">Variable</ref> of the polynomial. \order Order of <bold>*this</bold> in <bold>t_variable</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The same expression as (*this) with the term <bold>t_variable^order</bold> removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="470" column="19" bodyfile="src/csl/operations.cpp" bodystart="2101" bodyend="2121"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a68dff5c0b393ad75f5e7e0ac97d229dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int csl::Prod::getParity</definition>
        <argsstring>(Expr_info t_variable) const override</argsstring>
        <name>getParity</name>
        <qualifiedname>csl::Prod::getParity</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aea8459b3206eb3a2297eeea7688e9520">getParity</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>t_variable</declname>
        </param>
        <briefdescription>
<para>Returns the parity property of the expression with respect to <bold>t_variable</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_variable.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the expression is <bold>even</bold> in <bold>t_variable</bold>. </para>
</simplesect>
<simplesect kind="return"><para>-1 if the expression is <bold>odd</bold> in <bold>t_variable</bold>. </para>
</simplesect>
<simplesect kind="return"><para>0 else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="473" column="9" bodyfile="src/csl/operations.cpp" bodystart="2123" bodyend="2132"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a1a2c0f67a8aa5798dd9226d721237a8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::Prod::operator==</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::Prod::operator==</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a3775f3088e784cc924cb7d26e118660e">operator==</reimplements>
        <reimplementedby refid="classcsl_1_1IProd_1af45bd102ad6a062167330ab8715daf78">operator==</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para><bold>Compares</bold> the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> with another. </para>
        </briefdescription>
        <detaileddescription>
<para>Here if two Abstracts have the same name, the function will return <bold>true</bold> even if they are <bold>not</bold> <bold>mathematically</bold> <bold>equal</bold>. So beware not to name different things the same way. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two Abstracts are the same (or have the same name). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="475" column="18" bodyfile="src/csl/operations.cpp" bodystart="2134" bodyend="2189"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a06a4864e62023461f8b986e805d5cd51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::Prod::partialComparison</definition>
        <argsstring>(Expr_info expr) const</argsstring>
        <name>partialComparison</name>
        <qualifiedname>csl::Prod::partialComparison</qualifiedname>
        <reimplementedby refid="classcsl_1_1IProd_1a27022cfc001b941db7af2a0b8d593965">partialComparison</reimplementedby>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="477" column="18" bodyfile="src/csl/operations.cpp" bodystart="2191" bodyend="2224"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Prod_1a056eb7df43a68c75f9a498583bd00e6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Prod::operator&lt;</definition>
        <argsstring>(const Abstract *expr) const override</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>csl::Prod::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/operations.h" line="479" column="5" bodyfile="src/csl/simplification.cpp" bodystart="561" bodyend="581"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Handles a product, function of multiple arguments. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>csl::Abstract</label>
        <link refid="classcsl_1_1Abstract"/>
      </node>
      <node id="2">
        <label>csl::AbstractMultiFunc</label>
        <link refid="classcsl_1_1AbstractMultiFunc"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>csl::IProd</label>
        <link refid="classcsl_1_1IProd"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>csl::Prod</label>
        <link refid="classcsl_1_1Prod"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>csl::Abstract</label>
        <link refid="classcsl_1_1Abstract"/>
      </node>
      <node id="2">
        <label>csl::AbstractMultiFunc</label>
        <link refid="classcsl_1_1AbstractMultiFunc"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>csl::Prod</label>
        <link refid="classcsl_1_1Prod"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/csl/operations.h" line="287" column="1" bodyfile="src/csl/operations.h" bodystart="287" bodyend="480"/>
    <listofallmembers>
      <member refid="classcsl_1_1Abstract_1ad5fee68c1f3dcbda0e936926fed17616" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>Abstract</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1ad7c6d28772b2684c20a42bbfcb8cf257" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>AbstractMultiFunc</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a7ccbae6ee27d3e2e26187ef3ea8f92b8" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>AbstractMultiFunc</name></member>
      <member refid="classcsl_1_1Abstract_1a5549ac0c186b3c6febf332245a25a82c" prot="public" virt="virtual"><scope>csl::Prod</scope><name>addAntiSymmetry</name></member>
      <member refid="classcsl_1_1Abstract_1abbab11282e5c6ac46b018642ff129f47" prot="public" virt="virtual"><scope>csl::Prod</scope><name>addDependency</name></member>
      <member refid="classcsl_1_1Abstract_1a101219973341a39cf15f07e5e1aa388f" prot="public" virt="virtual"><scope>csl::Prod</scope><name>addition_own</name></member>
      <member refid="classcsl_1_1Abstract_1ad431770faa4291116a50175193a11a88" prot="public" virt="virtual"><scope>csl::Prod</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1Abstract_1acd972aed8326d4c13534594e061ee6da" prot="public" virt="virtual"><scope>csl::Prod</scope><name>antisymmetrise</name></member>
      <member refid="classcsl_1_1Abstract_1a61d3ab932182226f4670a62bbb22af4e" prot="public" virt="virtual"><scope>csl::Prod</scope><name>applyDiracDelta</name></member>
      <member refid="classcsl_1_1Abstract_1a316956fea77627a716500a2bbfc1f3b7" prot="public" virt="virtual"><scope>csl::Prod</scope><name>applyOperator</name></member>
      <member refid="classcsl_1_1Abstract_1a6305ce90c795bfb416d8e958c62f905c" prot="public" virt="virtual"><scope>csl::Prod</scope><name>applySelfStructureOn</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a8e44404eb3e6c23f7c7ddf10cdd3a152" prot="protected" virt="non-virtual"><scope>csl::Prod</scope><name>argument</name></member>
      <member refid="classcsl_1_1Prod_1adb2f82801fb73fb0baaaa18079e6cfa5" prot="public" virt="virtual"><scope>csl::Prod</scope><name>askTerm</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a6236c27a797993973fb45dc9f4906962" prot="public" virt="virtual"><scope>csl::Prod</scope><name>begin</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1aa405a3e5cd03bb390ce3e804fe8af806" prot="public" virt="virtual"><scope>csl::Prod</scope><name>begin</name></member>
      <member refid="classcsl_1_1Abstract_1aa4cba37520821432f37e212fefbc2534" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1Abstract_1af0f40b77914e45f56bf87839d00211d7" prot="public" virt="virtual"><scope>csl::Prod</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1Abstract_1afd9d0336808e8adf4ccdccb51587ed8c" prot="public" virt="virtual"><scope>csl::Prod</scope><name>checkIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a1ebd84082bb93418408cc0babe2dffe2" prot="public" virt="virtual"><scope>csl::Prod</scope><name>checkIndexStructure</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1accd66bc16179cf88684a6db68e277921" prot="public" virt="virtual"><scope>csl::Prod</scope><name>collect</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1ac54eff0c503e2c2947b232622261c998" prot="public" virt="virtual"><scope>csl::Prod</scope><name>commutesWith</name></member>
      <member refid="classcsl_1_1Abstract_1a7caee12abb451168149779a668dfc59e" prot="public" virt="virtual"><scope>csl::Prod</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Abstract_1a0f16fda9fe72a89c61ece36101a11d95" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Abstract_1aed79d20a0821205e6430c80a474117d3" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>contractIndex</name></member>
      <member refid="classcsl_1_1Abstract_1ad874fc858295a737e6ce884530f1109b" prot="public" virt="virtual"><scope>csl::Prod</scope><name>contraction</name></member>
      <member refid="classcsl_1_1Abstract_1abd35096982e92b669ea55d960c5f44be" prot="public" virt="virtual"><scope>csl::Prod</scope><name>contraction</name></member>
      <member refid="classcsl_1_1Abstract_1af29c2898c5d3ba96de8018a0838c402c" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>copy</name></member>
      <member refid="classcsl_1_1Prod_1a6432de87c86ccfa67a36f0f8e0b351a1" prot="public" virt="virtual"><scope>csl::Prod</scope><name>copy_unique</name></member>
      <member refid="classcsl_1_1Prod_1a6c78b513ad84145b6429d067e637e51d" prot="public" virt="virtual"><scope>csl::Prod</scope><name>deepCopy</name></member>
      <member refid="classcsl_1_1Prod_1a864b6337e4d97c072b8276bca9b4b0f0" prot="public" virt="virtual"><scope>csl::Prod</scope><name>deepRefresh</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1ad072ccb3f8007430a6d6dce53f32b441" prot="public" virt="virtual"><scope>csl::Prod</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a7c3599e88ef45e1abc9c878432c67ade" prot="public" virt="virtual"><scope>csl::Prod</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a9d64fefa1c3718d1fe431edfa4934e71" prot="public" virt="virtual"><scope>csl::Prod</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a32bbf7b44a59c1efe7e73961da575af4" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1Abstract_1a9d7d8586a0df66ba8da33528d6400e66" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::Prod</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1Prod_1a3830459faf91d3cf17c7fa401fb00557" prot="public" virt="virtual"><scope>csl::Prod</scope><name>derive</name></member>
      <member refid="classcsl_1_1Abstract_1aeb08811cf370616477a92075e4a218ee" prot="public" virt="virtual"><scope>csl::Prod</scope><name>determinant</name></member>
      <member refid="classcsl_1_1Abstract_1a1578c74aee1050b806a67e7a81a67f5c" prot="public" virt="virtual"><scope>csl::Prod</scope><name>division_own</name></member>
      <member refid="classcsl_1_1Abstract_1a4cc7a46deaa3eaa7593909d74e76d4af" prot="public" virt="virtual"><scope>csl::Prod</scope><name>dot</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1ada1ce81d61672e15a142fe8d3bee98bd" prot="public" virt="virtual"><scope>csl::Prod</scope><name>empty</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a178ccaec7d4546873084591d93398153" prot="public" virt="virtual"><scope>csl::Prod</scope><name>end</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a42f8f99108068dca2bd7a259577a0bcf" prot="public" virt="virtual"><scope>csl::Prod</scope><name>end</name></member>
      <member refid="classcsl_1_1Prod_1abd8408064c53f614ef5e2bdff399c6d3" prot="public" virt="virtual"><scope>csl::Prod</scope><name>evaluate</name></member>
      <member refid="classcsl_1_1Prod_1a3bfdd94f06244aa5af7027901d9e00dd" prot="public" virt="virtual"><scope>csl::Prod</scope><name>evaluateScalar</name></member>
      <member refid="classcsl_1_1Prod_1a2c508afc1d4a74cd1ca69b1f900993d5" prot="public" virt="virtual"><scope>csl::Prod</scope><name>expand</name></member>
      <member refid="classcsl_1_1Prod_1aa6bb716b3dea854dd7e897976cf08788" prot="public" virt="virtual"><scope>csl::Prod</scope><name>expand_if</name></member>
      <member refid="classcsl_1_1Abstract_1aa2696a0feb43766ef54e1e3dd3d6d134" prot="public" virt="virtual"><scope>csl::Prod</scope><name>exponentiation_own</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1ad9eed372c276bc55ce8614a94962fef6" prot="public" virt="virtual"><scope>csl::Prod</scope><name>factor</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a71ffe88901a200f59bdb88d4adf09a44" prot="public" virt="virtual"><scope>csl::Prod</scope><name>factor</name></member>
      <member refid="classcsl_1_1Prod_1a6658c74878dc31902a45b75994baef85" prot="public" virt="virtual"><scope>csl::Prod</scope><name>findSubExpression</name></member>
      <member refid="classcsl_1_1Abstract_1a021946e84d8c1a019908cac578b16fe8" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getAllDependencies</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a75ae783c1bd8e55ccc005af538599def" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1af168c84e071262cc48108cf991526651" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a898d6cf2a7f348feacab189447bee1eb" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::Prod</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1aa689fb64eecb86edbde6c745d1ce756b" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::Prod</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1afeb26e1382411448ce3c65d50fefd8bb" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getCanonicalPermutation</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a2bc449bd37728479b8c6b0a9eea3bccf" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getCommutable</name></member>
      <member refid="classcsl_1_1Prod_1aad33ce50bdda177231353749abb24b71" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getComplexArgument</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1abd84cb1aa54ef9875bae6f806ed1d753" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getComplexConjugate</name></member>
      <member refid="classcsl_1_1Prod_1af42fef880d91a3705f0a86065f53560d" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getComplexModulus</name></member>
      <member refid="classcsl_1_1Abstract_1a470d9f1267fba4a82e13af4a39470f81" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getComplexProperty</name></member>
      <member refid="classcsl_1_1Abstract_1af04c0e4426f0bf9df365afe0148d59df" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getContractedPair</name></member>
      <member refid="classcsl_1_1Abstract_1aec707d949f0f98e08ab4642c93dd9eb5" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getContractionProperties</name></member>
      <member refid="classcsl_1_1Abstract_1aa22f0e4c9c91f43b5cd61cbb873869eb" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getDeltaMinus</name></member>
      <member refid="classcsl_1_1Abstract_1a69a657baf1c35ed581e9db2c47a71c99" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getDeltaPlus</name></member>
      <member refid="classcsl_1_1Abstract_1a9531d78d67c82e288c0130da5b1ba80b" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getDenom</name></member>
      <member refid="classcsl_1_1Abstract_1a5856c3d55a6d1406970f3656e61efe8e" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getDim</name></member>
      <member refid="classcsl_1_1Abstract_1a77e067fc57c0c2e70d141079455fdbd7" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getElementary</name></member>
      <member refid="classcsl_1_1Prod_1a1b3dfc8deb0baece750b925ef1a95402" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getExponents</name></member>
      <member refid="classcsl_1_1Prod_1aaa4dca91f1ce4fc9d6f04d528e07db90" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getFactors</name></member>
      <member refid="classcsl_1_1Abstract_1aa4136dc23f1fba4bf897b54c8592ccfc" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getFreeIndexStructure</name></member>
      <member refid="classcsl_1_1Prod_1a71e5bf0f4ece0fec6e4aa0eb7a70f7be" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getHermitianConjugate</name></member>
      <member refid="classcsl_1_1Prod_1a52f6516bb7bbea2ad5a4fe7754acc0a8" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getHermitianConjugate</name></member>
      <member refid="classcsl_1_1Prod_1add2e178b9370eba2bd70d3ed17512a0c" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getImaginaryPart</name></member>
      <member refid="classcsl_1_1Abstract_1a3234ce243f6a2e11950be42f10100943" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getIndex</name></member>
      <member refid="classcsl_1_1Abstract_1ae125a32b6f3d0368b6055d4e58c1ff3f" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1ae6a9a9ef3efd6bb83b62c0a353742d25" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>getIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1addb848bf4cdea207484a71e9b1006ead" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getIndexStructureView</name></member>
      <member refid="classcsl_1_1Abstract_1a632e28530a68539fadacd7ab7ffc8be1" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getIndexStructureView</name></member>
      <member refid="classcsl_1_1Abstract_1a3d6b1e294cf24dea17c3c4361226138b" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getInfBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1a9c4a302d1a3cbf4dd9394f5e5880d343" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getLatexName</name></member>
      <member refid="classcsl_1_1Abstract_1a652101e34b2efa43114150e9af3c79d5" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getLibDependency</name></member>
      <member refid="classcsl_1_1Abstract_1af7f5e7466e754984a2c4394a112464f7" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getName</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1af12bbdfb8a1b45d722d37f2444443457" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getNArgs</name></member>
      <member refid="classcsl_1_1Abstract_1a42125e9765a771c47819548d342b0b28" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getNContractedPairs</name></member>
      <member refid="classcsl_1_1Prod_1a065a0b483082e58a478016d0821427ab" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getNFactor</name></member>
      <member refid="classcsl_1_1Abstract_1add364193f7a78ac28f7001c7f4036453" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getNIndices</name></member>
      <member refid="classcsl_1_1Abstract_1a6aa6bcc7cb8ee1574f29dc6ab6c6f0ed" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getNum</name></member>
      <member refid="classcsl_1_1Prod_1a31991415ad6e7e8e5e9b703f9128af39" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getNumericalFactor</name></member>
      <member refid="classcsl_1_1Abstract_1a9c3ec3dfe1fbd8ead5c8d9aca421a863" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getOperand</name></member>
      <member refid="classcsl_1_1Abstract_1a9500a21d75d03c695ec0c76493600b38" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getOrder</name></member>
      <member refid="classcsl_1_1Prod_1abbd390d2c92c1b3187355c77ad3404c7" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getOrderOf</name></member>
      <member refid="classcsl_1_1Abstract_1ab150130c9f67daaf6aba52b9f6b90941" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getParent</name></member>
      <member refid="classcsl_1_1Abstract_1a15f775b5add9af8727ead2cfaab78ba2" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getParent_info</name></member>
      <member refid="classcsl_1_1Prod_1a68dff5c0b393ad75f5e7e0ac97d229dc" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getParity</name></member>
      <member refid="classcsl_1_1Abstract_1a946d175d946da102c5f4cc91840703cb" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getPermutations</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1aa82b52395acc9570f21ecca507dde7e2" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getPoint</name></member>
      <member refid="classcsl_1_1Prod_1ab552c778033130c31c476b2e1939e84e" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getPolynomialTerm</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a1b6044133a95c411324d20afe460c55b" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getPrimaryType</name></member>
      <member refid="classcsl_1_1Abstract_1a07489d0569bc983718796d21c73f34b3" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getProduct</name></member>
      <member refid="classcsl_1_1Prod_1a74b08ed837b9be3299e99b5b355cb4d4" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getRealPart</name></member>
      <member refid="classcsl_1_1Abstract_1a5b77f008f4b95030641224877004f06c" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getRegularExpression</name></member>
      <member refid="classcsl_1_1Abstract_1a625efe55a17b97a1c0f085bdbf3a962a" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getShape</name></member>
      <member refid="classcsl_1_1Abstract_1aa83df1d9dc202457113e5b38bd694fae" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSign</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1af5fc70d8f2b9e7df0dfff973a754432a" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSubSymbols</name></member>
      <member refid="classcsl_1_1Abstract_1a7dcdc11b64c8c515933882168d0792ef" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a413c50b2663f57d38c1d3ec3cfeaa3ce" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a26a0854bca4c47e84a1da36a3de8c49f" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a29261a946b3398b6129237620754a8b9" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a8a067b70756c4eef758aa88076a95162" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1aeaf8154e39ff211b12e6382e675ccaad" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSum</name></member>
      <member refid="classcsl_1_1Abstract_1a2fcc223dbf5d880e923c07df142df5c8" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getSupBoundary</name></member>
      <member refid="classcsl_1_1Prod_1a428ffb91c3529b4835d6bfa6289765d8" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getTerm</name></member>
      <member refid="classcsl_1_1Abstract_1a404c5e89a3aad8a8dabcb56d4120c0fe" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getTransposed</name></member>
      <member refid="classcsl_1_1Abstract_1aca3debb143668fd3ab75a27a47dd0c13" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getTransposed</name></member>
      <member refid="classcsl_1_1Prod_1af0bd5312033ca6006d54e117503cc52b" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getType</name></member>
      <member refid="classcsl_1_1Abstract_1a78f98ba06476e464e3fd2fce0d1f8243" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getValue</name></member>
      <member refid="classcsl_1_1Abstract_1a628563238145f3a9acc331f1a89ce32f" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getValued</name></member>
      <member refid="classcsl_1_1Abstract_1ae85f810bbadbc792210c958e8f1b2ffb" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getVariable</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a5e910beb3bdf8459306fe0cda78c1c76" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getVectorArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a0188b049736016c970a2513ed9f6931f" prot="public" virt="virtual"><scope>csl::Prod</scope><name>getVectorialModulus</name></member>
      <member refid="classcsl_1_1Abstract_1a94bf1455397fdd2df8dbbc3b41c2f3f4" prot="public" virt="virtual"><scope>csl::Prod</scope><name>hasChainContractionProperty</name></member>
      <member refid="classcsl_1_1Abstract_1aa31e08c251d96b8ea8ec8d385895c1ff" prot="public" virt="virtual"><scope>csl::Prod</scope><name>hasContractionProperty</name></member>
      <member refid="classcsl_1_1Abstract_1a8c42723e8bc6334c99f00898cc1d59d7" prot="public" virt="virtual"><scope>csl::Prod</scope><name>hermitian</name></member>
      <member refid="classcsl_1_1Prod_1ae065e3860edfd408a1cdef2bfb259b2e" prot="public" virt="virtual"><scope>csl::Prod</scope><name>insert</name></member>
      <member refid="classcsl_1_1Abstract_1a1b68943aa7ecf60a63af0f2f368eef8f" prot="public" virt="virtual"><scope>csl::Prod</scope><name>inverseMatrix</name></member>
      <member refid="classcsl_1_1Abstract_1a9347e75b0cd0b75e0f0a38db93b29d83" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isAnOperator</name></member>
      <member refid="classcsl_1_1Abstract_1ac09992d147b39388c8936b3bff648930" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isArbitrary</name></member>
      <member refid="classcsl_1_1Abstract_1ad74c068f1da78856321932b6b6ae17dc" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isBuildingBlock</name></member>
      <member refid="classcsl_1_1Abstract_1a22a594845a29429c9b4f19c92bd18cad" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isComplexConjugate</name></member>
      <member refid="classcsl_1_1Abstract_1a464f4f0613db9b4b0a4efe26a3a03d60" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isEmpty</name></member>
      <member refid="classcsl_1_1Abstract_1af2ce38838e35c5785f92373a1d830668" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isHermitianConjugate</name></member>
      <member refid="classcsl_1_1Prod_1acb1ea1810e83874623d07f370efde5c2" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isIndexed</name></member>
      <member refid="classcsl_1_1Abstract_1a9a014bfd266b5f8471f23580e271979b" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isInteger</name></member>
      <member refid="classcsl_1_1Prod_1ad52e8f95508d38377324e9ef8fb4c28d" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isPolynomial</name></member>
      <member refid="classcsl_1_1Prod_1a1ae03daccbb1d0ff134d51f8b2a64fb4" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isPurelyImaginary</name></member>
      <member refid="classcsl_1_1Prod_1ae0608fd2fa4b22da81d692483f01b9fb" prot="public" virt="virtual"><scope>csl::Prod</scope><name>isReal</name></member>
      <member refid="classcsl_1_1Prod_1a25c92e6737d3ca9f449535f90d97d3da" prot="public" virt="virtual"><scope>csl::Prod</scope><name>leftInsert</name></member>
      <member refid="classcsl_1_1Abstract_1ab79c1d8df9e6b1a3eca66958f7dc489d" prot="public" virt="virtual"><scope>csl::Prod</scope><name>matchShape</name></member>
      <member refid="classcsl_1_1Abstract_1ac3978c71035bf1cda50f5b9031d631af" prot="public" virt="virtual"><scope>csl::Prod</scope><name>memoryOverhead</name></member>
      <member refid="classcsl_1_1Prod_1a39c0e506ddcbe6912bfb37b0ea55144f" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>mergeNumericals</name></member>
      <member refid="classcsl_1_1Prod_1a6f78613f8125446c9128906ab490c18c" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>mergeProducts</name></member>
      <member refid="classcsl_1_1Prod_1a6fd5885a37a7e6492ec7777121e23944" prot="public" virt="virtual"><scope>csl::Prod</scope><name>mergeTerms</name></member>
      <member refid="classcsl_1_1Abstract_1a4f5ed458ba62f5b4cf61a9e1f8568af1" prot="public" virt="virtual"><scope>csl::Prod</scope><name>multiplication_own</name></member>
      <member refid="classcsl_1_1Abstract_1af5b62a6308638064c42da80e9cc2cb7e" prot="public" virt="virtual"><scope>csl::Prod</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1af4fd1b57df371dac7ccfd5a909620e49" prot="public" virt="virtual"><scope>csl::Prod</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a96de5935a58a96d4c5b1e47966488923" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1ac99a619abde7e4c58f39e14d4d20fcf5" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a45206de7c7773b3cb150451ee3eb379e" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a0d3495220202bd417c1b58249c923f39" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Prod_1a056eb7df43a68c75f9a498583bd00e6b" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1ad4be44fbde5ebd97065a575992d498c2" prot="public" virt="virtual" ambiguityscope="csl::AbstractMultiFunc::"><scope>csl::Prod</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a6e19587260a07dba65cf2a985e05516b" prot="public" virt="non-virtual" ambiguityscope="csl::Abstract::"><scope>csl::Prod</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a2a1660498f2638f5e490d6e512eb32f4" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Abstract_1afbcac6df2fd7ac11f336189cf215124b" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Abstract_1a59ff2950fc8ca319f87a730450f14545" prot="public" virt="virtual"><scope>csl::Prod</scope><name>operator=</name></member>
      <member refid="classcsl_1_1Prod_1a1a2c0f67a8aa5798dd9226d721237a8a" prot="public" virt="virtual"><scope>csl::Prod</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a8334e14cd5789168b037d3888ed60edd" prot="public" virt="virtual" ambiguityscope="csl::AbstractMultiFunc::"><scope>csl::Prod</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a12d929e34039e817e464abc560bd4a9d" prot="public" virt="virtual" ambiguityscope="csl::AbstractMultiFunc::"><scope>csl::Prod</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a1f78f0cce24c93def3050743bc5f2845" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractMultiFunc::"><scope>csl::Prod</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1aed43debcac4a19e0da44986774c522bc" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractMultiFunc::"><scope>csl::Prod</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a2376f08c0aa5ffe783090381d102d3ae" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractMultiFunc::"><scope>csl::Prod</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a485c6f3e10db539a70416cd0766b117d" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Abstract_1ab305bdf49212f03781e7f98024faeb66" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Abstract_1a4c8883df19d7538b68fa96aadac9dfa9" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1Abstract_1a6b931f7b159d57bad26ca9c9ea729aa1" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a26979a899fab4621102645d0f8366457" prot="public" virt="virtual"><scope>csl::Prod</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1ae4922013ae4c2b23e6fab8bc9056ab42" prot="public" virt="virtual"><scope>csl::Prod</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1Abstract_1a75d9abfa88d9d09a89d3a4becd9e6429" prot="public" virt="virtual"><scope>csl::Prod</scope><name>operatorAppliesOn</name></member>
      <member refid="classcsl_1_1Prod_1a1620a57a9851d95851d7f099d5b56d03" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>orderTerms</name></member>
      <member refid="classcsl_1_1Prod_1a06a4864e62023461f8b986e805d5cd51" prot="public" virt="virtual"><scope>csl::Prod</scope><name>partialComparison</name></member>
      <member refid="classcsl_1_1Abstract_1abe9aceabbc0a99642e84c9025dbdc767" prot="public" virt="virtual"><scope>csl::Prod</scope><name>permut</name></member>
      <member refid="classcsl_1_1Prod_1a6f7a134346d64c86bbc3bf855321a568" prot="public" virt="virtual"><scope>csl::Prod</scope><name>print</name></member>
      <member refid="classcsl_1_1Prod_1a6e232ef31360d821242f56794a558c15" prot="public" virt="virtual"><scope>csl::Prod</scope><name>printCode</name></member>
      <member refid="classcsl_1_1Abstract_1a89e45ffc7b65f92e77e592f76f70934c" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>printExplicit</name></member>
      <member refid="classcsl_1_1Prod_1a3bcfa6d3a4b9a8d1ab4255f01fe7edfd" prot="public" virt="virtual"><scope>csl::Prod</scope><name>printLaTeX</name></member>
      <member refid="classcsl_1_1Abstract_1a0645745feacf93470963b55f93cae1c0" prot="public" virt="virtual"><scope>csl::Prod</scope><name>printProp</name></member>
      <member refid="classcsl_1_1Prod_1ab942e9b327bb3b766a647126faf0937f" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>Prod</name></member>
      <member refid="classcsl_1_1Prod_1ae6bb0fe561daa5930fb62e2dc0fc9c50" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>Prod</name></member>
      <member refid="classcsl_1_1Prod_1aadee4caca89f50c6ed7ad9dce7c69003" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>Prod</name></member>
      <member refid="classcsl_1_1Prod_1a77738ecfdfe91ca3ca95c95b725be576" prot="public" virt="virtual"><scope>csl::Prod</scope><name>refresh</name></member>
      <member refid="classcsl_1_1Abstract_1a8aab87c41acafaf1b1837b922495560d" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>regularLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1a2fe749450d2e610199801b189dc3d0f8" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>regularLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1aba5ef083016b2f3d9e6271f864b9b063" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>regularName</name></member>
      <member refid="classcsl_1_1Abstract_1a1a8421d402d5ba82257188b545e8d668" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>regularName</name></member>
      <member refid="classcsl_1_1Abstract_1a0e778c682b6cb02642b90e8ec8765441" prot="public" virt="virtual"><scope>csl::Prod</scope><name>removeDependency</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a636313fd58465a56d3b41cb74f9ffaff" prot="public" virt="virtual"><scope>csl::Prod</scope><name>replaceIndex</name></member>
      <member refid="classcsl_1_1Abstract_1a9372ddd521fa661c5d3371e0d8d4dfc3" prot="public" virt="virtual"><scope>csl::Prod</scope><name>replaceIndexInPlace</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a3db6d93888f6b8bb5719549e522a4afa" prot="public" virt="virtual"><scope>csl::Prod</scope><name>replaceIndices</name></member>
      <member refid="classcsl_1_1Abstract_1af0d95f3edc0562b1d75d60b670119842" prot="public" virt="virtual"><scope>csl::Prod</scope><name>resetIndexStructure</name></member>
      <member refid="classcsl_1_1Prod_1af7f0a0b4fb87b06466360b81094469a1" prot="public" virt="virtual"><scope>csl::Prod</scope><name>rightInsert</name></member>
      <member refid="classcsl_1_1Abstract_1a5c796713828ebfb74a7d8787d7802a76" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>self</name></member>
      <member refid="classcsl_1_1Abstract_1aa6a40ceb6eb1aa79711ca126d5bdda02" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setAllDependencies</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a6cf9bbbcd0b0b3f75121f1c0a5cf4d57" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a45c3adb7ba4e2b8442247246a3792b44" prot="public" virt="virtual" ambiguityscope="csl::Abstract::"><scope>csl::Prod</scope><name>setArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a7bb29d316b8f64652cef472a6c23f001" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setCommutable</name></member>
      <member refid="classcsl_1_1Abstract_1ae35385480a1be08f5e7433535b58ac0b" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setComplexProperty</name></member>
      <member refid="classcsl_1_1Abstract_1a37ebc247831d6629d44117a490fca120" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setConjugated</name></member>
      <member refid="classcsl_1_1Abstract_1aa6a04bb56578e7da143b3cd8d8fb7b26" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setElementary</name></member>
      <member refid="classcsl_1_1Abstract_1afa50c743b8e7e76e637e98f165ad4e5d" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setEmpty</name></member>
      <member refid="classcsl_1_1Abstract_1ac318016372d14b795893fe7e59199084" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setFullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1Abstract_1a4f90ebb7cf7c26782bd36bc2a67fc5d4" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setFullySymmetric</name></member>
      <member refid="classcsl_1_1Abstract_1a70f946f9c59df045ef7416320ade89c7" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a5ecdb6ce7a2d9643da2f6161a06dfbbf" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setInfBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1a867135c96776248add60018f4aa7a578" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setName</name></member>
      <member refid="classcsl_1_1Abstract_1a70df7be4486affa8dc891e3f25bf499f" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setOperand</name></member>
      <member refid="classcsl_1_1Abstract_1ae7b8a14fc746ed72e4d5abd63373c5ba" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setOperandPrivate</name></member>
      <member refid="classcsl_1_1Abstract_1a3003698af4978e774eeb2e62038f7432" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setParent</name></member>
      <member refid="classcsl_1_1Abstract_1a3c175411df619e7504feb6d888fc82f1" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setPoint</name></member>
      <member refid="classcsl_1_1Abstract_1aad7104a5b8855272a92a47c58f29e958" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setSupBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1aaf7f0692cb84ca861a5b3b641bea518b" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Abstract_1aa49c51bd285830e724f103e9fb61c464" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Abstract_1aa47ddab3aa047e86be34c70358d53548" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setVariable</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a8e6df749f2e0afdbe8ae0993235dda54" prot="public" virt="virtual"><scope>csl::Prod</scope><name>setVectorArgument</name></member>
      <member refid="classcsl_1_1AbstractMultiFunc_1a773f619ff0c678e3d1e8e34559a00d50" prot="public" virt="virtual"><scope>csl::Prod</scope><name>size</name></member>
      <member refid="classcsl_1_1Prod_1a3b491384c2717ae8b618d91dd8db39f1" prot="public" virt="virtual"><scope>csl::Prod</scope><name>suppressExponent</name></member>
      <member refid="classcsl_1_1Prod_1ad278cc42d80c2429fc3f6cd2abe38b33" prot="public" virt="virtual"><scope>csl::Prod</scope><name>suppressTerm</name></member>
      <member refid="classcsl_1_1Abstract_1a4faf1ffd8cb3b6c721e128980c0303d8" prot="public" virt="virtual"><scope>csl::Prod</scope><name>symmetrise</name></member>
      <member refid="classcsl_1_1Abstract_1a7b83c6a13716688f45b02e6291d39aba" prot="public" virt="virtual"><scope>csl::Prod</scope><name>tensordot</name></member>
      <member refid="classcsl_1_1Abstract_1aee4fa41a5e014f067395467542ee8831" prot="public" virt="non-virtual"><scope>csl::Prod</scope><name>testDummy</name></member>
      <member refid="classcsl_1_1Abstract_1a9a86d21f5c5f65eb7e524a8f8002c0e7" prot="public" virt="virtual"><scope>csl::Prod</scope><name>trace</name></member>
      <member refid="classcsl_1_1Abstract_1aacab43e551e9259a39a79378373ce49c" prot="public" virt="virtual"><scope>csl::Prod</scope><name>trace</name></member>
      <member refid="classcsl_1_1Abstract_1a1e97712696e5c40b28bc1e35987fea94" prot="public" virt="virtual"><scope>csl::Prod</scope><name>transpose</name></member>
      <member refid="classcsl_1_1Abstract_1a40bdc4c76fdbbf3cbac3af4dce8286ed" prot="public" virt="virtual"><scope>csl::Prod</scope><name>~Abstract</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
