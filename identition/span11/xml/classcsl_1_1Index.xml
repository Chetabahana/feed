<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1Index" kind="class" language="C++" prot="public">
    <compoundname>csl::Index</compoundname>
    <includes refid="index_8h" local="no">index.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classcsl_1_1Index_1aa4ae0025f21cc2b42d38c8c0eded0475" prot="public" static="no">
        <type>unsigned int</type>
        <definition>using csl::Index::ID_type =  unsigned int</definition>
        <argsstring></argsstring>
        <name>ID_type</name>
        <qualifiedname>csl::Index::ID_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="78" column="5" bodyfile="src/csl/index.h" bodystart="78" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcsl_1_1Index_1ab7bfca6c54ea1cad70e884a4cf43d2ce" prot="private" static="no" mutable="no">
        <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
        <definition>const Space* csl::Index::space</definition>
        <argsstring></argsstring>
        <name>space</name>
        <qualifiedname>csl::Index::space</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para><ref refid="classcsl_1_1Space" kindref="compound">Space</ref> in which the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> lives. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="84" column="17" bodyfile="src/csl/index.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Index_1a890f366e5556c0dbfe1ff19506887cec" prot="private" static="no" mutable="no">
        <type>ID_type</type>
        <definition>ID_type csl::Index::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <qualifiedname>csl::Index::id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="86" column="13" bodyfile="src/csl/index.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Index_1aa952af2385e79cfb8fcee19eabcfa543" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char csl::Index::nameOrValue</definition>
        <argsstring></argsstring>
        <name>nameOrValue</name>
        <qualifiedname>csl::Index::nameOrValue</qualifiedname>
        <briefdescription>
<para>Name of the index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="91" column="10" bodyfile="src/csl/index.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Index_1ae3ce5c066b51d0d9b1d2b770d5da4770" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char csl::Index::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>csl::Index::type</qualifiedname>
        <briefdescription>
<para>Type of the index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="96" column="10" bodyfile="src/csl/index.h" bodystart="96" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1Index_1a31beddb6689707568436b5b4686d6191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Index::Index</definition>
        <argsstring>()</argsstring>
        <name>Index</name>
        <qualifiedname>csl::Index::Index</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="102" column="5" bodyfile="src/csl/index.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1ab8c1e28fd1498c5efcab873637be0342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Index::Index</definition>
        <argsstring>(char value)</argsstring>
        <name>Index</name>
        <qualifiedname>csl::Index::Index</qualifiedname>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="104" column="5" bodyfile="src/csl/index.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1acba7aec490fd0545a106c3ae7b339a3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Index::Index</definition>
        <argsstring>(const Index &amp;index)=default</argsstring>
        <name>Index</name>
        <qualifiedname>csl::Index::Index</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Copy constructor = C++ default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="111" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1ab60425c3d248dca9c0f948d316c300a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Index::Index</definition>
        <argsstring>(const std::string &amp;t_name, const Space *t_space, unsigned short t_id=0)</argsstring>
        <name>Index</name>
        <qualifiedname>csl::Index::Index</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>t_space</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>t_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor that initializes fully the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name if the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_space</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Space" kindref="compound">Space</ref> in which the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> lives. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="119" column="5" bodyfile="src/csl/index.cpp" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a29d82ab0db436e51aff9cbc9fd44a950" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::Index::~Index</definition>
        <argsstring>()</argsstring>
        <name>~Index</name>
        <qualifiedname>csl::Index::~Index</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="126" column="5" bodyfile="src/csl/index.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a6132acff7ce59be8aa798ea9d88bedb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view csl::Index::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <qualifiedname>csl::Index::getName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="128" column="22" bodyfile="src/csl/index.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a31c9222f5b42724d30a409ea6318657a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string csl::Index::getIndexCodeName</definition>
        <argsstring>() const</argsstring>
        <name>getIndexCodeName</name>
        <qualifiedname>csl::Index::getIndexCodeName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="130" column="17" bodyfile="src/csl/index.cpp" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1abf70d41c67611137fc66e2cba90e5c69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ID_type</type>
        <definition>ID_type csl::Index::getID</definition>
        <argsstring>() const</argsstring>
        <name>getID</name>
        <qualifiedname>csl::Index::getID</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="132" column="20" bodyfile="src/csl/index.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a27cdc5e75ad694f15e222adc1e594ede" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char csl::Index::getValue</definition>
        <argsstring>() const</argsstring>
        <name>getValue</name>
        <qualifiedname>csl::Index::getValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> if it has one (<bold>value</bold>). </para>
</simplesect>
<simplesect kind="return"><para>-1 else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="141" column="17" bodyfile="src/csl/index.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a12ab0df28c86b1700249223856f51955" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::getSign</definition>
        <argsstring>() const</argsstring>
        <name>getSign</name>
        <qualifiedname>csl::Index::getSign</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The sign of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="149" column="10" bodyfile="src/csl/index.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a7484c23ea4394c83d7861f152741761f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::getFree</definition>
        <argsstring>() const</argsstring>
        <name>getFree</name>
        <qualifiedname>csl::Index::getFree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> is free. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="158" column="17" bodyfile="src/csl/index.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a6cd5393db537bf41b6f730e5b40ec18e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecslIndex_1ad333cdff46bc7adff9474bfb9d9d3f4e" kindref="member">cslIndex::Type</ref></type>
        <definition>cslIndex::Type csl::Index::getType</definition>
        <argsstring>() const</argsstring>
        <name>getType</name>
        <qualifiedname>csl::Index::getType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The type of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="166" column="27" bodyfile="src/csl/index.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a82248c179583d3afcf0b636b26851b8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int csl::Index::getMax</definition>
        <argsstring>() const</argsstring>
        <name>getMax</name>
        <qualifiedname>csl::Index::getMax</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The dimension of the <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> in which the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> lives. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="174" column="9" bodyfile="src/csl/index.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1af85742e76ff308a14704408d05720dbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
        <definition>const Space * csl::Index::getSpace</definition>
        <argsstring>() const</argsstring>
        <name>getSpace</name>
        <qualifiedname>csl::Index::getSpace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> in which the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> lives. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="179" column="24" bodyfile="src/csl/index.h" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1abbf5e2ab9c09f21e267de2ef20b68142" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref></type>
        <definition>Index csl::Index::rename</definition>
        <argsstring>() const</argsstring>
        <name>rename</name>
        <qualifiedname>csl::Index::rename</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="184" column="11" bodyfile="src/csl/index.cpp" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a8de68cd26aaaad9461a0fabf406a896d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref></type>
        <definition>Index csl::Index::getFlipped</definition>
        <argsstring>() const</argsstring>
        <name>getFlipped</name>
        <qualifiedname>csl::Index::getFlipped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> with a flipped sign <bold>if</bold> the <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> is signed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="190" column="11" bodyfile="src/csl/index.cpp" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1af64ff9c829eaf955c13040de627e8058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::setName</definition>
        <argsstring>(const std::string &amp;t_name)</argsstring>
        <name>setName</name>
        <qualifiedname>csl::Index::setName</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name for the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="195" column="10" bodyfile="src/csl/index.cpp" bodystart="89" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1ac6fedce61cd35dffcc63a0f1d97f29e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::setID</definition>
        <argsstring>(ID_type t_id)</argsstring>
        <name>setID</name>
        <qualifiedname>csl::Index::setID</qualifiedname>
        <param>
          <type>ID_type</type>
          <declname>t_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="197" column="10" bodyfile="src/csl/index.cpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a15378a772f015c44d734a649a57b3aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::setSpace</definition>
        <argsstring>(const Space *t_space)</argsstring>
        <name>setSpace</name>
        <qualifiedname>csl::Index::setSpace</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Space" kindref="compound">Space</ref> *</type>
          <declname>t_space</declname>
        </param>
        <briefdescription>
<para>Changes the current space of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_space</parametername>
</parameternamelist>
<parameterdescription>
<para>New space for the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="203" column="10" bodyfile="src/csl/index.cpp" bodystart="102" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1ab3bac6ffae99d928c5c5c39b9e632487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::setValue</definition>
        <argsstring>(char t_value)</argsstring>
        <name>setValue</name>
        <qualifiedname>csl::Index::setValue</qualifiedname>
        <param>
          <type>char</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
<para>Sets the value of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> and therefore sets its type to <ref refid="namespacecslIndex_1ad333cdff46bc7adff9474bfb9d9d3f4eaea7fa93a248dbab81642463f10ba55cd" kindref="member">cslIndex::Fixed</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="210" column="10" bodyfile="src/csl/index.cpp" bodystart="112" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a43197b30091bdcfecf6355fdd765823a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::setSign</definition>
        <argsstring>(bool t_sign)</argsstring>
        <name>setSign</name>
        <qualifiedname>csl::Index::setSign</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_sign</parametername>
</parameternamelist>
<parameterdescription>
<para>New sign for the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="215" column="10" bodyfile="src/csl/index.cpp" bodystart="140" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1aa2545d846162621ad2509f2b645e33e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::flipSign</definition>
        <argsstring>()</argsstring>
        <name>flipSign</name>
        <qualifiedname>csl::Index::flipSign</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="217" column="10" bodyfile="src/csl/index.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a991575743743aa348dc53058ca87d8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::setFree</definition>
        <argsstring>(bool t_free)</argsstring>
        <name>setFree</name>
        <qualifiedname>csl::Index::setFree</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_free</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_free</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets the free-property of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. Free = true, Dummy = false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="223" column="10" bodyfile="src/csl/index.cpp" bodystart="125" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1aa92ca3061dfcdc7c828a8044e12470b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::setType</definition>
        <argsstring>(cslIndex::Type t_type)</argsstring>
        <name>setType</name>
        <qualifiedname>csl::Index::setType</qualifiedname>
        <param>
          <type><ref refid="namespacecslIndex_1ad333cdff46bc7adff9474bfb9d9d3f4e" kindref="member">cslIndex::Type</ref></type>
          <declname>t_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets the type of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="228" column="10" bodyfile="src/csl/index.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1af52ce7b7ff09d456c32662510bb33bf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::testContraction</definition>
        <argsstring>(const Index &amp;t_index) const</argsstring>
        <name>testContraction</name>
        <qualifiedname>csl::Index::testContraction</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
<para>Tests if the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> can be contracted with <bold>t_index</bold>. Basically, returns true if the two indices are free and contractible with respect to Einstein&apos;s conventions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> with which we test the contraction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="239" column="10" bodyfile="src/csl/index.cpp" bodystart="216" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1ad696266fdaeac8fa5192819f6ec6a11c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <qualifiedname>csl::Index::print</qualifiedname>
        <briefdescription>
<para>Prints the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> in standard output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="244" column="10" bodyfile="src/csl/index.cpp" bodystart="159" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a9f93460cbeb33917e898d981f11a7592" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string csl::Index::printLaTeX</definition>
        <argsstring>() const</argsstring>
        <name>printLaTeX</name>
        <qualifiedname>csl::Index::printLaTeX</qualifiedname>
        <briefdescription>
<para>Returns the LaTeX name of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> (for now there is no difference with the regular name). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="250" column="17" bodyfile="src/csl/index.cpp" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1aa918a1bb6c089c347066af295a19d41d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void csl::Index::printDefinition</definition>
        <argsstring>(std::ostream &amp;out, int indentSize) const</argsstring>
        <name>printDefinition</name>
        <qualifiedname>csl::Index::printDefinition</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="252" column="10" bodyfile="src/csl/index.cpp" bodystart="188" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1acf96a83bc0063e4cfb6cf0b6bce630f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
        <definition>Index &amp; csl::Index::operator=</definition>
        <argsstring>(const Index &amp;index)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>csl::Index::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>operator=, copy the properties of <bold>index</bold> in the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="261" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1af819e8b27e3517fd09e7d135093cf554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
        <definition>Index &amp; csl::Index::operator=</definition>
        <argsstring>(int t_value)</argsstring>
        <name>operator=</name>
        <qualifiedname>csl::Index::operator=</qualifiedname>
        <param>
          <type>int</type>
          <declname>t_value</declname>
        </param>
        <briefdescription>
<para>Sets the value of the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. See <ref refid="classcsl_1_1Index_1ab3bac6ffae99d928c5c5c39b9e632487" kindref="member">Index::setValue()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the modified <ref refid="classcsl_1_1Index" kindref="compound">Index</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="268" column="11" bodyfile="src/csl/index.cpp" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a3423a6f82a350eab6a7e2f3a039cb337" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::compareWithDummy</definition>
        <argsstring>(const Index &amp;t_index) const</argsstring>
        <name>compareWithDummy</name>
        <qualifiedname>csl::Index::compareWithDummy</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
<para>Equivalent to <ref refid="classcsl_1_1Index_1a1b3c1bd4ff95621a2f4f8d7e25991239" kindref="member">Index::operator==()</ref> except for dummy indices for which the name does not count in the comparison. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices are equal (to a renaming for dummy indices). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="280" column="10" bodyfile="src/csl/index.cpp" bodystart="196" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1afd66d987486da051ca91506fd706a124" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::compareWithoutSign</definition>
        <argsstring>(const Index &amp;t_index) const</argsstring>
        <name>compareWithoutSign</name>
        <qualifiedname>csl::Index::compareWithoutSign</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
<para>Tells if two indices are equal, independently of their sign if they live in a signed <ref refid="classcsl_1_1Space" kindref="compound">Space</ref>. For now equivalent to <ref refid="classcsl_1_1Index_1a1b3c1bd4ff95621a2f4f8d7e25991239" kindref="member">Index::operator==()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices are equal (independently of their sign). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="292" column="10" bodyfile="src/csl/index.cpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1af60770e33d69e0e10f2a20de65ca27ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::exactMatch</definition>
        <argsstring>(const Index &amp;t_index) const</argsstring>
        <name>exactMatch</name>
        <qualifiedname>csl::Index::exactMatch</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
<para>Tells if two indices are equal, taking their sign into account, differently from the <ref refid="classcsl_1_1Index_1afd66d987486da051ca91506fd706a124" kindref="member">Index::compareWithoutSign()</ref> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices are strictly equal. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="302" column="10" bodyfile="src/csl/index.cpp" bodystart="235" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1ac0997fe4d37258bb22a1fed08477d196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
        <definition>Index &amp; csl::Index::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>csl::Index::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="304" column="11" bodyfile="src/csl/index.cpp" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a7d5dced9af364fe825584de54923c0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">Index</ref></type>
        <definition>Index csl::Index::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>csl::Index::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="306" column="11" bodyfile="src/csl/index.cpp" bodystart="258" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a1b3c1bd4ff95621a2f4f8d7e25991239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator==</definition>
        <argsstring>(const Index &amp;t_index) const</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::Index::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
<para>operator==, compares two indices and tells if they are equal, independently of their sign, i.e. two indices are equals if they have the same name, space, and type. Equivalent to <ref refid="classcsl_1_1Index_1afd66d987486da051ca91506fd706a124" kindref="member">Index::compareWithoutSign()</ref></para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices are equal independantly of their sign. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="320" column="10" bodyfile="src/csl/index.cpp" bodystart="265" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a3b50e99c073627803d1522a0ff6f7fd9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator==</definition>
        <argsstring>(int value) const</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::Index::operator==</qualifiedname>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>operator==, compares two indices and tells if they are equal, independently of their sign, i.e. two indices are equals if they have the same name, space, and type. Equivalent to <ref refid="classcsl_1_1Index_1afd66d987486da051ca91506fd706a124" kindref="member">Index::compareWithoutSign()</ref></para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices are equal independantly of their sign. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="334" column="10" bodyfile="src/csl/index.cpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a79708fb1d23ea07f155b8bfe4502936c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator==</definition>
        <argsstring>(size_t value) const</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::Index::operator==</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>operator==, compares two indices and tells if they are equal, independently of their sign, i.e. two indices are equals if they have the same name, space, and type. Equivalent to <ref refid="classcsl_1_1Index_1afd66d987486da051ca91506fd706a124" kindref="member">Index::compareWithoutSign()</ref></para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices are equal independantly of their sign. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="348" column="10" bodyfile="src/csl/index.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a49a9575712aaf0d2c42de41567400052" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator!=</definition>
        <argsstring>(const Index &amp;t_index) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>csl::Index::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
<para>operator!=, opposite of the operator!= </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>not (operator==(t_index)). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="357" column="10" bodyfile="src/csl/index.cpp" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a6def34187976bdc2c9c95e2b05961383" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator!=</definition>
        <argsstring>(int value) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>csl::Index::operator!=</qualifiedname>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="359" column="10" bodyfile="src/csl/index.cpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a28e39aa735061a789aac9f56958c468a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator!=</definition>
        <argsstring>(size_t value) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>csl::Index::operator!=</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="361" column="10" bodyfile="src/csl/index.cpp" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1aa4deba8dfa05e68c7f205ec9859cc7be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator|=</definition>
        <argsstring>(const Index &amp;index) const</argsstring>
        <name>operator|=</name>
        <qualifiedname>csl::Index::operator|=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>operator|=, simplicity comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices have the same simplicity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="370" column="10" bodyfile="src/csl/index.cpp" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a9fb9b017d2cceb247873636f68e3123d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator&amp;=</definition>
        <argsstring>(const Index &amp;index) const</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>csl::Index::operator&amp;=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>operator&amp;=, simplicity comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two indices have different simplicities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="379" column="10" bodyfile="src/csl/index.cpp" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1aff25bc9f3d911e1cc54460ef08853dd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator&lt;</definition>
        <argsstring>(const Index &amp;index) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>csl::Index::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>operator&lt;, simplicity comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if *this is simpler than <bold>index</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="388" column="5" bodyfile="src/csl/index.cpp" bodystart="312" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1ab2aba99da8f9c26f097adc5a28c297b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator&gt;</definition>
        <argsstring>(const Index &amp;index) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>csl::Index::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>operator&gt;, simplicity comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if <bold>index</bold> is simpler than *this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="397" column="10" bodyfile="src/csl/index.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a7d16e34fa4a70163fca0fbb82db0d729" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator&lt;=</definition>
        <argsstring>(const Index &amp;index) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>csl::Index::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>operator&lt;=, simplicity comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if &lt; or |=. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="406" column="5" bodyfile="src/csl/index.cpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Index_1a9426ee1b6b6a81b0921666729a8ef97c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Index::operator&gt;=</definition>
        <argsstring>(const Index &amp;index) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>csl::Index::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>operator&gt;=, simplicity comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if &gt; or |=. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="415" column="10" bodyfile="src/csl/index.cpp" bodystart="349" bodyend="352"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcsl_1_1Index_1a3398536549e696a1034778231ceeaa53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, const Index &amp;index)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>csl::Index::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>operator&lt;&lt;, displays the <ref refid="classcsl_1_1Index" kindref="compound">Index</ref> <bold>index</bold> in output <bold>fout</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flow. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> to display.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output flow modified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/index.h" line="425" column="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classcsl_1_1Index" kindref="compound">Index</ref> object that is used for indicial objects. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/csl/index.h" line="75" column="1" bodyfile="src/csl/index.h" bodystart="75" bodyend="426"/>
    <listofallmembers>
      <member refid="classcsl_1_1Index_1a3423a6f82a350eab6a7e2f3a039cb337" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Index_1afd66d987486da051ca91506fd706a124" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>compareWithoutSign</name></member>
      <member refid="classcsl_1_1Index_1af60770e33d69e0e10f2a20de65ca27ae" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>exactMatch</name></member>
      <member refid="classcsl_1_1Index_1aa2545d846162621ad2509f2b645e33e4" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>flipSign</name></member>
      <member refid="classcsl_1_1Index_1a8de68cd26aaaad9461a0fabf406a896d" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getFlipped</name></member>
      <member refid="classcsl_1_1Index_1a7484c23ea4394c83d7861f152741761f" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getFree</name></member>
      <member refid="classcsl_1_1Index_1abf70d41c67611137fc66e2cba90e5c69" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getID</name></member>
      <member refid="classcsl_1_1Index_1a31c9222f5b42724d30a409ea6318657a" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getIndexCodeName</name></member>
      <member refid="classcsl_1_1Index_1a82248c179583d3afcf0b636b26851b8a" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getMax</name></member>
      <member refid="classcsl_1_1Index_1a6132acff7ce59be8aa798ea9d88bedb9" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getName</name></member>
      <member refid="classcsl_1_1Index_1a12ab0df28c86b1700249223856f51955" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getSign</name></member>
      <member refid="classcsl_1_1Index_1af85742e76ff308a14704408d05720dbc" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getSpace</name></member>
      <member refid="classcsl_1_1Index_1a6cd5393db537bf41b6f730e5b40ec18e" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getType</name></member>
      <member refid="classcsl_1_1Index_1a27cdc5e75ad694f15e222adc1e594ede" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>getValue</name></member>
      <member refid="classcsl_1_1Index_1a890f366e5556c0dbfe1ff19506887cec" prot="private" virt="non-virtual"><scope>csl::Index</scope><name>id</name></member>
      <member refid="classcsl_1_1Index_1aa4ae0025f21cc2b42d38c8c0eded0475" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>ID_type</name></member>
      <member refid="classcsl_1_1Index_1a31beddb6689707568436b5b4686d6191" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>Index</name></member>
      <member refid="classcsl_1_1Index_1ab8c1e28fd1498c5efcab873637be0342" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>Index</name></member>
      <member refid="classcsl_1_1Index_1acba7aec490fd0545a106c3ae7b339a3e" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>Index</name></member>
      <member refid="classcsl_1_1Index_1ab60425c3d248dca9c0f948d316c300a3" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>Index</name></member>
      <member refid="classcsl_1_1Index_1aa952af2385e79cfb8fcee19eabcfa543" prot="private" virt="non-virtual"><scope>csl::Index</scope><name>nameOrValue</name></member>
      <member refid="classcsl_1_1Index_1a49a9575712aaf0d2c42de41567400052" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Index_1a6def34187976bdc2c9c95e2b05961383" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Index_1a28e39aa735061a789aac9f56958c468a" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Index_1a9fb9b017d2cceb247873636f68e3123d" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator&amp;=</name></member>
      <member refid="classcsl_1_1Index_1ac0997fe4d37258bb22a1fed08477d196" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator++</name></member>
      <member refid="classcsl_1_1Index_1a7d5dced9af364fe825584de54923c0ec" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator++</name></member>
      <member refid="classcsl_1_1Index_1aff25bc9f3d911e1cc54460ef08853dd2" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Index_1a3398536549e696a1034778231ceeaa53" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator&lt;&lt;</name></member>
      <member refid="classcsl_1_1Index_1a7d16e34fa4a70163fca0fbb82db0d729" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Index_1acf96a83bc0063e4cfb6cf0b6bce630f4" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator=</name></member>
      <member refid="classcsl_1_1Index_1af819e8b27e3517fd09e7d135093cf554" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator=</name></member>
      <member refid="classcsl_1_1Index_1a1b3c1bd4ff95621a2f4f8d7e25991239" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Index_1a3b50e99c073627803d1522a0ff6f7fd9" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Index_1a79708fb1d23ea07f155b8bfe4502936c" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Index_1ab2aba99da8f9c26f097adc5a28c297b6" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Index_1a9426ee1b6b6a81b0921666729a8ef97c" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1Index_1aa4deba8dfa05e68c7f205ec9859cc7be" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>operator|=</name></member>
      <member refid="classcsl_1_1Index_1ad696266fdaeac8fa5192819f6ec6a11c" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>print</name></member>
      <member refid="classcsl_1_1Index_1aa918a1bb6c089c347066af295a19d41d" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>printDefinition</name></member>
      <member refid="classcsl_1_1Index_1a9f93460cbeb33917e898d981f11a7592" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>printLaTeX</name></member>
      <member refid="classcsl_1_1Index_1abbf5e2ab9c09f21e267de2ef20b68142" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>rename</name></member>
      <member refid="classcsl_1_1Index_1a991575743743aa348dc53058ca87d8e8" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>setFree</name></member>
      <member refid="classcsl_1_1Index_1ac6fedce61cd35dffcc63a0f1d97f29e0" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>setID</name></member>
      <member refid="classcsl_1_1Index_1af64ff9c829eaf955c13040de627e8058" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>setName</name></member>
      <member refid="classcsl_1_1Index_1a43197b30091bdcfecf6355fdd765823a" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>setSign</name></member>
      <member refid="classcsl_1_1Index_1a15378a772f015c44d734a649a57b3aa7" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>setSpace</name></member>
      <member refid="classcsl_1_1Index_1aa92ca3061dfcdc7c828a8044e12470b9" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>setType</name></member>
      <member refid="classcsl_1_1Index_1ab3bac6ffae99d928c5c5c39b9e632487" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Index_1ab7bfca6c54ea1cad70e884a4cf43d2ce" prot="private" virt="non-virtual"><scope>csl::Index</scope><name>space</name></member>
      <member refid="classcsl_1_1Index_1af52ce7b7ff09d456c32662510bb33bf7" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>testContraction</name></member>
      <member refid="classcsl_1_1Index_1ae3ce5c066b51d0d9b1d2b770d5da4770" prot="private" virt="non-virtual"><scope>csl::Index</scope><name>type</name></member>
      <member refid="classcsl_1_1Index_1a29d82ab0db436e51aff9cbc9fd44a950" prot="public" virt="non-virtual"><scope>csl::Index</scope><name>~Index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
