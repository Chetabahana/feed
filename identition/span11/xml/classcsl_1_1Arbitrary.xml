<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcsl_1_1Arbitrary" kind="class" language="C++" prot="public">
    <compoundname>csl::Arbitrary</compoundname>
    <basecompoundref refid="classcsl_1_1AbstractLiteral" prot="public" virt="non-virtual">csl::AbstractLiteral</basecompoundref>
    <includes refid="comparison_8h" local="no">comparison.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcsl_1_1Arbitrary_1ad03769cf5e8a95b092218b8446e947ab" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int csl::Arbitrary::number</definition>
        <argsstring></argsstring>
        <name>number</name>
        <qualifiedname>csl::Arbitrary::number</qualifiedname>
        <briefdescription>
<para>Number of the <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref>, determines its identity in comparisons. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="90" column="9" bodyfile="src/csl/comparison.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Arbitrary_1a14264840d6503ae1a8cdf50e24fe8048" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string csl::Arbitrary::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <qualifiedname>csl::Arbitrary::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="92" column="17" bodyfile="src/csl/comparison.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcsl_1_1Arbitrary_1a6559ddf6de034effd0531c332e0e38a0" prot="private" static="no" mutable="no">
        <type><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312" kindref="member">csl::Type</ref></type>
        <definition>csl::Type csl::Arbitrary::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>csl::Arbitrary::type</qualifiedname>
        <briefdescription>
<para>Specific type of the <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref>. If it is specified in the constructor, the object will be able to be equal to expressions of type <bold>type</bold>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="98" column="15" bodyfile="src/csl/comparison.h" bodystart="98" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a64e15ad0b270d25870b22fe0ce0b70f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Arbitrary::Arbitrary</definition>
        <argsstring>(int n, csl::Type t_type=csl::Type::NoType)</argsstring>
        <name>Arbitrary</name>
        <qualifiedname>csl::Arbitrary::Arbitrary</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312" kindref="member">csl::Type</ref></type>
          <declname>t_type</declname>
          <defval><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312a9080fd7a5f0af44b585bb21b62d8b283" kindref="member">csl::Type::NoType</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="55" column="5" bodyfile="src/csl/comparison.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a2654d1e290e52d5d3cb06ef43aa1b766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csl::Arbitrary::Arbitrary</definition>
        <argsstring>(const Arbitrary &amp;other)=default</argsstring>
        <name>Arbitrary</name>
        <qualifiedname>csl::Arbitrary::Arbitrary</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="57" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a562b537606260f291b89d6b8e39741c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csl::Arbitrary::~Arbitrary</definition>
        <argsstring>()</argsstring>
        <name>~Arbitrary</name>
        <qualifiedname>csl::Arbitrary::~Arbitrary</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="60" column="5" bodyfile="src/csl/comparison.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a25dce08825f0efbf6715c8db35f981e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string const &amp;</type>
        <definition>std::string const  &amp; csl::Arbitrary::getName</definition>
        <argsstring>() const override</argsstring>
        <name>getName</name>
        <qualifiedname>csl::Arbitrary::getName</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1af7f5e7466e754984a2c4394a112464f7">getName</reimplements>
        <briefdescription>
<para>Returns the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><emphasis>name</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="62" column="23" bodyfile="src/csl/comparison.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a53ca5235ba7ad6a7bd7f157557b0e11f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::Arbitrary::isArbitrary</definition>
        <argsstring>() const override</argsstring>
        <name>isArbitrary</name>
        <qualifiedname>csl::Arbitrary::isArbitrary</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1ac09992d147b39388c8936b3bff648930">isArbitrary</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="64" column="10" bodyfile="src/csl/comparison.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a489b4b7b94c0880c843db0e4cfc249d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacecsl_1a70046459ec0082db8cb97005c13c9a54" kindref="member">csl::PrimaryType</ref></type>
        <definition>csl::PrimaryType csl::Arbitrary::getPrimaryType</definition>
        <argsstring>() const override</argsstring>
        <name>getPrimaryType</name>
        <qualifiedname>csl::Arbitrary::getPrimaryType</qualifiedname>
        <reimplements refid="classcsl_1_1AbstractLiteral_1aa41c4506afb800db5eca9232df00720a">getPrimaryType</reimplements>
        <briefdescription>
<para>Gives the <bold>primary</bold> <bold>type</bold> of <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In the program this function is very often called. It allows different functions to know what type of expr they are manipulating (single number, scalar function with one argument, with multiple argumments, a <ref refid="classcsl_1_1Vector" kindref="compound">Vector</ref>, etc) in order to do special treatments or simplifications. <simplesect kind="return"><para>type (a non memorized integer corresponding to the type of abstract) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="66" column="22" bodyfile="src/csl/comparison.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1ad803441e87d253727977a2731de05e3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacecsl_1ace591865c69b6315c533a1a325777312" kindref="member">csl::Type</ref></type>
        <definition>csl::Type csl::Arbitrary::getType</definition>
        <argsstring>() const override</argsstring>
        <name>getType</name>
        <qualifiedname>csl::Arbitrary::getType</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aa781456c3f801b37ce169c83514c51c1">getType</reimplements>
        <briefdescription>
<para>Gives the <bold>type</bold> of <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In the program this function is very often called. It allows different functions to know what type of expr they are manipulating (cos, product, number, etc) in order to do special treatments or simplifications. <simplesect kind="return"><para>type (a non memorized integer corresponding to the type of abstract) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="68" column="15" bodyfile="src/csl/comparison.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1ab5f7c2c30475e2dd9a13423923ff13bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void csl::Arbitrary::print</definition>
        <argsstring>(int mode=0, std::ostream &amp;out=std::cout, LibraryMode libMode=LibraryMode::NoLib) const override</argsstring>
        <name>print</name>
        <qualifiedname>csl::Arbitrary::print</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aed56cb85894209a9bbc9b8bdada5e6ab">print</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>LibraryMode</type>
          <declname>libMode</declname>
          <defval>LibraryMode::NoLib</defval>
        </param>
        <briefdescription>
<para>Displays the abstract in standard output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Tells if the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> is printed alone (default) or in another expr. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="70" column="10" bodyfile="src/csl/comparison.cpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a2275ec73b2842df28cb80bd59bbf958d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>string csl::Arbitrary::printLaTeX</definition>
        <argsstring>(int mode=0) const override</argsstring>
        <name>printLaTeX</name>
        <qualifiedname>csl::Arbitrary::printLaTeX</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aa067d4a97135bfe2052a7e21c28f75be">printLaTeX</reimplements>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a LaTeX output for the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Tells if the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> is printed alone (default) or in another expr. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string corresponding to the LaTeX output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="74" column="17" bodyfile="src/csl/comparison.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1ab4744294dedcb8b4402b76f821b275cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::optional&lt; <ref refid="classcsl_1_1Expr" kindref="compound">Expr</ref> &gt;</type>
        <definition>optional&lt; Expr &gt; csl::Arbitrary::evaluate</definition>
        <argsstring>(csl::eval::mode user_mode=csl::eval::base) const override</argsstring>
        <name>evaluate</name>
        <qualifiedname>csl::Arbitrary::evaluate</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aa3a4cb7f30e2a422fe27a513e03d6600">evaluate</reimplements>
        <param>
          <type>csl::eval::mode</type>
          <declname>user_mode</declname>
          <defval>csl::eval::base</defval>
        </param>
        <briefdescription>
<para><bold>Evaluates</bold> the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Replaces all variables by their value and evaluating. This function must be used instead of <ref refid="classcsl_1_1Abstract_1a543d5a4f0432e166b492ad28a860a65f" kindref="member">evaluateScalar()</ref> when treating not only real scalars.* In particular (x=2, y=3) x+iy evaluates to 3+ 3i whereas <ref refid="classcsl_1_1Abstract_1a543d5a4f0432e166b492ad28a860a65f" kindref="member">evaluateScalar()</ref> would return 3. <simplesect kind="return"><para>The abstract result of the evaluation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="76" column="19" bodyfile="src/csl/comparison.cpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a49ab42288e91d3d2fc5d2af3b473b4df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unique_Expr</type>
        <definition>unique_Expr csl::Arbitrary::copy_unique</definition>
        <argsstring>() const override</argsstring>
        <name>copy_unique</name>
        <qualifiedname>csl::Arbitrary::copy_unique</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1aaa996819710adc3b7529c74a628be623">copy_unique</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="79" column="17" bodyfile="src/csl/comparison.cpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a0e1f9042536b8ec8f361e7fd556b58d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>long long int</type>
        <definition>long long int csl::Arbitrary::getNum</definition>
        <argsstring>() const override</argsstring>
        <name>getNum</name>
        <qualifiedname>csl::Arbitrary::getNum</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a6aa6bcc7cb8ee1574f29dc6ab6c6f0ed">getNum</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The numerator for a <ref refid="classcsl_1_1IntFraction" kindref="compound">IntFraction</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="81" column="19" bodyfile="src/csl/comparison.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1a3bd3172760cb664c0c49475d26079d06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool csl::Arbitrary::operator==</definition>
        <argsstring>(Expr_info expr) const override</argsstring>
        <name>operator==</name>
        <qualifiedname>csl::Arbitrary::operator==</qualifiedname>
        <reimplements refid="classcsl_1_1Abstract_1a3775f3088e784cc924cb7d26e118660e">operator==</reimplements>
        <param>
          <type><ref refid="classcsl_1_1Abstract" kindref="compound">Expr_info</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para><bold>Compares</bold> the <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> with another. </para>
        </briefdescription>
        <detaileddescription>
<para>Here if two Abstracts have the same name, the function will return <bold>true</bold> even if they are <bold>not</bold> <bold>mathematically</bold> <bold>equal</bold>. So beware not to name different things the same way. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the two Abstracts are the same (or have the same name). </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="83" column="10" bodyfile="src/csl/comparison.cpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classcsl_1_1Arbitrary_1aa283ee7217ca8a9ea20de5e4cf3c5ab0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool csl::Arbitrary::operator&lt;</definition>
        <argsstring>(const Abstract *expr) const override</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>csl::Arbitrary::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classcsl_1_1Abstract" kindref="compound">Abstract</ref> *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/csl/comparison.h" line="85" column="5" bodyfile="src/csl/simplification.cpp" bodystart="463" bodyend="492"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> object that can enter mathematical expressions. </para>
    </briefdescription>
    <detaileddescription>
<para>When comparing two expressions, we sometimes want to know if a certain expression respects a certain form or not, independently of the exact sub-expressions.<linebreak/>
 <formula id="24">$ i*X*Arbitrary == i*X*P $</formula>.<linebreak/>
<ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> objects are indexed by a number that distinguish them. An <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> object will return true when compared to any expression the first time, and then will be associated with thisa expression to the end of the comparison. Ex:<linebreak/>
 <formula id="25">$ x + y*z != A1 + A2*A1$</formula>.<linebreak/>
  <formula id="26">$ x + y*x = A1 +
A2*A1$</formula>.<linebreak/>
 Where A stands for <ref refid="classcsl_1_1Arbitrary" kindref="compound">Arbitrary</ref> objects. The first equality is not true because once <formula id="27">$A1$</formula> is associated to <formula id="28">$x$</formula> it cannot be equal to <formula id="29">$ z $</formula>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>csl::Abstract</label>
        <link refid="classcsl_1_1Abstract"/>
      </node>
      <node id="4">
        <label>csl::AbstractBuildingBlock</label>
        <link refid="classcsl_1_1AbstractBuildingBlock"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::AbstractLiteral</label>
        <link refid="classcsl_1_1AbstractLiteral"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>csl::Arbitrary</label>
        <link refid="classcsl_1_1Arbitrary"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>csl::Complexified</label>
        <link refid="classcsl_1_1Complexified"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>csl::Abstract</label>
        <link refid="classcsl_1_1Abstract"/>
      </node>
      <node id="4">
        <label>csl::AbstractBuildingBlock</label>
        <link refid="classcsl_1_1AbstractBuildingBlock"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::AbstractLiteral</label>
        <link refid="classcsl_1_1AbstractLiteral"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>csl::Arbitrary</label>
        <link refid="classcsl_1_1Arbitrary"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>csl::Complexified</label>
        <link refid="classcsl_1_1Complexified"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/csl/comparison.h" line="46" column="1" bodyfile="src/csl/comparison.h" bodystart="46" bodyend="99"/>
    <listofallmembers>
      <member refid="classcsl_1_1Abstract_1ad5fee68c1f3dcbda0e936926fed17616" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>Abstract</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a64aaa989689a7e8c262e6d9fceaff10f" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>AbstractBuildingBlock</name></member>
      <member refid="classcsl_1_1AbstractLiteral_1a4409e0826515a01cdf822f16329d1db0" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>AbstractLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1a5549ac0c186b3c6febf332245a25a82c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>addAntiSymmetry</name></member>
      <member refid="classcsl_1_1Abstract_1abbab11282e5c6ac46b018642ff129f47" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>addDependency</name></member>
      <member refid="classcsl_1_1Abstract_1a101219973341a39cf15f07e5e1aa388f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>addition_own</name></member>
      <member refid="classcsl_1_1Abstract_1ad431770faa4291116a50175193a11a88" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>addSymmetry</name></member>
      <member refid="classcsl_1_1Abstract_1acd972aed8326d4c13534594e061ee6da" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>antisymmetrise</name></member>
      <member refid="classcsl_1_1Complexified_1ac8174f246df45364467fffd925027808" prot="protected" virt="non-virtual"><scope>csl::Arbitrary</scope><name>applyComplexPropertiesOn</name></member>
      <member refid="classcsl_1_1Complexified_1a7b2b037721656af10cb29a077a567b30" prot="protected" virt="non-virtual"><scope>csl::Arbitrary</scope><name>applyComplexPropertiesOn</name></member>
      <member refid="classcsl_1_1Abstract_1a61d3ab932182226f4670a62bbb22af4e" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>applyDiracDelta</name></member>
      <member refid="classcsl_1_1Abstract_1a316956fea77627a716500a2bbfc1f3b7" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>applyOperator</name></member>
      <member refid="classcsl_1_1Abstract_1a6305ce90c795bfb416d8e958c62f905c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>applySelfStructureOn</name></member>
      <member refid="classcsl_1_1Arbitrary_1a64e15ad0b270d25870b22fe0ce0b70f8" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>Arbitrary</name></member>
      <member refid="classcsl_1_1Arbitrary_1a2654d1e290e52d5d3cb06ef43aa1b766" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>Arbitrary</name></member>
      <member refid="classcsl_1_1Abstract_1a27ad666bf7d533607da9675b0c645ee9" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>askTerm</name></member>
      <member refid="classcsl_1_1Abstract_1aad54ed41b2ce9bad3364fe30ad1a0d71" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>begin</name></member>
      <member refid="classcsl_1_1Abstract_1adff373df9477d4e38581d09cc6d2fee4" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>begin</name></member>
      <member refid="classcsl_1_1Abstract_1aa4cba37520821432f37e212fefbc2534" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1Abstract_1af0f40b77914e45f56bf87839d00211d7" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>breakSpace</name></member>
      <member refid="classcsl_1_1Abstract_1afd9d0336808e8adf4ccdccb51587ed8c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>checkIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a1ebd84082bb93418408cc0babe2dffe2" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>checkIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1ab3746f1d3667846824ea51b8a2e00d31" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>collect</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1add4dd8d4ed4ea0d8817fdd79abd744cc" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>commutesWith</name></member>
      <member refid="classcsl_1_1Abstract_1a7caee12abb451168149779a668dfc59e" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Abstract_1a0f16fda9fe72a89c61ece36101a11d95" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>compareWithDummy</name></member>
      <member refid="classcsl_1_1Complexified_1a6333b0f548411b1712301806c21c2261" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>Complexified</name></member>
      <member refid="classcsl_1_1Complexified_1a785754f2eac5813fcf8aa87cc0b456bf" prot="protected" virt="non-virtual"><scope>csl::Arbitrary</scope><name>conjugated</name></member>
      <member refid="classcsl_1_1Abstract_1aed79d20a0821205e6430c80a474117d3" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>contractIndex</name></member>
      <member refid="classcsl_1_1Abstract_1ad874fc858295a737e6ce884530f1109b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>contraction</name></member>
      <member refid="classcsl_1_1Abstract_1abd35096982e92b669ea55d960c5f44be" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>contraction</name></member>
      <member refid="classcsl_1_1Abstract_1af29c2898c5d3ba96de8018a0838c402c" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>copy</name></member>
      <member refid="classcsl_1_1Arbitrary_1a49ab42288e91d3d2fc5d2af3b473b4df" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>copy_unique</name></member>
      <member refid="classcsl_1_1Abstract_1a09648782dcf2e81abb5b864f476cc410" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>deepCopy</name></member>
      <member refid="classcsl_1_1Abstract_1a10358c33402ed520dc5888b25bb26af3" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>deepRefresh</name></member>
      <member refid="classcsl_1_1Abstract_1ac3c9887977249e4d71ea36c6377b3581" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1Abstract_1a0b26ad7a44e497af296318287bac539a" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>dependsExplicitlyOn</name></member>
      <member refid="classcsl_1_1Abstract_1a40fe2ccf376dadd21b2d7a0f134d86c6" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1Abstract_1a9d7d8586a0df66ba8da33528d6400e66" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>dependsOn</name></member>
      <member refid="classcsl_1_1Abstract_1aecab8c872023a2d0771e7e4f83bb05f8" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>derive</name></member>
      <member refid="classcsl_1_1Abstract_1aeb08811cf370616477a92075e4a218ee" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>determinant</name></member>
      <member refid="classcsl_1_1Abstract_1a1578c74aee1050b806a67e7a81a67f5c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>division_own</name></member>
      <member refid="classcsl_1_1Abstract_1a4cc7a46deaa3eaa7593909d74e76d4af" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>dot</name></member>
      <member refid="classcsl_1_1Abstract_1a0c3c3fe5010f24e8a8765ea06415c003" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>empty</name></member>
      <member refid="classcsl_1_1Abstract_1a61e4e80d998a888a1a74d9ea3e10c0f1" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>end</name></member>
      <member refid="classcsl_1_1Abstract_1ae2761d54f13310e13f5076d565edd7ef" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>end</name></member>
      <member refid="classcsl_1_1Arbitrary_1ab4744294dedcb8b4402b76f821b275cf" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>evaluate</name></member>
      <member refid="classcsl_1_1Abstract_1a543d5a4f0432e166b492ad28a860a65f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>evaluateScalar</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a7cbbd2edd75a84057f1622826c1efd3a" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>expand</name></member>
      <member refid="classcsl_1_1Abstract_1aeb48aaaa856582b6359037fe94d2419b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>expand_if</name></member>
      <member refid="classcsl_1_1Abstract_1aa2696a0feb43766ef54e1e3dd3d6d134" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>exponentiation_own</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a2f12cede626ece5382c9869d32c32146" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>factor</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a447f940bf0a08d13297fde0b50b4cb84" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>factor</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a4000d3f204c1957f5cffc0677dd754c0" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>findSubExpression</name></member>
      <member refid="classcsl_1_1Abstract_1a021946e84d8c1a019908cac578b16fe8" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getAllDependencies</name></member>
      <member refid="classcsl_1_1Abstract_1ac33a42309d629d47bfdbede4e152414e" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a06f542034e95744148f4fce5a4893e63" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a898d6cf2a7f348feacab189447bee1eb" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1aa689fb64eecb86edbde6c745d1ce756b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getArgument</name></member>
      <member refid="classcsl_1_1Abstract_1afeb26e1382411448ce3c65d50fefd8bb" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getCanonicalPermutation</name></member>
      <member refid="classcsl_1_1Abstract_1a2263731ca94825f35281e69fb258cf87" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getCommutable</name></member>
      <member refid="classcsl_1_1Complexified_1ab70d880a6d5eaf52b7d365c9d0c29f86" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getComplexArgument</name></member>
      <member refid="classcsl_1_1Complexified_1a9d3fec789b00de1625df53232da4cf30" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getComplexConjugate</name></member>
      <member refid="classcsl_1_1Complexified_1a05b65b2f6cdbc13a1d757a3f90ae7c0c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getComplexModulus</name></member>
      <member refid="classcsl_1_1Complexified_1a3579397ed08ed6d5a027e69d49f54a59" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getComplexProperty</name></member>
      <member refid="classcsl_1_1Abstract_1af04c0e4426f0bf9df365afe0148d59df" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getContractedPair</name></member>
      <member refid="classcsl_1_1Abstract_1aec707d949f0f98e08ab4642c93dd9eb5" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getContractionProperties</name></member>
      <member refid="classcsl_1_1Abstract_1aa22f0e4c9c91f43b5cd61cbb873869eb" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getDeltaMinus</name></member>
      <member refid="classcsl_1_1Abstract_1a69a657baf1c35ed581e9db2c47a71c99" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getDeltaPlus</name></member>
      <member refid="classcsl_1_1Abstract_1a9531d78d67c82e288c0130da5b1ba80b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getDenom</name></member>
      <member refid="classcsl_1_1Abstract_1a5856c3d55a6d1406970f3656e61efe8e" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getDim</name></member>
      <member refid="classcsl_1_1Abstract_1a77e067fc57c0c2e70d141079455fdbd7" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getElementary</name></member>
      <member refid="classcsl_1_1Abstract_1ac513c930caa9939c2b9557f36a34ee69" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getExponents</name></member>
      <member refid="classcsl_1_1Abstract_1ac34c9c6f05e692faeed2f030514787ad" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getFactors</name></member>
      <member refid="classcsl_1_1Abstract_1aa4136dc23f1fba4bf897b54c8592ccfc" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getFreeIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1aa5b707a5efdaef7c7945cbd921c3f526" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getHermitianConjugate</name></member>
      <member refid="classcsl_1_1Abstract_1aff5cca2b2c8190e59f6e34cb1e383d36" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getHermitianConjugate</name></member>
      <member refid="classcsl_1_1Complexified_1a11702661de0ea3b9c59b1f23af0ca0c0" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getImaginaryPart</name></member>
      <member refid="classcsl_1_1Abstract_1a3234ce243f6a2e11950be42f10100943" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getIndex</name></member>
      <member refid="classcsl_1_1Abstract_1ae125a32b6f3d0368b6055d4e58c1ff3f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1ae6a9a9ef3efd6bb83b62c0a353742d25" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>getIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1addb848bf4cdea207484a71e9b1006ead" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getIndexStructureView</name></member>
      <member refid="classcsl_1_1Abstract_1a632e28530a68539fadacd7ab7ffc8be1" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getIndexStructureView</name></member>
      <member refid="classcsl_1_1Abstract_1a3d6b1e294cf24dea17c3c4361226138b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getInfBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1a9c4a302d1a3cbf4dd9394f5e5880d343" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getLatexName</name></member>
      <member refid="classcsl_1_1Abstract_1a652101e34b2efa43114150e9af3c79d5" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getLibDependency</name></member>
      <member refid="classcsl_1_1Arbitrary_1a25dce08825f0efbf6715c8db35f981e6" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getName</name></member>
      <member refid="classcsl_1_1Abstract_1aa034448201c9e7998bbbb5e409636b30" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getNArgs</name></member>
      <member refid="classcsl_1_1Abstract_1a42125e9765a771c47819548d342b0b28" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getNContractedPairs</name></member>
      <member refid="classcsl_1_1Abstract_1a204dbd37b63432cb08932b995f49d3f4" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getNFactor</name></member>
      <member refid="classcsl_1_1Abstract_1add364193f7a78ac28f7001c7f4036453" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getNIndices</name></member>
      <member refid="classcsl_1_1Arbitrary_1a0e1f9042536b8ec8f361e7fd556b58d4" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getNum</name></member>
      <member refid="classcsl_1_1Abstract_1aad25c117c8dfc4d9718ba41e8d3f33a6" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getNumericalFactor</name></member>
      <member refid="classcsl_1_1Abstract_1a9c3ec3dfe1fbd8ead5c8d9aca421a863" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getOperand</name></member>
      <member refid="classcsl_1_1Abstract_1a9500a21d75d03c695ec0c76493600b38" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getOrder</name></member>
      <member refid="classcsl_1_1Abstract_1ae89eb7b1a9e0259a60154563f3315907" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getOrderOf</name></member>
      <member refid="classcsl_1_1Abstract_1ab150130c9f67daaf6aba52b9f6b90941" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getParent</name></member>
      <member refid="classcsl_1_1Abstract_1a15f775b5add9af8727ead2cfaab78ba2" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getParent_info</name></member>
      <member refid="classcsl_1_1Abstract_1aea8459b3206eb3a2297eeea7688e9520" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getParity</name></member>
      <member refid="classcsl_1_1Abstract_1a946d175d946da102c5f4cc91840703cb" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getPermutations</name></member>
      <member refid="classcsl_1_1Abstract_1a06b32036fea6a2583f506a6ef9508d74" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getPoint</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a05d8a8cf5ba9ae9563c09b65bac10c2f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getPolynomialTerm</name></member>
      <member refid="classcsl_1_1Arbitrary_1a489b4b7b94c0880c843db0e4cfc249d4" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getPrimaryType</name></member>
      <member refid="classcsl_1_1Abstract_1a07489d0569bc983718796d21c73f34b3" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getProduct</name></member>
      <member refid="classcsl_1_1Complexified_1a5de9b50162c5af5177a928e855e6b71b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getRealPart</name></member>
      <member refid="classcsl_1_1Abstract_1a5b77f008f4b95030641224877004f06c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getRegularExpression</name></member>
      <member refid="classcsl_1_1Abstract_1a625efe55a17b97a1c0f085bdbf3a962a" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getShape</name></member>
      <member refid="classcsl_1_1Abstract_1aa83df1d9dc202457113e5b38bd694fae" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSign</name></member>
      <member refid="classcsl_1_1AbstractLiteral_1a64980f64df102f1dc6000eb9d1e817b0" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSubSymbols</name></member>
      <member refid="classcsl_1_1Abstract_1a7dcdc11b64c8c515933882168d0792ef" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a413c50b2663f57d38c1d3ec3cfeaa3ce" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a26a0854bca4c47e84a1da36a3de8c49f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a29261a946b3398b6129237620754a8b9" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1a8a067b70756c4eef758aa88076a95162" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSubVectorial</name></member>
      <member refid="classcsl_1_1Abstract_1aeaf8154e39ff211b12e6382e675ccaad" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSum</name></member>
      <member refid="classcsl_1_1Abstract_1a2fcc223dbf5d880e923c07df142df5c8" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getSupBoundary</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1a58c627e31c2a42adec4caf39030123aa" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getTerm</name></member>
      <member refid="classcsl_1_1Abstract_1a404c5e89a3aad8a8dabcb56d4120c0fe" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getTransposed</name></member>
      <member refid="classcsl_1_1Abstract_1aca3debb143668fd3ab75a27a47dd0c13" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getTransposed</name></member>
      <member refid="classcsl_1_1Arbitrary_1ad803441e87d253727977a2731de05e3e" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getType</name></member>
      <member refid="classcsl_1_1Abstract_1a78f98ba06476e464e3fd2fce0d1f8243" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getValue</name></member>
      <member refid="classcsl_1_1Abstract_1a628563238145f3a9acc331f1a89ce32f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getValued</name></member>
      <member refid="classcsl_1_1Abstract_1ae85f810bbadbc792210c958e8f1b2ffb" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getVariable</name></member>
      <member refid="classcsl_1_1Abstract_1ac83c44ae1e5315a38083bdb7acd8f3fa" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getVectorArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a0188b049736016c970a2513ed9f6931f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>getVectorialModulus</name></member>
      <member refid="classcsl_1_1Abstract_1a94bf1455397fdd2df8dbbc3b41c2f3f4" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>hasChainContractionProperty</name></member>
      <member refid="classcsl_1_1Abstract_1aa31e08c251d96b8ea8ec8d385895c1ff" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>hasContractionProperty</name></member>
      <member refid="classcsl_1_1Abstract_1a8c42723e8bc6334c99f00898cc1d59d7" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>hermitian</name></member>
      <member refid="classcsl_1_1Abstract_1a5437e7f685edf8549e6d3b34572343f8" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>insert</name></member>
      <member refid="classcsl_1_1Abstract_1a1b68943aa7ecf60a63af0f2f368eef8f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>inverseMatrix</name></member>
      <member refid="classcsl_1_1Abstract_1a9347e75b0cd0b75e0f0a38db93b29d83" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isAnOperator</name></member>
      <member refid="classcsl_1_1Arbitrary_1a53ca5235ba7ad6a7bd7f157557b0e11f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isArbitrary</name></member>
      <member refid="classcsl_1_1AbstractBuildingBlock_1aee083330a4490359012cf0e656758a44" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isBuildingBlock</name></member>
      <member refid="classcsl_1_1Complexified_1a3f583f018b34b63b321976a8bcedf430" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isComplexConjugate</name></member>
      <member refid="classcsl_1_1Abstract_1a464f4f0613db9b4b0a4efe26a3a03d60" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isEmpty</name></member>
      <member refid="classcsl_1_1Abstract_1af2ce38838e35c5785f92373a1d830668" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isHermitianConjugate</name></member>
      <member refid="classcsl_1_1Abstract_1a216b7bd3930fbf047e5bf8f69e9b964c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isIndexed</name></member>
      <member refid="classcsl_1_1Abstract_1a9a014bfd266b5f8471f23580e271979b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isInteger</name></member>
      <member refid="classcsl_1_1Abstract_1acae10d5685ccec295fbd9be7996073cb" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isPolynomial</name></member>
      <member refid="classcsl_1_1Complexified_1aa3de4cb73eb624830da28f07ef0fa4d4" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isPurelyImaginary</name></member>
      <member refid="classcsl_1_1Complexified_1a4c69b308c3d305cfa532eb5c653072a0" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>isReal</name></member>
      <member refid="classcsl_1_1Abstract_1ab79c1d8df9e6b1a3eca66958f7dc489d" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>matchShape</name></member>
      <member refid="classcsl_1_1Abstract_1ac3978c71035bf1cda50f5b9031d631af" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>memoryOverhead</name></member>
      <member refid="classcsl_1_1Abstract_1a4f5ed458ba62f5b4cf61a9e1f8568af1" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>multiplication_own</name></member>
      <member refid="classcsl_1_1Arbitrary_1a14264840d6503ae1a8cdf50e24fe8048" prot="private" virt="non-virtual"><scope>csl::Arbitrary</scope><name>name</name></member>
      <member refid="classcsl_1_1Arbitrary_1ad03769cf5e8a95b092218b8446e947ab" prot="private" virt="non-virtual"><scope>csl::Arbitrary</scope><name>number</name></member>
      <member refid="classcsl_1_1Abstract_1af5b62a6308638064c42da80e9cc2cb7e" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1af4fd1b57df371dac7ccfd5a909620e49" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a96de5935a58a96d4c5b1e47966488923" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1ac99a619abde7e4c58f39e14d4d20fcf5" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a45206de7c7773b3cb150451ee3eb379e" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Abstract_1a0d3495220202bd417c1b58249c923f39" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator!=</name></member>
      <member refid="classcsl_1_1Arbitrary_1aa283ee7217ca8a9ea20de5e4cf3c5ab0" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a5c1ba8dce7fbc19eb98807bd15a279c9" prot="public" virt="pure-virtual" ambiguityscope="csl::AbstractLiteral::"><scope>csl::Arbitrary</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a6e19587260a07dba65cf2a985e05516b" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractLiteral::"><scope>csl::Arbitrary</scope><name>operator&lt;</name></member>
      <member refid="classcsl_1_1Abstract_1a2a1660498f2638f5e490d6e512eb32f4" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Abstract_1afbcac6df2fd7ac11f336189cf215124b" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator&lt;=</name></member>
      <member refid="classcsl_1_1Abstract_1a59ff2950fc8ca319f87a730450f14545" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>operator=</name></member>
      <member refid="classcsl_1_1Arbitrary_1a3bd3172760cb664c0c49475d26079d06" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a8334e14cd5789168b037d3888ed60edd" prot="public" virt="virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::Arbitrary</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a12d929e34039e817e464abc560bd4a9d" prot="public" virt="virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::Arbitrary</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a1f78f0cce24c93def3050743bc5f2845" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::Arbitrary</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1aed43debcac4a19e0da44986774c522bc" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::Arbitrary</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a2376f08c0aa5ffe783090381d102d3ae" prot="public" virt="non-virtual" ambiguityscope="csl::AbstractBuildingBlock::"><scope>csl::Arbitrary</scope><name>operator==</name></member>
      <member refid="classcsl_1_1Abstract_1a485c6f3e10db539a70416cd0766b117d" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Abstract_1ab305bdf49212f03781e7f98024faeb66" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator&gt;</name></member>
      <member refid="classcsl_1_1Abstract_1a4c8883df19d7538b68fa96aadac9dfa9" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1Abstract_1a6b931f7b159d57bad26ca9c9ea729aa1" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>operator&gt;=</name></member>
      <member refid="classcsl_1_1Abstract_1aa8331053065d1be2da89e70c45d24863" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1Abstract_1a560aa9993d506551c54a8c02d1445814" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>operator[]</name></member>
      <member refid="classcsl_1_1Abstract_1a75d9abfa88d9d09a89d3a4becd9e6429" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>operatorAppliesOn</name></member>
      <member refid="classcsl_1_1Abstract_1abe9aceabbc0a99642e84c9025dbdc767" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>permut</name></member>
      <member refid="classcsl_1_1Arbitrary_1ab5f7c2c30475e2dd9a13423923ff13bc" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>print</name></member>
      <member refid="classcsl_1_1Abstract_1a2910dd30d90915c11d48c01cab618dda" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>printCode</name></member>
      <member refid="classcsl_1_1Abstract_1a89e45ffc7b65f92e77e592f76f70934c" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>printExplicit</name></member>
      <member refid="classcsl_1_1Arbitrary_1a2275ec73b2842df28cb80bd59bbf958d" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>printLaTeX</name></member>
      <member refid="classcsl_1_1Complexified_1a42c425b2145c916331f881f217e14e4b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>printProp</name></member>
      <member refid="classcsl_1_1Abstract_1aaeab3809e91989adbdf29c3f56d905b6" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>refresh</name></member>
      <member refid="classcsl_1_1Abstract_1a8aab87c41acafaf1b1837b922495560d" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>regularLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1a2fe749450d2e610199801b189dc3d0f8" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>regularLiteral</name></member>
      <member refid="classcsl_1_1Abstract_1aba5ef083016b2f3d9e6271f864b9b063" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>regularName</name></member>
      <member refid="classcsl_1_1Abstract_1a1a8421d402d5ba82257188b545e8d668" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>regularName</name></member>
      <member refid="classcsl_1_1Abstract_1a0e778c682b6cb02642b90e8ec8765441" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>removeDependency</name></member>
      <member refid="classcsl_1_1Abstract_1acc0eb077e25c9a67d15269cf8d5f0511" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>replaceIndex</name></member>
      <member refid="classcsl_1_1Abstract_1a9372ddd521fa661c5d3371e0d8d4dfc3" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>replaceIndexInPlace</name></member>
      <member refid="classcsl_1_1Abstract_1ac9e54a236015d14af42b0bcde41953f3" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>replaceIndices</name></member>
      <member refid="classcsl_1_1Abstract_1af0d95f3edc0562b1d75d60b670119842" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>resetIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a5c796713828ebfb74a7d8787d7802a76" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>self</name></member>
      <member refid="classcsl_1_1Abstract_1aa6a40ceb6eb1aa79711ca126d5bdda02" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setAllDependencies</name></member>
      <member refid="classcsl_1_1Abstract_1aab2d2ac186b56d17d2cc0a105e145b11" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a45c3adb7ba4e2b8442247246a3792b44" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a7bb29d316b8f64652cef472a6c23f001" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setCommutable</name></member>
      <member refid="classcsl_1_1Complexified_1aeef08a8dd0256b5e9f6aa0cb0a40e936" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setComplexProperty</name></member>
      <member refid="classcsl_1_1Complexified_1a22b60556c965e51ab733e6eb5441783c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setConjugated</name></member>
      <member refid="classcsl_1_1Abstract_1aa6a04bb56578e7da143b3cd8d8fb7b26" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setElementary</name></member>
      <member refid="classcsl_1_1Abstract_1afa50c743b8e7e76e637e98f165ad4e5d" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setEmpty</name></member>
      <member refid="classcsl_1_1Abstract_1ac318016372d14b795893fe7e59199084" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setFullyAntiSymmetric</name></member>
      <member refid="classcsl_1_1Abstract_1a4f90ebb7cf7c26782bd36bc2a67fc5d4" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setFullySymmetric</name></member>
      <member refid="classcsl_1_1Abstract_1a70f946f9c59df045ef7416320ade89c7" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setIndexStructure</name></member>
      <member refid="classcsl_1_1Abstract_1a5ecdb6ce7a2d9643da2f6161a06dfbbf" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setInfBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1a867135c96776248add60018f4aa7a578" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setName</name></member>
      <member refid="classcsl_1_1Abstract_1a70df7be4486affa8dc891e3f25bf499f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setOperand</name></member>
      <member refid="classcsl_1_1Abstract_1ae7b8a14fc746ed72e4d5abd63373c5ba" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setOperandPrivate</name></member>
      <member refid="classcsl_1_1Abstract_1a3003698af4978e774eeb2e62038f7432" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setParent</name></member>
      <member refid="classcsl_1_1Abstract_1a3c175411df619e7504feb6d888fc82f1" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setPoint</name></member>
      <member refid="classcsl_1_1Abstract_1aad7104a5b8855272a92a47c58f29e958" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setSupBoundary</name></member>
      <member refid="classcsl_1_1Abstract_1aaf7f0692cb84ca861a5b3b641bea518b" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Abstract_1aa49c51bd285830e724f103e9fb61c464" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setValue</name></member>
      <member refid="classcsl_1_1Abstract_1aa47ddab3aa047e86be34c70358d53548" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setVariable</name></member>
      <member refid="classcsl_1_1Abstract_1a83fee8ed28079bcac107455d58be9d5d" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>setVectorArgument</name></member>
      <member refid="classcsl_1_1Abstract_1a3794843945b8a39e2c1be073c9bacdf5" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>size</name></member>
      <member refid="classcsl_1_1Abstract_1a4eeedaeaa39e75facf1060dce7c57a8f" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>suppressExponent</name></member>
      <member refid="classcsl_1_1Abstract_1a43520e1d6d5fdad9b50f77c6e027f928" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>suppressTerm</name></member>
      <member refid="classcsl_1_1Abstract_1a4faf1ffd8cb3b6c721e128980c0303d8" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>symmetrise</name></member>
      <member refid="classcsl_1_1Abstract_1a7b83c6a13716688f45b02e6291d39aba" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>tensordot</name></member>
      <member refid="classcsl_1_1Abstract_1aee4fa41a5e014f067395467542ee8831" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>testDummy</name></member>
      <member refid="classcsl_1_1Abstract_1a9a86d21f5c5f65eb7e524a8f8002c0e7" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>trace</name></member>
      <member refid="classcsl_1_1Abstract_1aacab43e551e9259a39a79378373ce49c" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>trace</name></member>
      <member refid="classcsl_1_1Abstract_1a1e97712696e5c40b28bc1e35987fea94" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>transpose</name></member>
      <member refid="classcsl_1_1Arbitrary_1a6559ddf6de034effd0531c332e0e38a0" prot="private" virt="non-virtual"><scope>csl::Arbitrary</scope><name>type</name></member>
      <member refid="classcsl_1_1Abstract_1a40bdc4c76fdbbf3cbac3af4dce8286ed" prot="public" virt="virtual"><scope>csl::Arbitrary</scope><name>~Abstract</name></member>
      <member refid="classcsl_1_1Arbitrary_1a562b537606260f291b89d6b8e39741c9" prot="public" virt="non-virtual"><scope>csl::Arbitrary</scope><name>~Arbitrary</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
