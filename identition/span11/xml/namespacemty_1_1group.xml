<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="namespacemty_1_1group" kind="namespace" language="C++">
    <compoundname>mty::group</compoundname>
    <innerclass refid="classmty_1_1group_1_1E6" prot="public">mty::group::E6</innerclass>
    <innerclass refid="classmty_1_1group_1_1E7" prot="public">mty::group::E7</innerclass>
    <innerclass refid="classmty_1_1group_1_1E8" prot="public">mty::group::E8</innerclass>
    <innerclass refid="classmty_1_1group_1_1F4" prot="public">mty::group::F4</innerclass>
    <innerclass refid="classmty_1_1group_1_1G2" prot="public">mty::group::G2</innerclass>
    <innerclass refid="classmty_1_1group_1_1Lorentz" prot="public">mty::group::Lorentz</innerclass>
    <innerclass refid="classmty_1_1group_1_1SO" prot="public">mty::group::SO</innerclass>
    <innerclass refid="classmty_1_1group_1_1Sp" prot="public">mty::group::Sp</innerclass>
    <innerclass refid="classmty_1_1group_1_1SU" prot="public">mty::group::SU</innerclass>
    <innerclass refid="classmty_1_1group_1_1U1" prot="public">mty::group::U1</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" prot="public" static="no" strong="yes">
        <type></type>
        <name>Type</name>
        <qualifiedname>mty::group::Type</qualifiedname>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9a6d2adfdfd6f2a24cc46e5fdbb5679135" prot="public">
          <name>Trivial</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trivial group {e}. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9af186217753c37b9b9f958d906208506e" prot="public">
          <name>O</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Orthogonal group <formula id="101">$ O(N) $</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9a98d0360b392de5f1d53acdd6489b6e88" prot="public">
          <name>SO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Special orthogonal group <formula id="102">$ SO(N) $</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9af89412c11bdc0ab44f99f92d5e9a3c5e" prot="public">
          <name>U1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Commutative unitary group <formula id="103">$ U(1) $</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9af7adf0ba18d705092fa0a1e2f2c0bafb" prot="public">
          <name>SU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Special unitary group <formula id="104">$ SU(N) $</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9ae68483b702d4be05c6d7bf1ecc7889f8" prot="public">
          <name>Sp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Symplectic group <formula id="105">$ Sp(N) $</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9a247116319466c7be96c6ac3ab87984cb" prot="public">
          <name>E6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group exponential of exceptionnal algebra <formula id="106">$E_6$</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9a4b110604865b013dd13d9ce3f66046f2" prot="public">
          <name>E7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group exponential of exceptionnal algebra <formula id="107">$E_7$</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9ab1a82c958451a0a4f0f7373dad43ca67" prot="public">
          <name>E8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group exponential of exceptionnal algebra <formula id="108">$E_8$</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9ae7e0e72401a9f2718ed0f39f2861d702" prot="public">
          <name>F4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group exponential of exceptionnal algebra <formula id="109">$F_4$</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9ad24bade136bc8cd77e37395ea94226eb" prot="public">
          <name>G2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group exponential of exceptionnal algebra <formula id="110">$G_2$</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9a328c1a0e6bbe8e6539323d4ee0eae585" prot="public">
          <name>Lorentz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="classmty_1_1group_1_1Lorentz" kindref="compound">Lorentz</ref> group, <formula id="111">$ SO^+(1,3) $</formula>. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of types of semi simple Lie groups. The names being very small, we use a namespace to avoid conflicts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.h" line="44" column="1" bodyfile="src/marty/core/group.h" bodystart="44" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacemty_1_1group_1ae6632767a9b88c522ef6beccb0d2bba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; mty::group::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;fout, mty::group::Type type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::group::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">mty::group::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.cpp" line="28" column="1" bodyfile="src/marty/core/group.cpp" bodystart="28" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacemty_1_1group_1aba97747c4a951c899dfa96349c158f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; mty::group::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;fout, mty::group::Type type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::group::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>fout</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">mty::group::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Overload of operator&lt;&lt; for group::Type::Type. Allows to display a string corresponding to the type of group instead of an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fout</parametername>
</parameternamelist>
<parameterdescription>
<para>Output flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to display. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The modified flux. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/group.h" line="67" column="1" declfile="src/marty/core/group.h" declline="67" declcolumn="1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Namespace to avoid name conflicts for groups that can have very simple names. See <ref refid="namespacemty_1_1algebra_1a6a408a40adf4bdcbb2de53ae0917062a" kindref="member">algebra::Type</ref> for the same reason. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/marty/core/group.cpp" line="27" column="1"/>
  </compounddef>
</doxygen>
