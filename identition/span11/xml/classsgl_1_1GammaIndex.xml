<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classsgl_1_1GammaIndex" kind="class" language="C++" prot="public">
    <compoundname>sgl::GammaIndex</compoundname>
    <basecompoundref refid="classsgl_1_1AbstractGeneralizedIndex" prot="public" virt="non-virtual">sgl::AbstractGeneralizedIndex</basecompoundref>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1ac9c4ebcc5c0cc6d3a7932761335cfe28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sgl::GammaIndex::GammaIndex</definition>
        <argsstring>()</argsstring>
        <name>GammaIndex</name>
        <qualifiedname>sgl::GammaIndex::GammaIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="38" column="5" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a5bcfb9e3eb14a2cb84d917636d161a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sgl::GammaIndex::GammaIndex</definition>
        <argsstring>(csl::Index const &amp;t_index)</argsstring>
        <name>GammaIndex</name>
        <qualifiedname>sgl::GammaIndex::GammaIndex</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="39" column="5" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a15c1f0e105d389b218025be55dca63b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sgl::GammaIndex::GammaIndex</definition>
        <argsstring>(std::vector&lt; csl::Index &gt; const &amp;t_indices)</argsstring>
        <name>GammaIndex</name>
        <qualifiedname>sgl::GammaIndex::GammaIndex</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt; const &amp;</type>
          <declname>t_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="40" column="5" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a112b2f140d387da9428651e05915b78b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isZero</definition>
        <argsstring>() const override</argsstring>
        <name>isZero</name>
        <qualifiedname>sgl::GammaIndex::isZero</qualifiedname>
        <reimplements refid="classsgl_1_1AbstractGammaSym_1adfe9ff61706305c5c0eb268dd2653d0d">isZero</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="42" column="15" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a254ae7ebb2fbc837d3d6de3a4f074b73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr sgl::GammaIndex::getFactor</definition>
        <argsstring>() const override</argsstring>
        <name>getFactor</name>
        <qualifiedname>sgl::GammaIndex::getFactor</qualifiedname>
        <reimplements refid="classsgl_1_1AbstractGammaSym_1a5e749ec71535aae944635a29bdb7eeba">getFactor</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="43" column="15" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="42" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a8a3258ca992157a3eeacc5326862ba75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::GammaIndex::getTerm</definition>
        <argsstring>() const override</argsstring>
        <name>getTerm</name>
        <qualifiedname>sgl::GammaIndex::getTerm</qualifiedname>
        <reimplements refid="classsgl_1_1AbstractGammaSym_1a75034a33b0e554585206b38961960113">getTerm</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="44" column="15" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="64" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1adade03e5372f93af5844a1bd35d1d550" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isDelta</definition>
        <argsstring>() const</argsstring>
        <name>isDelta</name>
        <qualifiedname>sgl::GammaIndex::isDelta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="46" column="10" bodyfile="src/marty/sgl/gammaindex.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1adc76aa9608840d276deef6d96d39e0f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isGammaMu</definition>
        <argsstring>() const</argsstring>
        <name>isGammaMu</name>
        <qualifiedname>sgl::GammaIndex::isGammaMu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="50" column="10" bodyfile="src/marty/sgl/gammaindex.h" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a1b110155bec5e5fc86f3fc7ca5a74189" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isSigma</definition>
        <argsstring>() const</argsstring>
        <name>isSigma</name>
        <qualifiedname>sgl::GammaIndex::isSigma</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="56" column="10" bodyfile="src/marty/sgl/gammaindex.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a368a4584c488ac75300ea1a1a11c88d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isGamma5</definition>
        <argsstring>() const</argsstring>
        <name>isGamma5</name>
        <qualifiedname>sgl::GammaIndex::isGamma5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="60" column="10" bodyfile="src/marty/sgl/gammaindex.h" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1ac8d8300682b8bbaf46da36d193c48f1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isP_L</definition>
        <argsstring>() const</argsstring>
        <name>isP_L</name>
        <qualifiedname>sgl::GammaIndex::isP_L</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="66" column="10" bodyfile="src/marty/sgl/gammaindex.h" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a6825d5951ba9c691106d038fbdaf7812" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isP_R</definition>
        <argsstring>() const</argsstring>
        <name>isP_R</name>
        <qualifiedname>sgl::GammaIndex::isP_R</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="72" column="10" bodyfile="src/marty/sgl/gammaindex.h" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1ab47cb51146a58fb1a0afd4a184894701" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isChiral</definition>
        <argsstring>() const</argsstring>
        <name>isChiral</name>
        <qualifiedname>sgl::GammaIndex::isChiral</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="78" column="10" bodyfile="src/marty/sgl/gammaindex.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a5f77fba50fdbdbce409e2529e9d3ad9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::isC</definition>
        <argsstring>() const</argsstring>
        <name>isC</name>
        <qualifiedname>sgl::GammaIndex::isC</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="82" column="10" bodyfile="src/marty/sgl/gammaindex.h" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a3b9e88214d08bc24eacf1c4d20396d8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::leftOf</definition>
        <argsstring>(GammaIndex const &amp;other) const</argsstring>
        <name>leftOf</name>
        <qualifiedname>sgl::GammaIndex::leftOf</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="89" column="10" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="84" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a12947bd12ac02ca7d9897e381ccf775f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::GammaIndex::copy</definition>
        <argsstring>() const override</argsstring>
        <name>copy</name>
        <qualifiedname>sgl::GammaIndex::copy</qualifiedname>
        <reimplements refid="classsgl_1_1AbstractGammaSym_1af757efe5cd359a3d83f1ef642c4fec8b">copy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="91" column="11" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a1d2fff9233655d14e42ef70ff11135ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::GammaIndex::refresh</definition>
        <argsstring>() const override</argsstring>
        <name>refresh</name>
        <qualifiedname>sgl::GammaIndex::refresh</qualifiedname>
        <reimplements refid="classsgl_1_1AbstractGammaSym_1a13cc14a47f1ddf8fb51b0861e93c1d00">refresh</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="92" column="11" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a264ae464fcdda5cb1ecaf5eaff8594a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr sgl::GammaIndex::buildTensor</definition>
        <argsstring>(TensorSet const &amp;tensors, csl::Index const &amp;a, csl::Index const &amp;b) const</argsstring>
        <name>buildTensor</name>
        <qualifiedname>sgl::GammaIndex::buildTensor</qualifiedname>
        <param>
          <type><ref refid="structsgl_1_1TensorSet" kindref="compound">TensorSet</ref> const &amp;</type>
          <declname>tensors</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="94" column="15" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="131" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1abe9d085cfd4cb509ce07b183986e1b23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr sgl::GammaIndex::toCSL</definition>
        <argsstring>(TensorSet const &amp;) const override</argsstring>
        <name>toCSL</name>
        <qualifiedname>sgl::GammaIndex::toCSL</qualifiedname>
        <reimplements refid="classsgl_1_1AbstractGammaSym_1a2c88557366387dab3a16a1e71aa192a6">toCSL</reimplements>
        <param>
          <type><ref refid="structsgl_1_1TensorSet" kindref="compound">TensorSet</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="98" column="15" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a9131e97a2a857acabd6e187a82f00f79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void sgl::GammaIndex::print</definition>
        <argsstring>(std::ostream &amp;out=std::cout) const override</argsstring>
        <name>print</name>
        <qualifiedname>sgl::GammaIndex::print</qualifiedname>
        <reimplements refid="classsgl_1_1AbstractGammaSym_1a167b1ff6b236463f5c2cb2cff18b7109">print</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="100" column="10" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="162" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classsgl_1_1GammaIndex_1a6b623037c467f9fefe6e32c4a03b3150" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sgl::GammaIndex::equalTo</definition>
        <argsstring>(GammaIndex const &amp;other) const</argsstring>
        <name>equalTo</name>
        <qualifiedname>sgl::GammaIndex::equalTo</qualifiedname>
        <param>
          <type><ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/gammaindex.h" line="102" column="10" bodyfile="src/marty/sgl/gammaindex.cpp" bodystart="169" bodyend="177"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>sgl::AbstractGammaSym</label>
        <link refid="classsgl_1_1AbstractGammaSym"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>sgl::AbstractGeneralizedIndex</label>
        <link refid="classsgl_1_1AbstractGeneralizedIndex"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>sgl::AbstractLiteral</label>
        <link refid="classsgl_1_1AbstractLiteral"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>sgl::GammaIndex</label>
        <link refid="classsgl_1_1GammaIndex"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::enable_shared_from_this&lt; AbstractGammaSym &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>sgl::AbstractGammaSym</label>
        <link refid="classsgl_1_1AbstractGammaSym"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>sgl::AbstractGeneralizedIndex</label>
        <link refid="classsgl_1_1AbstractGeneralizedIndex"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>sgl::AbstractLiteral</label>
        <link refid="classsgl_1_1AbstractLiteral"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>sgl::GammaIndex</label>
        <link refid="classsgl_1_1GammaIndex"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::enable_shared_from_this&lt; AbstractGammaSym &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/marty/sgl/gammaindex.h" line="35" column="1" bodyfile="src/marty/sgl/gammaindex.h" bodystart="35" bodyend="103"/>
    <listofallmembers>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1a09bbfca288c73bce85c0d7ccdf69af3e" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>AbstractGeneralizedIndex</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1a4263879bbbd0b50ca72ed09ad97d2fe2" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>AbstractGeneralizedIndex</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1a236a1b9f14963896b7ced69761c6abb3" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>AbstractGeneralizedIndex</name></member>
      <member refid="classsgl_1_1AbstractLiteral_1a1c8f91c428236fd112084566ff9f798d" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>argument</name></member>
      <member refid="classsgl_1_1AbstractLiteral_1a6de99d632158d0544e7536f141ab4d25" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>argument</name></member>
      <member refid="classsgl_1_1AbstractLiteral_1a3bb5fe1156b3e85bc02536077626e95e" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>begin</name></member>
      <member refid="classsgl_1_1AbstractLiteral_1ad9662a88c502549ea76e5cfc9fa76a0c" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>begin</name></member>
      <member refid="classsgl_1_1GammaIndex_1a264ae464fcdda5cb1ecaf5eaff8594a4" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>buildTensor</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1a84a8f29afaabbe187d15d13a9fac4059" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>const_iterator</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1ac08a661c24e912af1c768198ac6b9489" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>contains</name></member>
      <member refid="classsgl_1_1GammaIndex_1a12947bd12ac02ca7d9897e381ccf775f" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>copy</name></member>
      <member refid="classsgl_1_1AbstractLiteral_1ad063835e8cc5fe232c4f858fb100fbf3" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>end</name></member>
      <member refid="classsgl_1_1AbstractLiteral_1a93c2311786e32222681acf8f5ba7a5b8" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>end</name></member>
      <member refid="classsgl_1_1GammaIndex_1a6b623037c467f9fefe6e32c4a03b3150" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>equalTo</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1ac033f1bea41f9a1001abba5b9305ce3e" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>errorPrint</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1a62ed9a539963b9146ac05c0efafffd47" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>expr</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1acefd4f5cee624ddff586cb005ed2510a" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>expr</name></member>
      <member refid="classsgl_1_1GammaIndex_1ac9c4ebcc5c0cc6d3a7932761335cfe28" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>GammaIndex</name></member>
      <member refid="classsgl_1_1GammaIndex_1a5bcfb9e3eb14a2cb84d917636d161a5b" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>GammaIndex</name></member>
      <member refid="classsgl_1_1GammaIndex_1a15c1f0e105d389b218025be55dca63b0" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>GammaIndex</name></member>
      <member refid="classsgl_1_1GammaIndex_1a254ae7ebb2fbc837d3d6de3a4f074b73" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>getFactor</name></member>
      <member refid="classsgl_1_1GammaIndex_1a8a3258ca992157a3eeacc5326862ba75" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>getTerm</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1ade647a5eec39ac5e5e6de2d612b8cdd3" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>hasPropertyWith</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1aa438a0225b780b24021721bf936af555" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>hasSelfContraction</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1a3fa15a2b50f62c59def3c14e250c3f65" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>indices</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1a11554c9d6819d035a2069976fcccd53b" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>indices</name></member>
      <member refid="classsgl_1_1GammaIndex_1a5f77fba50fdbdbce409e2529e9d3ad9a" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>isC</name></member>
      <member refid="classsgl_1_1GammaIndex_1ab47cb51146a58fb1a0afd4a184894701" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>isChiral</name></member>
      <member refid="classsgl_1_1GammaIndex_1adade03e5372f93af5844a1bd35d1d550" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>isDelta</name></member>
      <member refid="classsgl_1_1GammaIndex_1a368a4584c488ac75300ea1a1a11c88d6" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>isGamma5</name></member>
      <member refid="classsgl_1_1GammaIndex_1adc76aa9608840d276deef6d96d39e0f1" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>isGammaMu</name></member>
      <member refid="classsgl_1_1GammaIndex_1ac8d8300682b8bbaf46da36d193c48f1f" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>isP_L</name></member>
      <member refid="classsgl_1_1GammaIndex_1a6825d5951ba9c691106d038fbdaf7812" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>isP_R</name></member>
      <member refid="classsgl_1_1GammaIndex_1a1b110155bec5e5fc86f3fc7ca5a74189" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>isSigma</name></member>
      <member refid="classsgl_1_1GammaIndex_1a112b2f140d387da9428651e05915b78b" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>isZero</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1a7ecc40fa38a2c881f0e1b2af81e699f4" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>iterator</name></member>
      <member refid="classsgl_1_1GammaIndex_1a3b9e88214d08bc24eacf1c4d20396d8b" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>leftOf</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1a5e2818555935a472b1f3f09bd6c03874" prot="protected" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>m_indices</name></member>
      <member refid="classsgl_1_1GammaIndex_1a9131e97a2a857acabd6e187a82f00f79" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>print</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1a33095f4805b94fd9743c8483b6ddabd7" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>printIndices</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1abdacec8b02e4d1b58b9b938ae9be8e98" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>propertyWith</name></member>
      <member refid="classsgl_1_1GammaIndex_1a1d2fff9233655d14e42ef70ff11135ee" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>refresh</name></member>
      <member refid="classsgl_1_1AbstractGeneralizedIndex_1ae70dac34a52078fad33b542633671fe9" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>replace</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1a37c54670ee0262b62a55279b23e7ce12" prot="public" virt="non-virtual"><scope>sgl::GammaIndex</scope><name>self</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1a2c8730e190c88413a50d6f7b6864a97b" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>simplify</name></member>
      <member refid="classsgl_1_1AbstractLiteral_1a138e83d163d9978b52241cc4e3e30ceb" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>size</name></member>
      <member refid="classsgl_1_1GammaIndex_1abe9d085cfd4cb509ce07b183986e1b23" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>toCSL</name></member>
      <member refid="classsgl_1_1AbstractGammaSym_1a2be842099a79d1c07130664367ed9d91" prot="public" virt="virtual"><scope>sgl::GammaIndex</scope><name>~AbstractGammaSym</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
