<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classdrawer_1_1Matrix" kind="class" language="C++" prot="public">
    <compoundname>drawer::Matrix</compoundname>
    <basecompoundref refid="classdrawer_1_1Base__iterable" prot="public" virt="non-virtual">drawer::Base_iterable&lt; T1, T1 &gt;</basecompoundref>
    <basecompoundref refid="classdrawer_1_1Base__iterable" prot="public" virt="non-virtual">drawer::Base_iterable&lt; T1, T1 &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename T1</type>
      </param>
      <param>
        <type>typename T2</type>
        <defval>T1</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classdrawer_1_1Matrix_1a7dd0f769ae26a963b503e06e3f621117" prot="public" static="no">
        <type>typename <ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt;::Type</type>
        <definition>typedef typename Base_iterable&lt; T1, T2 &gt;::Type drawer::Matrix&lt; T1, T2 &gt;::Type =  typename Base_iterable&lt;T1, T2&gt;::Type</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <qualifiedname>drawer::Matrix::Type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="189" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Matrix_1a7ae66158ce3f11105b52d52c12041ec5" prot="public" static="no">
        <type>typename <ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt;::size_type</type>
        <definition>typedef typename Base_iterable&lt; T1, T2 &gt;::size_type drawer::Matrix&lt; T1, T2 &gt;::size_type =  typename Base_iterable&lt;T1, T2&gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>drawer::Matrix::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="190" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Matrix_1a30c6cac628e6ac4bdf9a6a8704af9ad2" prot="public" static="no">
        <type>typename <ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt;::iterator</type>
        <definition>typedef typename Base_iterable&lt; T1, T2 &gt;::iterator drawer::Matrix&lt; T1, T2 &gt;::iterator =  typename Base_iterable&lt;T1, T2&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>drawer::Matrix::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="191" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdrawer_1_1Matrix_1a813683fa76e10527d25a884e9d71d028" prot="public" static="no">
        <type>typename <ref refid="classdrawer_1_1Base__iterable" kindref="compound">Base_iterable</ref>&lt; T1, T2 &gt;::const_iterator</type>
        <definition>typedef typename Base_iterable&lt; T1, T2 &gt;::const_iterator drawer::Matrix&lt; T1, T2 &gt;::const_iterator =  typename Base_iterable&lt;T1, T2&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>drawer::Matrix::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="192" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="192" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdrawer_1_1Matrix_1a9b744665461b396989f807041c568fcd" prot="private" static="no" mutable="no">
        <type>size_type</type>
        <definition>size_type drawer::Matrix&lt; T1, T2 &gt;::N</definition>
        <argsstring></argsstring>
        <name>N</name>
        <qualifiedname>drawer::Matrix::N</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="243" column="15" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="243" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classdrawer_1_1Matrix_1aa22d30e35a2cc2f8b7e0924bb58e2108" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(size_t M)</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="194" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a9399526c0de369734eb905cfb89e383e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(std::vector&lt; Type &gt; const &amp;t_containor)</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; const &amp;</type>
          <declname>t_containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="198" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a543bc92ae287f8d32a9502638858a834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(std::vector&lt; Type &gt; &amp;&amp;t_containor)</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; &amp;&amp;</type>
          <declname>t_containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="203" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a5d42dc6459f68af9bd35c7851eba686e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::~Matrix</definition>
        <argsstring>()</argsstring>
        <name>~Matrix</name>
        <qualifiedname>drawer::Matrix::~Matrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="208" column="5" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a4802f9c1f5917174366fdbbbe8995307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(Matrix&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="212" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a5e688d22c11d1ac15441167699241c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(Matrix&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="213" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1af5ba1eb0d1cf3d8350b720500bf042f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; drawer::Matrix&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Matrix&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Matrix::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="214" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a9bc841ed8573ea3bcce15fb8e8ceb622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; drawer::Matrix&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Matrix&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Matrix::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="215" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a888751732aa89e9ae83ad4a1673dfe5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void drawer::Matrix&lt; T1, T2 &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>drawer::Matrix::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="217" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a72724a0adaad31510f7de0ceb20a9151" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type drawer::Matrix&lt; T1, T2 &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>drawer::Matrix::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="223" column="15" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a16acb4d54acc58e2732f67bb19dec51b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; drawer::Matrix&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(size_t i, size_t j)</argsstring>
        <name>operator()</name>
        <qualifiedname>drawer::Matrix::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="228" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a6babd6f554ffa305e1d7bb7eeda23ae9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type drawer::Matrix&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(size_t i, size_t j) const</argsstring>
        <name>operator()</name>
        <qualifiedname>drawer::Matrix::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="233" column="10" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1aa22d30e35a2cc2f8b7e0924bb58e2108" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(size_t M)</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="194" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a9399526c0de369734eb905cfb89e383e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(std::vector&lt; Type &gt; const &amp;t_containor)</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; const &amp;</type>
          <declname>t_containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="198" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a543bc92ae287f8d32a9502638858a834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(std::vector&lt; Type &gt; &amp;&amp;t_containor)</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type>std::vector&lt; Type &gt; &amp;&amp;</type>
          <declname>t_containor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="203" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a5d42dc6459f68af9bd35c7851eba686e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::~Matrix</definition>
        <argsstring>()</argsstring>
        <name>~Matrix</name>
        <qualifiedname>drawer::Matrix::~Matrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="208" column="5" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a4802f9c1f5917174366fdbbbe8995307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(Matrix&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="212" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a5e688d22c11d1ac15441167699241c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>drawer::Matrix&lt; T1, T2 &gt;::Matrix</definition>
        <argsstring>(Matrix&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>Matrix</name>
        <qualifiedname>drawer::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="213" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1af5ba1eb0d1cf3d8350b720500bf042f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; drawer::Matrix&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Matrix&lt; T1, T2 &gt; const &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Matrix::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; T1, T2 &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="214" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a9bc841ed8573ea3bcce15fb8e8ceb622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; drawer::Matrix&lt; T1, T2 &gt;::operator=</definition>
        <argsstring>(Matrix&lt; T1, T2 &gt; &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>drawer::Matrix::operator=</qualifiedname>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; T1, T2 &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="215" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a888751732aa89e9ae83ad4a1673dfe5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void drawer::Matrix&lt; T1, T2 &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>drawer::Matrix::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="217" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a72724a0adaad31510f7de0ceb20a9151" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type drawer::Matrix&lt; T1, T2 &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>drawer::Matrix::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="223" column="15" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a16acb4d54acc58e2732f67bb19dec51b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; drawer::Matrix&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(size_t i, size_t j)</argsstring>
        <name>operator()</name>
        <qualifiedname>drawer::Matrix::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="228" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classdrawer_1_1Matrix_1a6babd6f554ffa305e1d7bb7eeda23ae9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type</type>
        <definition>Type drawer::Matrix&lt; T1, T2 &gt;::operator()</definition>
        <argsstring>(size_t i, size_t j) const</argsstring>
        <name>operator()</name>
        <qualifiedname>drawer::Matrix::operator()</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="233" column="10" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="233" bodyend="236"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classdrawer_1_1Matrix_1a401e85f75e10c97fc2edeb47b23cc5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U1</type>
          </param>
          <param>
            <type>typename U2</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Matrix&lt; U1, U2 &gt; const &amp;mat)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>drawer::Matrix::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; U1, U2 &gt; const &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/core/adjacencyMatrix.h" line="239" column="12" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="247" bodyend="258"/>
      </memberdef>
      <memberdef kind="friend" id="classdrawer_1_1Matrix_1a401e85f75e10c97fc2edeb47b23cc5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U1</type>
          </param>
          <param>
            <type>typename U2</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Matrix&lt; U1, U2 &gt; const &amp;mat)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>drawer::Matrix::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classdrawer_1_1Matrix" kindref="compound">Matrix</ref>&lt; U1, U2 &gt; const &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/adjacencyMatrix.h" line="239" column="12" bodyfile="src/grafed/core/adjacencyMatrix.h" bodystart="247" bodyend="258"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>drawer::Base_iterable&lt; T1, T1 &gt;</label>
        <link refid="classdrawer_1_1Base__iterable"/>
      </node>
      <node id="1">
        <label>drawer::Matrix&lt; T1, T2 &gt;</label>
        <link refid="classdrawer_1_1Matrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>drawer::Base_iterable&lt; T1, T1 &gt;</label>
        <link refid="classdrawer_1_1Base__iterable"/>
      </node>
      <node id="1">
        <label>drawer::Matrix&lt; T1, T2 &gt;</label>
        <link refid="classdrawer_1_1Matrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/grafed/core/adjacencyMatrix.h" line="186" column="1" bodyfile="src/grafed/gui/adjacencyMatrix.h" bodystart="186" bodyend="244"/>
    <listofallmembers>
      <member refid="classdrawer_1_1Base__iterable_1abea26a8964894cc332f0b2c09bf26ad0" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ab291f7e487e1f4b9d6a73983ad84c832" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a9a2385be6f1d7ffe615f46c0af63a7ff" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6b6a6cc1d60556b5876368d4d9fdf628" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abcaf9f547568ddacd1eee92f62db71f3" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a35d3e01f3ae8117f4cbb688caf2037b2" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abea26a8964894cc332f0b2c09bf26ad0" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ab291f7e487e1f4b9d6a73983ad84c832" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a9a2385be6f1d7ffe615f46c0af63a7ff" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6b6a6cc1d60556b5876368d4d9fdf628" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1abcaf9f547568ddacd1eee92f62db71f3" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a35d3e01f3ae8117f4cbb688caf2037b2" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af2dc621564f03d977c20cf75ce7db29c" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a28c0f974d70b61fc76b9c8fdf0fc479b" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af2dc621564f03d977c20cf75ce7db29c" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a28c0f974d70b61fc76b9c8fdf0fc479b" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>begin</name></member>
      <member refid="classdrawer_1_1Matrix_1a888751732aa89e9ae83ad4a1673dfe5b" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>clear</name></member>
      <member refid="classdrawer_1_1Matrix_1a888751732aa89e9ae83ad4a1673dfe5b" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>clear</name></member>
      <member refid="classdrawer_1_1Matrix_1a813683fa76e10527d25a884e9d71d028" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>const_iterator</name></member>
      <member refid="classdrawer_1_1Base__iterable_1af615d2de5e1c7c8cc0a43b40305312d9" prot="protected" virt="non-virtual"><scope>drawer::Matrix</scope><name>elements</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ac867aca6d62b04256703386a238dcfd6" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>empty</name></member>
      <member refid="classdrawer_1_1Base__iterable_1ac867aca6d62b04256703386a238dcfd6" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>empty</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a0000f8ec576b052444fe8956488f92f5" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6153fdc3bd1f09460b24855113a08640" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a0000f8ec576b052444fe8956488f92f5" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>end</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a6153fdc3bd1f09460b24855113a08640" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>end</name></member>
      <member refid="classdrawer_1_1Matrix_1a30c6cac628e6ac4bdf9a6a8704af9ad2" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>iterator</name></member>
      <member refid="classdrawer_1_1Matrix_1aa22d30e35a2cc2f8b7e0924bb58e2108" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a9399526c0de369734eb905cfb89e383e" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a543bc92ae287f8d32a9502638858a834" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a4802f9c1f5917174366fdbbbe8995307" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a5e688d22c11d1ac15441167699241c12" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1aa22d30e35a2cc2f8b7e0924bb58e2108" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a9399526c0de369734eb905cfb89e383e" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a543bc92ae287f8d32a9502638858a834" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a4802f9c1f5917174366fdbbbe8995307" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a5e688d22c11d1ac15441167699241c12" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a9b744665461b396989f807041c568fcd" prot="private" virt="non-virtual"><scope>drawer::Matrix</scope><name>N</name></member>
      <member refid="classdrawer_1_1Matrix_1a16acb4d54acc58e2732f67bb19dec51b" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator()</name></member>
      <member refid="classdrawer_1_1Matrix_1a6babd6f554ffa305e1d7bb7eeda23ae9" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator()</name></member>
      <member refid="classdrawer_1_1Matrix_1a16acb4d54acc58e2732f67bb19dec51b" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator()</name></member>
      <member refid="classdrawer_1_1Matrix_1a6babd6f554ffa305e1d7bb7eeda23ae9" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator()</name></member>
      <member refid="classdrawer_1_1Matrix_1a401e85f75e10c97fc2edeb47b23cc5e8" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="classdrawer_1_1Matrix_1a401e85f75e10c97fc2edeb47b23cc5e8" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="classdrawer_1_1Matrix_1af5ba1eb0d1cf3d8350b720500bf042f7" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Matrix_1a9bc841ed8573ea3bcce15fb8e8ceb622" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Matrix_1af5ba1eb0d1cf3d8350b720500bf042f7" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Matrix_1a9bc841ed8573ea3bcce15fb8e8ceb622" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a503b6a02769c593e733c19a9910df3b7" prot="public" virt="non-virtual" ambiguityscope="drawer::Base_iterable&lt; T1, T1 &gt;::"><scope>drawer::Matrix</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a1e8a0aa97cf31ce23e2d140e428b0d73" prot="public" virt="non-virtual" ambiguityscope="drawer::Base_iterable&lt; T1, T1 &gt;::"><scope>drawer::Matrix</scope><name>operator=</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a961fe8389c3ce7286d574dbba0956500" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a009588b482fa70083ed434e05321d990" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a961fe8389c3ce7286d574dbba0956500" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1a009588b482fa70083ed434e05321d990" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>operator[]</name></member>
      <member refid="classdrawer_1_1Base__iterable_1afaccb4d54647710207b262348805b710" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>PType</name></member>
      <member refid="classdrawer_1_1Matrix_1a72724a0adaad31510f7de0ceb20a9151" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>size</name></member>
      <member refid="classdrawer_1_1Matrix_1a72724a0adaad31510f7de0ceb20a9151" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>size</name></member>
      <member refid="classdrawer_1_1Matrix_1a7ae66158ce3f11105b52d52c12041ec5" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>size_type</name></member>
      <member refid="classdrawer_1_1Matrix_1a7dd0f769ae26a963b503e06e3f621117" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>Type</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aef6170f7bfa3aa7a3a2a6bb5dfd4a15e" prot="public" virt="virtual"><scope>drawer::Matrix</scope><name>~Base_iterable</name></member>
      <member refid="classdrawer_1_1Base__iterable_1aef6170f7bfa3aa7a3a2a6bb5dfd4a15e" prot="public" virt="virtual"><scope>drawer::Matrix</scope><name>~Base_iterable</name></member>
      <member refid="classdrawer_1_1Matrix_1a5d42dc6459f68af9bd35c7851eba686e" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>~Matrix</name></member>
      <member refid="classdrawer_1_1Matrix_1a5d42dc6459f68af9bd35c7851eba686e" prot="public" virt="non-virtual"><scope>drawer::Matrix</scope><name>~Matrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
