<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classJSON_1_1Node" kind="class" language="C++" prot="public">
    <compoundname>JSON::Node</compoundname>
    <basecompoundref refid="classJSON_1_1Object" prot="public" virt="non-virtual">JSON::Object</basecompoundref>
    <basecompoundref refid="classJSON_1_1Object" prot="public" virt="non-virtual">JSON::Object</basecompoundref>
    <derivedcompoundref refid="classJSON_1_1List" prot="public" virt="non-virtual">JSON::List</derivedcompoundref>
    <derivedcompoundref refid="classJSON_1_1List" prot="public" virt="non-virtual">JSON::List</derivedcompoundref>
    <includes refid="gui_2jsonObject_8h" local="no">jsonObject.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classJSON_1_1Node_1a7d72272debf8fd732a2e1e51aecb9d5f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;</type>
        <definition>std::vector&lt; Child &gt; Node::children</definition>
        <argsstring></argsstring>
        <name>children</name>
        <qualifiedname>JSON::Node::children</qualifiedname>
        <briefdescription>
<para>std::vector of Child owned by the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. Each child is in the form of a unique_ptr to an <ref refid="classJSON_1_1Object" kindref="compound">Object</ref>, and can be either a <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref> or another <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="233" column="17" bodyfile="src/grafed/gui/jsonObject.h" bodystart="233" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classJSON_1_1Node_1a73b518e554ea506441eb396a2efe3503" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSON::Node::Node</definition>
        <argsstring>(std::string const &amp;specifier)</argsstring>
        <name>Node</name>
        <qualifiedname>JSON::Node::Node</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>specifier</declname>
        </param>
        <briefdescription>
<para>Construtor with one paramter that initializes <bold>specifier</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_specifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>&apos;s specifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="105" column="14" bodyfile="src/grafed/gui/jsonObject.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a1882689bb0b9cfd9f87f29bc895bf31f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool JSON::Node::isNode</definition>
        <argsstring>() const override</argsstring>
        <name>isNode</name>
        <qualifiedname>JSON::Node::isNode</qualifiedname>
        <reimplements refid="classJSON_1_1Object_1a941a79c1ca10023f8e8e77e60b23e3f8">isNode</reimplements>
        <briefdescription>
<para>Tells if the <ref refid="classJSON_1_1Object" kindref="compound">Object</ref> is a <ref refid="classJSON_1_1Node" kindref="compound">Node</ref> or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="118" column="10" bodyfile="src/grafed/gui/jsonObject.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1ab5f3280b41c42efd31dc83dad66e38a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void JSON::Node::addChild</definition>
        <argsstring>(Child &amp;child)</argsstring>
        <name>addChild</name>
        <qualifiedname>JSON::Node::addChild</qualifiedname>
        <reimplementedby refid="classJSON_1_1List_1af42543b1963dd466da5ca7d9504e509c">addChild</reimplementedby>
        <reimplementedby refid="classJSON_1_1List_1af42543b1963dd466da5ca7d9504e509c">addChild</reimplementedby>
        <param>
          <type><ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child in the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>New child added in <bold>children</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="127" column="18" bodyfile="src/grafed/gui/jsonObject.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a3aebe3c482c67ce17311e0347b035c3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void JSON::Node::addChild</definition>
        <argsstring>(std::unique_ptr&lt; T &gt; &amp;child)</argsstring>
        <name>addChild</name>
        <qualifiedname>JSON::Node::addChild</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; T &gt; &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child in the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>New child added in <bold>children</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="137" column="17" bodyfile="src/grafed/gui/jsonObject.h" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1ae7acb00e530695d1f3aadf54f23cc35f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void JSON::Node::addChild</definition>
        <argsstring>(Child &amp;&amp;child)</argsstring>
        <name>addChild</name>
        <qualifiedname>JSON::Node::addChild</qualifiedname>
        <reimplementedby refid="classJSON_1_1List_1a4c40c417fc8b97fb73ccd47e8f67ec53">addChild</reimplementedby>
        <reimplementedby refid="classJSON_1_1List_1a4c40c417fc8b97fb73ccd47e8f67ec53">addChild</reimplementedby>
        <param>
          <type><ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &amp;&amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child in the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>New child added in <bold>children</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="147" column="18" bodyfile="src/grafed/gui/jsonObject.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a65450a8ed433f33cee2ff9d6e4633dc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void JSON::Node::addChild</definition>
        <argsstring>(std::unique_ptr&lt; T &gt; &amp;&amp;child)</argsstring>
        <name>addChild</name>
        <qualifiedname>JSON::Node::addChild</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; T &gt; &amp;&amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child in the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>New child added in <bold>children</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="157" column="17" bodyfile="src/grafed/gui/jsonObject.h" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1abb9045a0a66dc16cae25eb97abe28e4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t JSON::Node::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>JSON::Node::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>children.size()</bold>, the number of children. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="166" column="12" bodyfile="src/grafed/gui/jsonObject.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1ac00c1de7f5728cc044f5a3e306b9840f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool JSON::Node::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>JSON::Node::empty</qualifiedname>
        <briefdescription>
<para>Tells if the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref> is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the node has no child. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="176" column="10" bodyfile="src/grafed/gui/jsonObject.h" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a596addb8ef6333d85b8ff88b9f4e6893" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;::const_iterator</type>
        <definition>std::vector&lt; Child &gt;::const_iterator JSON::Node::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>JSON::Node::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <bold>const_iterator</bold> to the begining of <bold>children</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="184" column="34" bodyfile="src/grafed/gui/jsonObject.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a3b7f4b52df21d02d578b1acc7903e53f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;::const_iterator</type>
        <definition>std::vector&lt; Child &gt;::const_iterator JSON::Node::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>JSON::Node::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <bold>const_iterator</bold> to the end of <bold>children</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="192" column="34" bodyfile="src/grafed/gui/jsonObject.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a58c174a26bd29c5cc7633f78496fd248" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;::iterator</type>
        <definition>std::vector&lt; Child &gt;::iterator JSON::Node::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>JSON::Node::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <bold>iterator</bold> to the begining of <bold>children</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="200" column="28" bodyfile="src/grafed/gui/jsonObject.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a0d4404fecc048cec926bd11bc60fc1bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;::iterator</type>
        <definition>std::vector&lt; Child &gt;::iterator JSON::Node::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>JSON::Node::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <bold>iterator</bold> to the end of <bold>children</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="208" column="28" bodyfile="src/grafed/gui/jsonObject.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a9bc88a97885c3276fd4d082f9a66676a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSON_1_1Object" kindref="compound">Object</ref> *</type>
        <definition>Object * JSON::Node::getChild</definition>
        <argsstring>(std::string const &amp;spec) const</argsstring>
        <name>getChild</name>
        <qualifiedname>JSON::Node::getChild</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Returns the first child that has a given specifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>String of the specifier to search. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An Object* pointing to the first child specified by <bold>spec</bold> in <bold>children</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>nullptr</bold> if no child has been found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="220" column="12" bodyfile="src/grafed/gui/jsonObject.h" bodystart="220" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a73b518e554ea506441eb396a2efe3503" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSON::Node::Node</definition>
        <argsstring>(std::string const &amp;specifier)</argsstring>
        <name>Node</name>
        <qualifiedname>JSON::Node::Node</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>specifier</declname>
        </param>
        <briefdescription>
<para>Construtor with one paramter that initializes <bold>specifier</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_specifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>&apos;s specifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="105" column="14" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a1882689bb0b9cfd9f87f29bc895bf31f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool JSON::Node::isNode</definition>
        <argsstring>() const override</argsstring>
        <name>isNode</name>
        <qualifiedname>JSON::Node::isNode</qualifiedname>
        <reimplements refid="classJSON_1_1Object_1a941a79c1ca10023f8e8e77e60b23e3f8">isNode</reimplements>
        <briefdescription>
<para>Tells if the <ref refid="classJSON_1_1Object" kindref="compound">Object</ref> is a <ref refid="classJSON_1_1Node" kindref="compound">Node</ref> or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="118" column="10" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1ab5f3280b41c42efd31dc83dad66e38a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void JSON::Node::addChild</definition>
        <argsstring>(Child &amp;child)</argsstring>
        <name>addChild</name>
        <qualifiedname>JSON::Node::addChild</qualifiedname>
        <reimplementedby refid="classJSON_1_1List_1af42543b1963dd466da5ca7d9504e509c">addChild</reimplementedby>
        <reimplementedby refid="classJSON_1_1List_1af42543b1963dd466da5ca7d9504e509c">addChild</reimplementedby>
        <param>
          <type><ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child in the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>New child added in <bold>children</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="127" column="18" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a3aebe3c482c67ce17311e0347b035c3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void JSON::Node::addChild</definition>
        <argsstring>(std::unique_ptr&lt; T &gt; &amp;child)</argsstring>
        <name>addChild</name>
        <qualifiedname>JSON::Node::addChild</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; T &gt; &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child in the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>New child added in <bold>children</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="137" column="17" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1ae7acb00e530695d1f3aadf54f23cc35f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void JSON::Node::addChild</definition>
        <argsstring>(Child &amp;&amp;child)</argsstring>
        <name>addChild</name>
        <qualifiedname>JSON::Node::addChild</qualifiedname>
        <reimplementedby refid="classJSON_1_1List_1a4c40c417fc8b97fb73ccd47e8f67ec53">addChild</reimplementedby>
        <reimplementedby refid="classJSON_1_1List_1a4c40c417fc8b97fb73ccd47e8f67ec53">addChild</reimplementedby>
        <param>
          <type><ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &amp;&amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child in the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>New child added in <bold>children</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="147" column="18" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a65450a8ed433f33cee2ff9d6e4633dc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void JSON::Node::addChild</definition>
        <argsstring>(std::unique_ptr&lt; T &gt; &amp;&amp;child)</argsstring>
        <name>addChild</name>
        <qualifiedname>JSON::Node::addChild</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; T &gt; &amp;&amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child in the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>New child added in <bold>children</bold>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="157" column="17" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1abb9045a0a66dc16cae25eb97abe28e4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t JSON::Node::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>JSON::Node::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>children.size()</bold>, the number of children. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="166" column="12" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1ac00c1de7f5728cc044f5a3e306b9840f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool JSON::Node::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>JSON::Node::empty</qualifiedname>
        <briefdescription>
<para>Tells if the <ref refid="classJSON_1_1Node" kindref="compound">Node</ref> is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>True</bold> if the node has no child. </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="176" column="10" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a596addb8ef6333d85b8ff88b9f4e6893" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;::const_iterator</type>
        <definition>std::vector&lt; Child &gt;::const_iterator JSON::Node::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>JSON::Node::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <bold>const_iterator</bold> to the begining of <bold>children</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="184" column="34" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a3b7f4b52df21d02d578b1acc7903e53f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;::const_iterator</type>
        <definition>std::vector&lt; Child &gt;::const_iterator JSON::Node::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>JSON::Node::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <bold>const_iterator</bold> to the end of <bold>children</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="192" column="34" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a58c174a26bd29c5cc7633f78496fd248" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;::iterator</type>
        <definition>std::vector&lt; Child &gt;::iterator JSON::Node::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>JSON::Node::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <bold>iterator</bold> to the begining of <bold>children</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="200" column="28" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a0d4404fecc048cec926bd11bc60fc1bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceJSON_1aa2d900be83ed3ec15cee06b3acc05b96" kindref="member">Child</ref> &gt;::iterator</type>
        <definition>std::vector&lt; Child &gt;::iterator JSON::Node::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>JSON::Node::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <bold>iterator</bold> to the end of <bold>children</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="208" column="28" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1a9bc88a97885c3276fd4d082f9a66676a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSON_1_1Object" kindref="compound">Object</ref> *</type>
        <definition>Object * JSON::Node::getChild</definition>
        <argsstring>(std::string const &amp;spec) const</argsstring>
        <name>getChild</name>
        <qualifiedname>JSON::Node::getChild</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Returns the first child that has a given specifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>String of the specifier to search. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An Object* pointing to the first child specified by <bold>spec</bold> in <bold>children</bold>. </para>
</simplesect>
<simplesect kind="return"><para><bold>nullptr</bold> if no child has been found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="220" column="12" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="220" bodyend="226"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classJSON_1_1Node_1ac89321d542689dc7fbd3682064af2e8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classJSON_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; Node &gt; JSON::Node::make</definition>
        <argsstring>(std::string const &amp;specifier)</argsstring>
        <name>make</name>
        <qualifiedname>JSON::Node::make</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>specifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/gui/jsonObject.h" line="109" column="28" bodyfile="src/grafed/gui/jsonObject.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classJSON_1_1Node_1ac89321d542689dc7fbd3682064af2e8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classJSON_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; Node &gt; JSON::Node::make</definition>
        <argsstring>(std::string const &amp;specifier)</argsstring>
        <name>make</name>
        <qualifiedname>JSON::Node::make</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>specifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/grafed/jsonparser/jsonObject.h" line="109" column="28" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="109" bodyend="112"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Inherits from <ref refid="classJSON_1_1Object" kindref="compound">JSON::Object</ref>, specialized in <ref refid="namespaceJSON" kindref="compound">JSON</ref> <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>. A <ref refid="classJSON_1_1Node" kindref="compound">Node</ref> owns a vector of <ref refid="classJSON_1_1Object" kindref="compound">Object</ref>. The <ref refid="classJSON_1_1Node" kindref="compound">Node</ref>&apos;s children can either be <ref refid="classJSON_1_1Leaf" kindref="compound">Leaf</ref> or other <ref refid="classJSON_1_1Node" kindref="compound">Node</ref> objects. This allows to store the tree structure of a .json file. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>JSON::List</label>
        <link refid="classJSON_1_1List"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>JSON::Node</label>
        <link refid="classJSON_1_1Node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>JSON::Object</label>
        <link refid="classJSON_1_1Object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>JSON::Node</label>
        <link refid="classJSON_1_1Node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>JSON::Object</label>
        <link refid="classJSON_1_1Object"/>
      </node>
    </collaborationgraph>
    <location file="src/grafed/gui/jsonObject.h" line="98" column="1" bodyfile="src/grafed/jsonparser/jsonObject.h" bodystart="98" bodyend="234"/>
    <listofallmembers>
      <member refid="classJSON_1_1Node_1ab5f3280b41c42efd31dc83dad66e38a0" prot="public" virt="virtual"><scope>JSON::Node</scope><name>addChild</name></member>
      <member refid="classJSON_1_1Node_1a3aebe3c482c67ce17311e0347b035c3c" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>addChild</name></member>
      <member refid="classJSON_1_1Node_1ae7acb00e530695d1f3aadf54f23cc35f" prot="public" virt="virtual"><scope>JSON::Node</scope><name>addChild</name></member>
      <member refid="classJSON_1_1Node_1a65450a8ed433f33cee2ff9d6e4633dc5" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>addChild</name></member>
      <member refid="classJSON_1_1Node_1ab5f3280b41c42efd31dc83dad66e38a0" prot="public" virt="virtual"><scope>JSON::Node</scope><name>addChild</name></member>
      <member refid="classJSON_1_1Node_1a3aebe3c482c67ce17311e0347b035c3c" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>addChild</name></member>
      <member refid="classJSON_1_1Node_1ae7acb00e530695d1f3aadf54f23cc35f" prot="public" virt="virtual"><scope>JSON::Node</scope><name>addChild</name></member>
      <member refid="classJSON_1_1Node_1a65450a8ed433f33cee2ff9d6e4633dc5" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>addChild</name></member>
      <member refid="classJSON_1_1Node_1a596addb8ef6333d85b8ff88b9f4e6893" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>begin</name></member>
      <member refid="classJSON_1_1Node_1a58c174a26bd29c5cc7633f78496fd248" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>begin</name></member>
      <member refid="classJSON_1_1Node_1a596addb8ef6333d85b8ff88b9f4e6893" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>begin</name></member>
      <member refid="classJSON_1_1Node_1a58c174a26bd29c5cc7633f78496fd248" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>begin</name></member>
      <member refid="classJSON_1_1Node_1a7d72272debf8fd732a2e1e51aecb9d5f" prot="private" virt="non-virtual"><scope>JSON::Node</scope><name>children</name></member>
      <member refid="classJSON_1_1Node_1ac00c1de7f5728cc044f5a3e306b9840f" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>empty</name></member>
      <member refid="classJSON_1_1Node_1ac00c1de7f5728cc044f5a3e306b9840f" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>empty</name></member>
      <member refid="classJSON_1_1Node_1a3b7f4b52df21d02d578b1acc7903e53f" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>end</name></member>
      <member refid="classJSON_1_1Node_1a0d4404fecc048cec926bd11bc60fc1bf" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>end</name></member>
      <member refid="classJSON_1_1Node_1a3b7f4b52df21d02d578b1acc7903e53f" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>end</name></member>
      <member refid="classJSON_1_1Node_1a0d4404fecc048cec926bd11bc60fc1bf" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>end</name></member>
      <member refid="classJSON_1_1Node_1a9bc88a97885c3276fd4d082f9a66676a" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>getChild</name></member>
      <member refid="classJSON_1_1Node_1a9bc88a97885c3276fd4d082f9a66676a" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>getChild</name></member>
      <member refid="classJSON_1_1Object_1ae3c04b4483cfe3b2879e9b5a1e79a5e3" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>getSpecifier</name></member>
      <member refid="classJSON_1_1Object_1ae3c04b4483cfe3b2879e9b5a1e79a5e3" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>getSpecifier</name></member>
      <member refid="classJSON_1_1Node_1a1882689bb0b9cfd9f87f29bc895bf31f" prot="public" virt="virtual"><scope>JSON::Node</scope><name>isNode</name></member>
      <member refid="classJSON_1_1Node_1a1882689bb0b9cfd9f87f29bc895bf31f" prot="public" virt="virtual"><scope>JSON::Node</scope><name>isNode</name></member>
      <member refid="classJSON_1_1Node_1ac89321d542689dc7fbd3682064af2e8c" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>make</name></member>
      <member refid="classJSON_1_1Node_1ac89321d542689dc7fbd3682064af2e8c" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>make</name></member>
      <member refid="classJSON_1_1Node_1a73b518e554ea506441eb396a2efe3503" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>Node</name></member>
      <member refid="classJSON_1_1Node_1a73b518e554ea506441eb396a2efe3503" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>Node</name></member>
      <member refid="classJSON_1_1Object_1a534b719c1190ea30c0a9ab9d12f8f619" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>Object</name></member>
      <member refid="classJSON_1_1Object_1a534b719c1190ea30c0a9ab9d12f8f619" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>Object</name></member>
      <member refid="classJSON_1_1Node_1abb9045a0a66dc16cae25eb97abe28e4d" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>size</name></member>
      <member refid="classJSON_1_1Node_1abb9045a0a66dc16cae25eb97abe28e4d" prot="public" virt="non-virtual"><scope>JSON::Node</scope><name>size</name></member>
      <member refid="classJSON_1_1Object_1a496b17f83c592bbb92720e5288abd172" prot="protected" virt="non-virtual"><scope>JSON::Node</scope><name>specifier</name></member>
      <member refid="classJSON_1_1Object_1a6611414d3cba6dc3028378f88847bb9a" prot="public" virt="virtual"><scope>JSON::Node</scope><name>~Object</name></member>
      <member refid="classJSON_1_1Object_1a6611414d3cba6dc3028378f88847bb9a" prot="public" virt="virtual"><scope>JSON::Node</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
