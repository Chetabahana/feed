<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="namespacesgl_1_1tracer" kind="namespace" language="C++">
    <compoundname>sgl::tracer</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="tracer_8cpp_1a4608f396b3099f56f1dc9a19407acdb9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>static std::vector&lt; csl::Index &gt; sgl::tracer::gammas</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; const &amp;indices)</argsstring>
        <name>gammas</name>
        <qualifiedname>sgl::tracer::gammas</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="27" column="20" bodyfile="src/marty/sgl/tracer.cpp" bodystart="27" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1acc1d250b730bd6d888fe9dc6897cd601" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool sgl::tracer::isAntiSymmetric</definition>
        <argsstring>(size_t i, size_t j, std::vector&lt; GammaIndex &gt; const &amp;indices)</argsstring>
        <name>isAntiSymmetric</name>
        <qualifiedname>sgl::tracer::isAntiSymmetric</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="37" column="1" bodyfile="src/marty/sgl/tracer.cpp" bodystart="37" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1a1041a8242251b373813131b943110add" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sgl::tracer::cutIndex</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; &amp;init, size_t i)</argsstring>
        <name>cutIndex</name>
        <qualifiedname>sgl::tracer::cutIndex</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="59" column="13" bodyfile="src/marty/sgl/tracer.cpp" bodystart="59" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1a6f4baceeed29a960d0055fab6e50cf2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sgl::tracer::cutIndices</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; &amp;init, size_t i, size_t j)</argsstring>
        <name>cutIndices</name>
        <qualifiedname>sgl::tracer::cutIndices</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="75" column="13" bodyfile="src/marty/sgl/tracer.cpp" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1a59ad0bc468e2f44ca17c94f1e1a4265d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sgl::tracer::cutIndex</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; &amp;init, size_t i, size_t j)</argsstring>
        <name>cutIndex</name>
        <qualifiedname>sgl::tracer::cutIndex</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="85" column="13" bodyfile="src/marty/sgl/tracer.cpp" bodystart="85" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1a7663682ec931d7702df71ba7db87b2cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt;</type>
        <definition>static std::vector&lt; GammaIndex &gt; sgl::tracer::cutIndices</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; const &amp;init, size_t i1, size_t j1, size_t i2, size_t j2)</argsstring>
        <name>cutIndices</name>
        <qualifiedname>sgl::tracer::cutIndices</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; const &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>j2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="95" column="20" bodyfile="src/marty/sgl/tracer.cpp" bodystart="95" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1a5ada39d039122d05fc60c09a0b26fd92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string sgl::tracer::toString</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; const &amp;v)</argsstring>
        <name>toString</name>
        <qualifiedname>sgl::tracer::toString</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="109" column="21" bodyfile="src/marty/sgl/tracer.cpp" bodystart="109" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1a5b75a11fc6a2fadd0b99eb2d690745ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgl::tracer::checkNoCMatrix</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; const &amp;indices)</argsstring>
        <name>checkNoCMatrix</name>
        <qualifiedname>sgl::tracer::checkNoCMatrix</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="119" column="6" bodyfile="src/marty/sgl/tracer.cpp" bodystart="119" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1a5c23876a87622cc2830c7a3520089c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::tracer::standardTrace</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; const &amp;indices, csl::Expr const &amp;Ddirac)</argsstring>
        <name>standardTrace</name>
        <qualifiedname>sgl::tracer::standardTrace</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>Ddirac</declname>
        </param>
        <briefdescription>
<para>Calculates the traces of gamma matrices without chiral operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of generalized indices representing gamma matrices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ddirac</parametername>
</parameternamelist>
<parameterdescription>
<para>Dirac space dimension.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression corresponding to the trace. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="129" column="7" bodyfile="src/marty/sgl/tracer.cpp" bodystart="129" bodyend="166" declfile="src/marty/sgl/tracer.h" declline="41" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="tracer_8cpp_1a7223b9507936c4603164a57927ac96cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsgl_1_1GExpr" kindref="compound">GExpr</ref></type>
        <definition>GExpr sgl::tracer::chiralTrace</definition>
        <argsstring>(std::vector&lt; GammaIndex &gt; const &amp;indices, csl::Expr const &amp;Ddirac)</argsstring>
        <name>chiralTrace</name>
        <qualifiedname>sgl::tracer::chiralTrace</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classsgl_1_1GammaIndex" kindref="compound">GammaIndex</ref> &gt; const &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>Ddirac</declname>
        </param>
        <briefdescription>
<para>Calculates the traces of gamma matrices with the chiral operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of generalized indices representing gamma matrices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ddirac</parametername>
</parameternamelist>
<parameterdescription>
<para>Dirac space dimension.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expression corresponding to the trace. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/sgl/tracer.cpp" line="168" column="7" bodyfile="src/marty/sgl/tracer.cpp" bodystart="168" bodyend="201" declfile="src/marty/sgl/tracer.h" declline="52" declcolumn="7"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/marty/sgl/tracer.cpp" line="25" column="1"/>
  </compounddef>
</doxygen>
