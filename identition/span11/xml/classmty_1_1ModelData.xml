<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classmty_1_1ModelData" kind="class" language="C++" prot="public">
    <compoundname>mty::ModelData</compoundname>
    <derivedcompoundref refid="classmty_1_1ModelBuilder" prot="public" virt="non-virtual">mty::ModelBuilder</derivedcompoundref>
    <includes refid="modelData_8h" local="no">modelData.h</includes>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classmty_1_1ModelData_1a04d2554b2eb9fae6ac5f2ca285efd691" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t mty::ModelData::nMomentums</definition>
        <argsstring></argsstring>
        <name>nMomentums</name>
        <qualifiedname>mty::ModelData::nMomentums</qualifiedname>
        <initializer>= 10</initializer>
        <briefdescription>
<para>Number of momenta instantiated for the model (10). With 5 maximum external legs, this is fairly safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="67" column="26" bodyfile="src/marty/core/modelData.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1a0c2b848cb5334d752fb94cf36f775037" prot="public" static="yes" mutable="no">
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const  *</type>
        <definition>csl::Space const* mty::ModelData::defaultSpaceTime</definition>
        <argsstring></argsstring>
        <name>defaultSpaceTime</name>
        <qualifiedname>mty::ModelData::defaultSpaceTime</qualifiedname>
        <initializer>= &amp;<ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref></initializer>
        <briefdescription>
<para>Default space-time for the model&apos;s particles. There is actually no support for another space that <ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref> yet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="72" column="36" bodyfile="src/marty/core/modelData.h" bodystart="72" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmty_1_1ModelData_1a5461496c1c46165da73c9e3694ea0fef" prot="protected" static="no" mutable="no">
        <type><ref refid="classmty_1_1Lagrangian" kindref="compound">mty::Lagrangian</ref></type>
        <definition>mty::Lagrangian mty::ModelData::L</definition>
        <argsstring></argsstring>
        <name>L</name>
        <qualifiedname>mty::ModelData::L</qualifiedname>
        <briefdescription>
<para><ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>The lagrangian is modified only through built-in functions, either from this class (<ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref>) for basic content modifications, or from the <ref refid="classmty_1_1ModelBuilder" kindref="compound">ModelBuilder</ref> class for more complicated model building features (symmetry breaking, replacements etc). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1572" column="21" bodyfile="src/marty/core/modelData.h" bodystart="1572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1a23fe2191603febad5a2fd095d1f7968c" prot="protected" static="no" mutable="no">
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const  *</type>
        <definition>csl::Space const* mty::ModelData::spaceTime</definition>
        <argsstring></argsstring>
        <name>spaceTime</name>
        <qualifiedname>mty::ModelData::spaceTime</qualifiedname>
        <briefdescription>
<para>Space time for the model. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, this variable is a pointer to <ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref> (4D). There is actually no support for another space time so for now, nothing to do with this member. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1581" column="22" bodyfile="src/marty/core/modelData.h" bodystart="1581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classmty_1_1Gauge" kindref="compound">mty::Gauge</ref> &gt;</type>
        <definition>std::unique_ptr&lt;mty::Gauge&gt; mty::ModelData::gauge</definition>
        <argsstring></argsstring>
        <name>gauge</name>
        <qualifiedname>mty::ModelData::gauge</qualifiedname>
        <briefdescription>
<para><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> of the model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1586" column="21" bodyfile="src/marty/core/modelData.h" bodystart="1586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1acd2a492afff864e92afce472a0f93521" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classmty_1_1Flavor" kindref="compound">mty::Flavor</ref> &gt;</type>
        <definition>std::unique_ptr&lt;mty::Flavor&gt; mty::ModelData::flavor</definition>
        <argsstring></argsstring>
        <name>flavor</name>
        <qualifiedname>mty::ModelData::flavor</qualifiedname>
        <briefdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> of the model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1591" column="21" bodyfile="src/marty/core/modelData.h" bodystart="1591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1a06e20bc718bb77b006675355d05787a8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt;</type>
        <definition>std::vector&lt;mty::Particle&gt; mty::ModelData::particles</definition>
        <argsstring></argsstring>
        <name>particles</name>
        <qualifiedname>mty::ModelData::particles</qualifiedname>
        <briefdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> content (including gauge bosons, ghosts etc) of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref>, <ref refid="classmty_1_1ModelData_1a6fcec3f2efbbcb928b1addbed29ac953" kindref="member">addParticle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1599" column="17" bodyfile="src/marty/core/modelData.h" bodystart="1599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1ac9d4b0f26a093949ea711efe9cfe63a8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt;</type>
        <definition>std::vector&lt;csl::Expr&gt; mty::ModelData::scalarCouplings</definition>
        <argsstring></argsstring>
        <name>scalarCouplings</name>
        <qualifiedname>mty::ModelData::scalarCouplings</qualifiedname>
        <briefdescription>
<para>Lists of scalar couplings of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a72bc59d5ec27b26cfbcabcef426d13df" kindref="member">getScalarCouplings()</ref>, <ref refid="classmty_1_1ModelData_1a14bf61ee3f7bb3c8f0fddee9bc591a2b" kindref="member">getScalarCoupling()</ref>, <ref refid="classmty_1_1ModelData_1a8a951521cc75c351857c829883250432" kindref="member">addScalarCoupling()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1606" column="17" bodyfile="src/marty/core/modelData.h" bodystart="1606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1af2e3b4ab81d40335e0fa43c21df1cf85" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt;</type>
        <definition>std::vector&lt;csl::Tensor&gt; mty::ModelData::tensorCouplings</definition>
        <argsstring></argsstring>
        <name>tensorCouplings</name>
        <qualifiedname>mty::ModelData::tensorCouplings</qualifiedname>
        <briefdescription>
<para>List of tensor couplings of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a68555f34a2b4a5131fe1dfddc01f4235" kindref="member">getTensorCouplings()</ref>, <ref refid="classmty_1_1ModelData_1a8939724bcccf03c671b71dad3d6096c4" kindref="member">getTensorCoupling()</ref>, <ref refid="classmty_1_1ModelData_1a94acca3e80227a8c25c325005777de5e" kindref="member">addTensorCoupling()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1613" column="17" bodyfile="src/marty/core/modelData.h" bodystart="1613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1a41a5df4205832ecea06029d8c5279b58" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::ModelData::gaugeLocked</definition>
        <argsstring></argsstring>
        <name>gaugeLocked</name>
        <qualifiedname>mty::ModelData::gaugeLocked</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Boolean that tells if the gauge model is initilialized. </para>
        </briefdescription>
        <detaileddescription>
<para>When building a model, the gauge must be created first before adding any other particle. The gauge must be fixed by calling the <ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref> function. Only then, particles can be added using <ref refid="classmty_1_1ModelData_1a6fcec3f2efbbcb928b1addbed29ac953" kindref="member">addParticle()</ref> function.</para>
<para><simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref>, <ref refid="classmty_1_1ModelData_1ab71f9b6d40da88fef4f2615bfdc60b58" kindref="member">setGauge()</ref>, <ref refid="classmty_1_1ModelData_1abd1763e959fc47c68d16234d42df78b0" kindref="member">addGaugedGroup()</ref>, <ref refid="classmty_1_1ModelData_1a9279185550f1c347a64bfd2a9ebaee00" kindref="member">ModelData()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1625" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmty_1_1ModelData_1abe720a28b57178b178de3e4855d61e8d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mty::ModelData::enableChecks</definition>
        <argsstring></argsstring>
        <name>enableChecks</name>
        <qualifiedname>mty::ModelData::enableChecks</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
<para>Boolean telling if checks must be done with lagrangian terms added to the model (gauge representation, dispatching ...) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a00255feda9a2bc8ca1dcfd0cb17d474d" kindref="member">addLagrangianTerm()</ref>, <ref refid="classmty_1_1ModelData_1a51776a811cdfb712548bff4e855514fc" kindref="member">isEnableChecks()</ref>, setEnableCheck() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1633" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1633" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmty_1_1ModelData_1a9279185550f1c347a64bfd2a9ebaee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::ModelData::ModelData</definition>
        <argsstring>()</argsstring>
        <name>ModelData</name>
        <qualifiedname>mty::ModelData::ModelData</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Instantiates a null flavor, and an empty gauge. This is a valid state and you can add gauge groups through <ref refid="classmty_1_1ModelData_1abd1763e959fc47c68d16234d42df78b0" kindref="member">addGaugedGroup()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="84" column="5" bodyfile="src/marty/core/modelData.cpp" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a9605a946ea704993e5381d77ad91e7e2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::ModelData::ModelData</definition>
        <argsstring>(std::unique_ptr&lt; Gauge &gt; &amp;&amp;t_gauge)</argsstring>
        <name>ModelData</name>
        <qualifiedname>mty::ModelData::ModelData</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> &gt; &amp;&amp;</type>
          <declname>t_gauge</declname>
        </param>
        <briefdescription>
<para>Constructor with one parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Instantiates a null flavor, and the gauge to <bold>t_gauge</bold>. Calling this constructor, the gauge you give to the model is no longer valid as the unique ownership is transfered to it. Using this constructor, the gauge is taken as is, and the model is initialized. It is in particular not possible to add gauged groups afterwards. If you want to add gauge groups through the <ref refid="classmty_1_1ModelData_1abd1763e959fc47c68d16234d42df78b0" kindref="member">addGaugedGroup()</ref> function, consider using the default constructor. Here is a code snippet that show how to use this constructor. <programlisting><codeline><highlight class="normal"><sp/>std::unique_ptr&lt;mty::Gauge&gt;<sp/><ref refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" kindref="member">gauge</ref><sp/>=</highlight></codeline>
<codeline><highlight class="normal">makeGauge();<sp/>Model<sp/>model(std::move(<ref refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" kindref="member">gauge</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>gauge<sp/>is<sp/>not<sp/>valid<sp/>anymore,<sp/>model<sp/>took<sp/>the<sp/>ownership</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref>, <ref refid="classmty_1_1ModelData_1abd1763e959fc47c68d16234d42df78b0" kindref="member">addGaugedGroup()</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_gauge</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> now owned by the <ref refid="classmty_1_1Model" kindref="compound">Model</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="101" column="14" bodyfile="src/marty/core/modelData.cpp" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1af46e5e818b74452ba01842e49b1b4e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::ModelData::ModelData</definition>
        <argsstring>(std::unique_ptr&lt; Gauge &gt; &amp;&amp;t_gauge, std::unique_ptr&lt; Flavor &gt; &amp;&amp;t_flavor)</argsstring>
        <name>ModelData</name>
        <qualifiedname>mty::ModelData::ModelData</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> &gt; &amp;&amp;</type>
          <declname>t_gauge</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> &gt; &amp;&amp;</type>
          <declname>t_flavor</declname>
        </param>
        <briefdescription>
<para>Constructor with 2 parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Instantiates the model with a gauge and a flavor. See the constructor with one parameter for more information. The constructor simply instantiates the flavor with <bold>t_flavor</bold>. Here is a code snippet that show how to use this constructor. <programlisting><codeline><highlight class="normal">std::unique_ptr&lt;mty::Gauge&gt;<sp/><sp/><ref refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" kindref="member">gauge</ref><sp/><sp/>=<sp/>makeGauge();</highlight></codeline>
<codeline><highlight class="normal">std::unique_ptr&lt;mty::Flavor&gt;<sp/><ref refid="classmty_1_1ModelData_1acd2a492afff864e92afce472a0f93521" kindref="member">flavor</ref><sp/>=<sp/>makeFlavor();</highlight></codeline>
<codeline><highlight class="normal">Model<sp/>model(std::move(<ref refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" kindref="member">gauge</ref>),<sp/>std::move(<ref refid="classmty_1_1ModelData_1acd2a492afff864e92afce472a0f93521" kindref="member">flavor</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>gauge<sp/><sp/>is<sp/>not<sp/>valid<sp/>anymore,<sp/>model<sp/>took<sp/>the<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>flavor<sp/>is<sp/>not<sp/>valid<sp/>anymore,<sp/>model<sp/>took<sp/>the<sp/>ownership</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_gauge</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> now owned by the <ref refid="classmty_1_1Model" kindref="compound">Model</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_flavor</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> now owned by the <ref refid="classmty_1_1Model" kindref="compound">Model</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="119" column="5" bodyfile="src/marty/core/modelData.cpp" bodystart="38" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a99247ad3939f38c345c264bf95ae9fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::ModelData::ModelData</definition>
        <argsstring>(std::unique_ptr&lt; Gauge &gt; &amp;&amp;t_gauge, std::unique_ptr&lt; Flavor &gt; &amp;&amp;t_flavor, std::vector&lt; Particle &gt; &amp;t_particles)</argsstring>
        <name>ModelData</name>
        <qualifiedname>mty::ModelData::ModelData</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> &gt; &amp;&amp;</type>
          <declname>t_gauge</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> &gt; &amp;&amp;</type>
          <declname>t_flavor</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> &gt; &amp;</type>
          <declname>t_particles</declname>
        </param>
        <briefdescription>
<para>Constructor with 3 parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Instantiates the model with a gauge, a flavor and a set of particles. See the constructor with two parameters for more information. The constructor simply adds particles. Those particles must have been created with the corresponding gauge and flavor. Covariant derivative and mass terms for the particles are added automatically. Here is a code snippet that show how to use this constructor. <programlisting><codeline><highlight class="normal">std::unique_ptr&lt;mty::Gauge&gt;<sp/><sp/><ref refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" kindref="member">gauge</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>makeGauge();</highlight></codeline>
<codeline><highlight class="normal">std::unique_ptr&lt;mty::Flavor&gt;<sp/><ref refid="classmty_1_1ModelData_1acd2a492afff864e92afce472a0f93521" kindref="member">flavor</ref><sp/><sp/><sp/><sp/>=<sp/>makeFlavor();</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;mty::Particle&gt;<sp/><sp/><sp/><ref refid="classmty_1_1ModelData_1a06e20bc718bb77b006675355d05787a8" kindref="member">particles</ref><sp/>=<sp/>makeParticles();</highlight></codeline>
<codeline><highlight class="normal">Model<sp/>model(std::move(<ref refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" kindref="member">gauge</ref>),<sp/>std::move(<ref refid="classmty_1_1ModelData_1acd2a492afff864e92afce472a0f93521" kindref="member">flavor</ref>),<sp/><ref refid="classmty_1_1ModelData_1a06e20bc718bb77b006675355d05787a8" kindref="member">particles</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>gauge<sp/><sp/>is<sp/>not<sp/>valid<sp/>anymore,<sp/>model<sp/>took<sp/>the<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>flavor<sp/>is<sp/>not<sp/>valid<sp/>anymore,<sp/>model<sp/>took<sp/>the<sp/>ownership</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_gauge</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> now owned by the <ref refid="classmty_1_1Model" kindref="compound">Model</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_flavor</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> now owned by the <ref refid="classmty_1_1Model" kindref="compound">Model</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_particles</parametername>
</parameternamelist>
<parameterdescription>
<para>Particles to add to the <ref refid="classmty_1_1Model" kindref="compound">Model</ref> after intializing the gauge and flavor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="143" column="5" bodyfile="src/marty/core/modelData.cpp" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a7a3b96a9566e7372990b792cef551025" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>mty::ModelData::~ModelData</definition>
        <argsstring>()</argsstring>
        <name>~ModelData</name>
        <qualifiedname>mty::ModelData::~ModelData</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="150" column="13" bodyfile="src/marty/core/modelData.cpp" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aaaa21f39c1b07bebfae1ec8587a77f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::ModelData::ModelData</definition>
        <argsstring>(ModelData &amp;&amp;other)=default</argsstring>
        <name>ModelData</name>
        <qualifiedname>mty::ModelData::ModelData</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Defaulted move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="155" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aee7a2e76bc89cf16f8fcb1da025eee90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> &amp;</type>
        <definition>ModelData &amp; mty::ModelData::operator=</definition>
        <argsstring>(ModelData &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>mty::ModelData::operator=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Defaulted move assignement operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="159" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a912f6cb9f24734d04f0233abe37dc472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mty::ModelData::ModelData</definition>
        <argsstring>(ModelData const &amp;other)=delete</argsstring>
        <name>ModelData</name>
        <qualifiedname>mty::ModelData::ModelData</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Defaulted copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="163" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ae3c6ca1496b911a1c3de257b3b7b9d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> &amp;</type>
        <definition>ModelData &amp; mty::ModelData::operator=</definition>
        <argsstring>(ModelData const &amp;other)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>mty::ModelData::operator=</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Defaulted copy assignement operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="167" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::init</definition>
        <argsstring>(bool initGaugeTerms=true)</argsstring>
        <name>init</name>
        <qualifiedname>mty::ModelData::init</qualifiedname>
        <param>
          <type>bool</type>
          <declname>initGaugeTerms</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Initializes the gauge once and for all. This function must be called after finishing the gauge, and before adding matter particles. Calling the constructors that take an already built gauge, this function is called automatically. Otherwise you have to call it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initGaugeTerms</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean (default = true) that tells if kinetic and mass terms for gauge bosons and ghosts must be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="181" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1379" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a0c48e931cd6b5d81377447f2c00aa50f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::checkHermiticity</definition>
        <argsstring>()</argsstring>
        <name>checkHermiticity</name>
        <qualifiedname>mty::ModelData::checkHermiticity</qualifiedname>
        <briefdescription>
<para>Checks the hermiticity of the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>, i.e. checks if <formula id="159">$ \mathcal{L}^\dagger = \mathcal{L} $</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> is not hermitian, this function simply prints out the problematic terms. There is no check for integration by parts, so the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> may still be hermitic, this function simply does not automatically recognize this kind of patterns. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="195" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="68" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aa77a2942da37ead6d4fdba6268ddedf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mty::ModelData::saveModel</definition>
        <argsstring>(std::ostream &amp;out, int indent=4)</argsstring>
        <name>saveModel</name>
        <qualifiedname>mty::ModelData::saveModel</qualifiedname>
        <reimplementedby refid="classmty_1_1ModelBuilder_1a08b99c3cf8f0893a32801f60618ff117">saveModel</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="201" column="18" bodyfile="src/marty/core/modelData.cpp" bodystart="134" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a16f0fa1899f17a568d5fd4d9a2bf262e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::saveModelFunction</definition>
        <argsstring>(std::string_view name, std::ostream &amp;out, int indent=0)</argsstring>
        <name>saveModelFunction</name>
        <qualifiedname>mty::ModelData::saveModelFunction</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="203" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="474" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ab202ad13551a2d282403a3851b72acc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::saveModelFunctionWithRef</definition>
        <argsstring>(std::string_view name, std::ostream &amp;out, int indent=0)</argsstring>
        <name>saveModelFunctionWithRef</name>
        <qualifiedname>mty::ModelData::saveModelFunctionWithRef</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="207" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="486" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a6d76f38990758e6b375db81a13bb09b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::saveModelFile</definition>
        <argsstring>(std::string_view name, std::string const &amp;fileName)</argsstring>
        <name>saveModelFile</name>
        <qualifiedname>mty::ModelData::saveModelFile</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="211" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="501" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a9cd11de8be4b70e9272c77001b0ea659" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> const &amp;</type>
        <definition>mty::Lagrangian const  &amp; mty::ModelData::getLagrangian</definition>
        <argsstring>() const</argsstring>
        <name>getLagrangian</name>
        <qualifiedname>mty::ModelData::getLagrangian</qualifiedname>
        <briefdescription>
<para>Returns a const reference to the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The lagrangian should not be modified directly. Always prefer using buitl-in functions to modify it. This is why this function returns an const-reference. The way to get the lagrangian from it is <programlisting><codeline><highlight class="normal"><ref refid="classmty_1_1Lagrangian" kindref="compound">mty::Lagrangian</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="classmty_1_1ModelData_1a5461496c1c46165da73c9e3694ea0fef" kindref="member">L</ref><sp/>=<sp/>model.getLagrangian();</highlight></codeline>
</programlisting> <simplesect kind="return"><para>The lagrangian of the model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="227" column="22" bodyfile="src/marty/core/modelData.cpp" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a51776a811cdfb712548bff4e855514fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::isEnableChecks</definition>
        <argsstring>() const</argsstring>
        <name>isEnableChecks</name>
        <qualifiedname>mty::ModelData::isEnableChecks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>enableChecks</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="232" column="10" bodyfile="src/marty/core/modelData.h" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a7d8c765d5c4a94f63d7ad3cab69f3d8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::setEnableChecks</definition>
        <argsstring>(bool t_enable)</argsstring>
        <name>setEnableChecks</name>
        <qualifiedname>mty::ModelData::setEnableChecks</qualifiedname>
        <param>
          <type>bool</type>
          <declname>t_enable</declname>
        </param>
        <briefdescription>
<para>Sets <bold>enableChecks</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>New boolean value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="242" column="10" bodyfile="src/marty/core/modelData.h" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ada92944c6d73dc4fd77fb9d9de9a0d50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>csl::Space const  * mty::ModelData::getSpaceTime</definition>
        <argsstring>() const</argsstring>
        <name>getSpaceTime</name>
        <qualifiedname>mty::ModelData::getSpaceTime</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the space time of the mode (<ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para>For now, only <ref refid="namespacecsl_1aef525ce7226ae5fa0fc9b9f2aa4ccc5d" kindref="member">csl::Minkowski</ref> is supported. <simplesect kind="return"><para>The space-time of the model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="252" column="22" bodyfile="src/marty/core/modelData.cpp" bodystart="529" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a65b562936453b2e8b523c18038640c9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Gauge" kindref="compound">mty::Gauge</ref> *</type>
        <definition>mty::Gauge * mty::ModelData::getGauge</definition>
        <argsstring>() const</argsstring>
        <name>getGauge</name>
        <qualifiedname>mty::ModelData::getGauge</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the model&apos;s gauge. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does not transfer the ownership. In particular, you have not to delete the data. <simplesect kind="return"><para>The gauge of the model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="260" column="16" bodyfile="src/marty/core/modelData.cpp" bodystart="534" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aae5cf459e02428a6af38eaf52e2afb1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Flavor" kindref="compound">mty::Flavor</ref> *</type>
        <definition>mty::Flavor * mty::ModelData::getFlavor</definition>
        <argsstring>() const</argsstring>
        <name>getFlavor</name>
        <qualifiedname>mty::ModelData::getFlavor</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the model&apos;s flavor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does not transfer the ownership. In particular, you have not to delete the data. <simplesect kind="return"><para>The flavor of the model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="268" column="17" bodyfile="src/marty/core/modelData.cpp" bodystart="539" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aff328d53055a760ff21a7e11a9cd1d5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
        <definition>std::vector&lt; mty::Particle &gt; const  &amp; mty::ModelData::getParticles</definition>
        <argsstring>() const</argsstring>
        <name>getParticles</name>
        <qualifiedname>mty::ModelData::getParticles</qualifiedname>
        <briefdescription>
<para>Returns a const reference to the model&apos;s particles. </para>
        </briefdescription>
        <detaileddescription>
<para>Particles should be modified through the built-in functions, not directly from this vector. This is why the function only returns a const reference. It must be called as follows <programlisting><codeline><highlight class="normal">std::vector&lt;mty::Particle&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="classmty_1_1ModelData_1a06e20bc718bb77b006675355d05787a8" kindref="member">particles</ref><sp/>=<sp/>model.getParticles();</highlight></codeline>
</programlisting> <simplesect kind="return"><para>The particles of the model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="280" column="23" bodyfile="src/marty/core/modelData.cpp" bodystart="544" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a363bea1914658f3e61abba137fc7d1ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt;</type>
        <definition>std::vector&lt; mty::Particle &gt; mty::ModelData::getPhysicalParticles</definition>
        <argsstring>(std::function&lt; bool(mty::Particle)&gt; const &amp;predicate=[](mty::Particle) { return true;}) const</argsstring>
        <name>getPhysicalParticles</name>
        <qualifiedname>mty::ModelData::getPhysicalParticles</qualifiedname>
        <param>
          <type>std::function&lt; bool(<ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref>)&gt; const &amp;</type>
          <declname>predicate</declname>
          <defval>[](<ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref>) { return true;}</defval>
        </param>
        <briefdescription>
<para>Returns a list of the physical particles in a model. </para>
        </briefdescription>
        <detaileddescription>
<para>Takes care of removing ghosts and particles that would appear twice in the full list of particles (see <ref refid="classmty_1_1ModelData_1aff328d53055a760ff21a7e11a9cd1d5d" kindref="member">getParticles()</ref>), in particular removing left- and right-handed parts of Dirac fermions (letting only the full 4-component fermion). This function is meant to be called when repeting a particular calculation for all particles in a model. A boolean predicate can be given to filter more the list, for example taking only bosons or fermions. Example: <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>all<sp/>=<sp/>model.getPhysicalParticles();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bosons<sp/>=<sp/>model.getPhysicalParticles(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](Particle<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;isBosonic();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fermions<sp/>=<sp/>model.getPhysicalParticles(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](Particle<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;isFermionic();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectors<sp/>=<sp/>model.getPhysicalParticles(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](Particle<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;getSpinDimension()<sp/>==<sp/>3;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>The list of physical particles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="309" column="5" bodyfile="src/marty/core/modelData.cpp" bodystart="549" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a72bc59d5ec27b26cfbcabcef426d13df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
        <definition>std::vector&lt; csl::Expr &gt; const  &amp; mty::ModelData::getScalarCouplings</definition>
        <argsstring>() const</argsstring>
        <name>getScalarCouplings</name>
        <qualifiedname>mty::ModelData::getScalarCouplings</qualifiedname>
        <briefdescription>
<para>Returns the scalar couplings (gauge coupling typically) of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>When a gauge group is created, a gauge coupling constant comes with it. This coupling is stored in the model&apos;s scalar couplings that you can get with this function (as a constant reference). <simplesect kind="return"><para>The list of scalar couplings of the theory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="320" column="23" bodyfile="src/marty/core/modelData.cpp" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a68555f34a2b4a5131fe1dfddc01f4235" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref> &gt; const &amp;</type>
        <definition>std::vector&lt; csl::Tensor &gt; const  &amp; mty::ModelData::getTensorCouplings</definition>
        <argsstring>() const</argsstring>
        <name>getTensorCouplings</name>
        <qualifiedname>mty::ModelData::getTensorCouplings</qualifiedname>
        <briefdescription>
<para>Returns the tensor couplings (Yukawa coupling typically) of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>When a Yukawa coupling is created, th corresponding tensor is stored in the model&apos;s tensor couplings that you can get with this function (as a constant reference). <simplesect kind="return"><para>The list of tensor couplings of the theory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="330" column="23" bodyfile="src/marty/core/modelData.cpp" bodystart="577" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a95fe10e0d9db993173ae43179d1cd72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::setSpaceTime</definition>
        <argsstring>(csl::Space const *t_spaceTime)</argsstring>
        <name>setSpaceTime</name>
        <qualifiedname>mty::ModelData::setSpaceTime</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
          <declname>t_spaceTime</declname>
        </param>
        <briefdescription>
<para>Sets the space time of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function as been written to possibly extend MARTY to other space-time calculations than 4D Minkowski but it does not support it yet. <bold>This function should then not be used.</bold> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_spaceTime</parametername>
</parameternamelist>
<parameterdescription>
<para>New space time for the model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="344" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="586" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ab71f9b6d40da88fef4f2615bfdc60b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::setGauge</definition>
        <argsstring>(std::unique_ptr&lt; mty::Gauge &gt; &amp;&amp;t_gauge)</argsstring>
        <name>setGauge</name>
        <qualifiedname>mty::ModelData::setGauge</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classmty_1_1Gauge" kindref="compound">mty::Gauge</ref> &gt; &amp;&amp;</type>
          <declname>t_gauge</declname>
        </param>
        <briefdescription>
<para>Sets the gauge of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be used after creating a model with an empty gauge (in particular using the default constructor of <ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref>). It may be used to create the gauge separately, not using built-in functions of this class. The std::unique_ptr given as parameter loses the ownership of the gauge and is not valid after the function call. Here is a code snippet that show how to use this function. <programlisting><codeline><highlight class="normal"><sp/>Model</highlight></codeline>
<codeline><highlight class="normal">model;<sp/>std::unique_ptr&lt;mty::Gauge&gt;<sp/><ref refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" kindref="member">gauge</ref><sp/>=<sp/>makeGauge();</highlight></codeline>
<codeline><highlight class="normal">model.setGauge(std::move(<ref refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" kindref="member">gauge</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>gauge<sp/>is<sp/>not<sp/>valid<sp/>anymore,<sp/>model<sp/>took<sp/>the<sp/>ownership</highlight></codeline>
</programlisting> <simplesect kind="warning"><para>This function must be called <bold>before</bold> adding any particle or other property as the gauge must be the first one defined. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_gauge</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> for the model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="362" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="597" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1abd1763e959fc47c68d16234d42df78b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addGaugedGroup</definition>
        <argsstring>(group::Type type, std::string_view name, int dim, csl::Expr const &amp;coupling=nullptr)</argsstring>
        <name>addGaugedGroup</name>
        <qualifiedname>mty::ModelData::addGaugedGroup</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">group::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>coupling</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Adds a gauge group to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allow to add a gauged group to the model, before initializing it (see <ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref>) and adding matter particles. Given the type, the name, the dimension and (optionnaly) a coupling constant, the corresponding group, gauge boson, ghosts are created. <simplesect kind="note"><para>After adding all desired gauged groups, you must call the <ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref> function that settels once and for all the gauge. </para>
</simplesect>
<simplesect kind="note"><para>If not given, the particles and couplings names follow the group name: A_&lt;name&gt; for the gauge bosons, c_&lt;name&gt; for the ghosts, g_&lt;name&gt; for the coupling constant.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the gauged group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the group (3 for SU(3) etc) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coupling</parametername>
</parameternamelist>
<parameterdescription>
<para>Coupling constant (optional)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1GaugedGroup" kindref="compound">GaugedGroup</ref>, <ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="383" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="605" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a55ca20dc39d8c7d58b8f78f45a450f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addGaugedGroup</definition>
        <argsstring>(group::Type type, std::string_view name, csl::Expr const &amp;coupling=nullptr)</argsstring>
        <name>addGaugedGroup</name>
        <qualifiedname>mty::ModelData::addGaugedGroup</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1_1group_1ab52e292a5e57ca7d8f7c28277435ecb9" kindref="member">group::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>coupling</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Adds a gauge group to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allow to add a gauged group to the model, before initializing it (see <ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref>) and adding matter particles. Given the type, the name, and (optionnaly) a coupling constant, the corresponding group, gauge boson, ghosts are created. Here the dimension is not given. This function must then be used only for U(1), and exceptional algebras.</para>
<para><simplesect kind="note"><para>After adding all desired gauged groups, you must call the <ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref> function that settels once and for all the gauge.</para>
</simplesect>
<simplesect kind="note"><para>If not given, the particles and couplings names follow the group name: A_&lt;name&gt; for the gauge bosons, c_&lt;name&gt; for the ghosts, g_&lt;name&gt; for the coupling constant.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the gauged group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coupling</parametername>
</parameternamelist>
<parameterdescription>
<para>Coupling constant (optional)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1GaugedGroup" kindref="compound">GaugedGroup</ref>, <ref refid="classmty_1_1Gauge" kindref="compound">Gauge</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="410" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="616" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a141ece1d3efee1b0e0a6e3b6bb613279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addFlavorGroup</definition>
        <argsstring>(std::string_view name, int nFlavor)</argsstring>
        <name>addFlavorGroup</name>
        <qualifiedname>mty::ModelData::addFlavorGroup</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nFlavor</declname>
        </param>
        <briefdescription>
<para>Adds a flavor group to the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the flavor group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nFlavor</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of flavors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1FlavorGroup" kindref="compound">FlavorGroup</ref>, <ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="422" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="627" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aba0eb189ccb3a5d1e8b52ab51eaa86b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addFlavorGroup</definition>
        <argsstring>(std::string_view name, csl::Expr const &amp;nFlavor)</argsstring>
        <name>addFlavorGroup</name>
        <qualifiedname>mty::ModelData::addFlavorGroup</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>nFlavor</declname>
        </param>
        <briefdescription>
<para>Adds a flavor group to the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the flavor group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nFlavor</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of flavors (keep the dimension symbolic)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1FlavorGroup" kindref="compound">FlavorGroup</ref>, <ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="433" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="641" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a42cbb420a4fe3f3577e928eb96268fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::setFlavor</definition>
        <argsstring>(std::unique_ptr&lt; mty::Flavor &gt; &amp;&amp;t_flavor)</argsstring>
        <name>setFlavor</name>
        <qualifiedname>mty::ModelData::setFlavor</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classmty_1_1Flavor" kindref="compound">mty::Flavor</ref> &gt; &amp;&amp;</type>
          <declname>t_flavor</declname>
        </param>
        <briefdescription>
<para>Sets the flavor of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be used after creating a model with an empty flavor (in particular using the default constructor of <ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref>). It may be used to create the flavor separately, not using built-in functions of this class. The std::unique_ptr given as parameter loses the ownership of the flavor and is not valid after the function call. Here is a code snippet that show how to use this function. <programlisting><codeline><highlight class="normal">Model<sp/>model;</highlight></codeline>
<codeline><highlight class="normal">std::unique_ptr&lt;mty::Flavor&gt;<sp/><ref refid="classmty_1_1ModelData_1acd2a492afff864e92afce472a0f93521" kindref="member">flavor</ref><sp/>=<sp/>makeFlavor();</highlight></codeline>
<codeline><highlight class="normal">model.setFlavor(std::move(<ref refid="classmty_1_1ModelData_1acd2a492afff864e92afce472a0f93521" kindref="member">flavor</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>flavor<sp/>is<sp/>not<sp/>valid<sp/>anymore,<sp/>model<sp/>took<sp/>the<sp/>ownership</highlight></codeline>
</programlisting> <simplesect kind="warning"><para>This function must be called <bold>before</bold> adding any particle or other property as the flavor must be the first one defined. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_flavor</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> for the model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="454" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="654" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a6fcec3f2efbbcb928b1addbed29ac953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addParticle</definition>
        <argsstring>(mty::Particle const &amp;part, bool initializeTerms=true)</argsstring>
        <name>addParticle</name>
        <qualifiedname>mty::ModelData::addParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initializeTerms</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Adds a particle to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>When adding a particle, its gauge representation should be already set, and the model must be <bold>initialized</bold> (see <ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref>). You can choose to let MARTY create kinetic (including covariant derivative) and mass terms (default) or disable all automatic interaction terms with the <bold>initializeTerms</bold> parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> to add to the model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initializeTerms</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean (default = true) that tells if kinetic and mass terms must be added automatically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a6e6d33a9c6c02c5cb39519967cf2eefd" kindref="member">removeParticle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="471" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="665" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a3ff5a51fa0a90f6d1d51c7ca7089afc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addParticles</definition>
        <argsstring>(std::vector&lt; mty::Particle &gt; const &amp;parts, bool initializeTerms=true)</argsstring>
        <name>addParticles</name>
        <qualifiedname>mty::ModelData::addParticles</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>parts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initializeTerms</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Adds a list of particles to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>When adding a particle, its gauge representation should be already set, and the model must be <bold>initialized</bold> (see <ref refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" kindref="member">init()</ref>). You can choose to let MARTY create kinetic (including covariant derivative) and mass terms (default) or disable all automatic interaction terms with the <bold>initializeTerms</bold> parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>Particles to add to the model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initializeTerms</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean (default = true) that tells if kinetic and mass terms must be added automatically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a6e6d33a9c6c02c5cb39519967cf2eefd" kindref="member">removeParticle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="487" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="691" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a560fd95f2a6a26c293c655c68431a71a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addParticlesIn</definition>
        <argsstring>(csl::Expr const &amp;expr)</argsstring>
        <name>addParticlesIn</name>
        <qualifiedname>mty::ModelData::addParticlesIn</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="490" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="698" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a6e6d33a9c6c02c5cb39519967cf2eefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::removeParticle</definition>
        <argsstring>(mty::Particle const &amp;part)</argsstring>
        <name>removeParticle</name>
        <qualifiedname>mty::ModelData::removeParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Removes a particle from the model. </para>
        </briefdescription>
        <detaileddescription>
<para>When removing a particle, all interaction terms containing it are removed. It is a non-return point. If you simply want to disable a given particle in calculations, consider using mty::DisableParticle().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a6fcec3f2efbbcb928b1addbed29ac953" kindref="member">addParticle()</ref>, mty::DisableParticle() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="503" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="712" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a4ddc41d1e8f7acca4cad7c974f3503f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::removeParticles</definition>
        <argsstring>(std::vector&lt; mty::Particle &gt; const &amp;parts)</argsstring>
        <name>removeParticles</name>
        <qualifiedname>mty::ModelData::removeParticles</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt; const &amp;</type>
          <declname>parts</declname>
        </param>
        <briefdescription>
<para>Removes particles from the model. </para>
        </briefdescription>
        <detaileddescription>
<para>When removing a particle, all interaction terms containing it are removed. It is a non-return point. If you simply want to disable a given particle in calculations, consider using mty::DisableParticle().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parts</parametername>
</parameternamelist>
<parameterdescription>
<para>Particles to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a6fcec3f2efbbcb928b1addbed29ac953" kindref="member">addParticle()</ref>, mty::DisableParticle() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="516" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="735" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a2358049f9daaa694928dd1d38d6b23ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::removeParticle</definition>
        <argsstring>(std::string const &amp;part)</argsstring>
        <name>removeParticle</name>
        <qualifiedname>mty::ModelData::removeParticle</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Removes a particle from the model. </para>
        </briefdescription>
        <detaileddescription>
<para>When removing a particle, all interaction terms containing it are removed. It is a non-return point. If you simply want to disable a given particle in calculations, consider using mty::DisableParticle().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the particle to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a6fcec3f2efbbcb928b1addbed29ac953" kindref="member">addParticle()</ref>, mty::DisableParticle() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="529" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="741" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a49eb25eba186c9a33c370b5b6e88f12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::removeParticles</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;parts)</argsstring>
        <name>removeParticles</name>
        <qualifiedname>mty::ModelData::removeParticles</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>parts</declname>
        </param>
        <briefdescription>
<para>Removes particles from the model. </para>
        </briefdescription>
        <detaileddescription>
<para>When removing a particle, all interaction terms containing it are removed. It is a non-return point. If you simply want to disable a given particle in calculations, consider using mty::DisableParticle().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parts</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of the particles to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a6fcec3f2efbbcb928b1addbed29ac953" kindref="member">addParticle()</ref>, mty::DisableParticle() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="542" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="751" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a8a951521cc75c351857c829883250432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addScalarCoupling</definition>
        <argsstring>(std::string_view t_name)</argsstring>
        <name>addScalarCoupling</name>
        <qualifiedname>mty::ModelData::addScalarCoupling</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Adds a scalar coupling constant in the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a <ref refid="classcsl_1_1Constant" kindref="compound">csl::Constant</ref> named <bold>name</bold> and adds it to the list of coupling constants.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name for the coupling constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="552" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="757" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a3ff29e11d312b7c37c66666fb457ce76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addScalarCoupling</definition>
        <argsstring>(csl::Expr const &amp;coupling)</argsstring>
        <name>addScalarCoupling</name>
        <qualifiedname>mty::ModelData::addScalarCoupling</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
<para>Adds a scalar coupling constant in the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds <bold>coupling</bold> to the list of coupling constants.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coupling</parametername>
</parameternamelist>
<parameterdescription>
<para>New coupling constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="561" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="766" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a94acca3e80227a8c25c325005777de5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addTensorCoupling</definition>
        <argsstring>(csl::Parent const &amp;tensorCoupling)</argsstring>
        <name>addTensorCoupling</name>
        <qualifiedname>mty::ModelData::addTensorCoupling</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> const &amp;</type>
          <declname>tensorCoupling</declname>
        </param>
        <briefdescription>
<para>Adds a tensor coupling constant in the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds <bold>tensorCoupling</bold> to the list of tensor coupling constants.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensorCoupling</parametername>
</parameternamelist>
<parameterdescription>
<para>New tensorial coupling constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="571" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="776" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a17a67b688374a2e40d64f91ad6bda449" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::findParticle</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>findParticle</name>
        <qualifiedname>mty::ModelData::findParticle</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Searches a particle in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the particle to search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the particle exists </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="587" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="792" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a79c1ab7d9d90d32c08b8476c6db903f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::findParticle</definition>
        <argsstring>(mty::Particle const &amp;part) const</argsstring>
        <name>findParticle</name>
        <qualifiedname>mty::ModelData::findParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Searches a particle in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> to search in the model</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the particle exists </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="598" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="799" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aa359b5f91dd305c1210f28d63a07e0c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::findParticle</definition>
        <argsstring>(mty::QuantumFieldParent const *part) const</argsstring>
        <name>findParticle</name>
        <qualifiedname>mty::ModelData::findParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> const *</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Searches a particle in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> to search in the model</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the particle exists </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="609" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="803" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a24872bf766f4ae39d8a4bcb29cc42a3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::findScalarCoupling</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>findScalarCoupling</name>
        <qualifiedname>mty::ModelData::findScalarCoupling</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Searches a scalar coupling in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the coupling to search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the coupling exists </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a14bf61ee3f7bb3c8f0fddee9bc591a2b" kindref="member">getScalarCoupling()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="621" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="811" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a5b8aa549d956c6f4e589834236506ea8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::findScalarCoupling</definition>
        <argsstring>(csl::Expr const &amp;coupling) const</argsstring>
        <name>findScalarCoupling</name>
        <qualifiedname>mty::ModelData::findScalarCoupling</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
<para>Searches a scalar coupling in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coupling</parametername>
</parameternamelist>
<parameterdescription>
<para>Coupling to search</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the coupling exists </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a14bf61ee3f7bb3c8f0fddee9bc591a2b" kindref="member">getScalarCoupling()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="632" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="818" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ad9e06ee155bd20ed3704e3b2a4f52de2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::findTensorCoupling</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>findTensorCoupling</name>
        <qualifiedname>mty::ModelData::findTensorCoupling</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Searches a tensor coupling in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the coupling to search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the coupling exists </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a8939724bcccf03c671b71dad3d6096c4" kindref="member">getTensorCoupling()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="644" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="828" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a6dc8a4ea047f83dc9515ae32b41cdf57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::findTensorCoupling</definition>
        <argsstring>(csl::Parent const &amp;coupling) const</argsstring>
        <name>findTensorCoupling</name>
        <qualifiedname>mty::ModelData::findTensorCoupling</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> const &amp;</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
<para>Searches a tensor coupling in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coupling</parametername>
</parameternamelist>
<parameterdescription>
<para>Coupling to search in the model</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the coupling exists </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a8939724bcccf03c671b71dad3d6096c4" kindref="member">getTensorCoupling()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="655" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a3865ea0eb7512aeb3b4c9671dff2fa2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mty::ModelData::findTensorCoupling</definition>
        <argsstring>(csl::AbstractParent const *coupling) const</argsstring>
        <name>findTensorCoupling</name>
        <qualifiedname>mty::ModelData::findTensorCoupling</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1AbstractParent" kindref="compound">csl::AbstractParent</ref> const *</type>
          <declname>coupling</declname>
        </param>
        <briefdescription>
<para>Searches a tensor coupling in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coupling</parametername>
</parameternamelist>
<parameterdescription>
<para>Coupling to search in the model</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>True</bold> if the coupling exists </para>
</simplesect>
<simplesect kind="return"><para><bold>False</bold> else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a8939724bcccf03c671b71dad3d6096c4" kindref="member">getTensorCoupling()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="666" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="839" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> const *</type>
        <definition>mty::Group const  * mty::ModelData::getGroup</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>getGroup</name>
        <qualifiedname>mty::ModelData::getGroup</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a Group (pointer to const) given its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the group to search</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The group of name <bold>t_name</bold> in the model</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a21ba3b3aadc1bf88eb0ffeec0c682018" kindref="member">getGaugedGroup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="681" column="22" bodyfile="src/marty/core/modelData.cpp" bodystart="851" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ae383ca2a22cbbf116003a1081703ecb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> *</type>
        <definition>mty::Group * mty::ModelData::getGroup</definition>
        <argsstring>(std::string_view t_name)</argsstring>
        <name>getGroup</name>
        <qualifiedname>mty::ModelData::getGroup</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a Group (pointer) given its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the group to search</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The group of name <bold>t_name</bold> in the model</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a21ba3b3aadc1bf88eb0ffeec0c682018" kindref="member">getGaugedGroup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="691" column="16" bodyfile="src/marty/core/modelData.cpp" bodystart="864" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a21ba3b3aadc1bf88eb0ffeec0c682018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1GaugedGroup" kindref="compound">mty::GaugedGroup</ref> const *</type>
        <definition>mty::GaugedGroup const  * mty::ModelData::getGaugedGroup</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>getGaugedGroup</name>
        <qualifiedname>mty::ModelData::getGaugedGroup</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classmty_1_1GaugedGroup" kindref="compound">GaugedGroup</ref> (pointer to const) given its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the gauged group to search</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gauged group of name <bold>t_name</bold> in the model</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="702" column="28" bodyfile="src/marty/core/modelData.cpp" bodystart="879" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a728963a7a75d3ed5873f4b0e2479f4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1GaugedGroup" kindref="compound">mty::GaugedGroup</ref> *</type>
        <definition>mty::GaugedGroup * mty::ModelData::getGaugedGroup</definition>
        <argsstring>(std::string_view t_name)</argsstring>
        <name>getGaugedGroup</name>
        <qualifiedname>mty::ModelData::getGaugedGroup</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classmty_1_1GaugedGroup" kindref="compound">GaugedGroup</ref> (pointer) given its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the gauged group to search</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gauged group of name <bold>t_name</bold> in the model</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="712" column="22" bodyfile="src/marty/core/modelData.cpp" bodystart="889" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a45ab5f5b0d1c0cad683ca09f7c3464b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref> const *</type>
        <definition>mty::FlavorGroup const  * mty::ModelData::getFlavorGroup</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>getFlavorGroup</name>
        <qualifiedname>mty::ModelData::getFlavorGroup</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classmty_1_1FlavorGroup" kindref="compound">FlavorGroup</ref> (pointer) given its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the flavor group to search</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flavor group of name <bold>t_name</bold> in the model</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="723" column="28" bodyfile="src/marty/core/modelData.cpp" bodystart="901" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ad2a4a0a6f3a1f6ae5c9031e368752b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref> *</type>
        <definition>mty::FlavorGroup * mty::ModelData::getFlavorGroup</definition>
        <argsstring>(std::string_view t_name)</argsstring>
        <name>getFlavorGroup</name>
        <qualifiedname>mty::ModelData::getFlavorGroup</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classmty_1_1FlavorGroup" kindref="compound">FlavorGroup</ref> (pointer) given its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the flavor group to search</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flavor group of name <bold>t_name</bold> in the model</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="733" column="22" bodyfile="src/marty/core/modelData.cpp" bodystart="912" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a890fa70daad0e3128119b9f01142aa2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> &gt;</type>
        <definition>std::vector&lt; mty::Particle &gt; mty::ModelData::getParticles</definition>
        <argsstring>(std::initializer_list&lt; std::string_view &gt; names) const</argsstring>
        <name>getParticles</name>
        <qualifiedname>mty::ModelData::getParticles</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::string_view &gt;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="736" column="5" bodyfile="src/marty/core/modelData.cpp" bodystart="942" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::ModelData::getParticle</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>getParticle</name>
        <qualifiedname>mty::ModelData::getParticle</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a particle in the model given a name. </para>
        </briefdescription>
        <detaileddescription>
<para>In case no particle is found, an error message is printed and the code stops. If you want to know if a particle exists, consider using <ref refid="classmty_1_1ModelData_1a17a67b688374a2e40d64f91ad6bda449" kindref="member">findParticle()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the particle to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The particle of name <bold>name</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="748" column="19" bodyfile="src/marty/core/modelData.cpp" bodystart="952" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a3e6e949b9e44059344c0e094258c8f96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::ModelData::getParticle</definition>
        <argsstring>(mty::QuantumFieldParent const *field) const</argsstring>
        <name>getParticle</name>
        <qualifiedname>mty::ModelData::getParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> const *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns a particle in the model given a pointer to <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In case no particle is found, an error message is printed and the code stops. If you want to know if a particle exists, consider using <ref refid="classmty_1_1ModelData_1a17a67b688374a2e40d64f91ad6bda449" kindref="member">findParticle()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Field from which you want a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> (a <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref> to <bold>field</bold>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="761" column="19" bodyfile="src/marty/core/modelData.cpp" bodystart="966" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a4494ade1b345860d21fc07f28f1e4c56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::ModelData::getParticle</definition>
        <argsstring>(mty::QuantumFieldParent const &amp;field) const</argsstring>
        <name>getParticle</name>
        <qualifiedname>mty::ModelData::getParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumFieldParent" kindref="compound">mty::QuantumFieldParent</ref> const &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns a particle in the model given a <ref refid="classmty_1_1QuantumFieldParent" kindref="compound">QuantumFieldParent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In case no particle is found, an error message is printed and the code stops. If you want to know if a particle exists, consider using <ref refid="classmty_1_1ModelData_1a17a67b688374a2e40d64f91ad6bda449" kindref="member">findParticle()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Field from which you want a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> (a <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref> to <bold>field</bold>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="773" column="19" bodyfile="src/marty/core/modelData.cpp" bodystart="979" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a6a4519ebfcf20b7c1fabad8e358f4a7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::ModelData::getParticle</definition>
        <argsstring>(mty::QuantumField const &amp;field) const</argsstring>
        <name>getParticle</name>
        <qualifiedname>mty::ModelData::getParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1QuantumField" kindref="compound">mty::QuantumField</ref> const &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns a particle in the model given a <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>In case no particle is found, an error message is printed and the code stops. If you want to know if a particle exists, consider using <ref refid="classmty_1_1ModelData_1a17a67b688374a2e40d64f91ad6bda449" kindref="member">findParticle()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Field from which you want a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> (a <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref> to <bold>field&apos;s</bold> parent). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="785" column="19" bodyfile="src/marty/core/modelData.cpp" bodystart="983" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a831fb3bf2be374f46317f25b251a4983" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref></type>
        <definition>mty::Particle mty::ModelData::getParticle</definition>
        <argsstring>(csl::Expr const &amp;field) const</argsstring>
        <name>getParticle</name>
        <qualifiedname>mty::ModelData::getParticle</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns a particle in the model given an expression. </para>
        </briefdescription>
        <detaileddescription>
<para>In case no particle is found, an error message is printed and the code stops. If you want to know if a particle exists, consider using <ref refid="classmty_1_1ModelData_1a17a67b688374a2e40d64f91ad6bda449" kindref="member">findParticle()</ref> instead. The expression <bold>field</bold> must of course be of type <ref refid="classmty_1_1QuantumField" kindref="compound">QuantumField</ref>, i.e. pointing to an object of this type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Field from which you want a <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> (a <ref refid="classstd_1_1shared__ptr" kindref="compound">std::shared_ptr</ref> to <bold>field&apos;s</bold> parent). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="798" column="19" bodyfile="src/marty/core/modelData.cpp" bodystart="987" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a14bf61ee3f7bb3c8f0fddee9bc591a2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ModelData::getScalarCoupling</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>getScalarCoupling</name>
        <qualifiedname>mty::ModelData::getScalarCoupling</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a scalar coupling given its name. </para>
        </briefdescription>
        <detaileddescription>
<para>If the scalar coupling does not exist, this function prints an error message and stops the program. If you want to know if a scalar coupling exists, try using <ref refid="classmty_1_1ModelData_1a24872bf766f4ae39d8a4bcb29cc42a3c" kindref="member">findScalarCoupling()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the scalar coupling to get</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The scalar coupling of name <bold>t_name</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="811" column="15" bodyfile="src/marty/core/modelData.cpp" bodystart="995" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a8939724bcccf03c671b71dad3d6096c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::ModelData::getTensorCoupling</definition>
        <argsstring>(std::string_view t_name) const</argsstring>
        <name>getTensorCoupling</name>
        <qualifiedname>mty::ModelData::getTensorCoupling</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>t_name</declname>
        </param>
        <briefdescription>
<para>Returns a tensor coupling given its name. </para>
        </briefdescription>
        <detaileddescription>
<para>If the tensor coupling does not exist, this function prints an error message and stops the program. If you want to know if a tensor coupling exists, try using <ref refid="classmty_1_1ModelData_1ad9e06ee155bd20ed3704e3b2a4f52de2" kindref="member">findTensorCoupling()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the tensor coupling to get</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tensor coupling of name <bold>t_name</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="824" column="17" bodyfile="src/marty/core/modelData.cpp" bodystart="1007" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a1b033d00ca5c430001e0867d4dc9a689" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Tensor" kindref="compound">csl::Tensor</ref></type>
        <definition>csl::Tensor mty::ModelData::getTensorCoupling</definition>
        <argsstring>(csl::Parent const &amp;t_coupling) const</argsstring>
        <name>getTensorCoupling</name>
        <qualifiedname>mty::ModelData::getTensorCoupling</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> const &amp;</type>
          <declname>t_coupling</declname>
        </param>
        <briefdescription>
<para>Returns a tensor coupling. </para>
        </briefdescription>
        <detaileddescription>
<para>If the tensor coupling does not exist, this function prints an error message and stops the program. If you want to know if a tensor coupling exists, try using <ref refid="classmty_1_1ModelData_1ad9e06ee155bd20ed3704e3b2a4f52de2" kindref="member">findTensorCoupling()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_coupling</parametername>
</parameternamelist>
<parameterdescription>
<para>Coupling to search in the model</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tensor coupling of name <bold>t_name</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="836" column="17" bodyfile="src/marty/core/modelData.cpp" bodystart="1018" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1af8628e14853768a183d1ad5e177ceb99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1GaugeIrrep" kindref="compound">mty::GaugeIrrep</ref></type>
        <definition>mty::GaugeIrrep mty::ModelData::getGaugeIrrep</definition>
        <argsstring>(FieldType &amp;&amp;field) const</argsstring>
        <name>getGaugeIrrep</name>
        <qualifiedname>mty::ModelData::getGaugeIrrep</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns the gauge representation of a field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gauge representation of the particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="848" column="21" bodyfile="src/marty/core/modelData.h" bodystart="1645" bodyend="1654"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a92bf116fa335300b4e33788bc7b3ceb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref></type>
        <definition>mty::Irrep mty::ModelData::getGroupIrrep</definition>
        <argsstring>(FieldType &amp;&amp;field, GroupType &amp;&amp;group) const</argsstring>
        <name>getGroupIrrep</name>
        <qualifiedname>mty::ModelData::getGroupIrrep</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns the group representation of a field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The group representation of <bold>field</bold> in <bold>group</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="862" column="16" bodyfile="src/marty/core/modelData.h" bodystart="1680" bodyend="1700"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a1dd379f5329b6f2fc9387027d722e177" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ModelData::getCharge</definition>
        <argsstring>(FieldType &amp;&amp;field, GroupType &amp;&amp;group) const</argsstring>
        <name>getCharge</name>
        <qualifiedname>mty::ModelData::getCharge</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns the charge representation of a field in a U(1) group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>U(1) group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The charge representation of <bold>field</bold> in <bold>group</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="876" column="15" bodyfile="src/marty/core/modelData.h" bodystart="1657" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a63830e2ed2cfe83ca88ef543a72910ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1FlavorIrrep" kindref="compound">mty::FlavorIrrep</ref></type>
        <definition>mty::FlavorIrrep mty::ModelData::getFlavorIrrep</definition>
        <argsstring>(FieldType &amp;&amp;field) const</argsstring>
        <name>getFlavorIrrep</name>
        <qualifiedname>mty::ModelData::getFlavorIrrep</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns the flavor representation of a field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flavor representation of the particle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="888" column="22" bodyfile="src/marty/core/modelData.h" bodystart="1703" bodyend="1712"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aeaf76bf0b8ac08453be1c59668e03167" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FlavorType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structmty_1_1FlavorFlag" kindref="compound">FlavorFlag</ref></type>
        <definition>FlavorFlag mty::ModelData::getFlavorIrrep</definition>
        <argsstring>(FieldType &amp;&amp;field, FlavorType &amp;&amp;flavor) const</argsstring>
        <name>getFlavorIrrep</name>
        <qualifiedname>mty::ModelData::getFlavorIrrep</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>FlavorType &amp;&amp;</type>
          <declname>flavor</declname>
        </param>
        <briefdescription>
<para>Returns the flavor group representation of a field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FlavorType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">mty::Flavor</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a45ab5f5b0d1c0cad683ca09f7c3464b9" kindref="member">getFlavorGroup()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flavor</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flavor group representation of <bold>field</bold> in <bold>flavor</bold>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="903" column="16" bodyfile="src/marty/core/modelData.h" bodystart="1715" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ad1b358620e5d67d99a3f80726351d43d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>csl::Space const  * mty::ModelData::getVectorSpace</definition>
        <argsstring>(GroupType &amp;&amp;group, FieldType &amp;&amp;field) const</argsstring>
        <name>getVectorSpace</name>
        <qualifiedname>mty::ModelData::getVectorSpace</qualifiedname>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns the vector space coresponding to the representation of a field in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector space coresponding to the representation of a field in a given group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="919" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aa7dee85afb6c11b4d94dda09c72e2d06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>csl::Space const  * mty::ModelData::getVectorSpace</definition>
        <argsstring>(GroupType &amp;&amp;group) const</argsstring>
        <name>getVectorSpace</name>
        <qualifiedname>mty::ModelData::getVectorSpace</qualifiedname>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns the vector space corresponding to a flavor group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a45ab5f5b0d1c0cad683ca09f7c3464b9" kindref="member">getFlavorGroup()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector space coresponding to the flavor group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="931" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a16349cd3276352508bafdd62e7d7a2ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::ModelData::generateIndex</definition>
        <argsstring>(GroupType &amp;&amp;group, FieldType &amp;&amp;field) const</argsstring>
        <name>generateIndex</name>
        <qualifiedname>mty::ModelData::generateIndex</qualifiedname>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns an index coresponding to the representation of a field in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index coresponding to the representation of a field in a given group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="947" column="16" bodyfile="src/marty/core/modelData.h" bodystart="1777" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a8ef303ba051cba21c0dc414c4f1ec24d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::ModelData::generateIndex</definition>
        <argsstring>(GroupType &amp;&amp;group) const</argsstring>
        <name>generateIndex</name>
        <qualifiedname>mty::ModelData::generateIndex</qualifiedname>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns an index coresponding to the fundamental representation in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>For now only enabled for flavor groups, not gauged groups.</para>
</simplesect>
<simplesect kind="return"><para>An index coresponding to the fundamental representation of a given group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="962" column="16" bodyfile="src/marty/core/modelData.h" bodystart="1800" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1af4be49688cdb64ec8f30a6c08cd81200" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>std::vector&lt; csl::Index &gt; mty::ModelData::generateIndices</definition>
        <argsstring>(size_t nIndices, GroupType &amp;&amp;group, FieldType &amp;&amp;field) const</argsstring>
        <name>generateIndices</name>
        <qualifiedname>mty::ModelData::generateIndices</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nIndices</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns indices coresponding to the representation of a field in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of indices to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>nIndices</bold> indices coresponding to the representation of a field in a given group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="979" column="17" bodyfile="src/marty/core/modelData.h" bodystart="1813" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a0ceb4e381e41b3268114b581f3e0bcfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> &gt;</type>
        <definition>std::vector&lt; csl::Index &gt; mty::ModelData::generateIndices</definition>
        <argsstring>(size_t nIndices, GroupType &amp;&amp;group) const</argsstring>
        <name>generateIndices</name>
        <qualifiedname>mty::ModelData::generateIndices</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nIndices</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Returns indices coresponding to the fundamental representation in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>For now only enabled for flavor groups, not gauged groups.</para>
</simplesect>
<simplesect kind="return"><para>Indices coresponding to the fundamental representation of a given group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="996" column="17" bodyfile="src/marty/core/modelData.h" bodystart="1826" bodyend="1834"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a0b0bd73816c16ba006e78a48cae72221" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::ModelData::generateIndex</definition>
        <argsstring>(std::string_view nameIndex, GroupType &amp;&amp;group, FieldType &amp;&amp;field) const</argsstring>
        <name>generateIndex</name>
        <qualifiedname>mty::ModelData::generateIndex</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>nameIndex</declname>
        </param>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns an index coresponding to the representation of a field in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name for the generated index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index coresponding to the representation of a field in a given group. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1014" column="16" bodyfile="src/marty/core/modelData.h" bodystart="1837" bodyend="1861"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a65c7386937937b39a4cc50163d8cd6d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmty_1_1Generator" kindref="compound">mty::Generator</ref></type>
        <definition>mty::Generator mty::ModelData::getGenerator</definition>
        <argsstring>(GroupType &amp;&amp;group, FieldType &amp;&amp;field) const</argsstring>
        <name>getGenerator</name>
        <qualifiedname>mty::ModelData::getGenerator</qualifiedname>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Returns the generator coresponding to the representation of a field in a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GroupType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref>* or valid type for the function <ref refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" kindref="member">getGroup()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or valid type for the function <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The generator coresponding to the representation of a field in a given group if it exists. </para>
</simplesect>
<simplesect kind="return"><para>nullptr else. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1033" column="20" bodyfile="src/marty/core/modelData.h" bodystart="1864" bodyend="1885"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ae32c0ea9f667dd69f4495a99ea12f8f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::checkValidity</definition>
        <argsstring>(mty::Particle const &amp;part) const</argsstring>
        <name>checkValidity</name>
        <qualifiedname>mty::ModelData::checkValidity</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Checks the validity of a particle when adding it to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the gauge, flavor of the particle are the same as the ones defined in the model. If the particle is not valid, an error message is printed and the program stops.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1048" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1111" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a688fc6395c0f782390bb69392accd0a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::checkValidity</definition>
        <argsstring>(mty::Lagrangian::TermType const &amp;term) const</argsstring>
        <name>checkValidity</name>
        <qualifiedname>mty::ModelData::checkValidity</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">mty::Lagrangian::TermType</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>Checks the validity of a term when adding it to the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function simply computes the tensor product of the gauge representations of all particles in the interaction (taking conjugate representations for conjugate fields) and checks that the trivial gauge representation exists in the resulting decomposition. This represents a quick check of gauge invariance, even though the exact gauge invariance is not guaranteed at this point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>Term to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1062" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1129" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a00255feda9a2bc8ca1dcfd0cb17d474d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addLagrangianTerm</definition>
        <argsstring>(csl::Expr const &amp;term, bool addHermitic=false)</argsstring>
        <name>addLagrangianTerm</name>
        <qualifiedname>mty::ModelData::addLagrangianTerm</qualifiedname>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addHermitic</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Adds a lagrangian term to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>The term can be a kinetic, mass term, or interaction term. It must be of course gauge invariant (see <ref refid="classmty_1_1ModelData_1ae32c0ea9f667dd69f4495a99ea12f8f8" kindref="member">checkValidity()</ref>), and have no free indices (scalar term). Setting <bold>addHermitic</bold> to true, to hermitian conjugate will be computed and added automatically. For example, you may have in a <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>   <formula id="160">\[
    \mathcal{L} \ni \frac{g}{\sqrt{2}} \bar{u}W^+\cdot \gamma P_Ld +
h.c, \]</formula> (in that case the &apos;+h.c&apos; corresponds to <bold>addHermitic</bold> = true), or <formula id="161">\[ \mathcal{L} \ni \frac{2}{3}e\bar{u}A\cdot \gamma u, \]</formula> that do not have an hermitian counter part.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> term to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addHermitic</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean (default = false) that tells if the hermitian conjugate of the term must be also added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1082" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1149" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aea3dc9a2676c954f2403a278c2e41c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::addLagrangianTerm</definition>
        <argsstring>(mty::Lagrangian::TermType const &amp;term, bool addHermitic=false)</argsstring>
        <name>addLagrangianTerm</name>
        <qualifiedname>mty::ModelData::addLagrangianTerm</qualifiedname>
        <param>
          <type><ref refid="classstd_1_1shared__ptr" kindref="compound">mty::Lagrangian::TermType</ref> const &amp;</type>
          <declname>term</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addHermitic</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Adds a lagrangian term to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>The term can be a kinetic, mass term, or interaction term. It must be of course gauge invariant (see <ref refid="classmty_1_1ModelData_1ae32c0ea9f667dd69f4495a99ea12f8f8" kindref="member">checkValidity()</ref>), and have no free indices (scalar term). Setting <bold>addHermitic</bold> to true, to hermitian conjugate will be computed and added automatically. For example, you may have in a <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref>   <formula id="160">\[
    \mathcal{L} \ni \frac{g}{\sqrt{2}} \bar{u}W^+\cdot \gamma P_Ld +
h.c, \]</formula> (in that case the &apos;+h.c&apos; corresponds to <bold>addHermitic</bold> = true), or <formula id="161">\[ \mathcal{L} \ni \frac{2}{3}e\bar{u}A\cdot \gamma u, \]</formula> that do not have an hermitian counter part.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> term to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addHermitic</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean (default = false) that tells if the hermitian conjugate of the term must be also added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1101" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1166" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a735b8c0ec06556dd29c4abf8e102a70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::ModelData::addBosonicMass</definition>
        <argsstring>(FieldType &amp;&amp;field, std::string_view mass)</argsstring>
        <name>addBosonicMass</name>
        <qualifiedname>mty::ModelData::addBosonicMass</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>Adds a bosonic mass term to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>A bosonic mass term for a field <formula id="162">$ \phi $</formula> of mass <formula id="163">$ m $</formula> is of the form <formula id="164">\[ \mathcal{L}_M \ni \pm \eta m^2 \phi ^\dagger \phi \]</formula>, with <formula id="165">$ \eta = 1/2 $</formula> if <formula id="166">$ \phi ^\dagger = \phi$</formula>, <formula id="167">$ \eta = 1 $</formula> otherwise. For spin 1 particles, the sign is positive, and negative for spin 0 particles.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Field in the mass term (must be bosonic). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mass to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1120" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1888" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a3ded6dacae99d84a34bfa675743eacc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::ModelData::addBosonicMass</definition>
        <argsstring>(FieldType &amp;&amp;field, csl::Expr const &amp;mass)</argsstring>
        <name>addBosonicMass</name>
        <qualifiedname>mty::ModelData::addBosonicMass</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>Adds a bosonic mass term to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>A bosonic mass term for a field <formula id="162">$ \phi $</formula> of mass <formula id="163">$ m $</formula> is of the form <formula id="164">\[ \mathcal{L}_M \ni \pm \eta m^2 \phi ^\dagger \phi \]</formula>, with <formula id="165">$ \eta = 1/2 $</formula> if <formula id="166">$ \phi ^\dagger = \phi$</formula>, <formula id="167">$ \eta = 1 $</formula> otherwise. For spin 1 particles, the sign is positive, and negative for spin 0 particles. After the function call, the mass of the boson is set to the given mass <formula id="163">$ m $</formula>, and any other mass term with $$\phi$$ is suppressed.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>Field in the mass term (must be bosonic). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass to add (must be scalar). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1140" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1899" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a37a73e7e437eae6e2fdc55cd9d7c8c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType1</type>
          </param>
          <param>
            <type>class FieldType2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::ModelData::addFermionicMass</definition>
        <argsstring>(FieldType1 &amp;&amp;left, FieldType2 &amp;&amp;right, std::string_view mass)</argsstring>
        <name>addFermionicMass</name>
        <qualifiedname>mty::ModelData::addFermionicMass</qualifiedname>
        <param>
          <type>FieldType1 &amp;&amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>FieldType2 &amp;&amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>Adds a fermionic mass to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds a Weyl mass term for <bold>left</bold> and <bold>right</bold>. Considering two Weyl fermions <formula id="168">$ \psi _L $</formula> and <formula id="169">$ \psi _R $</formula>, the mass term reads   <formula id="170">\[
    m\left(\psi _L^\dagger \psi _R + \psi _R^\dagger \psi _L\right).
\]</formula> After the function call, the mass of the two weyl fermions is set to the given mass <formula id="163">$ m $</formula>, and any other mass term with <formula id="171">$ \psi_ L $</formula> or <formula id="169">$ \psi _R $</formula> is suppressed.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Left-handed Weyl fermion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Right-handed Weyl fermion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mass for the fermion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1165" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1911" bodyend="1934"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a829014d5ceaa41972d7bafab5e15cf8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType1</type>
          </param>
          <param>
            <type>class FieldType2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::ModelData::addFermionicMass</definition>
        <argsstring>(FieldType1 &amp;&amp;left, FieldType2 &amp;&amp;right, csl::Expr const &amp;mass)</argsstring>
        <name>addFermionicMass</name>
        <qualifiedname>mty::ModelData::addFermionicMass</qualifiedname>
        <param>
          <type>FieldType1 &amp;&amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>FieldType2 &amp;&amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>Adds a fermionic mass to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds a Weyl mass term for <bold>left</bold> and <bold>right</bold>. Considering two Weyl fermions <formula id="168">$ \psi _L $</formula> and <formula id="169">$ \psi _R $</formula>, the mass term reads   <formula id="170">\[
    m\left(\psi _L^\dagger \psi _R + \psi _R^\dagger \psi _L\right).
\]</formula> After the function call, the mass of the two weyl fermions is set to the given mass <formula id="163">$ m $</formula>, and any other mass term with <formula id="171">$ \psi_ L $</formula> or <formula id="169">$ \psi _R $</formula> is suppressed.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FieldType2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Left-handed Weyl fermion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Right-handed Weyl fermion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass for the fermion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1191" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1936" bodyend="1959"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a00436871b30b35a347b906146d0d56a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::ModelData::addFermionicMass</definition>
        <argsstring>(FieldType &amp;&amp;diracFermion, std::string_view mass)</argsstring>
        <name>addFermionicMass</name>
        <qualifiedname>mty::ModelData::addFermionicMass</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>diracFermion</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>Adds a fermionic mass to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds a simple fermionic mass term for a particle, actually similar to a bosonic mass term replacing <formula id="172">$ \phi ^* $</formula> by $\bar{\psi}$. See <ref refid="classmty_1_1ModelData_1a735b8c0ec06556dd29c4abf8e102a70e" kindref="member">addBosonicMass()</ref> for more details.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diracFermion</parametername>
</parameternamelist>
<parameterdescription>
<para>Dirac fermion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mass for the fermion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1208" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1961" bodyend="1972"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a8a51a6ff2ec61d7f4bb454e253efec91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::ModelData::addFermionicMass</definition>
        <argsstring>(FieldType &amp;&amp;diracFermion, csl::Expr const &amp;mass)</argsstring>
        <name>addFermionicMass</name>
        <qualifiedname>mty::ModelData::addFermionicMass</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>diracFermion</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
<para>Adds a fermionic mass to the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds a simple fermionic mass term for a particle, actually similar to a bosonic mass term replacing <formula id="173">$ \phi ^\dagger $</formula> by $\bar{\psi}$. See <ref refid="classmty_1_1ModelData_1a735b8c0ec06556dd29c4abf8e102a70e" kindref="member">addBosonicMass()</ref> for more details.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diracFermion</parametername>
</parameternamelist>
<parameterdescription>
<para>Dirac fermion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mass</parametername>
</parameternamelist>
<parameterdescription>
<para>Mass for the fermion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1223" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1974" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ae29923e3065a1c4e7570f636444b197b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mty::ModelData::renameParticle</definition>
        <argsstring>(FieldType &amp;&amp;field, std::string_view newName)</argsstring>
        <name>renameParticle</name>
        <qualifiedname>mty::ModelData::renameParticle</qualifiedname>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
<para>Renames a particle of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> or any valid type for the <ref refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" kindref="member">getParticle()</ref> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> to rename </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newName</parametername>
</parameternamelist>
<parameterdescription>
<para>New name for the particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1235" column="10" bodyfile="src/marty/core/modelData.h" bodystart="1988" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aaacc3eb8d783277aed06cfd6149948f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::renameCoupling</definition>
        <argsstring>(std::string_view name, std::string_view newName)</argsstring>
        <name>renameCoupling</name>
        <qualifiedname>mty::ModelData::renameCoupling</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
<para>Renames a (scalar or tensor) coupling of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial name of the coupling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newName</parametername>
</parameternamelist>
<parameterdescription>
<para>New name for the particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1243" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1270" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ac5cd6ae77d018b097251eb12f7c07935" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::printSubPart</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;particles, std::ostream &amp;out=std::cout) const</argsstring>
        <name>printSubPart</name>
        <qualifiedname>mty::ModelData::printSubPart</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
<para>Prints a sub part of the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> including some particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particles</parametername>
</parameternamelist>
<parameterdescription>
<para>Particles that printed terms must have </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream (std::cout, standard stream by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1255" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1295" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aba117d39831cd155a5eaff28e25831c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::printSubPart</definition>
        <argsstring>(std::initializer_list&lt; std::string &gt; particles, std::ostream &amp;out=std::cout) const</argsstring>
        <name>printSubPart</name>
        <qualifiedname>mty::ModelData::printSubPart</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::string &gt;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
<para>Prints a sub part of the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> including some particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particles</parametername>
</parameternamelist>
<parameterdescription>
<para>Particles that printed terms must have </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream (std::cout, standard stream by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1263" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1290" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1abaaaa2901d177aaa127bd09a157e78ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::printSubPart</definition>
        <argsstring>(std::string const &amp;particle, std::ostream &amp;out=std::cout) const</argsstring>
        <name>printSubPart</name>
        <qualifiedname>mty::ModelData::printSubPart</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
<para>Prints a sub part of the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> including some particles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particles</parametername>
</parameternamelist>
<parameterdescription>
<para>Particles that printed terms must have </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream (std::cout, standard stream by default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1271" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1325" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aa7dee85afb6c11b4d94dda09c72e2d06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>csl::Space const  * mty::ModelData::getVectorSpace</definition>
        <argsstring>(GroupType &amp;&amp;group) const</argsstring>
        <name>getVectorSpace</name>
        <qualifiedname>mty::ModelData::getVectorSpace</qualifiedname>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1740" column="18" bodyfile="src/marty/core/modelData.h" bodystart="1740" bodyend="1750"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ad1b358620e5d67d99a3f80726351d43d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class GroupType</type>
          </param>
          <param>
            <type>class FieldType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>csl::Space const  * mty::ModelData::getVectorSpace</definition>
        <argsstring>(GroupType &amp;&amp;group, FieldType &amp;&amp;field) const</argsstring>
        <name>getVectorSpace</name>
        <qualifiedname>mty::ModelData::getVectorSpace</qualifiedname>
        <param>
          <type>GroupType &amp;&amp;</type>
          <declname>group</declname>
        </param>
        <param>
          <type>FieldType &amp;&amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1753" column="18" bodyfile="src/marty/core/modelData.h" bodystart="1753" bodyend="1774"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classmty_1_1ModelData_1a5e69073b241307be42ece20cd2a86953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, ModelData const &amp;model)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mty::ModelData::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> const &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Prints the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function prints out the model gauge, the particle content and the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> (kinetic, mass, and interaction terms).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream (default is standard stream std::cout). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Model" kindref="compound">Model</ref> to output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1285" column="12" bodyfile="src/marty/core/modelData.cpp" bodystart="1331" bodyend="1373"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmty_1_1ModelData_1a244e6e94e6b99e553d60662b1edd586c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::initGaugedGroups</definition>
        <argsstring>(bool initGaugeTerms=true)</argsstring>
        <name>initGaugedGroups</name>
        <qualifiedname>mty::ModelData::initGaugedGroups</qualifiedname>
        <param>
          <type>bool</type>
          <declname>initGaugeTerms</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Initializes gauge terms (gauge bosons, ghosts) and fixes the gauge. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initGaugeTerms</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean (default = true) that tells if kinetic and mass terms must be added automatically. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1303" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1384" bodyend="1403"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a51e3c9853c44b2fb8548b53662de61d4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::writeHeader</definition>
        <argsstring>(std::ostream &amp;out, int indentSize, std::vector&lt; csl::Parent &gt; &amp;defined)</argsstring>
        <name>writeHeader</name>
        <qualifiedname>mty::ModelData::writeHeader</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> &gt; &amp;</type>
          <declname>defined</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1309" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="162" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a8ff38807ea2f31c2e8806a39a819a309" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::writeGauge</definition>
        <argsstring>(std::ostream &amp;out, int indentSize, std::vector&lt; csl::Parent &gt; &amp;defined)</argsstring>
        <name>writeGauge</name>
        <qualifiedname>mty::ModelData::writeGauge</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> &gt; &amp;</type>
          <declname>defined</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1312" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="179" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a3180ccda678296961fd16f5650e86bf2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::writeFlavor</definition>
        <argsstring>(std::ostream &amp;out, int indentSize, std::vector&lt; csl::Parent &gt; &amp;defined)</argsstring>
        <name>writeFlavor</name>
        <qualifiedname>mty::ModelData::writeFlavor</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> &gt; &amp;</type>
          <declname>defined</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1315" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="225" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a580945f23a58ab30d9005a36576e5449" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::writeMassAndWidth</definition>
        <argsstring>(std::ostream &amp;out, int indentSize, std::vector&lt; csl::Parent &gt; &amp;defined)</argsstring>
        <name>writeMassAndWidth</name>
        <qualifiedname>mty::ModelData::writeMassAndWidth</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> &gt; &amp;</type>
          <declname>defined</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1318" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="253" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a12bc1c99466d35a232ab048e1abe600f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::writeParticles</definition>
        <argsstring>(std::ostream &amp;out, int indentSize, std::vector&lt; csl::Parent &gt; &amp;defined)</argsstring>
        <name>writeParticles</name>
        <qualifiedname>mty::ModelData::writeParticles</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> &gt; &amp;</type>
          <declname>defined</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1321" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="285" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a284d23de3d1c3a8c00e604853567e800" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::writeDependencies</definition>
        <argsstring>(std::ostream &amp;out, int indentSize, std::vector&lt; csl::Parent &gt; &amp;defined, std::vector&lt; csl::Expr &gt; &amp;kinetic, std::vector&lt; csl::Expr &gt; &amp;mass, std::vector&lt; csl::Expr &gt; &amp;interac)</argsstring>
        <name>writeDependencies</name>
        <qualifiedname>mty::ModelData::writeDependencies</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Parent" kindref="compound">csl::Parent</ref> &gt; &amp;</type>
          <declname>defined</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>kinetic</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; &amp;</type>
          <declname>interac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1324" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="324" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a673ce7f31f5c9c8d03d762b4b7e3483c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::writeLagrangian</definition>
        <argsstring>(std::ostream &amp;out, int indentSize, std::vector&lt; csl::Expr &gt; const &amp;kinetic, std::vector&lt; csl::Expr &gt; const &amp;mass, std::vector&lt; csl::Expr &gt; const &amp;interac)</argsstring>
        <name>writeLagrangian</name>
        <qualifiedname>mty::ModelData::writeLagrangian</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentSize</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>kinetic</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> &gt; const &amp;</type>
          <declname>interac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1330" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="423" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1acae3d7143d8328e4609d83dd8c71846f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1GaugeIrrep" kindref="compound">mty::GaugeIrrep</ref></type>
        <definition>mty::GaugeIrrep mty::ModelData::doGetGaugeIrrep</definition>
        <argsstring>(mty::Particle const &amp;part) const</argsstring>
        <name>doGetGaugeIrrep</name>
        <qualifiedname>mty::ModelData::doGetGaugeIrrep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Actually returns the gauge representation of a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> from which we want the representation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gauge representation of <bold>part</bold>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1af8628e14853768a183d1ad5e177ceb99" kindref="member">getGaugeIrrep()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1349" column="21" bodyfile="src/marty/core/modelData.cpp" bodystart="1029" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a016a87bc1b967b361728be7ebf0bb829" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Irrep" kindref="compound">mty::Irrep</ref></type>
        <definition>mty::Irrep mty::ModelData::doGetGroupIrrep</definition>
        <argsstring>(mty::Particle const &amp;part, mty::Group const *group) const</argsstring>
        <name>doGetGroupIrrep</name>
        <qualifiedname>mty::ModelData::doGetGroupIrrep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> const *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Actually returns the group representation of a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> from which we want the representation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The group representation of <bold>part</bold> or the group <bold>group</bold>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a92bf116fa335300b4e33788bc7b3ceb3" kindref="member">getGroupIrrep()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1360" column="16" bodyfile="src/marty/core/modelData.cpp" bodystart="1033" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a0e0822ae0fb5c9f7eab940676e754606" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref></type>
        <definition>csl::Expr mty::ModelData::doGetCharge</definition>
        <argsstring>(mty::Particle const &amp;particle, mty::Group const *group) const</argsstring>
        <name>doGetCharge</name>
        <qualifiedname>mty::ModelData::doGetCharge</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> const *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Actually returns the charge representation of a particle for a U(1) group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> from which we want the charge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>U(1) Group</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The charge representation of <bold>part</bold> or the group <bold>group</bold>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a1dd379f5329b6f2fc9387027d722e177" kindref="member">getCharge()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1373" column="15" bodyfile="src/marty/core/modelData.cpp" bodystart="1038" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1af546399ca6af2364c782cc8e5f21e952" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1FlavorIrrep" kindref="compound">mty::FlavorIrrep</ref></type>
        <definition>mty::FlavorIrrep mty::ModelData::doGetFlavorIrrep</definition>
        <argsstring>(mty::Particle const &amp;part) const</argsstring>
        <name>doGetFlavorIrrep</name>
        <qualifiedname>mty::ModelData::doGetFlavorIrrep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Actually returns the flavor representation of a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> from which we want the representation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flavor representation of <bold>part</bold>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a63830e2ed2cfe83ca88ef543a72910ac" kindref="member">getFlavorIrrep()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1385" column="22" bodyfile="src/marty/core/modelData.cpp" bodystart="1044" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a911d6da7d89ca5d8bff041b421b0b2fb" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmty_1_1FlavorFlag" kindref="compound">FlavorFlag</ref></type>
        <definition>FlavorFlag mty::ModelData::doGetFlavorIrrep</definition>
        <argsstring>(mty::Particle const &amp;part, mty::FlavorGroup const *flavor) const</argsstring>
        <name>doGetFlavorIrrep</name>
        <qualifiedname>mty::ModelData::doGetFlavorIrrep</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref> const *</type>
          <declname>flavor</declname>
        </param>
        <briefdescription>
<para>Actually returns the flavor group representation of a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> from which we want the representation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> group</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flavor group representation of <bold>part</bold> or the group <bold>group</bold>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a63830e2ed2cfe83ca88ef543a72910ac" kindref="member">getFlavorIrrep()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1397" column="16" bodyfile="src/marty/core/modelData.cpp" bodystart="1049" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1aa230fa5ecb255729fcc6632c375645ef" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>const csl::Space * mty::ModelData::doGetVectorSpace</definition>
        <argsstring>(mty::Group const *group, mty::Particle const &amp;irrep) const</argsstring>
        <name>doGetVectorSpace</name>
        <qualifiedname>mty::ModelData::doGetVectorSpace</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> const *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>irrep</declname>
        </param>
        <briefdescription>
<para>Actually returns the vector space corresponding to a particle&apos;s representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irrep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector space of the group representation of <bold>irrep</bold> in the group <bold>group</bold>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1ad1b358620e5d67d99a3f80726351d43d" kindref="member">getVectorSpace()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1412" column="22" bodyfile="src/marty/core/modelData.cpp" bodystart="1064" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a321bf5399c6ae4f798483ebb777f5f19" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Space" kindref="compound">csl::Space</ref> const *</type>
        <definition>const csl::Space * mty::ModelData::doGetVectorSpace</definition>
        <argsstring>(mty::FlavorGroup const *group) const</argsstring>
        <name>doGetVectorSpace</name>
        <qualifiedname>mty::ModelData::doGetVectorSpace</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref> const *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Actually returns the vector space corresponding to a flavor group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Flavor" kindref="compound">Flavor</ref> group</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector space of the flavor group.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1ad1b358620e5d67d99a3f80726351d43d" kindref="member">getVectorSpace()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1424" column="22" bodyfile="src/marty/core/modelData.cpp" bodystart="1070" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a1c80d18c8b6e95e01448706a10bbcbe9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::ModelData::doGenerateIndex</definition>
        <argsstring>(mty::Group const *group, mty::Particle const &amp;fieldRep) const</argsstring>
        <name>doGenerateIndex</name>
        <qualifiedname>mty::ModelData::doGenerateIndex</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> const *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>fieldRep</declname>
        </param>
        <briefdescription>
<para>Actually returns a <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> corresponding to a particle&apos;s representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldRep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index corresponding to the group representation of <bold>irrep</bold> in the group <bold>group</bold>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a16349cd3276352508bafdd62e7d7a2ce" kindref="member">generateIndex()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1438" column="16" bodyfile="src/marty/core/modelData.cpp" bodystart="1075" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a981867ca6196b6636e3b1e42e7974810" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::ModelData::doGenerateIndex</definition>
        <argsstring>(mty::FlavorGroup const *group) const</argsstring>
        <name>doGenerateIndex</name>
        <qualifiedname>mty::ModelData::doGenerateIndex</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1FlavorGroup" kindref="compound">mty::FlavorGroup</ref> const *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Actually returns a <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> corresponding to the fundamental representation of a given group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1FlavorGroup" kindref="compound">FlavorGroup</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index corresponding to the fundamental representation of the group <bold>group</bold>.</para>
</simplesect>
<simplesect kind="warning"><para>For now only enabled for flavor groups, not gauged groups.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a16349cd3276352508bafdd62e7d7a2ce" kindref="member">generateIndex()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1453" column="16" bodyfile="src/marty/core/modelData.cpp" bodystart="1081" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ab9b86497cee717653102209820cbbd5b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref></type>
        <definition>csl::Index mty::ModelData::doGenerateIndex</definition>
        <argsstring>(std::string_view nameIndex, mty::Group const *group, mty::Particle const &amp;fieldRep) const</argsstring>
        <name>doGenerateIndex</name>
        <qualifiedname>mty::ModelData::doGenerateIndex</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>nameIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> const *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>fieldRep</declname>
        </param>
        <briefdescription>
<para>Actually returns a <ref refid="classcsl_1_1Index" kindref="compound">csl::Index</ref> corresponding to a particle&apos;s representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the index to generate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldRep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index corresponding to the group representation of <bold>irrep</bold> in the group <bold>group</bold>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a16349cd3276352508bafdd62e7d7a2ce" kindref="member">generateIndex()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1467" column="16" bodyfile="src/marty/core/modelData.cpp" bodystart="1093" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ad06ea6d15f922117a7a1e95b444969bd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmty_1_1Generator" kindref="compound">mty::Generator</ref></type>
        <definition>mty::Generator mty::ModelData::doGetGenerator</definition>
        <argsstring>(mty::Group const *group, mty::Particle const &amp;fieldRep) const</argsstring>
        <name>doGetGenerator</name>
        <qualifiedname>mty::ModelData::doGetGenerator</qualifiedname>
        <param>
          <type><ref refid="namespacemty_1a8db9f448b1559326430f115070d06b45" kindref="member">mty::Group</ref> const *</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>fieldRep</declname>
        </param>
        <briefdescription>
<para>Actually returns a generator corresponding to a particle&apos;s representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>Group </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldRep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The generator corresponding to the group representation of <bold>fieldRep</bold> in the group <bold>group</bold> if it is not trivial. </para>
</simplesect>
<simplesect kind="return"><para>nullptr else</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1a16349cd3276352508bafdd62e7d7a2ce" kindref="member">generateIndex()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1484" column="20" bodyfile="src/marty/core/modelData.cpp" bodystart="1101" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ac4d923650a12c1c09a84029df16d358b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::doAddBosonicMass</definition>
        <argsstring>(mty::Particle const &amp;particle, std::string_view mass)</argsstring>
        <name>doAddBosonicMass</name>
        <qualifiedname>mty::ModelData::doAddBosonicMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1495" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1202" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a39d5a1cf3efe1c5962f06f2d241ca134" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::doAddBosonicMass</definition>
        <argsstring>(mty::Particle const &amp;particle, csl::Expr const &amp;mass)</argsstring>
        <name>doAddBosonicMass</name>
        <qualifiedname>mty::ModelData::doAddBosonicMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>particle</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1505" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1191" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a523989426179bac1d251c73881b1ba80" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::doAddFermionicMass</definition>
        <argsstring>(mty::Particle const &amp;left, mty::Particle const &amp;right, std::string_view mass)</argsstring>
        <name>doAddFermionicMass</name>
        <qualifiedname>mty::ModelData::doAddFermionicMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1517" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1222" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ab4fc99c231534d418a2ef252db61f7ee" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::doAddFermionicMass</definition>
        <argsstring>(mty::Particle const &amp;left, mty::Particle const &amp;right, csl::Expr const &amp;mass)</argsstring>
        <name>doAddFermionicMass</name>
        <qualifiedname>mty::ModelData::doAddFermionicMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1529" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1208" bodyend="1221"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a43470a5465d906055dc1efc9ff0d8c2f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::doAddFermionicMass</definition>
        <argsstring>(mty::Particle const &amp;diracFermion, std::string_view mass)</argsstring>
        <name>doAddFermionicMass</name>
        <qualifiedname>mty::ModelData::doAddFermionicMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>diracFermion</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1540" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1233" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1a250711d444eda40e7061613c5ce816e1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::doAddFermionicMass</definition>
        <argsstring>(mty::Particle const &amp;diracFermion, csl::Expr const &amp;mass)</argsstring>
        <name>doAddFermionicMass</name>
        <qualifiedname>mty::ModelData::doAddFermionicMass</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>diracFermion</declname>
        </param>
        <param>
          <type><ref refid="classcsl_1_1Expr" kindref="compound">csl::Expr</ref> const &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1550" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1228" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="classmty_1_1ModelData_1ad125c237e6e914da9721c1ad2f829cc9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mty::ModelData::doRenameParticle</definition>
        <argsstring>(mty::Particle const &amp;part, std::string_view newName)</argsstring>
        <name>doRenameParticle</name>
        <qualifiedname>mty::ModelData::doRenameParticle</qualifiedname>
        <param>
          <type><ref refid="classmty_1_1Particle" kindref="compound">mty::Particle</ref> const &amp;</type>
          <declname>part</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
<para>Actually renames a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmty_1_1Particle" kindref="compound">Particle</ref> to rename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newName</parametername>
</parameternamelist>
<parameterdescription>
<para>New name for the particle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelData_1ae29923e3065a1c4e7570f636444b197b" kindref="member">renameParticle()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/marty/core/modelData.h" line="1561" column="10" bodyfile="src/marty/core/modelData.cpp" bodystart="1239" bodyend="1268"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The class <ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> contains all the necessary features to store and manipulate the content of a model. No model building (symmetry breaking, replacements etc) or computation are implemented in it. </para>
    </briefdescription>
    <detaileddescription>
<para>This class contains the <ref refid="classmty_1_1Lagrangian" kindref="compound">Lagrangian</ref> of the theory (all interaction, kinetic, and mass terms), the gauge, flavor symmetries, particles, quantum numbers, couplings, and momenta. It is really a container, owner of all the cited objects. In particular, deleting the <ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> will automatically delete the lagrangian, gauge, flavor. Particles are under shared ownership, so will be deleted only if there is no other reference to it in the program. Beware however than even particles cannot be used if the model is deleted as they will refer to a non-existing gauge / flavor. <simplesect kind="warning"><para><ref refid="classmty_1_1ModelData" kindref="compound">ModelData</ref> instances (together with <ref refid="classmty_1_1ModelBuilder" kindref="compound">ModelBuilder</ref> and <ref refid="classmty_1_1Model" kindref="compound">Model</ref>) should live at least as longer as any object that come from it, in particular particles, or expressions containing particles. To avoid any problem, define it as a static variable in the main function, or as a dynamically allocated variable deleted at the end of the main function. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmty_1_1ModelBuilder" kindref="compound">ModelBuilder</ref>, <ref refid="classmty_1_1Model" kindref="compound">Model</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="13">
        <label>mty::GTHDM_Model</label>
        <link refid="classmty_1_1GTHDM__Model"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>mty::MSSM_HEM</label>
        <link refid="classmty_1_1MSSM__HEM"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mty::MSSM_Model</label>
        <link refid="classmty_1_1MSSM__Model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>mty::Model</label>
        <link refid="classmty_1_1Model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>mty::ModelBuilder</label>
        <link refid="classmty_1_1ModelBuilder"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>mty::ModelData</label>
        <link refid="classmty_1_1ModelData"/>
      </node>
      <node id="7">
        <label>mty::NMFV_Model</label>
        <link refid="classmty_1_1NMFV__Model"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>mty::PMSSM_LEM</label>
        <link refid="classmty_1_1PMSSM__LEM"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>mty::PMSSM_Model</label>
        <link refid="classmty_1_1PMSSM__Model"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>mty::QCD_Model</label>
        <link refid="classmty_1_1QCD__Model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>mty::QED_Model</label>
        <link refid="classmty_1_1QED__Model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>mty::SM_Model</label>
        <link refid="classmty_1_1SM__Model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>mty::THDM_Model&lt; type &gt;</label>
        <link refid="classmty_1_1THDM__Model"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>mty::THDM_Model&lt; GTHDM_type &gt;</label>
        <link refid="classmty_1_1THDM__Model"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>csl::Expr</label>
        <link refid="classcsl_1_1Expr"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>csl::Space</label>
        <link refid="classcsl_1_1Space"/>
        <childnode refid="3" relation="usage">
          <edgelabel>symbolicDim</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>delta</edgelabel>
          <edgelabel>epsilon</edgelabel>
          <edgelabel>inverseMetric</edgelabel>
          <edgelabel>metric</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>csl::Tensor</label>
        <link refid="classcsl_1_1Tensor"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>mty::Lagrangian</label>
        <link refid="classmty_1_1Lagrangian"/>
        <childnode refid="3" relation="usage">
          <edgelabel>expression</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>mty::ModelData</label>
        <link refid="classmty_1_1ModelData"/>
        <childnode refid="2" relation="usage">
          <edgelabel>defaultSpaceTime</edgelabel>
          <edgelabel>spaceTime</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>L</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::shared_ptr&lt; TensorParent &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
      <node id="4">
        <label>std::shared_ptr&lt; csl::Abstract &gt;</label>
        <link refid="classstd_1_1shared__ptr"/>
      </node>
    </collaborationgraph>
    <location file="src/marty/core/modelData.h" line="56" column="1" bodyfile="src/marty/core/modelData.h" bodystart="56" bodyend="1634"/>
    <listofallmembers>
      <member refid="classmty_1_1ModelData_1a735b8c0ec06556dd29c4abf8e102a70e" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addBosonicMass</name></member>
      <member refid="classmty_1_1ModelData_1a3ded6dacae99d84a34bfa675743eacc9" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addBosonicMass</name></member>
      <member refid="classmty_1_1ModelData_1a37a73e7e437eae6e2fdc55cd9d7c8c9c" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addFermionicMass</name></member>
      <member refid="classmty_1_1ModelData_1a829014d5ceaa41972d7bafab5e15cf8a" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addFermionicMass</name></member>
      <member refid="classmty_1_1ModelData_1a00436871b30b35a347b906146d0d56a5" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addFermionicMass</name></member>
      <member refid="classmty_1_1ModelData_1a8a51a6ff2ec61d7f4bb454e253efec91" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addFermionicMass</name></member>
      <member refid="classmty_1_1ModelData_1a141ece1d3efee1b0e0a6e3b6bb613279" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addFlavorGroup</name></member>
      <member refid="classmty_1_1ModelData_1aba0eb189ccb3a5d1e8b52ab51eaa86b2" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addFlavorGroup</name></member>
      <member refid="classmty_1_1ModelData_1abd1763e959fc47c68d16234d42df78b0" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addGaugedGroup</name></member>
      <member refid="classmty_1_1ModelData_1a55ca20dc39d8c7d58b8f78f45a450f33" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addGaugedGroup</name></member>
      <member refid="classmty_1_1ModelData_1a00255feda9a2bc8ca1dcfd0cb17d474d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addLagrangianTerm</name></member>
      <member refid="classmty_1_1ModelData_1aea3dc9a2676c954f2403a278c2e41c8e" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addLagrangianTerm</name></member>
      <member refid="classmty_1_1ModelData_1a6fcec3f2efbbcb928b1addbed29ac953" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addParticle</name></member>
      <member refid="classmty_1_1ModelData_1a3ff5a51fa0a90f6d1d51c7ca7089afc6" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addParticles</name></member>
      <member refid="classmty_1_1ModelData_1a560fd95f2a6a26c293c655c68431a71a" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addParticlesIn</name></member>
      <member refid="classmty_1_1ModelData_1a8a951521cc75c351857c829883250432" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addScalarCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a3ff29e11d312b7c37c66666fb457ce76" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addScalarCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a94acca3e80227a8c25c325005777de5e" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>addTensorCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a0c48e931cd6b5d81377447f2c00aa50f" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>checkHermiticity</name></member>
      <member refid="classmty_1_1ModelData_1ae32c0ea9f667dd69f4495a99ea12f8f8" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>checkValidity</name></member>
      <member refid="classmty_1_1ModelData_1a688fc6395c0f782390bb69392accd0a0" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>checkValidity</name></member>
      <member refid="classmty_1_1ModelData_1a0c2b848cb5334d752fb94cf36f775037" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>defaultSpaceTime</name></member>
      <member refid="classmty_1_1ModelData_1ac4d923650a12c1c09a84029df16d358b" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doAddBosonicMass</name></member>
      <member refid="classmty_1_1ModelData_1a39d5a1cf3efe1c5962f06f2d241ca134" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doAddBosonicMass</name></member>
      <member refid="classmty_1_1ModelData_1a523989426179bac1d251c73881b1ba80" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doAddFermionicMass</name></member>
      <member refid="classmty_1_1ModelData_1ab4fc99c231534d418a2ef252db61f7ee" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doAddFermionicMass</name></member>
      <member refid="classmty_1_1ModelData_1a43470a5465d906055dc1efc9ff0d8c2f" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doAddFermionicMass</name></member>
      <member refid="classmty_1_1ModelData_1a250711d444eda40e7061613c5ce816e1" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doAddFermionicMass</name></member>
      <member refid="classmty_1_1ModelData_1a1c80d18c8b6e95e01448706a10bbcbe9" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGenerateIndex</name></member>
      <member refid="classmty_1_1ModelData_1a981867ca6196b6636e3b1e42e7974810" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGenerateIndex</name></member>
      <member refid="classmty_1_1ModelData_1ab9b86497cee717653102209820cbbd5b" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGenerateIndex</name></member>
      <member refid="classmty_1_1ModelData_1a0e0822ae0fb5c9f7eab940676e754606" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGetCharge</name></member>
      <member refid="classmty_1_1ModelData_1af546399ca6af2364c782cc8e5f21e952" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGetFlavorIrrep</name></member>
      <member refid="classmty_1_1ModelData_1a911d6da7d89ca5d8bff041b421b0b2fb" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGetFlavorIrrep</name></member>
      <member refid="classmty_1_1ModelData_1acae3d7143d8328e4609d83dd8c71846f" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGetGaugeIrrep</name></member>
      <member refid="classmty_1_1ModelData_1ad06ea6d15f922117a7a1e95b444969bd" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGetGenerator</name></member>
      <member refid="classmty_1_1ModelData_1a016a87bc1b967b361728be7ebf0bb829" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGetGroupIrrep</name></member>
      <member refid="classmty_1_1ModelData_1aa230fa5ecb255729fcc6632c375645ef" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGetVectorSpace</name></member>
      <member refid="classmty_1_1ModelData_1a321bf5399c6ae4f798483ebb777f5f19" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doGetVectorSpace</name></member>
      <member refid="classmty_1_1ModelData_1ad125c237e6e914da9721c1ad2f829cc9" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>doRenameParticle</name></member>
      <member refid="classmty_1_1ModelData_1abe720a28b57178b178de3e4855d61e8d" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>enableChecks</name></member>
      <member refid="classmty_1_1ModelData_1a17a67b688374a2e40d64f91ad6bda449" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>findParticle</name></member>
      <member refid="classmty_1_1ModelData_1a79c1ab7d9d90d32c08b8476c6db903f7" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>findParticle</name></member>
      <member refid="classmty_1_1ModelData_1aa359b5f91dd305c1210f28d63a07e0c9" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>findParticle</name></member>
      <member refid="classmty_1_1ModelData_1a24872bf766f4ae39d8a4bcb29cc42a3c" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>findScalarCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a5b8aa549d956c6f4e589834236506ea8" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>findScalarCoupling</name></member>
      <member refid="classmty_1_1ModelData_1ad9e06ee155bd20ed3704e3b2a4f52de2" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>findTensorCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a6dc8a4ea047f83dc9515ae32b41cdf57" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>findTensorCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a3865ea0eb7512aeb3b4c9671dff2fa2d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>findTensorCoupling</name></member>
      <member refid="classmty_1_1ModelData_1acd2a492afff864e92afce472a0f93521" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>flavor</name></member>
      <member refid="classmty_1_1ModelData_1a4ccbd99905455d694e66450c9534d789" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>gauge</name></member>
      <member refid="classmty_1_1ModelData_1a41a5df4205832ecea06029d8c5279b58" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>gaugeLocked</name></member>
      <member refid="classmty_1_1ModelData_1a16349cd3276352508bafdd62e7d7a2ce" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>generateIndex</name></member>
      <member refid="classmty_1_1ModelData_1a8ef303ba051cba21c0dc414c4f1ec24d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>generateIndex</name></member>
      <member refid="classmty_1_1ModelData_1a0b0bd73816c16ba006e78a48cae72221" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>generateIndex</name></member>
      <member refid="classmty_1_1ModelData_1af4be49688cdb64ec8f30a6c08cd81200" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>generateIndices</name></member>
      <member refid="classmty_1_1ModelData_1a0ceb4e381e41b3268114b581f3e0bcfa" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>generateIndices</name></member>
      <member refid="classmty_1_1ModelData_1a1dd379f5329b6f2fc9387027d722e177" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getCharge</name></member>
      <member refid="classmty_1_1ModelData_1aae5cf459e02428a6af38eaf52e2afb1c" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getFlavor</name></member>
      <member refid="classmty_1_1ModelData_1a45ab5f5b0d1c0cad683ca09f7c3464b9" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getFlavorGroup</name></member>
      <member refid="classmty_1_1ModelData_1ad2a4a0a6f3a1f6ae5c9031e368752b32" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getFlavorGroup</name></member>
      <member refid="classmty_1_1ModelData_1a63830e2ed2cfe83ca88ef543a72910ac" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getFlavorIrrep</name></member>
      <member refid="classmty_1_1ModelData_1aeaf76bf0b8ac08453be1c59668e03167" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getFlavorIrrep</name></member>
      <member refid="classmty_1_1ModelData_1a65b562936453b2e8b523c18038640c9d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getGauge</name></member>
      <member refid="classmty_1_1ModelData_1a21ba3b3aadc1bf88eb0ffeec0c682018" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getGaugedGroup</name></member>
      <member refid="classmty_1_1ModelData_1a728963a7a75d3ed5873f4b0e2479f4e9" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getGaugedGroup</name></member>
      <member refid="classmty_1_1ModelData_1af8628e14853768a183d1ad5e177ceb99" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getGaugeIrrep</name></member>
      <member refid="classmty_1_1ModelData_1a65c7386937937b39a4cc50163d8cd6d8" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getGenerator</name></member>
      <member refid="classmty_1_1ModelData_1a93e89de6711cd85094ec66812b71b94d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getGroup</name></member>
      <member refid="classmty_1_1ModelData_1ae383ca2a22cbbf116003a1081703ecb3" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getGroup</name></member>
      <member refid="classmty_1_1ModelData_1a92bf116fa335300b4e33788bc7b3ceb3" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getGroupIrrep</name></member>
      <member refid="classmty_1_1ModelData_1a9cd11de8be4b70e9272c77001b0ea659" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getLagrangian</name></member>
      <member refid="classmty_1_1ModelData_1ac517a59f16a2ffe7d88a598efa6aebfb" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getParticle</name></member>
      <member refid="classmty_1_1ModelData_1a3e6e949b9e44059344c0e094258c8f96" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getParticle</name></member>
      <member refid="classmty_1_1ModelData_1a4494ade1b345860d21fc07f28f1e4c56" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getParticle</name></member>
      <member refid="classmty_1_1ModelData_1a6a4519ebfcf20b7c1fabad8e358f4a7c" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getParticle</name></member>
      <member refid="classmty_1_1ModelData_1a831fb3bf2be374f46317f25b251a4983" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getParticle</name></member>
      <member refid="classmty_1_1ModelData_1aff328d53055a760ff21a7e11a9cd1d5d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getParticles</name></member>
      <member refid="classmty_1_1ModelData_1a890fa70daad0e3128119b9f01142aa2d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getParticles</name></member>
      <member refid="classmty_1_1ModelData_1a363bea1914658f3e61abba137fc7d1ba" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getPhysicalParticles</name></member>
      <member refid="classmty_1_1ModelData_1a14bf61ee3f7bb3c8f0fddee9bc591a2b" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getScalarCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a72bc59d5ec27b26cfbcabcef426d13df" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getScalarCouplings</name></member>
      <member refid="classmty_1_1ModelData_1ada92944c6d73dc4fd77fb9d9de9a0d50" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getSpaceTime</name></member>
      <member refid="classmty_1_1ModelData_1a8939724bcccf03c671b71dad3d6096c4" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getTensorCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a1b033d00ca5c430001e0867d4dc9a689" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getTensorCoupling</name></member>
      <member refid="classmty_1_1ModelData_1a68555f34a2b4a5131fe1dfddc01f4235" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getTensorCouplings</name></member>
      <member refid="classmty_1_1ModelData_1ad1b358620e5d67d99a3f80726351d43d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getVectorSpace</name></member>
      <member refid="classmty_1_1ModelData_1aa7dee85afb6c11b4d94dda09c72e2d06" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getVectorSpace</name></member>
      <member refid="classmty_1_1ModelData_1aa7dee85afb6c11b4d94dda09c72e2d06" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getVectorSpace</name></member>
      <member refid="classmty_1_1ModelData_1ad1b358620e5d67d99a3f80726351d43d" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>getVectorSpace</name></member>
      <member refid="classmty_1_1ModelData_1a885ea54424b97937a71c63abd73c2f94" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>init</name></member>
      <member refid="classmty_1_1ModelData_1a244e6e94e6b99e553d60662b1edd586c" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>initGaugedGroups</name></member>
      <member refid="classmty_1_1ModelData_1a51776a811cdfb712548bff4e855514fc" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>isEnableChecks</name></member>
      <member refid="classmty_1_1ModelData_1a5461496c1c46165da73c9e3694ea0fef" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>L</name></member>
      <member refid="classmty_1_1ModelData_1a9279185550f1c347a64bfd2a9ebaee00" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>ModelData</name></member>
      <member refid="classmty_1_1ModelData_1a9605a946ea704993e5381d77ad91e7e2" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>ModelData</name></member>
      <member refid="classmty_1_1ModelData_1af46e5e818b74452ba01842e49b1b4e10" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>ModelData</name></member>
      <member refid="classmty_1_1ModelData_1a99247ad3939f38c345c264bf95ae9fde" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>ModelData</name></member>
      <member refid="classmty_1_1ModelData_1aaaa21f39c1b07bebfae1ec8587a77f96" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>ModelData</name></member>
      <member refid="classmty_1_1ModelData_1a912f6cb9f24734d04f0233abe37dc472" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>ModelData</name></member>
      <member refid="classmty_1_1ModelData_1a04d2554b2eb9fae6ac5f2ca285efd691" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>nMomentums</name></member>
      <member refid="classmty_1_1ModelData_1a5e69073b241307be42ece20cd2a86953" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmty_1_1ModelData_1aee7a2e76bc89cf16f8fcb1da025eee90" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>operator=</name></member>
      <member refid="classmty_1_1ModelData_1ae3c6ca1496b911a1c3de257b3b7b9d29" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>operator=</name></member>
      <member refid="classmty_1_1ModelData_1a06e20bc718bb77b006675355d05787a8" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>particles</name></member>
      <member refid="classmty_1_1ModelData_1ac5cd6ae77d018b097251eb12f7c07935" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>printSubPart</name></member>
      <member refid="classmty_1_1ModelData_1aba117d39831cd155a5eaff28e25831c1" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>printSubPart</name></member>
      <member refid="classmty_1_1ModelData_1abaaaa2901d177aaa127bd09a157e78ba" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>printSubPart</name></member>
      <member refid="classmty_1_1ModelData_1a6e6d33a9c6c02c5cb39519967cf2eefd" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>removeParticle</name></member>
      <member refid="classmty_1_1ModelData_1a2358049f9daaa694928dd1d38d6b23ea" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>removeParticle</name></member>
      <member refid="classmty_1_1ModelData_1a4ddc41d1e8f7acca4cad7c974f3503f2" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>removeParticles</name></member>
      <member refid="classmty_1_1ModelData_1a49eb25eba186c9a33c370b5b6e88f12a" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>removeParticles</name></member>
      <member refid="classmty_1_1ModelData_1aaacc3eb8d783277aed06cfd6149948f5" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>renameCoupling</name></member>
      <member refid="classmty_1_1ModelData_1ae29923e3065a1c4e7570f636444b197b" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>renameParticle</name></member>
      <member refid="classmty_1_1ModelData_1aa77a2942da37ead6d4fdba6268ddedf7" prot="public" virt="virtual"><scope>mty::ModelData</scope><name>saveModel</name></member>
      <member refid="classmty_1_1ModelData_1a6d76f38990758e6b375db81a13bb09b8" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>saveModelFile</name></member>
      <member refid="classmty_1_1ModelData_1a16f0fa1899f17a568d5fd4d9a2bf262e" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>saveModelFunction</name></member>
      <member refid="classmty_1_1ModelData_1ab202ad13551a2d282403a3851b72acc7" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>saveModelFunctionWithRef</name></member>
      <member refid="classmty_1_1ModelData_1ac9d4b0f26a093949ea711efe9cfe63a8" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>scalarCouplings</name></member>
      <member refid="classmty_1_1ModelData_1a7d8c765d5c4a94f63d7ad3cab69f3d8b" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>setEnableChecks</name></member>
      <member refid="classmty_1_1ModelData_1a42cbb420a4fe3f3577e928eb96268fc6" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>setFlavor</name></member>
      <member refid="classmty_1_1ModelData_1ab71f9b6d40da88fef4f2615bfdc60b58" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>setGauge</name></member>
      <member refid="classmty_1_1ModelData_1a95fe10e0d9db993173ae43179d1cd72e" prot="public" virt="non-virtual"><scope>mty::ModelData</scope><name>setSpaceTime</name></member>
      <member refid="classmty_1_1ModelData_1a23fe2191603febad5a2fd095d1f7968c" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>spaceTime</name></member>
      <member refid="classmty_1_1ModelData_1af2e3b4ab81d40335e0fa43c21df1cf85" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>tensorCouplings</name></member>
      <member refid="classmty_1_1ModelData_1a284d23de3d1c3a8c00e604853567e800" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>writeDependencies</name></member>
      <member refid="classmty_1_1ModelData_1a3180ccda678296961fd16f5650e86bf2" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>writeFlavor</name></member>
      <member refid="classmty_1_1ModelData_1a8ff38807ea2f31c2e8806a39a819a309" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>writeGauge</name></member>
      <member refid="classmty_1_1ModelData_1a51e3c9853c44b2fb8548b53662de61d4" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>writeHeader</name></member>
      <member refid="classmty_1_1ModelData_1a673ce7f31f5c9c8d03d762b4b7e3483c" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>writeLagrangian</name></member>
      <member refid="classmty_1_1ModelData_1a580945f23a58ab30d9005a36576e5449" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>writeMassAndWidth</name></member>
      <member refid="classmty_1_1ModelData_1a12bc1c99466d35a232ab048e1abe600f" prot="protected" virt="non-virtual"><scope>mty::ModelData</scope><name>writeParticles</name></member>
      <member refid="classmty_1_1ModelData_1a7a3b96a9566e7372990b792cef551025" prot="public" virt="virtual"><scope>mty::ModelData</scope><name>~ModelData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
