''Diagram Grammar'' adalah interface ''[[Channel|Diagram Channel]]'' yang merupakan pewarisan dari ''[[Sequence|Diagram Sequence]]'', dimana ''Diagram Sequence'' adalah pewarisan dari ''[[Flowchart|Diagram Flowchart]]''.

[[<img src=https://user-images.githubusercontent.com/36441664/69475251-72ac4180-0dfd-11ea-9805-7a5ecdb839a5.png>|https://github.com/chetabahana/grammar/wiki]]

__TOC__

==Struktur==

Abstraksi adalah konsep pemindahan fokus dari detail dan implementasi konkret ke operasi yang tersedia sehingga membuat ''[[struktur pemrograman|https://en.wikipedia.org/wiki/Software_architecture]]'' lebih sederhana dan lebih abstrak.

[[<img src=https://user-images.githubusercontent.com/36441664/71183332-65725d80-22aa-11ea-8b3d-98fa0fb7063b.png>|https://koinworks.com/blog/langkah-untuk-membangun-brand-bisnis/]]

Seperti yang sudah dijelaskan pada topik ''[[Diagram#pewarisan|Type Diagram]]'', Diagram Grammar adalah [[Sequence#pewarisan|pewarisan]] dari penelusuran ''[[Diagram#encapsulation|Pola Enkapsulasi]]'' yang dilakukan pada ''[[Sequence#metode|Diagram Sequence]]''. 

[[<img src=https://user-images.githubusercontent.com/36441664/71579452-2f956a80-2b2f-11ea-9b02-f86b92a4af1a.png width=800>|https://www.upwork.com/hiring/development/object-oriented-programming/]]

Sesuai dengan karakternya sebagai [[diagram syntax|https://en.wikipedia.org/wiki/Syntax_diagram]] maka berdasarkan ''[[Diagram#abstraction|Konsep Abstraction]]'' terpilih diagram yang digunakan untuk [[visualisasi abstrak|https://sap.github.io/chevrotain/diagrams_samples/json.html]] dari ''[[Pola Kerja|https://github.com/MarketLeader/marketleader.github.io/wiki]]'' sebagai ''[[Sequence#identifikasi|warisan]]'' dari [[Sequence|Diagram Sequence]] dengan menggunakan pustaka javascript: ''[[Grammar#lexer|Lexer]]'' dan ''[[Grammar#parser|Parser]]''. 

[[<img src=https://user-images.githubusercontent.com/36441664/70385860-e5074f00-19c3-11ea-92f3-ec6f33bf9774.png width=700>|https://tomassetti.me/parsing-in-javascript/]]

Diagram ini akan kita ''[[18#Diagram|alokasikan]]'' dengan '''''id: 59''''' yang akan berfungsi dalam mengungkap benteng ''komunikasi rahasia'' yang tersirat secara abstrak dalam komposisi bilangan² prima pada '''''[[58#Pola|id: 58]]'''''.

[[18#Diagram|<img src=https://user-images.githubusercontent.com/36441664/69475248-6cb66080-0dfd-11ea-9fa4-56cb43bc668a.png>]]

Pada sesi ini kita akan batasi pembahasan kedalam penggunaan diagram ini saja, mengenai detil [[paketnya|https://github.IIcom/chetabahana/grammar]] akan dibahas terpisah dibagian [[dokumentasi repository |https://github.com/chetabahana/grammar/wiki]] terkait.  

===Model===
* Secara [[Diagram#etimologi|Etimology]] Diagram Grammar mengacu ke ''[[Sequence|Diagram Sequence]]''
* Secara [[Diagram#terminologi|Terminology]] memiliki 3 (tiga) turunan: ''[[Grammar#lexer|Lexer]]'', ''[[Grammar#parser|Parser]]'', dan ''[[Grammar#visual-abstraction|Syntax Tree]]''
* Secara [[Diagram#kaidah-kognitif|Kaidah Kognitif]] mengacu ke [[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]] dengan jumlah total: ''[[Grammar#identifikasi|20 pewarisan]]''

[[Sequence|<img src=https://user-images.githubusercontent.com/36441664/70515089-516e8380-1b67-11ea-8dc4-8b38048d9f33.png>]]

Pewarisan ini akan digunakan sebagai interface dari ''[[Channel#metode|Diagram Channel]]'' guna penelusuran class dengan ''[[Diagram#polymorphism|Polymorphism]]''. 

[[<img src=https://user-images.githubusercontent.com/36441664/69991542-787ef100-157a-11ea-85d5-20907c99b5d7.png width=800>|https://github.com/MarketLeader/Tutorial-Buka-Toko/wiki]]

====Limit====
* [[ Abstraction Introduction to jQuery Syntax|https://www.slideshare.net/bobrenjc93/lesson-203-18-sep131500ay]]

Ketika mengenkapsulasi maka implementasi ke ''[[Sequence|Diagram Sequence]]'' hanya menunjukkan urutan dan definisi dari [[Pola Kerja|https://github.com/MarketLeader/marketleader.github.io/wiki]], berarti konsep nya adalah menyembunyikan detail.  

Untuk mengatur [[Grammar#identifikasi|identifikasi]] dari proses penelusuran tersebut maka berdasarkan ''[[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]]'' pada Diagram Grammar ini dilakukan [[Grammar#konfigurasi|konfigurasi]] terhadap instance dari ''[[Diagram#abstraction|Pola Abstraction]]''. 

[[<img src=https://user-images.githubusercontent.com/36441664/71636347-24425c00-2c61-11ea-952c-bd219b086d7a.png width=600>|https://github.com/chetabahana/chetabahana.github.io/files/4013629/Translator.notasi.algoritmik.untuk.pengajaran.pemrograman-dasar.pdf]]

Contoh pada ''Diagram Grammar'' sebenarnya ''[[Diagram#abstraction|penelusuran]]'' dilakukan menggunakan detail dari ''[[Grammar#lexer|Lexer]]'' dan ''[[Grammar#parser|Parser]]''. Informasi ini ditunjukkan (tidak disembunyikan), tetapi ''[[Grammar#jalankan-parser|dikemas]]'' dan ''[[Grammar#visual-abstraction|diperlihatkan secara Abstrak]]'' dengan menggunakan diagram.

[[<img src=https://user-images.githubusercontent.com/36441664/71648180-c599e280-2d33-11ea-94e0-9a8552c72bd7.png width=400>|https://pdfs.semanticscholar.org/1138/2d506fe9065ffc456b0e7aaf4bd4a52315c3.pdf]]

====Range====

* [[Implementation Languages: ECMAScript, TypeScript, CoffeeScript |https://github.com/SAP/chevrotain/tree/master/examples/implementation_languages#implementation-languages-examples]]  

Bahasa terbagi menjadi dua jenis yaitu ''[[Bahasa Natural|https://en.wikipedia.org/wiki/Natural_language]]'' dan ''[[Bahasa Formal|https://en.wikipedia.org/wiki/Formal_language]]''. Secara [[Diagram#terminologi|terminologi]], ''bahasa formal'' dapat diuraikan dengan suatu prosedur berupa aturan ([[metalanguage|https://en.wikipedia.org/wiki/Metalanguage]]) yang terdiri dari dua bagian yang disebut dengan ''[[context-free languages|https://en.wikipedia.org/wiki/Context-free_language]]'' and ''[[regular languages|https://en.wikipedia.org/wiki/Regular_language]]''.   

<br>Produk dari prosedur ini disebut dengan Tata bahasa (''[[Grammar|https://en.wikipedia.org/wiki/Grammar]]''). Dalam ''[[Bahasa Pemrograman|https://en.wikipedia.org/wiki/Programming_language]]'' produk dari prosedur ini disebut dengan ''[[Syntax|https://en.wikipedia.org/wiki/Syntax]]''. Sedangkan aturannya disebut ''[[Metasyntax|https://en.wikipedia.org/wiki/Metasyntax]]''.    

===Layout===

* [[Supported EBNF Grammar|https://github.com/rdking/chevrotain-ebnf#supported-ebnf-grammar]]  

Tata bahasa (Grammar) adalah seperangkat aturan untuk dalam menata kata dalam bahasa formal.  

Senada dengan teori bahasa, maka jenis grammar yang terpenting adalah ''[[context-free grammars|https://en.wikipedia.org/wiki/Context-free_grammar]]'' and ''[[regular grammars|https://en.wikipedia.org/wiki/Regular_grammar]]''.  

Context-free grammars adalah yang dipakai untuk ''[[Grammar#syntax|membuat syntax]]'' dalam membangun suatu ''[[algoritma|https://en.wikipedia.org/wiki/Algorithm]]''. Formasi yang banyak digunakan adalah ''[[Backus – Naur Form (BNF)|https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form]]''.  

Dalam project ini kita akan gunakan ''[[EBNF|https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form]]'' yaitu salah satu keluarga notasi ''Metasyntax BNF'' yang digunakan untuk mengekspresikan (visualisasi) dari Context-free_grammars.  
```
grammar = rule, newline;
rule = lhs, [ ws ], "=", rhs, ";";
lhs = identifier;
rhs = [ [ ws ], alternation, [ ws ], { ",", [ ws ], alternation, [ ws ] } ];
alternation = [ [ ws ], element, [ ws ], { "|", element, [ ws ] } ];
element = optional | repeated | group | terminal | identifier;
optional = "[", [ ws ], rhs, [ ws ], "]";
repeated = "{", [ ws ], rhs, [ ws ], "}";
group = "(", [ ws ], rhs, [ ws ], ")";
terminal = dq_string | sq_string;
dq_string = '"', dq_string_char, '"';
sq_string = "'", sq_string_char, "'";
dq_string_char = "'" | character;
sq_string_char = '"' | character;
identifier = letter, { identifier_character };
identifier_character = "_" | letter | digit;
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L"
       | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X"
       | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
       | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v"
       | "w" | "x" | "y" | "z";
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
character = "[" | "]" | "{" | "}" | "(" | ")" | "|" | "," | "=" | ";"
          | symbol | newline | ws | identifier_character;
symbol = "~" | "`" | "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "-" | "+"
       | "\" | ":" | "<" | ">" | "?" | "." | "/";
newline = { [ "\r" ], "n" };
ws = { "\t" | " " };
```
; Bash-util
: Koleksi [[utilitas Bash|https://github.com/igncp/bash-utils]] menggunakan [[chevrotain|https://github.com/igncp/bash-utils/search?q=chevrotain&unscoped_q=chevrotain]] dan [[eslint-plugin-bashutils|https://github.com/chetabahana/bash-utils/blob/e0f1062a66a02af6b42a6502b0f0d7d9f9a5dc09/package.json#L36]] untuk [[display|https://bash-utils.netlify.com/]] dari [[grammar|https://chetabahana.github.io/bash/grammar.html]] bash.

; CoffeScript
: [[Implementation Languages Examples|https://github.com/chetabahana/grammar/tree/master/examples/implementation_languages#implementation-languages-examples]]

; VRML Loader
: [[VRML|https://en.wikipedia.org/wiki/VRML]] (Virtual Reality Modeling Language, diucapkan vermal atau dengan inisialnya, awalnya — sebelum 1995 — dikenal sebagai Virtual Reality Markup Language) adalah format file standar untuk mewakili [[grafik vektor|https://en.wikipedia.org/wiki/Vector_graphics]] interaktif [[3-dimensi (3D)|https://en.wikipedia.org/wiki/3-D_computer_graphics]], yang dirancang khusus dengan World Wide Web. Saat ini VRML akan digantikan oleh [[X3D|https://en.wikipedia.org/wiki/X3D]].

====Chart====

* [[ES - ECMAScript|https://en.wikipedia.org/wiki/ECMAScript]] & [[ES2015+ cheatsheet|https://devhints.io/es6]]
* [[Node.js - ES server applications and services|https://en.wikipedia.org/wiki/Node.js]]

[[<img src=https://user-images.githubusercontent.com/36441664/71636011-18ed3180-2c5d-11ea-9cf8-e126885df92a.png width=400>|https://www.researchgate.net/publication/329374090_Solon_A_Holistic_Approach_for_Modelling_Managing_and_Mining_Legal_Sources]]

====Format====

* [[Tutorial runnable source code|https://github.com/SAP/chevrotain/tree/master/examples/tutorial#tutorial-runnable-source-code]]

```sql
SELECT column1 FROM table2
SELECT name, age FROM persons WHERE age > 10
```

===Hirarki===

* [[Custom Token Patterns|https://sap.github.io/chevrotain/docs/guide/custom_token_patterns.html]]
```sql
const createToken = chevrotain.createToken

// using createToken API
const Select = createToken({
    name: "Select",
    pattern: /SELECT/,
    longer_alt: Identifier
})
const From = createToken({
    name: "From",
    pattern: /FROM/,
    longer_alt: Identifier
})
const Where = createToken({
    name: "Where",
    pattern: /WHERE/,
    longer_alt: Identifier
})

```
====Formasi====

```js
// note we are placing WhiteSpace first as it is very common thus it will speed up the lexer.
let allTokens = [
    WhiteSpace,
    // "keywords" appear before the Identifier
    Select,
    From,
    Where,
    Comma,
    // The Identifier must appear after the keywords because all keywords are valid identifiers.
    Identifier,
    Integer,
    GreaterThan,
    LessThan
]
let SelectLexer = new Lexer(allTokens)

let inputText = "SELECT column1 FROM table2"
let lexingResult = SelectLexer.tokenize(inputText)
```

====Diagram====

==Metode==

[[https://user-images.githubusercontent.com/36441664/70721601-75c58e00-1d28-11ea-8329-d780c27ee7bd.png]]

[[https://user-images.githubusercontent.com/36441664/69497959-189e9f80-0f15-11ea-86bd-457378ca7567.png]]

===Proses===

* [[Defining the Prime Hexagon|http://www.hexspin.com/defining-the-prime-hexagon/]]
* [[Pythagorean Right-Angled Triangles|http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Pythag/pythag.html#section12.5.1]]

Berikut ini kita bahas hubungan ''[[114]]'' dengan ''[[168]]'' dan ''[[618]]''.

<br>[[Programming#implementasi|<img src=https://user-images.githubusercontent.com/36441664/72317282-4e693480-36cb-11ea-841a-039577713292.png width=200>]]

Hubungan antara ''[[19|sembilanbelas (19)]]'' ke sistem formasi ''[[114]]'' via bilangan ''[[24|duapuluhempat (24)]]'' dapat digambarkan seperti ''[[2|dua (2)]]'' segitiga yang berbentuk bintang dengan ''[[6|enam (6)]]'' sudut.

```
48
└── 4 + 8 = 12
            └── 1 + 2 = 3
---
48 = dr(3)
```

Hubungan antara ''[[19|sembilanbelas (19)]]'' ke sistem formasi ''[[114]]'' via bilangan ''[[12|duabelas (12)]]'' dapat digambarkan seperti ''[[7|tujuh (7)]]'' hexagon dengan ''[[6|enam (6)]]'' sudut seperti berikut ini:

[[<img src=https://user-images.githubusercontent.com/36441664/72343976-be46e180-3702-11ea-9ee7-7702885113ee.png width=250>|https://www.researchgate.net/publication/1879239_Criticality_in_quantum_triangular_antiferromagnets_via_fermionized_vortices]]

Pada bentuk ''[[108#khusus|pentagram]]'' akan terdapat hubungan ''[[618]]'' dengan angka ''[[108]]''.
```
108 = 6²+6²+6² = 36 + 36 + 36
                           └── 9:9:9 = 27

9→81→63→27→45→9

99² = 9801
      └── 98 + 01 = 99

99 = 124875(142857)
```
[[<img src=https://user-images.githubusercontent.com/36441664/72744772-cb6f3f00-3be0-11ea-8972-7937037469d9.jpg width=300>|https://id.pinterest.com/khinen47/mystical-numbers/]]

Faktorisasi dengan angka prima ''[[37]]'' akar muncul akar digital vortex: ''3, 6, 9''.

[[<img src=https://user-images.githubusercontent.com/36441664/72610344-b16ffb00-3959-11ea-9cb4-babd94260772.png width=300>|https://www.internalstargate.com/3-6-9.html]]

Faktorisasi dengan angka composite ''[[18]]'' akar muncul hubungan segitiga: ''[[48]]'', ''[[60]]'', ''[[108]]''.

```
3,6,9

3 x 37 = 111
6 x 37 = 222
9 x 37 = 333
------------ +
         666

48 => dr(3) 3 x 37 = 111
60 => dr(6) 6 x 37 = 222
108 => dr(9) 9 x 37 = 333

(6+6+6)×37 = 666 = 111 + 222 + 333
3 + 6 + 9 = 18 => dr(18) 18 x 37 = 666
```
Setelah ditelusuri lebih lanjut ternyata formasi ''[[168]]'' ada pada proses ''[[distribusi bilangan prima|https://www.primesdemystified.com/magicmatrix.html]]'' yang menghasilkan diagram berikut. 

<br>[[<img src=https://user-images.githubusercontent.com/36441664/72171549-ca325b00-3405-11ea-866f-633c6ddf2232.jpg>|https://www.primesdemystified.com/magicmatrix.html]]

Kontras dengan π(1000)=168 maka diagram ini adalah hasil dari pendistribusian π(89²) = 1000. Dimana jika dijumlahkan akar digitalnya:

```
dr(3) + dr(6) = 48 + 60 = 108
dr(6) + dr(9) = 60 + 108 = 168
```

Dengan demikian formasi dari angka ''[[168]]'' dan ''[[618]]'' ini adalah juga representasi dari distribusi bilangan prima akan tetapi dalam bentuk saling berpasangan atau berkaitan.

[[#|<img src=https://user-images.githubusercontent.com/36441664/82712459-2f4e6500-9cb2-11ea-83fb-7251cf773bcc.jpg width=400>]]

Semua gugus ini membentuk ''Sistem DNA'' masing² dalam konfigurasi ''[[4|empat (4)]]'' pasang dengan struktur utama ''[[3|tiga (3)]]'' layar hexagon:
```
Bases (yellow) :
60 = 9 x 4 + 6 x 4 = 36 + 24

Sugar (red):
48 = 8 x 5 + 8 x 1 = 40 + 8

Sistem (center layers hexagon):
114 = 6 + 48 + 60
```

Jumlahnya ''[[114]]'' cocok dengan angka kunci ketiga..<br>
Selanjutnya kita sebut saja formasi ini sebagai ''[[Method#korelasi|formasi 1-1-4]]''

Anda lihat ''[[Method#korelasi|formasi 1-1-4]]'' pada kombinasi ini dibentuk dari gabungan angka ''[[48]]'' dan ''[[60]]'' dengan angka ''[[6|enam (6)]]'' yang disini berfungsi secara unit hexagon sebagai pengatur dan penyimpan informasi genetik dari semua proses.

Karena ''[[168]]'' dan ''[[618]]'' sendiri adalah juga representasi dari suatu distribusi bilangan maka sistemnya dapat kita duga sebagai bagian dari suatu ''[[Programming#faktorisasi|konfigurasi]]'' yang sangat kompleks.

Berikutnya kita lihat ''[[12#khusus|peta composite & prime]]''.<br>
Entah kebetulan atau tidak, sedikit banyak ada korelasi. Coba simak kalimat berikut:  

''<blockquote><b>The number 4 multiplies itself trough the system as a Equilateral Triangles</b>. It bounces from position 4, 8, and 12. All multiplies of 4 are found in these positions (Red: illustrated by a triangle covering number 4).</blockquote>''

Disini Anda bisa melihat bahwa angka ''[[4|empat (4)]]'' disebar dalam bentuk sebagai segitiga yang pada proses di atas ini dibentuk secara keseluruhan dengan ''[[Method#korelasi|formasi 1-1-4]]''.

Sampai disini kita sudah menentukan metoda untuk kunci ketiga yaitu '''''[[114]]'''''.

====Scope====

Pada ''Sistem DNA'' konfigurasi ini dapat ditunjukkan dengan proses dari bangun [[strukturnya|https://en.wikipedia.org/wiki/Nucleic_acid_double_helix]] sendiri.

[[<img src=https://user-images.githubusercontent.com/36441664/75617590-b7314100-5b93-11ea-926f-fc01910cbd11.png>|http://wanenoor.blogspot.com/2011/11/sentral-dogma-biologi-pengertian-gen.html#.XlsKdiH7Tcc]]

Warna kuning mewakili gugus ''[[Nitrogen|https://en.wikipedia.org/wiki/Nitrogenous_base]]'' yang dinamakan [[Adenine (A)|https://en.wikipedia.org/wiki/Adenine]], [[Guanine (G)|https://en.wikipedia.org/wiki/Guanine]], [[Cytosin (C)|https://en.wikipedia.org/wiki/Cytosine]],  dan [[Thymin (T)|https://en.wikipedia.org/wiki/Thymine]]. 

[[<img src=https://user-images.githubusercontent.com/36441664/75627425-9b18b880-5c02-11ea-97e5-7beb774079a7.png>|https://kamriantiramli.wordpress.com/2011/04/19/struktur-dna/]]

Struktur ''C'' dan ''T'' yang berbentuk hexagon dibangun dengan ''[[6|enam (6)]]'' ikatan:

<table>
<tr><td>[[<img src=https://user-images.githubusercontent.com/36441664/75627356-fac29400-5c01-11ea-9502-6da84f8966ba.png>|https://en.wikipedia.org/wiki/Cytosine]]</td><td>[[<img src=https://user-images.githubusercontent.com/36441664/75627361-001fde80-5c02-11ea-8e0a-e6cf1f480265.png>|https://en.wikipedia.org/wiki/Thymine]]</td></tr>
</table>

Struktur ''A'' dan ''G'' dengan bentuk gabungan hexagon dan segilima dibangun dengan ''[[9|sembilan (9)]]'' ikatan:

<table>
<tr><td>[[<img src=https://user-images.githubusercontent.com/36441664/75627334-c353e780-5c01-11ea-864c-ea4c50525394.png>|https://en.wikipedia.org/wiki/Adenine]]</td><td>[[<img src=https://user-images.githubusercontent.com/36441664/75627348-e7afc400-5c01-11ea-94be-c536e4becedc.png>|https://en.wikipedia.org/wiki/Guanine]]</td></tr>
</table>

Warna merah mewakili gugus yang dinamakan polinukletida. Strukturnya dibangun dengan kombinasi gula dengan ''[[5|lima (5)]]'' ikatan berbentuk segilima dan fosfat dengan ''[[1|satu (1)]]'' grup ikatan tanpa bentuk khusus.

[[<img src=https://user-images.githubusercontent.com/36441664/75627553-b7692500-5c03-11ea-8b1b-5a04d76a3931.png>|https://fikrikamal.com/struktur-dna/]]

Semua gugus ini membentuk ''Sistem DNA'' masing² dalam konfigurasi ''[[4|empat (4)]]'' pasang dengan struktur utama ''[[3|tiga (3)]]'' layar hexagon:
```
Bases (yellow) :
60 = 9 x 4 + 6 x 4 = 36 + 24

Sugar (red):
48 = 8 x 5 + 8 x 1 = 40 + 8

Sistem (center layers hexagon):
114 = 6 + 48 + 60
```

====Extend====
===Synergy===
====Simetri====
====Typical====

===Matriks===

* [[CONSUME|https://sap.github.io/chevrotain/documentation/6_5_0/classes/cstparser.html#consume]] - ambil Token.
* [[SUBRULE|https://sap.github.io/chevrotain/documentation/6_5_0/classes/cstparser.html#subrule]]  - referensi ke aturan lain.
* [[OR|https://sap.github.io/chevrotain/documentation/6_5_0/classes/cstparser.html#or]]  - Alternatif
* [[OPTION|https://sap.github.io/chevrotain/documentation/6_5_0/classes/cstparser.html#option]]  - produksi opsional
* [[MANY|https://sap.github.io/chevrotain/documentation/6_5_0/classes/cstparser.html#many]]  - repetisi nol atau lebih
* [[AT_LEAST_ONE|https://sap.github.io/chevrotain/documentation/6_5_0/classes/cstparser.html#at_least_one]]  - pengulangan satu atau lebih
* [[MANY_SEP|https://sap.github.io/chevrotain/documentation/6_5_0/classes/cstparser.html#many_sep]]  - pengulangan (nol atau lebih) dengan pemisah antara dua item
* [[AT_LEAST_ONE_SEP|https://sap.github.io/chevrotain/documentation/6_5_0/classes/cstparser.html#at_least_one_sep]]  - pengulangan (satu atau lebih) dengan pemisah antara dua item

Grammar:
```js
selectStatement
   : selectClause fromClause (whereClause)?
```
Grammar Rule:
```js
// selectStatement

const $ = this
$.RULE("selectStatement", () => {
    $.SUBRULE($.selectClause)
    $.SUBRULE($.fromClause)
    $.OPTION(() => {
        $.SUBRULE($.whereClause)
    })
})
```

====Layout====
```js
const { CstParser } = require("chevrotain")
const allTokens = [
    WhiteSpace,
    Select,
    From,
    Where,
    Comma,
    Identifier,
    Integer,
    GreaterThan,
    LessThan
]

class SelectParser extends CstParser {
    constructor() {
        super(allTokens)

        const $ = this

        $.RULE("selectStatement", () => {
            $.SUBRULE($.selectClause)
            $.SUBRULE($.fromClause)
            $.OPTION(() => {
                $.SUBRULE($.whereClause)
            })
        })

        this.performSelfAnalysis()
    }
}
```

Output akan berupa visual abstrak yang dikenal dengan istilah [[Abstract syntax tree (AST)|https://en.wikipedia.org/wiki/Abstract_syntax_tree]]

[[<img src=https://user-images.githubusercontent.com/36441664/69475251-72ac4180-0dfd-11ea-9805-7a5ecdb839a5.png>|https://chetabahana.github.io/grammar/playground/]]

Dalam ilmu komputer, Abstract syntax tree (AST), atau hanya syntax tree, adalah [[representasi pohon|https://en.wikipedia.org/wiki/Parse_tree]] dari struktur ''[[sintaksis abstrak|https://en.wikipedia.org/wiki/Abstract_syntax]]'' dari [[kode sumber|https://en.wikipedia.org/wiki/Source_code]] yang ditulis dalam [[Grammar#language|bahasa pemrograman]]. Setiap simpul pohon menunjukkan konstruksi yang terjadi dalam kode sumber.

====Dimensi====

* [[Translator notasi algoritmik untuk pengajaran pemrograman-dasar|https://docplayer.info/29818215-Translator-notasi-algoritmik-untuk-pengajaran-pemrograman-dasar.html]]

[[<img src=https://user-images.githubusercontent.com/36441664/71577336-51d6ba80-2b26-11ea-9362-ed0d169dc2e2.png width=800>|https://openjfx.io/]]

GAST (Grammar AST) data structure:

* [[Rule|https://sap.github.io/chevrotain/documentation/6_5_0/classes/rule.html]]
* [[Terminal|https://sap.github.io/chevrotain/documentation/6_5_0/classes/terminal.html]]
* [[NonTerminal|https://sap.github.io/chevrotain/documentation/6_5_0/classes/nonterminal.html]]
* [[Alternation|https://sap.github.io/chevrotain/documentation/6_5_0/classes/alternation.html]]
* [[Option|https://sap.github.io/chevrotain/documentation/6_5_0/classes/option.html]]
* [[Repetition|https://sap.github.io/chevrotain/documentation/6_5_0/classes/repetition.html]]
* [[RepetitionWithSeparator|https://sap.github.io/chevrotain/documentation/6_5_0/classes/repetitionwithseparator.html]]
* [[RepetitionMandatory|https://sap.github.io/chevrotain/documentation/6_5_0/classes/repetitionmandatory.html]]
* [[RepetitionMandatoryWithSeparator|https://sap.github.io/chevrotain/documentation/6_5_0/classes/repetitionmandatorywithseparator.html]]
* [[Flat (sequence)|https://sap.github.io/chevrotain/documentation/6_5_0/classes/flat.html]]

==Interaksi==
* [[resolveGrammar|https://sap.github.io/chevrotain/documentation/6_5_0/globals.html#resolvegrammar]]
* [[validateGrammar|https://sap.github.io/chevrotain/documentation/6_5_0/globals.html#validategrammar]]
* [[assignOccurrenceIndices|https://sap.github.io/chevrotain/documentation/6_5_0/globals.html#assignoccurrenceindices]]

===Internal===
* [[generateParserModule|https://sap.github.io/chevrotain/documentation/6_5_0/globals.html#generateparsermodule]]
* [[generateParserFactory|https://sap.github.io/chevrotain/documentation/6_5_0/globals.html#generateparserfactory]]
* [[Automatic Concrete Syntax Tree Creation|https://sap.github.io/chevrotain/docs/guide/concrete_syntax_tree.html]]
[[<img src=https://user-images.githubusercontent.com/36441664/69477361-f115dd00-0e17-11ea-84fc-a00b711f0299.png>|https://sap.github.io/chevrotain/performance/]]

====Standar====
* [[Writing your own programming language and compiler with Python|https://blog.usejournal.com/writing-your-own-programming-language-and-compiler-with-python-a468970ae6df]]
[[<img src=https://user-images.githubusercontent.com/36441664/71188582-ce120800-22b3-11ea-9977-5c1254a687ba.png>|https://www.red-gate.com/simple-talk/blogs/how-to-get-sql-railroad-diagrams-from-msdn-bnf-syntax-notation/]]

[[<img src=https://user-images.githubusercontent.com/36441664/71658656-7f667280-2d77-11ea-865a-4c0008e52bab.png width=800>|https://www.researchgate.net/figure/Typical-architecture-of-web-application-A-typical-three-tier-architecture-of-web_fig6_311066197]]


====Proporsi====
* [[Creating Custom Parsing APIs|https://sap.github.io/chevrotain/docs/guide/custom_apis.html#grammar-validations]]
* [[JavaScript Parsing Libraries Benchmark|https://sap.github.io/chevrotain/performance/]]
[[<img src=https://user-images.githubusercontent.com/36441664/71636056-bc3e4680-2c5d-11ea-81d9-2fd77b0212b5.png width=800>|https://onlinelibrary.wiley.com/doi/full/10.1002/spe.2421]]

Pada bagian ini kita akan bahas tentang detil [[Grammar#pewarisan|pewarisan]] dari Diagram Grammar berikut dengan [[Grammar#instantiation|instantiation]] dan [[Grammar#implementasi|implementasinya]].  

[[<img src=https://user-images.githubusercontent.com/36441664/69475449-ce77ca00-0dff-11ea-964e-cc959db0740a.png>|https://chetabahana.github.io/#chetabahana-skema?pad=3]]

===Interface===
* [[What is polymorphism in Javascript?|https://stackoverflow.com/a/40816947/4058484]]
Sesuai [[Grammar#metode|metode]] di atas maka Diagram Grammar akan berlaku sebagai interface dari ''[[Diagram#polymorphism|Pola Abstraction]]''. Pewarisan ke ''[[Channel|Diagram Channel]]'' dilakukan via [[Grammar#identifikasi|identifikasi]] berdasarkan pola ''[[Diagram#polymorphism|Pola Polymorphism]]'':  

[[<img src=https://user-images.githubusercontent.com/36441664/69991227-e4ad2500-1579-11ea-8b4a-ff5a5c8aa61f.png>|https://github.com/chetabahana/channel/wiki]]

Polymorphism dapat berarti banyak bentuk, yaitu kita dapat menimpa (override) suatu method, yang berasal dari parent class (super class) dimana object tersebut diturunkan, sehingga memiliki kelakuan yang berbeda. 

Dalam konsep yang lebih umum sering kali polymorphism disebut dalam istilah satu interface banyak aksi.

Dapat menggunakan kelas-kelas yang kita buat (sebagai super kelas) dan membuat subkelas baru berdasar superkelas tersebut dengan karakteristik yang lebih khusus dari behaviour umum yang dimiliki superkelas.  

[[<img src=https://user-images.githubusercontent.com/36441664/71574482-71b4b100-2b1b-11ea-857e-28ecc51f4171.png width=600>|http://www.sts.rpi.edu/public_html/lynchm2/Courses/WDB-common/ThreePillars/OOP-5.html]]

Subkelas-subkelas dari kelas ini yang disebut kelas konkret, mengimplementasikan behaviuor abstrak tersebut sesuai dengan kebutuhan masing-masing.

Dapat membuat super kelas yang hanya mendefinisikan behaviuor namun tidak memberikan implementasi dari metode-metode yang ada. Hal ini berguna jika ingin membuat template kelas, kelas ini disebut kelas abstrak karena behaviournya masih abstrak dan belum diimplementasikan.

[[<img src=https://user-images.githubusercontent.com/36441664/71193012-f271e280-22bb-11ea-94d0-93e69a6e5e41.png width=400>|https://tutorial.eyehunts.com/java/java-polymorphism-definition-type-example/]]

Menghindari duplikasi object, yang dapat menciptakan class baru dari class yang sudah ada, sehingga tidak perlu menuliskan code dari nol ataupun mengulangnya, namun tetap bisa menambahkan attribute dan atau method unik dari class itu sendiri.

[[<img src=https://user-images.githubusercontent.com/36441664/71574882-403ce500-2b1d-11ea-9c3c-71798857e703.png>|https://www.drupal.org/project/oop_examples]]

====Kategori====
* [[MVC-3DC: Software architecture model for designing collaborative augmented reality|https://www.sciencedirect.com/science/article/pii/S1319157819302320]]
Sesuai ''[[Diagram#piramida|prinsip dasar piramida]]'' maka [[Sequence#delegasi|delegasi]] dan [[Sequence#instantiate|Interaksi]] dari Diagram Grammar akan diproses berdasarkan [[Diagram#polymorphism|Konsep Polymorphism]].  

[[<img src=https://user-images.githubusercontent.com/36441664/71638159-fd991b00-2c8a-11ea-8126-2def9dc3eb92.png width=400>|https://www.semanticscholar.org/paper/Automatic-Source-Code-Generation-for-Web-based-Hoyos-Restrepo-Calle/230e742c0b36d0dbc9bf547bc5a708ce3dbcffb0]]<br>
Guna mengeksplorasi tentang sifat-sifat abstrak instance secara lebih sederhana maka sesuai yang telah dijelaskan, sebelumnya perlu dilakukan ''[[Diagram#optimasi|optimasi]]'' dengan memodelkan tipe dan struktur modul secara ''[[Monomorphism|https://en.wikipedia.org/wiki/Monomorphism]]''.

[[<img src=https://user-images.githubusercontent.com/36441664/71700233-e32f8080-2df5-11ea-9221-f5475da9a8ef.jpg width=500>|https://slideplayer.com/slide/4550296/]]

Cakupan dari masing² ''Tier'' dapat diuraikan sebagai berikut:
# Presentation tier, mencakup ''Model'', ''Viewers'' dan ''Controller''
# Bussines Logic tier, mencakup ''Lexer'', ''Parser'' dan ''Syntax Tree''
# Data layer atau library, mencakup ''Database'', ''Tree bank'' dan ''Storage''  

[[<img src=https://user-images.githubusercontent.com/36441664/71641287-cc8d0a80-2ccb-11ea-8f42-1e96f2eb7efd.png width=600>|https://howtodoinjava.com/interview-questions/spring-mvc-interview-questions-with-answers/]]  

Pemodelan yang diterapkan adalah dengan metode ''[[Model-View-Controller|https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]]'' seperti terlihat pada gambar berikut.

[[<img src=https://user-images.githubusercontent.com/36441664/71280712-9461ff80-238e-11ea-87f3-a877d006df13.png>|https://id.wikipedia.org/wiki/MVC]]  

''Model-View-Controller'' atau MVC adalah sebuah metode untuk membuat sebuah aplikasi dengan memisahkan data (Model) dari tampilan (View) dan cara bagaimana memprosesnya (Controller).

# ''Model'' mewakili struktur data. Biasanya model berisi fungsi-fungsi yang membantu seseorang dalam pengelolaan basis data seperti memasukkan data ke basis data, pembaruan data dll
# ''Viewers'' adalah bagian yang mengatur tampilan ke pengguna berupa halaman web.
# ''Controller'' merupakan bagian yang menjembatani model dan view. Controller berisi perintah-perintah yang berfungsi untuk memproses suatu data dan mengirimkannya ke halaman web

; Tier
: Layer disusun mengikuti konsep ''[[Three Tier Architecture|https://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture]]'':
# <code>tier1</code>: presentation layer, direpresentasikan oleh ''Viewer''
# <code>tier2</code>: bussines logic layer, direpresentasikan oleh ''Controller''
# <code>tier3</code>: data access layer atau library, direpresentasikan oleh ''Model''  

: [[<img src=https://user-images.githubusercontent.com/36441664/71648257-021a0e00-2d35-11ea-9ce9-a52cdcd2d1ef.jpg>|https://www.codeguru.com/cpp/cpp/implementing-an-mvc-model-with-the-qt-c-framework.html]]

; Layer
: Hubungan antar tiap ''Layer'' dapat diuraikan sebagai berikut:
* ''Viewer'' hanya mengatur tampilan via logic/rules, prosesnya dilakukan via ''Controller''
* ''Model'' hanya mewakili data atau library, tidak mencakup ''process'' seperti halnya ''Controller''
* Interaksi antara ''Viewer'' dan ''Model'' ke masing² <code>tier1</code>, <code>tier2</code>, dan <code>tier3</code> adalah via ''Controller'' 

: Sesuai [[Grammar#metode|Pola Abstraction]] yang menekankan visualisasi dari setiap object maka pola identifikasi model diberlakukan untuk setiap object pada pewarisan dari ''[[Sequence#identifikasi|Diagram Sequence]]'' dan disetel untuk fokus ke pola dari ''[[Flowchart|Diagram Flowchart]]'':

: [[Grammar#identifikasi|<img src=https://user-images.githubusercontent.com/36441664/70704661-0be7bd00-1d05-11ea-9056-5faad2b21c91.png>]]

; Model
: Dengan demikian Model disusun berdasarkan pola dari yang mewakili struktur data:
# <code>model1</code>: hanya proses alir atau simpan data (<code>start</code> / <code>end</code>)
# <code>model2</code>: proses satu input dan satu output (<code>input</code> / <code>output</code>)
# <code>model3</code>: dua input dan satu output (<code>sub input</code> / <code>sub output</code> / <code>fix input</code>)
# <code>model4</code>: satu input dan dua output (<code>uji input</code> / <code>uji hasil</code> / <code>fix output</code>)
# <code>model5</code>: proses data dari/ke ''Viewer''
# <code>model6</code>: proses data dari/ke ''Controller''

; Viewer
: Viewer disusun mengikuti konsep ''Model-View-Controller'':
# <code>viewer1</code>: proses data dari/ke <code>model1</code>
# <code>viewer2</code>: proses data dari/ke <code>model2</code>
# <code>viewer3</code>: proses data dari/ke <code>model3</code>
# <code>viewer4</code>: proses data dari/ke <code>model4</code>
# <code>viewer5</code>: proses data dari/ke <code>model5</code>
# <code>viewer6</code>: proses data dari/ke ''Controller''

: [[<img src=https://user-images.githubusercontent.com/36441664/71640799-a1062200-2cc3-11ea-801f-661b722ee3c3.jpg width=600>|https://www.sciencedirect.com/science/article/pii/S1319157819302320]]

; Controller
: Controller disusun berdasarkan ''Module'':
# <code>controller1</code>: hanya proses alir atau simpan data
# <code>controller2</code>: proses data dari <code>module1</code> ke <code>tier3</code> (via <code>model2</code>)
# <code>controller3</code>: proses data dari <code>module2</code> ke <code>tier1</code> (via <code>viewer2</code>)
# <code>controller4</code>: proses data dari/ke <code>tier2</code>

: [[<img src=https://user-images.githubusercontent.com/36441664/71555716-db708480-2a61-11ea-9196-dcce62a0a43f.png width=400>|http://aosd.net/importance-of-modularity-in-programming/]]

====Parameter====
* [[Matrix Chain Multiplication|https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/]]

Pada bagian ini kita akan masuk ke detil tentang cara penyusunan [[Grammar#struktur|struktur]] yang dilakukan untuk menerapkan [[Grammar#konsep|konsep]] dan [[Grammar#metode|metode]] yang diuraikan di atas ke dalam bahasa pemrograman.

[[Grammar#realisasi|Realisasi]] dari uraian berikut ini dapat dilihat pada file script ''[[Grammar.js|https://chetabahana.github.io/skema/js/draw/Grammar.js]]''.

[[<img src=https://user-images.githubusercontent.com/36441664/71640783-4cfb3d80-2cc3-11ea-8a96-eedd88d49d03.png width=600>|https://helloacm.com/model-view-controller-explained-in-c/]]

===Eksternal===
* [[Cisco’s Data Center Architecture|http://ciscorouterswitch.over-blog.com/2018/04/cisco-s-data-center-architecture.html]]
* [[An SDN Focused Approach for Energy Aware Traffic Engineering in Data Centers|https://www.mdpi.com/1424-8220/19/18/3980/htm]]
Berikut ini bagan yang akan digunakan untuk ''[[visualisasi|https://chetabahana.github.io/channel/samples/entityRelationship.html]]'' hubungan antar kelas.  

[[<img src=https://user-images.githubusercontent.com/36441664/70742805-f1d3cc00-1d50-11ea-9ce5-30bec85bee9c.png>|https://chetabahana.github.io/channel/samples/entityRelationship.html]]  

Pada bagan  ini, Kelas dasar adalah ''[[form|https://github.com/chetabahana/chetabahana.github.io/blob/master/_feeds/section/skema/channel/form.md]]''. Sedangkan ''[[form1,2,3|https://github.com/chetabahana/chetabahana.github.io/tree/master/_feeds/section/skema/channel/form]]'' dan ''[[model1,2,3,4|https://github.com/chetabahana/chetabahana.github.io/tree/master/_feeds/section/skema/channel/model]]'' adalah kelas turunan yang telah mewarisi [[Channel#prinsip|hubungan]] serta [[Channel#terapan|pemisahan]] dengan kelas dasar.  

[[<img src=https://user-images.githubusercontent.com/36441664/71661338-7af28780-2d80-11ea-8ae1-eb8799bcc393.jpg>|https://www.cisco.com/c/en/us/td/docs/solutions/CVD/Campus/sda-sdg-2019oct.html]]  

Disini ''form1,2,3'' merupakan kelas baru yang secara berurut memiliki karakteristik ''[[Grammar#lexer|Lexer]]'', ''[[Grammar#parser|Parser]]'' dan ''[[Grammar#syntax|Syntax]]'' yang diwariskan dari ''[[Channel#prinsip|Prinsip Polimorfism]]'' pada ''[[Grammar|Diagram Grammar]]''. Sedangkan ''model1,2,3,4'' adalah pemisahan [[Diagram#class|class]] terhadap bentuk (''[[model|https://en.wikipedia.org/wiki/Conceptual_model]]'') dari ''[[property|https://en.wikipedia.org/wiki/Property_(programming)]]'' dan ''[[method|https://en.wikipedia.org/wiki/Method_(computer_programming)]]'' yang dimilikinya. 

====Formulasi====
* [[Twin Prime Distribution Algorithms and Symmetries|https://www.primesdemystified.com/twinprimes.html]]
Bagan di bawah ini menjelaskan ''[[Channel#implementasi|fungsionalitas]]'' setiap peran, bagaimana peran tersebut ''[[Route#implementasi|dipetakan]]'' ke topologi fisik yang diperlukan untuk manajemen solusi, integrasi nirkabel, dan aplikasi kebijakan. Model ini dipilih karena umumnya lebih mewakili tren dan ''[[Tree#collections|relevansi penyebaran]]''.

[[<img src=https://user-images.githubusercontent.com/36441664/71661311-69a97b00-2d80-11ea-8736-b348752af34a.jpg>|https://www.cisco.com/c/en/us/td/docs/solutions/Enterprise/Data_Center/VMDC/3-0/DG/VMDC_3-0_DG/VMDC3_DG2.html]]  


====Identifikasi====
```json

id: 40

---+-----+-----
 1 | 1   | 22
---+-----+-----
 2 | 23  | 27
---+-----+-----
 3 | 28  | 54
---+-----+-----
 4 | 55  | 76
---+-----+-----
 5 | 77  | 85
---+-----+-----
```

; 7 + 11 + 13 + 17 + 19 = 67 = 19th prime

```json
----+-----+-----+-----+-----+
 786| 1,2 |  2  | 2,3 | 3,4 | {19}
----+-----+-----+-----+-----+
  86|  4  | 4,5 | 5,6 |{6,7}| 17
    +-----+-----+-----+-----+
  78| 7,8 | 8,9 | 12 (M dan F)
    +-----+-----+-----+
{67}| 9,11|11,12|12,14| 11
----+-----+-----+-----+-----+
 {6}|15,16|17,18|18,20|21,22| 19
    +-----+-----+-----+-----+
  8 |23,25|25,27|27,29| 18
    +-----+-----+-----+-----+-----+-----+-----+-----+-------+
 {7}|29,33|33,36|36,39|39,41|41,45|46,51|51,57|58,66|{67,77}| 43 (C1 dan C2)
----+-----+-----+-----+-----+-----+-----+-----+-----+-------+
      1     2     3     4     5     6     7     8      9

Cyclic: 
66 + 1 = 67
66 + 11 = 77
66 + 19 = 85

Permutations:
19,(6,7),7
   └ ∑(6,7) = 13
19 x 13 x 7 = 1729
```

Coba kita lihat lagi ''[[12#khusus|peta composite & prime]]''.

Entah kebetulan atau tidak, sedikit banyak ada korelasi. Coba simak kalimat berikut:

''<blockquote><b>11 is the top left prime position</b> it cascades out to the left and circles back around the system.</blockquote>''

; 1 + 11 + 44 + 71 = 1 + 11 + 115 = 1 + 11 + (1 + 114)

Sekian.<br><br>
'''SALAM Sukses!'''<br>
'''© [[Chetabahana Project|https://github.com/MarketLeader]]'''<br>
[[<img src=https://stackexchange.com/users/flair/5054985.png>|https://stackoverflow.com/users/4058484/chetabahana?tab=profile]]

==''Referensi''==
* [[Wikipedia - Syntax diagram|https://en.wikipedia.org/wiki/Syntax_diagram]]
* [[Interesting Parsing Libraries: Chevrotain|https://tomassetti.me/parsing-in-javascript/]]
* [[Chevrotain - Parser Building Toolkit for JavaScript|https://sap.github.io/chevrotain/docs/]]
* [[Building a Domain-Specific Language (DSL) with Chrevrotain|https://medium.com/@jeremysher/building-a-domain-specific-language-with-chrevrotain-7ec502a5f6b6]]
* [[Syntactic Parsing - Find structural relationships between words in a sentence (pdf)|https://github.com/chetabahana/chetabahana.github.io/files/3946716/NLP05_SyntacticParsing.pdf]]
* [[Automatic Source Code Generation for Web-based Process-oriented Information Systems|https://www.researchgate.net/publication/316871103_Automatic_Source_Code_Generation_for_Web-based_Process-oriented_Information_Systems]]