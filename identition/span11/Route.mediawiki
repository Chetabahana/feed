''Diagram Route'' adalah interface ''[[Tree|Diagram Tree]]'' yang merupakan pewarisan dari ''[[Channel|Diagram Channel]]'', dimana ''Diagram Channel'' adalah pewarisan dari ''[[Grammar|Diagram Grammar]]''.  

__TOC__

==Struktur==

[[https://user-images.githubusercontent.com/36441664/82580957-0ea2e400-9bba-11ea-8e23-a7d307c9cf9b.jpg]]

Pada sesi ini kita akan batasi pembahasan kedalam penggunaan diagram ini saja, mengenai detil [[paketnya|https://github.com/chetabahana/route]] akan dibahas terpisah dibagian [[dokumentasi repository |https://github.com/chetabahana/route/wiki]] terkait.

[[<img src=https://user-images.githubusercontent.com/36441664/69798579-26e60780-1204-11ea-8607-24eb711a297a.png>|http://xliberation.com/googlecharts/d3concept.html]]

* Developer: [[Mike Bostock|https://bost.ocks.org/mike/]]
* Case Study: [[GitHub Action|https://github.com/chetabahana/route/actions]] & [[Wiki|https://github.com/chetabahana/route/wiki]]
* Demo: [[Web Page|http://xliberation.com/googlecharts/d3concept.html]] & [[Project Section|https://chetabahana.github.io/#chetabahana-skema?pad=5]]

Sesuai dengan karakternya sebagai [[diagram situasi|https://en.wikipedia.org/wiki/State_diagram]] maka berdasarkan ''[[Diagram#Inheritance|Konsep Inheritance]]'' diagram ini digunakan untuk [[visualisasi situasi|https://en.wikipedia.org/wiki/UML_state_machine]] antar ''[[Diagram#class|Class]]'' dari ''[[Pola Kerja|https://github.com/MarketLeader/marketleader.github.io/wiki]]'':   

[[<img src=https://user-images.githubusercontent.com/36441664/70865620-17034d00-1f92-11ea-9e2d-3226ad7e3ec7.png>|https://www.freecodecamp.org/news/how-to-visually-design-state-in-javascript-3a6a1aadab2b/]]

===Model===
Pada bagian ini kita akan bahas mengenai ''[[Diagram#konsep|Konsep]]'' yang diterapkan.

* Secara [[Diagram#etimologi|Etimology]] Diagram Route mengacu ke ''[[Channel|Diagram Channel]]''
* Secara [[Diagram#terminologi|Terminology]] memiliki turunan seperti yang [[Route#prinsip|didefinisikan]] di bawah ini
* Secara [[Diagram#kaidah-kognitif|Kaidah Kognitif]] mengacu ke [[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki/Implementasi#faktorisasi]] dengan jumlah total: ''[[Route#identifikasi|37 pewarisan]]''

[[<img src=https://user-images.githubusercontent.com/36441664/69991764-e4f9f000-157a-11ea-8062-36419bc7479f.png width=800>|https://github.com/MarketLeader/Cloud-Site-API/wiki]]

====Limit====
====Range====
Diagram Route bertumpu ke penggunaan [[D3.js|https://en.wikipedia.org/wiki/D3.js]] (juga dikenal sebagai D3, kependekan dari Data-Driven Documents) adalah perpustakaan JavaScript untuk menghasilkan [[visualisasi data|https://en.wikipedia.org/wiki/Data_visualization]] interaktif dan dinamis di browser web menggunakan standar SVG, HTML5, dan CSS.  

[[<img src=https://user-images.githubusercontent.com/36441664/71432191-46405980-270a-11ea-8bfe-8fe57856ee55.png width=800>|https://d3js.org/]]

===Target===
Dalam [[ontologi|https://id.wikipedia.org/wiki/Ontologi]], Anda dapat menentukan hubungan antara properti, instance, dan kelas.  

[[<img src=https://user-images.githubusercontent.com/36441664/71169194-f5a0aa80-228a-11ea-8c8f-a6453c469900.png width=600>|http://vowl.visualdataweb.org/webvowl.html]]

====Chart====
* [[Java Inheritance (Subclass and Superclass)|https://www.w3schools.com/java/java_inheritance.asp]]  

Seperti dijelaskan pada topik ''[[Diagram#pewarisan|Type Diagram]]'', Diagram Route adalah [[Channel#pewarisan|pewarisan]] dari penelusuran ''[[Diagram#polymorphism|Pola Polymorphism]]'' pada ''[[Channel#metode|Diagram Channel]]''. Untuk mengatur [[Route#identifikasi|identifikasi]] berdasarkan ''[[Konsep Dasar|https://github.com/MarketLeader/marketleader.github.io/wiki]]'' pada Diagram Route ini dilakukan [[Route#konfigurasi|konfigurasi]] terhadap instance dari ''[[Diagram#inheritance|Pola Inheritance]]''. 

Sesuai uraian pada topik ''[[Channel#pewarisan|Diagram Channel]]'', tujuan sebenarnya dari inheritance  Anda mungkin perlu untuk menggunakan kembali atau  mendapatkan fungsi dari satu kelas atau objek bila Anda memiliki situasi lain yang serupa.

Konsep ini sangat membantu jika Anda memiliki fitur yang mirip dalam dua kelas. Daripada menulis dua kelas yang hampir identik, Anda dapat membuat basis kelas yang berisi metode yang serupa.  

Contoh menggunakan kembali kelas bisa menjadi kelas Person, di mana Anda  mungkin memiliki sifat untuk nama, alamat, dan nomor telepon. Kelas Orang bisa kelas dasar, dari mana Anda berasal kelas Karyawan, kelas pelanggan, atau Siswa kelas.  

====Format====
Konsep single inheritance hanya memperbolehkan suatu subclass mempunyai satu parent class. Dengan konsep single inheritance ini, masalah pewarisan akan dapat diamati dengan mudah.  

[[<img src=https://user-images.githubusercontent.com/36441664/70758842-d380c700-1d76-11ea-86a3-01c6c164e810.png width=600>|https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)#Types]]  

Anda dapat membuat Anda sendiri hirarki kelas. Anda menempatkan kode yang Anda inginkan menjadi umum di kelas dasar. Anda kemudian membuat kelas lain dari itu, yang mewarisi metode kelas dasar.  

===Hirarki===
[[<img src=https://user-images.githubusercontent.com/36441664/70758873-eabfb480-1d76-11ea-844d-eab5dd796365.png width=600>|https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)#Types]]

====Formasi====
====Diagram====
Dalam konsep dasar inheritance dikatakan bahwa suatu subclass adalah tidak lain hanya memperluas (extend) parent class-nya.  

[[<img src=https://user-images.githubusercontent.com/36441664/71595805-ace0cf80-2b6f-11ea-9a46-757f49e2b87e.png width=800>|https://www.cs.ubc.ca/~murphyk/Software/matlabTutorial/html/objectOriented.html]]

Dalam bahasa pemrograman dimungkinkan untuk mendaftarkan banyak base class pada satu derived class. Cara penulisanya sama seperti kita mendaftarkan satu base class pada satu derived class.

==Metode==

[[https://user-images.githubusercontent.com/36441664/82580984-15315b80-9bba-11ea-8ea8-a51efe0a6667.jpg]]

[[<img src=https://user-images.githubusercontent.com/36441664/69798606-306f6f80-1204-11ea-8f2f-627ca9f09cf6.png>|https://github.com/chetabahana/route/actions]]

===Proses===
[[<img src=https://user-images.githubusercontent.com/36441664/71283307-5d8de880-2392-11ea-903d-61b2e723b66a.png>|http://www.vollmann.com/en/pubs/meta/meta/meta.html]]

====Scope====
* [[Git Data Model : wrap up|http://batmat.github.io/presentations/git-next-level/prez.html#_git_data_model_wrap_up]]
[[<img src=https://user-images.githubusercontent.com/36441664/70896785-f4217900-2023-11ea-91be-a46b12e21cf2.png width=500>|http://batmat.github.io/presentations/git-next-level/prez.html#_git_data_model_wrap_up]]

====Extend====
* [[Inheritance, Type-Casting and Interfaces|http://people.scs.carleton.ca/~lalonde/105WebPage/Notes/105Notes9.html]]

Anda dapat mengatur objek Anda menjadi hierarki dengan menggunakan dua konsep pewarisan, subkelas (membuat kelas baru berdasarkan yang sebelumnya) dan mengesampingkan (mengubah cara kerja kelas sebelumnya), . 

[[<img src=https://user-images.githubusercontent.com/36441664/71193961-a162ee00-22bd-11ea-88d0-0f27fa5cdcdc.png width=600>|https://slideplayer.com/slide/5050442/]]  

Menggunakan pewarisan untuk membuat hierarki ini sering kali membuat kode lebih mudah dipahami, tetapi yang paling penting memungkinkan Anda untuk menggunakan kembali dan mengatur kode secara lebih efektif.

===Synergi===
Sesuai dengan tujuan dari [[Route#metode|metode]] di atas maka Diagram Route akan berlaku sebagai interface dari ''[[Diagram#inheritance|Pola Inheritance]]''. Pewarisan ke ''[[Tree#metode|Diagram Tree]]'' dilakukan via [[Route#identifikasi|identifikasi]] berdasarkan pola ''[[Diagram#class|Pola Class]]'':  

[[<img src=https://user-images.githubusercontent.com/36441664/69990325-04434e00-1578-11ea-9e5a-c86bd88fe706.png>|https://github.com/chetabahana/tree/wiki/]]  

Class merupakan model yang berisi kumpulan Method dan Property dalam suatu unit untuk suatu tujuan tertentu. Sebagai contoh class manusia memiliki Method: makan, minum, tidur. Sedangkan Property memiliki berat, tinggi, usia.  

Kelas adalah cetak biru atau templat atau set instruksi untuk membangun tipe objek tertentu. Setiap objek dibangun dari sebuah kelas. Kelas seperti resep. Anda tidak bisa makan resep tetapi Anda bisa makan contoh resep yang merupakan hasil dari mengikuti petunjuk resep

Warisan memungkinkan kelas baru untuk menerima — atau mewarisi — properti dan metode kelas yang ada. 

Dalam bagian sebelumnya, Anda mengetahui bahwa objek adalah komponen mandiri yang berisi properti dan metode yang diperlukan untuk membuat tipe data tertentu berguna. 

[[<img src=https://user-images.githubusercontent.com/36441664/71281110-b27c2f80-238f-11ea-98f3-3b4c4bc180ba.png>|https://ilmuprabowo.wordpress.com/2011/09/12/pemrograman-berbasis-objek-pbo-ke-1-ringkasan-by-ony-prabowo/]]  


Anda juga belajar bahwa suatu kelas adalah cetak biru atau templat untuk membangun jenis objek tertentu dan bahwa setiap objek dibangun dari suatu kelas. 

[[<img src=https://user-images.githubusercontent.com/36441664/71281357-42ba7480-2390-11ea-834f-9ec83f5dfa7c.png>|https://oopcpp.wordpress.com/2017/03/01/data-member-dan-member-function/]]  

Warisan adalah cara untuk mengekspresikan hubungan antara cetak biru (kelas).  

Ini adalah cara untuk mengatakan: Saya ingin membangun objek baru yang mirip dengan yang sudah ada, dan alih-alih membuat kelas baru dari awal, saya ingin referensi kelas yang ada dan hanya menunjukkan apa yang berbeda.

[[<img src=https://user-images.githubusercontent.com/36441664/71283063-adb87b00-2391-11ea-9a35-4acf41797b7d.png width=600>|https://docs.bmc.com/docs/remedyforce/201802/en/managing-models-801357235.html]]  

[[<img src=https://user-images.githubusercontent.com/36441664/71555314-656a1e80-2a5d-11ea-9955-c2854f0f8409.png width=400>|https://www.parthpatel.net/php-oop-classes-objects/]]

[[<img src=https://user-images.githubusercontent.com/36441664/71753125-23edcf00-2eb4-11ea-82f4-03cc9b99cb21.gif width=600>|https://github.com/bpmn-io/diagram-js]]

[[<img src=https://user-images.githubusercontent.com/36441664/71369262-c1a3ed00-25dc-11ea-8fd9-0845528b8f47.png width=600>|https://stackoverflow.com/a/48304561/4058484]]

====Simetri====
* [[How to Deploy to DigitalOcean Kubernetes with GitHub Actions|https://blog.digitalocean.com/how-to-deploy-to-digitalocean-kubernetes-with-github-actions/]]
[[<img src=https://user-images.githubusercontent.com/36441664/70896830-0c919380-2024-11ea-921e-bb58b324b221.png width=600>|https://blog.digitalocean.com/how-to-deploy-to-digitalocean-kubernetes-with-github-actions/]]

[[<img src=https://user-images.githubusercontent.com/36441664/71555436-dc53e700-2a5e-11ea-9075-6b19bd00d6eb.gif>|https://github.com/argoproj/argo-cd]]  

[[<img src=https://user-images.githubusercontent.com/36441664/71371174-e3a06e00-25e2-11ea-9b81-adb19397a687.png>|http://m.simplepie.org/?feed=mattwarren.org%2Fatom.xml]]

====Typical====
[[<img src=https://user-images.githubusercontent.com/36441664/71199467-9497c780-22c8-11ea-99f4-52df9a8b2d28.png width=600>|https://realpython.com/inheritance-composition-python/]]

===Matriks===
* [[Libraries.io Documentation|https://docs.libraries.io/overview.html]]
[[<img src=https://user-images.githubusercontent.com/36441664/70899094-888dda80-2028-11ea-884d-98aca25624e4.png width=500>|https://docs.libraries.io/overview.html]]

====Layout====
* [[Hybrid Deep Neural Network Scheduler for Job-Shop Problem Based|https://www.hindawi.com/journals/cin/2019/7172842/]]
[[<img src=https://user-images.githubusercontent.com/36441664/71577062-52bb1c80-2b25-11ea-83db-0e5484fbaa37.png width=600>|https://softwareengineering.stackexchange.com/q/169949/209076]]

====Dimensi====
* [[GitHub User insights using GitHub API — Data Collection and Analysis|https://towardsdatascience.com/github-user-insights-using-github-api-data-collection-and-analysis-5b7dca1ab214]]
[[<img src=https://user-images.githubusercontent.com/36441664/71162248-7658aa00-227d-11ea-8cd4-48ec2a246164.png width=600>|https://blog.argoproj.io/introducing-argo-cd-declarative-continuous-delivery-for-kubernetes-da2a73a780cd]]

==Interaksi==
Pada bagian ini kita akan bahas tentang detil [[Route#pewarisan|pewarisan]] dari Diagram Route berikut dengan [[Route#instantiation|instantiation]] dan [[Route#implementasi|implementasinya]].  

[[https://user-images.githubusercontent.com/36441664/82582707-a275af80-9bbc-11ea-8e1c-51d19461589c.png]]

[[https://user-images.githubusercontent.com/36441664/83334977-24a85700-a2d4-11ea-8f92-c96f99350874.jpg]]

===Internal===

[[https://user-images.githubusercontent.com/36441664/83189861-c0628780-a15b-11ea-9db4-8fc623f215c8.jpg]]

[[https://user-images.githubusercontent.com/36441664/83189857-be98c400-a15b-11ea-858f-3f68253113a3.jpg]]

[[https://user-images.githubusercontent.com/36441664/83189851-bd679700-a15b-11ea-920c-69f85eaf4ef9.jpg]]

====Standar====

[[https://user-images.githubusercontent.com/36441664/83189848-bb9dd380-a15b-11ea-9f02-98e21ccb1baf.jpg]]

[[https://user-images.githubusercontent.com/36441664/83189839-b9d41000-a15b-11ea-852d-efa877573ff8.jpg]]

====Proporsi====

* [[The Twin Prime Conjecture|https://medium.com/cantors-paradise/the-twin-prime-conjecture-3671e604818e]]

[[https://user-images.githubusercontent.com/36441664/84574578-833ffb80-add1-11ea-8f4d-76bd8d010074.png]]

[[https://user-images.githubusercontent.com/36441664/84574576-820ece80-add1-11ea-9245-00e55fb6ea69.png]]

[[https://user-images.githubusercontent.com/36441664/84574575-80dda180-add1-11ea-9ffd-210f75f13611.png]]

[[https://user-images.githubusercontent.com/36441664/84574574-7fac7480-add1-11ea-9687-2e04b58d3f0a.png]]

[[https://user-images.githubusercontent.com/36441664/84574570-7cb18400-add1-11ea-9cfc-b205193f2618.png]]

[[https://user-images.githubusercontent.com/36441664/84574568-79b69380-add1-11ea-8bad-5ac439fe880f.png]]

===Interface===

[[https://user-images.githubusercontent.com/36441664/83334950-12c6b400-a2d4-11ea-8e98-c64ede21db16.png]]

====Kategori====
[[<img src=https://user-images.githubusercontent.com/36441664/69799589-23ec1680-1206-11ea-88d1-81528fbceb64.png>|https://chetabahana.github.io/#chetabahana-skema?pad=5]]

Sesuai yang telah dijelaskan sebelumnya, pada [[Route#metode|Pola Inheritance]] dapat menggunakan kembali suatu <code>object</code> pewarisan atau juga dengan fungsi dari satu <code>class</code> bilamana mendapatkan situasi lain yang serupa. 

[[<img src=https://user-images.githubusercontent.com/36441664/71578341-53a27d00-2b2a-11ea-9da5-8c2b456b5c06.png>|https://www.ecologyandsociety.org/vol12/iss2/art9/figure2.html]]

Konsep [[Route#instance|Pola Class]] menekankan instance untuk menerima atau mewarisi properti dan metode kelas yang ada. Dengan demikian maka pada ''Diagram Route'' disetel dengan menggunakan instantiation pada pewarisan dari ''[[Channel#pewarisan|Diagram Channel]]'' dan ''[[Grammar#pewarisan|Diagram Grammar]]''. 

====Parameter====


===Eksternal===

* [[Definitive General Proof of Goldbach's conjecture|https://arxiv.org/abs/1811.02415]]

[[Konjenktur Goldbach|https://id.m.wikipedia.org/wiki/Konjektur_Goldbach]] adalah salah satu persoalan yang belum terpecahkan dalam teori bilangan dan bahkan dalam matematika secara keseluruhan. Konjektur Goldbach berbunyi:

''<blockquote>Setiap bilangan bulat genap yang lebih besar dari dua (2) dapat ditulis sebagai jumlah dari dua bilangan prima.</blockquote>''

Konjektur Goldbach telah terbukti benar untuk bilangan genap sampai [[4 × 10<sup>18</sup>|https://id.wikipedia.org/wiki/Konjektur_Goldbach#cite_note-2]] dan secara umum dianggap benar.

<br>[[https://user-images.githubusercontent.com/36441664/84467285-e46ab080-aca5-11ea-89f8-8312a527af1b.png]]

Sampai saat ini belum ada bukti matematis meskipun sudah banyak diupayakan, oleh karenanya kita akan telusuri secara polaritas.

[[Mapping#faktorisasi|<img src=https://user-images.githubusercontent.com/36441664/83331599-55cb5c00-a2c1-11ea-833e-b14dd79b5f2d.jpg>]]

Setiap angka berada pada kelompok polaritas dimana pola ''[[6|enam (6)]]'' siklus berulang pada angka ''[[19|sembilanbelas (19)]]'', ''[[43|empatpuluh tiga (43)]]'' dan ''[[71|tujuhpuluh satu (71)]]'':

; 6 x 19 = 43 + 71 = 114

[[Mapping#faktorisasi|<img src=https://user-images.githubusercontent.com/36441664/84390440-cbb8b700-ac21-11ea-8af2-17e339c06779.jpg>]]

====Formulasi====

[[Program#metode|<img src=https://user-images.githubusercontent.com/36441664/72632099-25c19300-3988-11ea-9b18-ce0023f748cf.jpg>]]

Detilnya saya bahas [[29#manuscript|terpisah]] dimana kita akan dapatkan faktor² lainnya dengan konfigurasi seperti berikut ini:

; (6x(6+6))/(6+(6x6)) = 72/42 = 36/21 = 12/7 = 1,7142857

```json
6 + 6 = 12
7 + 7 = 14
12 x 14 = 168
67 + 78 + 86 = 231
7 x 13 x 19 = 1729

{168}
|
----------------------+-----+-----+-----+
     7 --------- 1,2:1|  1  |  30 |  40 | 71 ({2,3}) ‹-----------------
     |                +-----+-----+-----+-----+                        |
     |  8 ‹------  3:2|  1  |  30 |  40 |  90 | 161 (7) ‹---           |
     |  |             +-----+-----+-----+-----+             |          |
     |  |  6 ‹-{4,6}:3|  1  |  30 | 200 | 231 (10,11,12) ‹--|---       |
     |  |  |          +-----+-----+-----+-----+             |   |      |
      --|--|-----» 7:4|  1  |  30 |  40 | 200 | 271 (13) --›    | 5®   |
        |  |          +-----+-----+-----+-----+                 |      |
         --|---› 8,9:5|  1  |  30 | 200 | 231 (14,15) ---------›       |
{329}      |          +-----+-----+-----+-----+-----+                  |
 |          ----› 10:6| 20  |   5 |  10 |  70 |  90 | 195 (19) --› Φ   | 6®
  --------------------+-----+-----+-----+-----+-----+                  |
     67 --------› 11:7|  5  |   9 |  14 (20) --------› Δ               |
     |                +-----+-----+-----+                              |
     |  78 ‹----- 12:8|  9  |  60 |  40 | 109 (26) «------------       |
     |  |             +-----+-----+-----+                       |      |
     |  |  86 ‹-- 13:9| 60  |   9 |  69 (27) «--- ¤             | 2®   |
     |  |  |          +-----+-----+-----+                       |      |
     |  |   ---› 14:10|  9  |  60 |  40 | 109 (28) -------------       |
     |  |             +-----+-----+-----+                              |
     |   ---› 15,18:11|  1  |  30 |  40 | 71 ({29},30,31,32) ----------
{289}|                +-----+-----+-----+
  |   ‹--------- 19:12| 60  |  10 | 70 (36) ‹--------------------- Φ
   -------------------+-----+-----+ 
    786 ‹------- 20:13| 90  |  90 (38) ‹-------------- Δ
     |                +-----+-----+   
     | 618 ‹- 21,22:14| 40  |   8 |  48 (40,41) ‹---------------------- 
     |  |             +-----+-----+-----+-----+-----+                  |
     |  | 594 ‹- 23:15|  8  |  40 |  70 |  60 | 100 | 278 (42) «--     | 6'®
     |  |  |          +-----+-----+-----+-----+-----+             |    |
      --|--|-»24,27:16|  40 |   8 |  48 (43,44,45,{46}) ----------|----
        |  |          +-----+-----+                               |
         --|---› 28:17| 100 | 100 (50) --------------------------»
{168}      |          +-----+   
|         102 -› 29:18| 50  | 50 ({68}) --------> ¤
----------------------+-----+


Note:
« & » = 4 pairs (+)
‹ & › = 5 pairs (-)
Total = 9 pairs

Format-29®:

6° = Bagan
6* = Pinned
6' = Diagram
® = Repository

User = (7 + 6')® = (6* + 1 + 6')® = 13®
Org = (6* + 10)® = (6* + 3° + 3° + 4°)® = 16®

Input = M and F = 6* (org) + 6'® (user) = 12®
Output = C1 and C2 = 10° (org)  + 7® (user) = 17®

Query = M and C2 = 6* (org) + 7® (user) = 13®
Result = F and C1 = 6'® (user) + 10° (org) = 16®

M: 6® = (2,3), (29,30,31,32) --> 2,89+29,3 = 289+329 = 618 (org)
F: 6'® = (40,41), (43,44,45,46) --> 30+30+10+10+10+10 = 60+40 (user)
C1: 10® = 3®+3®+4® = (7,13,19),(20,27,36),(38,42,50,68) --> 200 (org)
C2: 7® = 5®+2® = 4®+1®+2® = 4®+3® = 10,(11,12,14,15,26,28) --> 168 (user)
```
====Identifikasi====
```json
id: 45

---+-----+-----
 1 | 1   | 6
---+-----+-----
 2 | 7   | 11
---+-----+-----
 3 | 12  | 15
---+-----+-----
 4 | 16  | 20
---+-----+-----
 5 | 21  | 25
---+-----+-----
 6 | 26  | 35
---+-----+-----
 7 | 36  | 37
---+-----+-----
```

[[Mapping#Faktorisasi|<img src=https://user-images.githubusercontent.com/36441664/86481184-b72b9280-bd79-11ea-899b-51db929fc3d2.png>]]

Sekian.<br><br>
'''SALAM Sukses!'''<br>
'''© [[Chetabahana Project|https://github.com/MarketLeader]]'''<br>
[[<img src=https://stackexchange.com/users/flair/5054985.png>|https://stackoverflow.com/users/4058484/chetabahana?tab=profile]]

==''Referensi''==
* [[How to use D3 in Node.js properly?|https://stackoverflow.com/a/9949301/4058484]]
