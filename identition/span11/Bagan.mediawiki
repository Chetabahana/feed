<table>
  <thead>
    <tr>
      <td>[[<img src="https://avatars1.githubusercontent.com/u/36441664?f=1&v=3&s=20" class="avatar">|https://github.com/chetabahana]]</td><td colspan="7">This [[wiki|https://github.com/chetabahana/chetabahana.github.io/wiki]] is courtesy of '''[[Chetabahana Project|https://github.com/MarketLeader]]'''. Find all of them on '''[[Project Map|https://github.com/chetabahana/chetabahana.github.io/wiki/Skema#Implementasi]]'''.</td><td>[[<img src="https://avatars2.githubusercontent.com/u/36441943?v=3&s=20">|https://github.com/MarketLeader]]</td>   
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>[[:arrow_double_up:|https://github.com/chetabahana/chetabahana.github.io/wiki]]</th>
      <th>[[:arrow_up_small:|https://github.com/MarketLeader/marketleader.github.io/wiki]]</th>
      <th>[[Home|:rewind:]] [[Home|Intro]]</th>
      <th>[[:arrow_backward:|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]] [[Prev|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]]</th>
      <th>[[:repeat:|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]] [[Repo|https://github.com/chetabahana/chetabahana.github.io]]</th>
      <th>[[Next|https://github.com/MarketLeader/Google-Sites-API/wiki]] [[:arrow_forward:|https://github.com/MarketLeader/Google-Sites-API/wiki]]</th>
      <th>[[Last|https://github.com/MarketLeader/Google-Content-API/wiki]] [[:fast_forward:|https://github.com/MarketLeader/Google-Content-API/wiki]]</th>
      <th>[[:arrow_down_small:|https://github.com/MarketLeader/Google-AdWords-API/wiki]]</th>
      <th>[[:arrow_double_down:|https://github.com/MarketLeader/Toko-Chetabahana/wiki]]</th>
    </tr>
  </tbody>
</table>

''[[Bagan|https://id.wikipedia.org/wiki/Bagan]]'' adalah sebuah representasi grafis dari data. Data yang diwakili dibentuk oleh simbol-simbol, seperti batang dalam bagan batang, bagan garis, atau irisan dalam bagan pai.

__TOC__

==Konsep==

Dari ke tujuh (7) kasus ''[[Millenium Prize Problems|https://en.m.wikipedia.org/wiki/Millennium_Prize_Problems]]'' yang dipublikasikan sejak tahun 2000 dalam rangka menyongsong abad milenial, satu kasus yaitu [[Poincaré conjecture|https://en.wikipedia.org/wiki/Poincar%C3%A9_conjecture]] sudah dipecahkan.

[[Package#Track|<img src=https://user-images.githubusercontent.com/36441664/84181979-e3722d00-aab3-11ea-9868-982020dcd4b3.png>]]

Solusinya diakui pada tahun 2010. Jadi satu kasus saja makan waktu 10 tahun. Entah sisanya kapan bisa dipecahkan. 

Seperti kata pepatah, tidak ada ruginya untuk coba paham, minimal kita tahu bahwa ada kasus semacam ini. 

Maka saya temukan korelasinya dengan Sistem DNA. Padahal ''Kasus Milenial'' ini sudah lama dipulikasikan. Pengetahuan tentang Sistem DNA juga entah dari kapan sudah ditemukan.

[[<img src=https://user-images.githubusercontent.com/36441664/89131380-98661a80-d536-11ea-8879-1e1311edba95.png width=700>|https://github.com/chetabahana/chetabahana.github.io/wiki/Skema#Desain]]

===Metoda===

Metode saya sederhana saja, Anda juga bisa ikuti caranya:

* ''Kumpulkan semua referensi yang bisa Anda dapat '''sampai tak bersisa''' lagi,''
* ''Temukan dan tulis apapun yang Anda '''anggap penting''' dari semua referensi itu,''
* ''Susun sedemikian rupa sehingga '''nyambung satu sama lain''' fokus ke satu hal saja.''

Sebenarnya nyambung²in ini yang dilakukan oleh ''[[Grigory Perelman|https://en.wikipedia.org/wiki/Grigori_Perelman]]'' sang penemu solusi dari kasus ''Poincaré conjecture'' ini. 

<br>[[https://user-images.githubusercontent.com/36441664/84685902-3ab94700-af65-11ea-99b2-c3f0929d47e7.jpg]]

Dia sambungin antara yang program penelitian yang ditemukan ''[[Richard Hamilton|https://en.wikipedia.org/wiki/Richard_S._Hamilton]]'' dengan ''[[Ricci flow|https://en.wikipedia.org/wiki/Ricci_flow]]'' yang pada akhirnya menghasilkan bukti .

Itu juga sebabnya dia ''[[Collections#Delegasi|tolak hadiah]]'' yang $1 juta. Karena dia anggap kontribusinya cuma sebatas nyambung²in tadi. Simak pernyataannya yang dikutip ''[[Wikipedia|https://id.m.wikipedia.org/wiki/Masalah_Milenium#Konjektur-Poincaré-(terpecahkan)]]'':

''<blockquote>
* Kantor berita Interfaz mewawancarai '''Perelman''' yang mengatakan bahwa '''ia yakin penghargaan itu tidak adil'''.
* Ia menganggap kontribusinya untuk memecahkan '''Konjektur Poincare''' tidak lebih besar dari matematikawan Universitas Columbia, '''Richard Hamilton'''.</blockquote>''

====Sizing====

Mana yang lebih besar kontribusinya, sang penemu atau sang penyambung?<br>

Anda bisa ikuti di ''[[Dunia-Internet#Sejarah_Ilmu_Alam|Dunia Internet]]'' cerita tentang ilmuwan yang penemuannya sangat istimewa yaitu: ''Isaac Newton'' dan ''Albert Einstein''.

[[Dunia-Internet#Sejarah_Ilmu_Alam|<img src=https://user-images.githubusercontent.com/36441664/81924151-eb4fc600-9608-11ea-8b3b-c3e7fddd2698.jpg width=300>]]

Dalam sejarahnya mereka mengembangkan penemuan dengan mengambil dasar dari penelitian ilmuwan lain, bahkan pernah dituduh ''menjiplak'' ilmu yang ditemukan orang lain. 

''<blockquote>
* Dalam buku catatan '''Leibniz''', dapat ditemukan adanya gagasan-gagasan sistematis yang memperlihatkan bagaimana [[Leibniz mengembangkan kalkulusnya dari awal sampai akhir|https://en.wikipedia.org/wiki/Isaac_Newton]], manakala pada catatan '''Newton''' hanya dapat ditemukan hasil akhirnya saja. Newton mengklaim bahwa ia enggan mempublikasi kalkulusnya '''karena takut ditertawakan'''. Royal Society kemudian dalam suatu kajian memutuskan bahwa Newtonlah penemu sebenarnya dan mencap Leibniz sebagai penjiplak. Kajian ini kemudian diragukan karena setelahnya '''ditemukan bahwa Newton sendiri yang menulis kata akhir kesimpulan''' laporan kajian ini.
* Dalam makalahnya mengenai [[kesetaraan massa-energi|https://id.wikipedia.org/wiki/Kesetaraan_massa-energi]], Einstein menciptakan rumus '''E = mc2''' sebagai konsekuensi dari persamaan relativitas khusus. Karya Einstein tahun 1905 tentang relativitas '''diperdebatkan selama bertahun-tahun''', tetapi perlahan diterima oleh para fisikawan terkemuka, yang dimulai dengan Max Planck. Einstein awalnya membingkai relativitas khusus dalam kajian kinematika (ilmu tentang benda bergerak). Pada tahun 1908, Hermann Minkowski menafsirkan ulang relativitas khusus dalam kajian geometris sebagai teori ruang waktu. [[Einstein menggunakan konsep Minkowski|https://id.wikipedia.org/wiki/Albert_Einstein]] dalam mengembangkan teori relativitas umum pada tahun 1915.
</blockquote>''

Jadi sebenarnya mereka tidak sepenuhnya menemukan tapi juga nyambungin² sehingga ketemu solusi. Tapi keduanya gak ambil pusing masalah ini dan bersedia terima penghargaan².

Maka disini saya melihat kesalahan ''Perelman'' jika menggangap hal itu tidak adil.

====Sorting====

Tapi kenapa ya. Kok mereka sang penyambung² ini yang malah diakui dunia?<br>
Jawabannya adalah karena sang penemu dan sang penyambung itu beda. 

Prinsipnya suatu ilmu yang ditemukan akan tetap hanya jadi pustaka atau dugaan yang terdengar saja sampai ada yang bisa nyambungin dengan penerapan yang bisa diterima.

Nah di Project ini sebagian besar itu yang saya lakukan, cuma sambung²in dari referensi yang saya dapat. Tapi hasilnya? Saya temukan banyak hal yang tak seorangpun dapat. Ya kan?

[[Skema#Orientasi|<img src=https://user-images.githubusercontent.com/36441664/87265280-9b985880-c4ec-11ea-8af1-403fe5648fc5.gif>]]

Dengan demikian kita akan lakukan metoda sambung menyambung ini dimulai dengan kasus yang sudah dipecahkan yaitu ''Poincare Conjecture''.

Silahkan ikuti selanjutnya.. 

===Akurasi===

Sesuai dengan penjelasan di atas, sebelum kita masuk ke tahapan proses maka hal yang pertama dilakukan adalah menerapkan angka pada subjek agar "berkaitan" dengan kelompok pertama.

<br>[[GitHub Actions|<img src=https://user-images.githubusercontent.com/36441664/84270340-bb86d600-ab54-11ea-9e6a-18cbd0d6fa87.jpg width=200>]]

Hal ini terlenuhi dengan cara menempatkan kasus geometri di kelompok pertama sehingga subjek terkait dengan dua (2) kasus pertama ibarat ada di satu (1) jangkar dengan tiga (3) kaitan.

[[Size#validasi|<img src=https://user-images.githubusercontent.com/36441664/84269385-57afdd80-ab53-11ea-89d6-6e1d8c3e1350.png width=300>]]

Prosesnya kita akan lakukan dengan mengadopsi bentuk ''[[Collections#routing|tetraktis]]'' yaitu segitiga  karakter seratus dua (102) memiliki dua (2) angka yang membentuknya berupa 10 node dan angka 2 itu sendiri.

[[Program#konfigurasi|<img src=https://user-images.githubusercontent.com/36441664/86161308-4301ac80-bb37-11ea-82de-5ff977329e53.png width=500>]]

Karena angka dua (2) sudah dialokasikan di repository dari organisasi maka kita cari property berupa angka sepuluh (10) pada objek yang 7®.

Ternyata dia ada di urutan pertama dan posisinya di "true prime pairs" tepat di indeks ke-3. Dia ada di jangkar (10,11,12). Berarti angka 10 untuk subjek, dan 11,12 kasus ke-1 dan ke-2.

; 7® = 5® + 2® = (10,11,12,14,15), (26,28)

```json
True Prime Pairs:
(5,7), (11,13), (17,19)

layer|  i  |   f
-----+-----+------
     |  1  | (2,3)
  1  +-----+
     |  2  | (7)
-----+-----+------
     |  3  | (10,11,12)  <---- {10'} = subject of the taken cases
  2  +-----+
     |  4  | (13)
-----+-----+------
     |  5  | (14,15)
  3  +-----+
     |  6  | (19)
-----+-----+------
```

====Looping====

[[Program#metode|<img src=https://user-images.githubusercontent.com/36441664/72632099-25c19300-3988-11ea-9b18-ce0023f748cf.jpg>]]

====Optimasi====

[[https://user-images.githubusercontent.com/36441664/83336072-f2e6be80-a2da-11ea-97e4-de62c867c8d2.png]]


===Validasi===

====Capturing====

[[<img src=https://user-images.githubusercontent.com/36441664/68235749-5c993580-0036-11ea-8f3b-8da3496c329e.jpg width=800>|https://github.com/MarketLeader/Cloud-Tasks-API/wiki]]

[[<img src=https://user-images.githubusercontent.com/36441664/70703416-b4485200-1d02-11ea-9db1-41ba6e9fe2a9.png width=800>|https://github.com/MarketLeader/Google-Trend-API/wiki]]

[[<img src=https://user-images.githubusercontent.com/36441664/69991542-787ef100-157a-11ea-85d5-20907c99b5d7.png>|https://github.com/MarketLeader/Google-Trend-API/wiki]]

[[<img src=https://user-images.githubusercontent.com/36441664/69991227-e4ad2500-1579-11ea-8b4a-ff5a5c8aa61f.png width=800>|https://github.com/MarketLeader/Google-Ads-API/wiki]]

[[<img src=https://user-images.githubusercontent.com/36441664/69991764-e4f9f000-157a-11ea-8062-36419bc7479f.png width=800>|https://github.com/MarketLeader/Cloud-Site-API/wiki]]

[[<img src=https://user-images.githubusercontent.com/36441664/69990325-04434e00-1578-11ea-9e5a-c86bd88fe706.png width=800|https://github.com/MarketLeader/Toko-Chetabahana/wiki]]

====Directions====
Pergeseran ke 11' ini menyisakan ''[[Publishing#Property|Kesenjangan (Gap)]]'' di Mid Zone sehingga menyediakan ruang bagi sistem untuk memulai '''proses berulang''' via karakter bilateral dari angka sembilan (9).


==Modulasi==
* [[Integrate different sources of 'omics data' in environmental science|https://userweb.eng.gla.ac.uk/umer.ijaz/]]

Sekarang kita akan masuk ke detil dari tiap² kasus. Seperti telah dijelaskan pada bagian sebelumnya kita akan telusuri jika terdapat korelasi antara tiap kasus. 

<br>[[https://user-images.githubusercontent.com/36441664/85226697-1d6ff700-b403-11ea-82f9-e733acd5c442.png]]

Tujuannya adalah untuk mendapatkan metode yang sekiranya dapat diimplementasikan sebagai modul terhadap kasus lain berdasarkan suatu kaitan yang dapat dimanfaatkan. 

[[Programming|<img src=https://user-images.githubusercontent.com/36441664/84181956-d9e8c500-aab3-11ea-8fa4-bfa50c4f0b20.jpg width=600>]]

[[https://user-images.githubusercontent.com/36441664/84677991-aac1d000-af59-11ea-804f-225ed913f9d6.gif]]

[[<img src=https://user-images.githubusercontent.com/36441664/84680031-49e7c700-af5c-11ea-9c5b-84b84c67dc0f.png>|https://www.ma.utexas.edu/search-results?q=Birch%20and%20Swinnerton-Dyer%20conjecture]]

Di pustaka ini Anda juga bisa telusuri solusi untuk salah satu kasus yang sudah dipecahkan, silahkan masukan input dengan nama kunci ''[[Grisha Perelman|https://arxiv.org/search/?query=Grisha+Perelman&searchtype=author&source=header]]'':

[[<img src=https://user-images.githubusercontent.com/36441664/84682472-e069b780-af5f-11ea-9cb0-6a0a55f8e85a.png>|https://arxiv.org/search/?query=Grisha+Perelman&searchtype=author&source=header]]

Jika kita pelajari kasus² ini jelas merupakan perkara yang extra rumit. Jika Anda memang punya bakat matematika sedari kecil tentu lebih mudah untuk paham. 

[[Program#struktur|<img src=https://user-images.githubusercontent.com/36441664/83940407-1c897380-a80e-11ea-878b-4d599fc07064.jpg>]]

Namun disini bakat saja tidak akan cukup karena begitu banyak sudah makalah diajukan dari berbagai sumber namun sudah sekian puluh tahun berlalu belum ada yang lain berhasil mengajukan bukti dari solusi. 

===Package===
* [[Poincaré Conjecture - Cantor's Paradays|https://medium.com/cantors-paradise/the-poincar%C3%A9-conjecture-cb4ca7014cc5]]

[[Collections#geometri|<img src=https://user-images.githubusercontent.com/36441664/84284036-e9c0e180-ab65-11ea-8d83-58a1102b4c76.jpg>]]

[[https://user-images.githubusercontent.com/36441664/84181987-e53bf080-aab3-11ea-9738-184af2f8b60c.jpg]]

''<blockquote>'''[["If God speaks to man, he undoubtedly uses the language of mathematics."|https://wiki.c2.com/?FavoriteQuotations]]'''<br>(Henri Poincaré)</blockquote>''

====Disjointed====

[[https://user-images.githubusercontent.com/36441664/84181975-e2d99680-aab3-11ea-8cf0-7da54cf0eb3f.jpg]]

[[https://user-images.githubusercontent.com/36441664/84181982-e4a35a00-aab3-11ea-848a-89c1a1f8c9cf.jpg]]

[[https://user-images.githubusercontent.com/36441664/84094221-80868480-aa26-11ea-9284-f04983d6c75a.png]]

====Recombine====
* [[Poincaré Conjecture and Homotopy - Lê Nguyên Hoang|https://www.science4all.org/article/poincare-conjecture/]]

[[https://user-images.githubusercontent.com/36441664/84599532-e6e32b00-ae9c-11ea-8a77-6ed06e4c6329.gif]]

[[https://user-images.githubusercontent.com/36441664/84599868-64a83600-ae9f-11ea-8ea5-a07ae86c3b91.png]]

[[<img src=https://user-images.githubusercontent.com/36441664/84187330-17515080-aabc-11ea-8e53-47f12a248d4c.jpg width=800>]]

===Branching===
* [[Manifolds with Density and Perelman’s Proof of the Poincaré Conjecture|https://www.sciencedirect.com/topics/mathematics/poincare-conjecture]]

Telah lama diketahui bahwa di antara manifold kompak dua dimensi yang terhubung, seperti bola, torus , dan torus dua-lubang, bola dicirikan oleh fakta bahwa setiap loop dapat dikontrak ke suatu titik, sedangkan loop di sekitar torus, misalnya, tidak dapat dikontrak ke suatu titik. 

<br>Poincaré Conjecture, yang disarankan oleh Henri Poincaré pada tahun 1904, mengusulkan hasil analog untuk manifold tiga dimensi: manifold kompak tiga dimensi yang terhubung sederhana harus berupa bola . 

Pada Kongres Internasional Matematika 2006, Grigori Perelman dianugerahi Medali Fields untuk buktinya, meskipun ia menolak untuk menerimanya.

[[https://user-images.githubusercontent.com/36441664/84685920-3ee56480-af65-11ea-81a4-f44ebc656a19.jpg]]

Versi dimensi tinggi dari Poincaré Conjecture, dengan lebih banyak ruang untuk melakukan konstruksi geometris, lebih mudah. Stephen Smale membuktikan dugaan analog untuk dimensi setidaknya 5 dan memenangkan Fields Medal pada tahun 1966. Michael Freedman membuktikan kasus 4-dimensi dan memenangkan medali Fields pada tahun 1986.

si dimensi tinggi dari Poincaré Conjecture, dengan lebih banyak ruang untuk melakukan konstruksi geometris, lebih mudah. Stephen Smale membuktikan dugaan analog untuk dimensi setidaknya 5 dan memenangkan Fields Medal pada tahun 1966. Michael Freedman membuktikan kasus 4-dimensi dan memenangkan medali Fields pada tahun 1986.

Gagasan dasar dari bukti Perelman, menurut Richard Hamilton, adalah untuk memulai dengan manifold tiga-kompak yang terhubung dan membiarkannya menyusut pada setiap titik pada setiap arah dengan kecepatan yang sebanding dengan kelengkungan Ricci -nya . Jika Anda dapat menunjukkan bahwa Anda akhirnya berakhir dengan bola bundar, dengan bola-bola lain mungkin terjepit di sepanjang jalan, Anda dapat menyimpulkan bahwa Anda harus memulai dengan bola (cacat).

Kesulitan mendasar adalah untuk mendapatkan kontrol atas pembentukan singularitas. Untuk memfokuskan perhatian tentang hal yang menjadi perhatian, Perelman [ Sect. 1.1 ] memberikan kepadatan berlipat ganda tentang titik itu dan memungkinkan aliran metrik oleh kelengkungan Ricci umum yang terkait, Ric ψ 18,3 ( 4 ). Jika seseorang memperbaiki ukuran, maka kerapatan berkembang sebagai persamaan panas terbalik yang dimodifikasi dan mendekati fungsi delta pada hal . Monotonitas energinya yang umum sekarang menyediakan informasi lokal yang diperlukan alih-alih informasi global yang biasa. (Sebenarnya, dalam buktinya, untuk memfasilitasi operasi, Perelman [Bagian 7] pindah ke versi lokal kepadatan yang disebut fungsi panjang.)

Hebatnya, modulo difeomorfisme , aliran Ricci yang digeneralisasi ini setara dengan aliran Ricci standar. Seperti yang dikatakan Perelman, “Fakta yang luar biasa di sini adalah bahwa pilihan [kepadatan] yang berbeda mengarah ke aliran yang sama, hingga difeomorfisme; yaitu, pilihan [kepadatan] analog dengan pilihan pengukur. ” Ini berarti bahwa selama pembuktian, seseorang dapat memilih kepadatan apa pun untuk kenyamanan. Singkatnya, manifold dengan kepadatan menyediakan konteks teknis yang nyaman untuk menerapkan difeomorfisme untuk memusatkan perhatian pada wilayah yang menjadi perhatian.

[[https://user-images.githubusercontent.com/36441664/84181979-e3722d00-aab3-11ea-9868-982020dcd4b3.png]]

Selain manifold umum dengan kepadatan, contoh utama ruang Gauss membuat penampilan penting dalam bukti Perelman. Secara khusus, ketimpangan isoperimetri pada ruang Gauss dalam bentuk fungsional, yang dikenal sebagai ketimpangan Sobolev logaritmik Gaussian, merupakan unsur teknis yang penting.

Manifol umum dengan kepadatan belum muncul di sebagian besar paparan karya Perelman. Ini sebagian karena mereka muncul hanya di bagian pengantar dan digantikan oleh fungsi panjangnya di bukti yang sebenarnya. Ini juga sebagian karena manifold dengan kepadatan tidak begitu akrab dengan komunitas matematika sebagaimana mestinya. Mereka muncul dalam kalimat pertama dari tubuh kertas Perelman, di mana ia mulai dengan mempertimbangkan bermacam-macam dengan kepadatan e - f dan kelengkungan skalar R :

Pertimbangkan fungsional F = ∫ M ( R + | ∇ f | 2 ) e - f dV untuk metrik Riemannian g ij dan fungsi f pada manifold tertutup M .

Anderson, dalam survei Pemberitahuannya , membuat komentar berikut tentang diskusi Perelman tentang aliran Ricci dalam manifold dengan kepadatan:

Ternyata, mengingat setiap metrik awal g (0) dan t > 0, fungsi [kerapatan] f ... dapat ditentukan secara bebas di g ( t )…. Perelman kemudian menggunakan kebebasan ini untuk menyelidiki geometri g ( t ) dengan pilihan f . Sebagai contoh, ia menunjukkan dengan studi yang sangat sederhana tentang bentuk [energi] F bahwa keruntuhan atau noncollapse dari metrik g ( t ) di dekat titik x 0 dapat dideteksi dari ukuran F dengan memilih f untuk menjadi perkiraan untukfungsi delta berpusat di x . Semakin runtuh g ( t ) dekat x , semakin negatif nilai F . Runtuhnya metrik g ( t ) pada skala apa pun dalam waktu yang terbatas kemudian dikesampingkan dengan menggabungkan ini dengan fakta bahwa F fungsional meningkat di sepanjang aliran Ricci. Bahkan, argumen ini dilakukan sehubungan dengan fungsional invarian skala yang agak lebih rumit daripada F ; termotivasi oleh analogi tertentu dalam fisika statistik, Perelman menyebut ini fungsional entropi .

Perelman, dalam kutipan berikut dari Pendahuluannya, merujuk pada hasil nonkolaps dari §4 ini. Dia juga menyebutkan penggunaan dalam § 3 Gaussian isoperimetric kesenjangannya untuk membuktikan bahwa Anda tidak mendapatkan periodisitas alih-alih perilaku pembatasan yang diinginkan.

[[<img src=https://user-images.githubusercontent.com/36441664/84181962-dc4b1f00-aab3-11ea-9e9b-5eb4bc9c784f.png width=500>]]

Kami membuktikan bahwa aliran Ricci, yang dianggap sebagai sistem dinamis pada ruang metrik Riemannian modulo difeomorfisme dan penskalaan, tidak memiliki orbit periodik nontrivial. Kasus metrik yang mudah (dan diketahui) dengan kelengkungan skalar minimum negatif diperlakukan dalam §2; kasus lainnya dibahas dalam §3, menggunakan rumus monotonisitas utama kami (3.4) dan ketidaksetaraan Sobolev logaritmik Gaussian, karena L. Gross. Dalam §4 kami menerapkan rumus monotonisitas kami untuk membuktikan bahwa untuk solusi yang halus pada interval waktu yang terbatas , jari-jari injeksi pada setiap titik dikontrol oleh lengkungan pada titik-titik terdekat. Hasil ini menghilangkan batu sandungan utama dalam pendekatan Hamilton untuk geometriisasi.

====Konsentris====

[[<img src=https://user-images.githubusercontent.com/36441664/84570977-b75bf200-adba-11ea-9eca-911a8cfeca77.png width=400>]]

[[<img src=https://user-images.githubusercontent.com/36441664/84570975-b62ac500-adba-11ea-800f-8701e72aee09.jpeg width=400>]]

[[https://user-images.githubusercontent.com/36441664/84181971-e0773c80-aab3-11ea-8ceb-d02686758816.png]]

[[https://user-images.githubusercontent.com/36441664/84181972-e1a86980-aab3-11ea-96bc-d519c1e36dc2.jpg]]

====Duplication====
Dalam matematika, [[dugaan Hodge|https://en.m.wikipedia.org/wiki/Hodge_conjecture]] adalah masalah besar yang belum terpecahkan dalam geometri aljabar yang menghubungkan topologi aljabar dari variasi aljabar kompleks non-singular dengan subvarietasnya. 

Lebih khusus lagi, dugaan tersebut menyatakan bahwa kelas kohomologi de Rham tertentu bersifat aljabar; yaitu, mereka adalah '''''jumlah dual Poincaré''''' dari kelas - kelas homologi subvarieties.

===Application===
[[Mapping|<img src=https://user-images.githubusercontent.com/36441664/83274805-77144580-a1f8-11ea-9813-f4bc7d82af99.jpeg>]]

====Palindromik====
* [[Philosophy of Geometry from Riemann to Poincaré|https://archive.org/details/PhilosophyOfGeometryFromRiemannToPoincare]]

Dugaan Poincaré telah menjadi landasan untuk klasifikasi manifold tertutup. 

<br>Sementara permukaan tertutup telah diklasifikasikan terutama oleh Bernhard Riemann, klasifikasi manifold tertutup memiliki hubungan yang dalam dengan dugaan Poincaré. 

Pada tahun 1982, William Thurston, mungkin topologi terhebat abad ke-20, menduga bahwa geometri dari bermacam-macam 3-manifold dapat diklasifikasikan sebagai salah satu dari 8 kemungkinan geometri. 

Bukti Perelman, bersama dengan dugaan Poincaré, menjawab dugaan Thurston secara positif.

====Replications====

* [[Hamilton circuit|https://www.britannica.com/science/Hamilton-circuit]]
* [[Poincaré sections of Hamiltonian|https://www.researchgate.net/figure/Poincare-sections-of-Hamiltonian-2-for-j-7-4-left-column-and-j-9-4-right-column_fig1_235438798]]

Dalam bidang matematika teori graf, ''[[Jalur Hamiltonian|https://en.m.wikipedia.org/wiki/Hamiltonian_path]]'' (atau jalur yang dapat dilacak ) adalah jalur dalam grafik tidak berarah atau terarah yang mengunjungi setiap simpul tepat sekali. 

<br>[[https://user-images.githubusercontent.com/36441664/84659635-e9e42700-af41-11ea-996a-a5d6ee6e9864.png]]

Sebuah siklus Hamiltonian (atau sirkuit Hamilton ) adalah jalur Hamiltonian yang merupakan siklus . [[https://user-images.githubusercontent.com/36441664/84571439-4e29ae00-adbd-11ea-9292-e80ddc85b3eb.png]]

[[https://user-images.githubusercontent.com/36441664/84659967-670f9c00-af42-11ea-8c98-1998f63f3936.jpg]]

[[Flowchart|<img src=https://user-images.githubusercontent.com/36441664/84571441-4f5adb00-adbd-11ea-8ce6-4e5a169e68a8.jpeg>]]

[[Fkowchart|<img src=https://user-images.githubusercontent.com/36441664/84571442-4ff37180-adbd-11ea-9012-3b53fc35b84e.jpeg>]]

Menentukan apakah suatu jalur dan siklus ada dalam grafik adalah masalah jalur Hamiltonian, yang merupakan ''[[NP-complete|https://en.m.wikipedia.org/wiki/NP-complete_problem]]'' sehingga masuk dalam salah satu kasus dari ''[[Application#Model|Masalah P vs NP]]''.

==Assessment==

* [[The Lambda & The Tetraktys|https://www.cosmic-core.org/free/pythagorean-mathematics-gnomons-the-lambda-and-the-tetraktys/]]

<br>[[Project-Online#definisi|<img src=https://user-images.githubusercontent.com/36441664/71641952-46c28c80-2cd6-11ea-8974-5e3028b3ee65.jpg>]]

Bahkan sebagian orang berpendapat bahwa untuk beberapa kasus sisanya bisa jadi belum akan ada pemecahan pada abad ini karena terbentur belum ditemukannya referensi khususnya pada disiplin ilmu matematika yang dapat menunjang pemecahan.

[[<img src=https://user-images.githubusercontent.com/36441664/83953381-322c8680-a86a-11ea-8716-b48801ff169c.png>|http://www.claymath.org/millennium-problems]]

Boleh percaya boleh tidak, saat saya juga skeptis dengan kasus milenial ini maka pada waktu yang bersamaan tau² tanpa sengaja ketemu sang mistis [[tetraktis|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#form]] yang justeru menjadi titik terangnya. 

Detilnya bisa Anda ikuti mulai dari bahasan tentang ''[[Collections#Destinasi|penyertaan objek]]''. 

Sekarang kita masuk ke kasus, dimulai dengan repository dari angka 10 yang kita setel untuk kasus yang sudah mendapatkan solusi yaitu ''[[Implementasi#Geometri|Poincare Conjecture]]'' dengan kasus pemetaan geometri pada bidang 3 dimensi.

<br>[[#|<img src=https://user-images.githubusercontent.com/36441664/84094226-85e3cf00-aa26-11ea-8c28-516fd5e7a433.jpg width=700>]]

Berikut intisari dari kasusnya:

<blockquote>
* Jika kita merentangkan karet gelang di sekitar permukaan apel, maka kita dapat mengecilkannya hingga ke suatu titik dengan menggerakkannya perlahan, tanpa merobeknya dan tanpa membiarkannya meninggalkan permukaan.
* Di sisi lain, jika kita membayangkan bahwa pita karet yang sama entah bagaimana telah direntangkan ke arah yang tepat di sekitar donat, maka tidak ada cara untuk mengecilkannya ke suatu titik tanpa memutus karet gelang atau donat.
* Kita mengatakan permukaan apel "hanya terhubung," tetapi permukaan donat tidak.
* Poincaré, hampir seratus tahun yang lalu, tahu bahwa bola dua dimensi pada dasarnya ditandai oleh sifat konektivitas sederhana ini, dan mengajukan pertanyaan yang sesuai untuk bola tiga dimensi.
</blockquote>

Solusi yang sudah dilakukan adalah dengan menggunakan metoda ''[[Implementasi#Geometri|Ricci Flow]]''. 

[[#|<img src=https://user-images.githubusercontent.com/36441664/84187344-1ae4d780-aabc-11ea-868d-ce5d796da337.png width=700>]]

Pertama² kita tetapkan repository dengan id:10 sebagai ''[[Mapping#Basis|basis]]''. Di repository ini kita ambil kasus yang sudah menjadi solusi yaitu ''[[Implementasi#Geometri|Poincare Conjecture]]''.

Sekarang simak lagi ''[[Mapping#konfigurasi|skema pemetaan]]'' yang sudah saya jelaskan sebelumnya. Anda lihat bahwa objek 5x saling berhubungan dengan titik awal di id:10.

Bagaimana dengan yang 2x?

Angka ''[[10#pola|sepuluh (10)]]'' ini mempunyai objek 109. Sekarang lihat objek 2x di pemetaan. Anda lihat ada dua (2) angka 109 yang berlaku sebagai vektor.

Ini artinya angka 2 akan menempel ke objek yang 109 yang berada di angka 10 sehingga kedua angka ini akan membentuk gabungan angka di 102. Nah inilah calon 102 yang akan jadi tetraktis.

[[https://user-images.githubusercontent.com/36441664/87845614-18fc0880-c8f3-11ea-82d1-c7351072cf18.jpg]]

Ini juga tanda bahwa objek yang 2x dan yang 5x nempelnya di angka 10 ini. Angka 109 ini adalah prime ke-29, karenanya 10 dan 2 via angka 109 ini akan meregenerasi objek turunan ke seluruh objek yang 29.

Sekarang perhatikan bagan tetraktis berikut ini:

[[Collections#Routing|<img src=https://user-images.githubusercontent.com/36441664/85205823-ea1c6200-b347-11ea-8d6f-1ab3f9ec95c8.gif width=600>]]

Titik tengah nya ada pada angka 6, ini sebabnya maka hanya tetraktis yang bisa melakukan manuver di angka 6 sehingga pada gilirannya dari objek 29 tadi diteruskan sampai ujung dari 114 angka dasar semua terkoneksi dengan masing² objeknya. 

; 114 = 6 + (6 x 6) + 6 x (6 + 6) = 6 x (6 + 6) + 6 + (6 x 6)

Nah jadi ini termasuk objek yang 7x semua akan terkoneksi dengan masing² objeknya. Ini yang kita simulasikan dengan bentuk program dan angka² prima seperti yang sudah saya uraikan sebelumnya.

<br>[[Collections#Routing|<img src=https://user-images.githubusercontent.com/36441664/84699769-5419bd80-af7c-11ea-8eba-f1d78afbb20f.png width=500>]]

Saat ini terjadi maka kita lakukan pendataan koneksi² itu sehingga kita dapatkan hubungan antara angka² ini dengan objelnya masing².

[[Collections#Routing|<img src=https://user-images.githubusercontent.com/36441664/84945505-8c9ed000-b111-11ea-9a81-d0205ad0ea89.png width=500>]]

Dengan demikian kita akan sampai di posisi dari setiap kasus yang kita sertakan dalam projek. 

[[Collections#Routing|<img src=https://user-images.githubusercontent.com/36441664/84676241-76e5ab00-af57-11ea-9b4e-d5dc45c0d825.jpg width=400>]]

===Komputasi===

* [[Applying Ricci flow to high dimensional manifold learning|http://engine.scichina.com/publisher/scp/journal/SCIS/62/9/10.1007/s11432-018-9702-7?slug=fulltext##]]
* [[Mathematics - Poincaré Conjecture Torus Mathematics Homeomorphism|https://favpng.com/png_view/mathematics-poincar%C3%A9-conjecture-torus-mathematics-homeomorphism-png/qN32vDq0]]

```
Twin Primes: 
(5,7), (11,13), (17,19)

layer|  i  |   f
-----+-----+------
     |  1  | (5) -------
  1  +-----+            |
     |  2  | (7)        |
-----+-----+------      |
     |  3  | (11) ‹--3x--
  2  +-----+            |
     |  4  | (13)       |
-----+-----+------      |      
     |  5  | (17) ‹--2x--
  3  +-----+
     |  6  | (19)
-----+-----+------

Permutation:
66 = 6 & 6
6 + 6 = 12

5 + 7 = 12 = d(3)
11 + 13 = 24 = d(6)
17 + 19 = 6 x 6 = d(9)

6 + 6 » d(3,6,9) » 6 x 6
```

[[https://user-images.githubusercontent.com/36441664/81183345-40705400-8fd9-11ea-8b28-a1637454cb1d.png]]

[[https://user-images.githubusercontent.com/36441664/83337637-90e08600-a2e7-11ea-8ff8-a02753d64891.png]]

[[<img src=https://user-images.githubusercontent.com/36441664/83338365-ed46a400-a2ed-11ea-8382-f81d6e496763.jpg width=400>|https://www.omnicalculator.com/math/prime-factorization]]

[[https://user-images.githubusercontent.com/36441664/83550497-21f66d80-a531-11ea-96ac-7e1cc29ab37d.jpg]]

[[https://user-images.githubusercontent.com/36441664/84945588-a5a78100-b111-11ea-90af-b14c9ddcb0d4.png]]

[[https://user-images.githubusercontent.com/36441664/83814864-53b23480-a6e9-11ea-9822-2f77dce9c7ca.png]]

====Realisasi====

[[https://user-images.githubusercontent.com/36441664/84945601-a809db00-b111-11ea-835c-0ff511e1217a.png]]

[[https://user-images.githubusercontent.com/36441664/84944645-4eed7780-b110-11ea-9a06-74d100e0b044.jpg]]

[[https://user-images.githubusercontent.com/36441664/84945743-d38cc580-b111-11ea-85b4-596cf182faed.jpg]]

[[Programming|<img src=https://user-images.githubusercontent.com/36441664/83189874-c5273b80-a15b-11ea-8200-1be0401e4b44.jpg>]]

[[https://user-images.githubusercontent.com/36441664/85147789-8af01c00-b279-11ea-8792-dc60e891c093.jpg]]

====Spesifikasi====
[[https://user-images.githubusercontent.com/36441664/81182809-80830700-8fd8-11ea-9090-c134e5f02c66.png]]

[[https://user-images.githubusercontent.com/36441664/81160907-e8bff180-8fb4-11ea-99d2-a32870457c11.png]]

[[https://user-images.githubusercontent.com/36441664/83655738-ee771a00-a5e8-11ea-8080-fcad157a0808.jpg]]

[[<img src=https://user-images.githubusercontent.com/36441664/83655561-c5568980-a5e8-11ea-9b09-c28b01d6cd25.png width=600>]]

[[https://user-images.githubusercontent.com/36441664/83334950-12c6b400-a2d4-11ea-8e98-c64ede21db16.png]]

===Penelusuran===

[[https://user-images.githubusercontent.com/36441664/82581031-224e4a80-9bba-11ea-8387-6b2eb838dc0c.gif]]

[[<img src=https://user-images.githubusercontent.com/36441664/76535461-7c8da980-64ad-11ea-817c-450c5582e725.png width=300>]]

[[https://user-images.githubusercontent.com/36441664/75617590-b7314100-5b93-11ea-926f-fc01910cbd11.png]]

[[https://user-images.githubusercontent.com/36441664/81184258-677b5580-8fda-11ea-860a-e73a9c08ec60.png]]

[[https://user-images.githubusercontent.com/36441664/85040502-1357b980-b1b3-11ea-87a3-e8682e336e38.jpg]]

[[Mapping#penelusuran|<img src=https://user-images.githubusercontent.com/36441664/67744501-41399380-fa54-11e9-90d2-c9368962dfde.png>]]

[[Implementasi#method|<img src=https://user-images.githubusercontent.com/36441664/84674358-09387f80-af55-11ea-9fe2-954f020edb21.jpg>]]

[[Mapping|<img src=https://user-images.githubusercontent.com/36441664/83151523-ddc92e80-a126-11ea-97c1-d8c00c68dac2.jpg>]]

[[https://user-images.githubusercontent.com/36441664/59960235-aeaa4600-94ef-11e9-9fc6-687d1ead7aab.png]]

[[https://user-images.githubusercontent.com/36441664/83940391-10051b00-a80e-11ea-8f3d-835ee688e9db.jpg]]

====Perhitungan====

Setelah cari sana-sini ternyata itu gak jauh², dia ada di bentuk manifold [[torus|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#korelasi]] yang sudah saya uraikan. Dan torus itu adalah.. [[bentuk manuver|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#korelasi]] dari Sistem DNA itu sendiri.

[[https://user-images.githubusercontent.com/36441664/88384290-54f10b00-cdd6-11ea-878d-c687cc1afbea.gif]]

Alasan kedua adalah..<br>Memang metoda ''Ricci Flow'' ini yang ''[[digunakan|http://engine.scichina.com/publisher/scp/journal/SCIS/62/9/10.1007/s11432-018-9702-7?slug=fulltext##]]'' menggandeng bentuk torus.

[[<img src=https://user-images.githubusercontent.com/36441664/88372848-e5bcec00-cdc0-11ea-8b8a-09b579a257f9.png width=600>|http://engine.scichina.com/publisher/scp/journal/SCIS/62/9/10.1007/s11432-018-9702-7?slug=fulltext##]]

Nyambung jadinya kan?

Bahkan sekarang ini dikembangkan bukan hanya bentuk² geometris melainkan sampai konversi bentuk² wajah dalam tiga (3) dimensi secara persis ke data komputer. 

Jika sekarang ini Anda hanya bisa lihat persis bentuk wajah Anda di bidang datar seperti foto atau smartphone. Nah bagaimana bila dengan komputer virtual, Anda menjumpai Anda sendiri persis di depan Anda dalam tiga (3) dimensi?

Apalagi bila pake ketawa atau lari²..

Jadi dampak solusi kasus milenial ini betul² luar biasa.<br>Dan itu baru satu (1) kasus saja dari yang tujuh (7). 

Nah sekarang kembali ke laptop. Eh maksudnya ke kasus. 

[[https://user-images.githubusercontent.com/36441664/76159498-b1b79600-6153-11ea-91e4-bc312f9456ac.png]]

[[https://user-images.githubusercontent.com/36441664/76538970-b2815c80-64b2-11ea-80ca-32cd8ce0f861.png]]

[[https://user-images.githubusercontent.com/36441664/83814910-64fb4100-a6e9-11ea-97a0-f5d555491f5b.png]]

[[<img src=https://user-images.githubusercontent.com/36441664/70118418-7c099980-169a-11ea-8093-6e8c288ff758.png>|https://towardsdatascience.com/how-a-simple-mix-of-object-oriented-programming-can-sharpen-your-deep-learning-prototype-19893bd969bd]]

====Pelaksanaan====

Selanjutnya kita terapkan metoda ini sistem tiga (3) dimensi yang kita simulasikan. 

[[#|<img src=https://user-images.githubusercontent.com/36441664/84571037-16ba0200-adbb-11ea-9697-c4edf4bc237e.jpeg>]]

Dengan proses yang kita lakukan sebelumnya maka pada semua repository sistem bilangan prima sudah pada posisi masing² mengikuti sifat alamiahnya pada ''Sistem-DNA''.

[[https://user-images.githubusercontent.com/36441664/84181987-e53bf080-aab3-11ea-9738-184af2f8b60c.jpg]]

Kemudian kita posisikan bidang tiga (3) dimensi ini pada Sistem DNA.

[[https://user-images.githubusercontent.com/36441664/84187353-1e785e80-aabc-11ea-9435-ce139dee77f1.png]]

Setelah itu kita ikuti bagaimana perilaku bilangan² prima ini dalam mendapatkan solusi dengan cara membandingkannya dengan solusi yang sudah didapat. 

[[Implementasi#Geometri|<img src=https://user-images.githubusercontent.com/36441664/83946334-39d43700-a83a-11ea-84bb-4d7584439562.png width=286>]]

Berikutnya kita ambil  '''''Input (I)''''' data dari objek via '''''[[Query (Q)|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#logics]]''''':

[[<img src=https://user-images.githubusercontent.com/36441664/84574125-c187eb80-adce-11ea-9d50-34dee9e79625.png width=247>|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#delivery]]

Suatu ''Query (Q)'' akan memunculkan '''''Result (R)''''' maka sistem bilangan prima akan melakukan sisanya yaitu manuver alamiahnya berupa gerakannya di Sistem DNA yaitu torus tadi:

[[<img src=https://user-images.githubusercontent.com/36441664/86853354-88e2e580-c0e0-11ea-92e4-24de95335054.gif width=247>]]

Kita arahkan agar dapat menempelkan [[ manuver torus|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#korelasi]] ke objek.

[[<img src=https://user-images.githubusercontent.com/36441664/82712407-12b22d00-9cb2-11ea-9cc2-3cf392b2d35c.png width=247>|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#korelasi]]

Dan sentral dari manuver ini tak lain adalah.. angka [[66#pola|enampuluh enam (66)]]'' itu sendiri:

; 6 + (6 x 6) + 6 x (6 + 6) = 6 x (6 + 6) + 6 + (6 x 6)

[[66#pola|<img src=https://user-images.githubusercontent.com/36441664/81050771-c82b6500-8eea-11ea-95f3-019c2c467ae8.gif width=157>]]

<br>Ini kita lakukan sampai akhirnya muncul sang tetraktis 102. Dengan kemunculannya berarti terjadi siklus sistem maka kita sudah ada di ujung yaitu '''''Output (O)''''' berupa sebuah solusi.

[[<img src=https://user-images.githubusercontent.com/36441664/87882663-c6723780-ca2b-11ea-9e83-41eface3d8e5.png width=102>|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#shape]]

Jadi ibaratnya seolah² dia itu bilang gini..<br>
Dah beres kan gan, ada lagi gak?

===Dokumentasi===
Seperti telah dijelaskan [[sebelumnya|https://github.com/chetabahana/chetabahana.github.io/wiki/%23#Logics]] metoda ini merupakan manuver angka 66 terhadap seluruh objek pemetaan.

[[Collections#geometri|<img src=https://user-images.githubusercontent.com/36441664/81076750-3c2f3280-8f16-11ea-953f-f2f03e4ac49f.png>]]

Ini akan merupakan pemetaan dari tabulasi vektor yaitu 29 angka plus 1 repository dari hasil pemetaan sehingga jumlah totalnya nya 30 + 66 yaitu 96. 

[[https://user-images.githubusercontent.com/36441664/81181797-2a619400-8fd7-11ea-8462-9e1aab20c709.jpg]]

Anda bisa ikuti detilnya pada di angka ''[[96#Basis|sembilanpuluh enam (96)]]'' ini. Juga dengan angka² lainnya. Namun pencabangan ke banyak repository bisa menjadi bentuk pohon banyak cabang

[[Attribute#node|<img src=https://user-images.githubusercontent.com/36441664/74972349-1ab0c580-5454-11ea-9470-8d73c809b165.png width=500>]]

Apalagi ada anak cucu cabangnya. Integrasi akan menjadi masalah utama iika Anda tidak menyertainya dengan ''[[mapping#Penelusuran|mapping]]''.

[[Tree#struktur|<img src=https://user-images.githubusercontent.com/36441664/83331567-3c2a1480-a2c1-11ea-9e12-9ed8cde9ea03.png>]]

Karena itu kita perlu membuat dokumentasi dari pemetaan ini layak untuk dijadikan panduan, jika perlu kita cek akurasi dan kecepatan halaman sehingga nyaman buat yang membaca

[[Program|<img src=https://user-images.githubusercontent.com/36441664/82954903-dc3d2080-9fd7-11ea-86a8-be28abf4f529.jpg>]]

Hal ini penting dilakukan karena jangankan orang lain, kita sendiri yang berkutat disitu bisa tersesat dan menyimpang dari target.

====Penyelarasan====
Apalagi dengan skema pemetaan yang gunakan banyak repository.

[[https://user-images.githubusercontent.com/36441664/81076258-a72c3980-8f15-11ea-8fc3-bc5aebad6a4b.png]]

Maka skema pemetaaan dengan menggunakan karakter angka² dimana dia itu bisa diintegrasikan adalah merupakan kunci utamanya.

[[Collections#konfigurasi|<img src=https://user-images.githubusercontent.com/36441664/83331874-a2636700-a2c2-11ea-9760-542f96f4e225.jpg>]]

Dengan demikian seberapa besarpun skema projek yang Anda buat, baik sedikit maupun jumlah besar, tetap dia akan tetintegrasi dengan pola yang sama.

[[Programming#implementasi|<img src=https://user-images.githubusercontent.com/36441664/71577062-52bb1c80-2b25-11ea-83db-0e5484fbaa37.png width=800>]]

====Pengembangan====

Secara keseluruhan mulai dari awal yaitu: '''[[Bagan#Konsep|Konsep]]''' jika kita gabungkan semuanya maka kita akan dapatkan pola dari ''[[10#Pola|id:10]]''. Pola ini yang saya maksud dengan <code>class baru</code> dari ''[[Publishing#Penampilan|IQRO]]''.

```json

id: 27

---+-----+-----
 1 | 1   | 6
---+-----+-----
 2 | 7   | 14
---+-----+-----
 3 | 15  | 44
---+-----+-----
 4 | 45  | 53
---+-----+-----
 5 | 54  | 58
---+-----+-----
 6 | 59  | 59
---+-----+-----
 7 | 60  | 69
---+-----+-----
 8 | 70  | 93
---+-----+-----
```

Dengan <code>class</code> ini kita akan gunakan untuk lanjut pada ''[[Package|kasus² lainnya]]''.

[[Collections#mekanika|<img src=https://user-images.githubusercontent.com/36441664/72535652-7dd69780-38ab-11ea-9f31-a7d9b58ed5de.png>]]

Proses ini dilakukan via ''[[Programming|pemrograman]]''. Detilnya sangat panjang jika dibahas disini. [[Collections#algoritma|<img src=https://user-images.githubusercontent.com/36441664/85364724-f6720c00-b54d-11ea-82bc-1130a86bd80e.png>]]

Karenanya saya tempatkan pada masing² repository terkait. Anda bisa ikuti mulai dari proses ''[[mapping|pemetaan]]''.

[[https://user-images.githubusercontent.com/36441664/83331879-a7281b00-a2c2-11ea-8ee0-bfe46e9475f5.png]]

Sampai disini saya cukupkan bahasan tentang topik dari subject ini.

Jika Anda ingin lanjut tuntas silahkan simak ''[[Attribute#Prinsip|kasus pertama]]''.

Sekian.<br><br>
'''SALAM Sukses!'''<br>
'''© [[Chetabahana Project|https://github.com/MarketLeader]]'''<br>
[[<img src=https://stackexchange.com/users/flair/5054985.png>|https://stackoverflow.com/users/4058484/chetabahana?tab=profile]]  

==''Referensi''==
* [[Cyclic Addition Mathematics that repairs & perfects An old invention: Number|https://id.scribd.com/document/273971563/A-New-Invention-Cyclic-Addition-Maths]]
* [[Detecting critical node structures on graphs: A mathematical programming approach|https://onlinelibrary.wiley.com/doi/full/10.1002/net.21834]]

<table>
  <thead>
    <tr>
      <th>[[:arrow_double_up:|https://github.com/chetabahana/chetabahana.github.io/wiki]]</th>
      <th>[[:arrow_up_small:|https://github.com/MarketLeader/marketleader.github.io/wiki]]</th>
      <th>[[Home|:rewind:]] [[Home|Intro]]</th>
      <th>[[:arrow_backward:|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]] [[Prev|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]]</th>
      <th>[[:repeat:|https://github.com/MarketLeader/Tutorial-HelloWorld/wiki]] [[Repo|https://github.com/chetabahana/chetabahana.github.io]]</th>
      <th>[[Next|https://github.com/MarketLeader/Google-Sites-API/wiki]] [[:arrow_forward:|https://github.com/MarketLeader/Google-Sites-API/wiki]]</th>
      <th>[[Last|https://github.com/MarketLeader/Google-Content-API/wiki]] [[:fast_forward:|https://github.com/MarketLeader/Google-Content-API/wiki]]</th>
      <th>[[:arrow_down_small:|https://github.com/MarketLeader/Google-AdWords-API/wiki]]</th>
      <th>[[:arrow_double_down:|https://github.com/MarketLeader/Toko-Chetabahana/wiki]]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[<img src="https://avatars1.githubusercontent.com/u/36441664?v=3&s=20" class="avatar">|https://github.com/chetabahana]]</td><td colspan="7">This [[Interface#table-of-contents|wiki]] is courtesy of '''[[Chetabahana Project|https://github.com/MarketLeader]]'''. Find all of them on '''[[Project Map|https://github.com/chetabahana/chetabahana.github.io/wiki/Skema#Implementasi]]'''.</td><td>[[<img src="https://avatars2.githubusercontent.com/u/36441943?v=3&s=20">|https://github.com/MarketLeader]]</td>   
    </tr>
  </tbody>
</table>
